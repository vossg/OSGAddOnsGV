/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TRIPSSound
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGTRIPSSOUNDBASE_H_
#define _OSGTRIPSSOUNDBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGTRIPSDef.h"

//#include "OSGBaseTypes.h"

#include "OSGAttachmentContainer.h" // Parent

#include "OSGSysFields.h"               // SoundID type
#include "OSGBaseFields.h"              // Filename type
#include "OSGNodeFields.h"              // Beacon type
#include "OSGVecFields.h"               // Lastsoundposition type
#include "OSGTRIPSAudioSystemFields.h"  // Audio type

#include "OSGTRIPSSoundFields.h"

OSG_BEGIN_NAMESPACE


class TRIPSSound;

//! \brief TRIPSSound Base Class.

class OSG_TRIPS_DLLMAPPING TRIPSSoundBase : public AttachmentContainer
{
  public:

    typedef AttachmentContainer Inherited;
    typedef AttachmentContainer ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(TRIPSSound);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        SoundIDFieldId = Inherited::NextFieldId,
        FilenameFieldId = SoundIDFieldId + 1,
        BeaconFieldId = FilenameFieldId + 1,
        UsevelocityFieldId = BeaconFieldId + 1,
        LastsoundpositionFieldId = UsevelocityFieldId + 1,
        VelocityFieldId = LastsoundpositionFieldId + 1,
        Is3DFieldId = VelocityFieldId + 1,
        ChannelFieldId = Is3DFieldId + 1,
        SoundVolumeFieldId = ChannelFieldId + 1,
        MinDistanceFieldId = SoundVolumeFieldId + 1,
        MaxDistanceFieldId = MinDistanceFieldId + 1,
        SoundtoplayFieldId = MaxDistanceFieldId + 1,
        PlaymodeFieldId = SoundtoplayFieldId + 1,
        Playmodeparameter1FieldId = PlaymodeFieldId + 1,
        Playmodeparameter2FieldId = Playmodeparameter1FieldId + 1,
        Playmodeparameter3FieldId = Playmodeparameter2FieldId + 1,
        AudioFieldId = Playmodeparameter3FieldId + 1,
        NextFieldId = AudioFieldId + 1
    };

    static const OSG::BitVector SoundIDFieldMask =
        (TypeTraits<BitVector>::One << SoundIDFieldId);
    static const OSG::BitVector FilenameFieldMask =
        (TypeTraits<BitVector>::One << FilenameFieldId);
    static const OSG::BitVector BeaconFieldMask =
        (TypeTraits<BitVector>::One << BeaconFieldId);
    static const OSG::BitVector UsevelocityFieldMask =
        (TypeTraits<BitVector>::One << UsevelocityFieldId);
    static const OSG::BitVector LastsoundpositionFieldMask =
        (TypeTraits<BitVector>::One << LastsoundpositionFieldId);
    static const OSG::BitVector VelocityFieldMask =
        (TypeTraits<BitVector>::One << VelocityFieldId);
    static const OSG::BitVector Is3DFieldMask =
        (TypeTraits<BitVector>::One << Is3DFieldId);
    static const OSG::BitVector ChannelFieldMask =
        (TypeTraits<BitVector>::One << ChannelFieldId);
    static const OSG::BitVector SoundVolumeFieldMask =
        (TypeTraits<BitVector>::One << SoundVolumeFieldId);
    static const OSG::BitVector MinDistanceFieldMask =
        (TypeTraits<BitVector>::One << MinDistanceFieldId);
    static const OSG::BitVector MaxDistanceFieldMask =
        (TypeTraits<BitVector>::One << MaxDistanceFieldId);
    static const OSG::BitVector SoundtoplayFieldMask =
        (TypeTraits<BitVector>::One << SoundtoplayFieldId);
    static const OSG::BitVector PlaymodeFieldMask =
        (TypeTraits<BitVector>::One << PlaymodeFieldId);
    static const OSG::BitVector Playmodeparameter1FieldMask =
        (TypeTraits<BitVector>::One << Playmodeparameter1FieldId);
    static const OSG::BitVector Playmodeparameter2FieldMask =
        (TypeTraits<BitVector>::One << Playmodeparameter2FieldId);
    static const OSG::BitVector Playmodeparameter3FieldMask =
        (TypeTraits<BitVector>::One << Playmodeparameter3FieldId);
    static const OSG::BitVector AudioFieldMask =
        (TypeTraits<BitVector>::One << AudioFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFInt32           SFSoundIDType;
    typedef SFString          SFFilenameType;
    typedef SFWeakNodePtr     SFBeaconType;
    typedef SFBool            SFUsevelocityType;
    typedef SFPnt3f           SFLastsoundpositionType;
    typedef SFVec3f           SFVelocityType;
    typedef SFBool            SFIs3DType;
    typedef SFInt32           SFChannelType;
    typedef SFInt32           SFSoundVolumeType;
    typedef SFReal32          SFMinDistanceType;
    typedef SFReal32          SFMaxDistanceType;
    typedef SFInt32           SFSoundtoplayType;
    typedef SFInt32           SFPlaymodeType;
    typedef SFInt32           SFPlaymodeparameter1Type;
    typedef SFInt32           SFPlaymodeparameter2Type;
    typedef SFInt32           SFPlaymodeparameter3Type;
    typedef SFUnrecTRIPSAudioSystemPtr SFAudioType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFInt32             *editSFSoundID        (void);
            const SFInt32             *getSFSoundID         (void) const;

                  SFString            *editSFFilename       (void);
            const SFString            *getSFFilename        (void) const;
            const SFWeakNodePtr       *getSFBeacon         (void) const;
                  SFWeakNodePtr       *editSFBeacon         (void);

                  SFBool              *editSFUsevelocity    (void);
            const SFBool              *getSFUsevelocity     (void) const;

                  SFPnt3f             *editSFLastsoundposition(void);
            const SFPnt3f             *getSFLastsoundposition (void) const;

                  SFVec3f             *editSFVelocity       (void);
            const SFVec3f             *getSFVelocity        (void) const;

                  SFBool              *editSFIs3D           (void);
            const SFBool              *getSFIs3D            (void) const;

                  SFInt32             *editSFChannel        (void);
            const SFInt32             *getSFChannel         (void) const;

                  SFInt32             *editSFSoundVolume    (void);
            const SFInt32             *getSFSoundVolume     (void) const;

                  SFReal32            *editSFMinDistance    (void);
            const SFReal32            *getSFMinDistance     (void) const;

                  SFReal32            *editSFMaxDistance    (void);
            const SFReal32            *getSFMaxDistance     (void) const;

                  SFInt32             *editSFSoundtoplay    (void);
            const SFInt32             *getSFSoundtoplay     (void) const;

                  SFInt32             *editSFPlaymode       (void);
            const SFInt32             *getSFPlaymode        (void) const;

                  SFInt32             *editSFPlaymodeparameter1(void);
            const SFInt32             *getSFPlaymodeparameter1 (void) const;

                  SFInt32             *editSFPlaymodeparameter2(void);
            const SFInt32             *getSFPlaymodeparameter2 (void) const;

                  SFInt32             *editSFPlaymodeparameter3(void);
            const SFInt32             *getSFPlaymodeparameter3 (void) const;
            const SFUnrecTRIPSAudioSystemPtr *getSFAudio          (void) const;
                  SFUnrecTRIPSAudioSystemPtr *editSFAudio          (void);


                  Int32               &editSoundID        (void);
                  Int32                getSoundID         (void) const;

                  std::string         &editFilename       (void);
            const std::string         &getFilename        (void) const;

                  Node * getBeacon         (void) const;

                  bool                &editUsevelocity    (void);
                  bool                 getUsevelocity     (void) const;

                  Pnt3f               &editLastsoundposition(void);
            const Pnt3f               &getLastsoundposition (void) const;

                  Vec3f               &editVelocity       (void);
            const Vec3f               &getVelocity        (void) const;

                  bool                &editIs3D           (void);
                  bool                 getIs3D            (void) const;

                  Int32               &editChannel        (void);
                  Int32                getChannel         (void) const;

                  Int32               &editSoundVolume    (void);
                  Int32                getSoundVolume     (void) const;

                  Real32              &editMinDistance    (void);
                  Real32               getMinDistance     (void) const;

                  Real32              &editMaxDistance    (void);
                  Real32               getMaxDistance     (void) const;

                  Int32               &editSoundtoplay    (void);
                  Int32                getSoundtoplay     (void) const;

                  Int32               &editPlaymode       (void);
                  Int32                getPlaymode        (void) const;

                  Int32               &editPlaymodeparameter1(void);
                  Int32                getPlaymodeparameter1 (void) const;

                  Int32               &editPlaymodeparameter2(void);
                  Int32                getPlaymodeparameter2 (void) const;

                  Int32               &editPlaymodeparameter3(void);
                  Int32                getPlaymodeparameter3 (void) const;

                  TRIPSAudioSystem * getAudio          (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setSoundID        (const Int32 value);
            void setFilename       (const std::string &value);
            void setBeacon         (Node * const value);
            void setUsevelocity    (const bool value);
            void setLastsoundposition(const Pnt3f &value);
            void setVelocity       (const Vec3f &value);
            void setIs3D           (const bool value);
            void setChannel        (const Int32 value);
            void setSoundVolume    (const Int32 value);
            void setMinDistance    (const Real32 value);
            void setMaxDistance    (const Real32 value);
            void setSoundtoplay    (const Int32 value);
            void setPlaymode       (const Int32 value);
            void setPlaymodeparameter1(const Int32 value);
            void setPlaymodeparameter2(const Int32 value);
            void setPlaymodeparameter3(const Int32 value);
            void setAudio          (TRIPSAudioSystem * const value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual SizeT  getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  TRIPSSoundTransitPtr  create          (void);
    static  TRIPSSound           *createEmpty     (void);

    static  TRIPSSoundTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  TRIPSSound            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  TRIPSSoundTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFInt32           _sfSoundID;
    SFString          _sfFilename;
    SFWeakNodePtr     _sfBeacon;
    SFBool            _sfUsevelocity;
    SFPnt3f           _sfLastsoundposition;
    SFVec3f           _sfVelocity;
    SFBool            _sfIs3D;
    SFInt32           _sfChannel;
    SFInt32           _sfSoundVolume;
    SFReal32          _sfMinDistance;
    SFReal32          _sfMaxDistance;
    SFInt32           _sfSoundtoplay;
    SFInt32           _sfPlaymode;
    SFInt32           _sfPlaymodeparameter1;
    SFInt32           _sfPlaymodeparameter2;
    SFInt32           _sfPlaymodeparameter3;
    SFUnrecTRIPSAudioSystemPtr _sfAudio;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    TRIPSSoundBase(void);
    TRIPSSoundBase(const TRIPSSoundBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~TRIPSSoundBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const TRIPSSound *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

     GetFieldHandlePtr  getHandleSoundID         (void) const;
     EditFieldHandlePtr editHandleSoundID        (void);
     GetFieldHandlePtr  getHandleFilename        (void) const;
     EditFieldHandlePtr editHandleFilename       (void);
     GetFieldHandlePtr  getHandleBeacon          (void) const;
     EditFieldHandlePtr editHandleBeacon         (void);
     GetFieldHandlePtr  getHandleUsevelocity     (void) const;
     EditFieldHandlePtr editHandleUsevelocity    (void);
     GetFieldHandlePtr  getHandleLastsoundposition (void) const;
     EditFieldHandlePtr editHandleLastsoundposition(void);
     GetFieldHandlePtr  getHandleVelocity        (void) const;
     EditFieldHandlePtr editHandleVelocity       (void);
     GetFieldHandlePtr  getHandleIs3D            (void) const;
     EditFieldHandlePtr editHandleIs3D           (void);
     GetFieldHandlePtr  getHandleChannel         (void) const;
     EditFieldHandlePtr editHandleChannel        (void);
     GetFieldHandlePtr  getHandleSoundVolume     (void) const;
     EditFieldHandlePtr editHandleSoundVolume    (void);
     GetFieldHandlePtr  getHandleMinDistance     (void) const;
     EditFieldHandlePtr editHandleMinDistance    (void);
     GetFieldHandlePtr  getHandleMaxDistance     (void) const;
     EditFieldHandlePtr editHandleMaxDistance    (void);
     GetFieldHandlePtr  getHandleSoundtoplay     (void) const;
     EditFieldHandlePtr editHandleSoundtoplay    (void);
     GetFieldHandlePtr  getHandlePlaymode        (void) const;
     EditFieldHandlePtr editHandlePlaymode       (void);
     GetFieldHandlePtr  getHandlePlaymodeparameter1 (void) const;
     EditFieldHandlePtr editHandlePlaymodeparameter1(void);
     GetFieldHandlePtr  getHandlePlaymodeparameter2 (void) const;
     EditFieldHandlePtr editHandlePlaymodeparameter2(void);
     GetFieldHandlePtr  getHandlePlaymodeparameter3 (void) const;
     EditFieldHandlePtr editHandlePlaymodeparameter3(void);
     GetFieldHandlePtr  getHandleAudio           (void) const;
     EditFieldHandlePtr editHandleAudio          (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      TRIPSSoundBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const TRIPSSoundBase &source);
};

typedef TRIPSSoundBase *TRIPSSoundBaseP;

OSG_END_NAMESPACE

#endif /* _OSGTRIPSSOUNDBASE_H_ */
