/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TRIPSAudioSystem!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE



//! access the type of the class
inline
OSG::FieldContainerType &TRIPSAudioSystemBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 TRIPSAudioSystemBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 TRIPSAudioSystemBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the TRIPSAudioSystem::_sfListenerposition field.

inline
Pnt3f &TRIPSAudioSystemBase::editListenerposition(void)
{
    editSField(ListenerpositionFieldMask);

    return _sfListenerposition.getValue();
}

//! Get the value of the TRIPSAudioSystem::_sfListenerposition field.
inline
const Pnt3f &TRIPSAudioSystemBase::getListenerposition(void) const
{
    return _sfListenerposition.getValue();
}

//! Set the value of the TRIPSAudioSystem::_sfListenerposition field.
inline
void TRIPSAudioSystemBase::setListenerposition(const Pnt3f &value)
{
    editSField(ListenerpositionFieldMask);

    _sfListenerposition.setValue(value);
}
//! Get the value of the TRIPSAudioSystem::_sfListenerlookat field.

inline
Vec3f &TRIPSAudioSystemBase::editListenerlookat(void)
{
    editSField(ListenerlookatFieldMask);

    return _sfListenerlookat.getValue();
}

//! Get the value of the TRIPSAudioSystem::_sfListenerlookat field.
inline
const Vec3f &TRIPSAudioSystemBase::getListenerlookat(void) const
{
    return _sfListenerlookat.getValue();
}

//! Set the value of the TRIPSAudioSystem::_sfListenerlookat field.
inline
void TRIPSAudioSystemBase::setListenerlookat(const Vec3f &value)
{
    editSField(ListenerlookatFieldMask);

    _sfListenerlookat.setValue(value);
}
//! Get the value of the TRIPSAudioSystem::_sfListenerup field.

inline
Vec3f &TRIPSAudioSystemBase::editListenerup(void)
{
    editSField(ListenerupFieldMask);

    return _sfListenerup.getValue();
}

//! Get the value of the TRIPSAudioSystem::_sfListenerup field.
inline
const Vec3f &TRIPSAudioSystemBase::getListenerup(void) const
{
    return _sfListenerup.getValue();
}

//! Set the value of the TRIPSAudioSystem::_sfListenerup field.
inline
void TRIPSAudioSystemBase::setListenerup(const Vec3f &value)
{
    editSField(ListenerupFieldMask);

    _sfListenerup.setValue(value);
}
//! Get the value of the TRIPSAudioSystem::_sfListeneroffset field.

inline
Vec3f &TRIPSAudioSystemBase::editListeneroffset(void)
{
    editSField(ListeneroffsetFieldMask);

    return _sfListeneroffset.getValue();
}

//! Get the value of the TRIPSAudioSystem::_sfListeneroffset field.
inline
const Vec3f &TRIPSAudioSystemBase::getListeneroffset(void) const
{
    return _sfListeneroffset.getValue();
}

//! Set the value of the TRIPSAudioSystem::_sfListeneroffset field.
inline
void TRIPSAudioSystemBase::setListeneroffset(const Vec3f &value)
{
    editSField(ListeneroffsetFieldMask);

    _sfListeneroffset.setValue(value);
}
//! Get the value of the TRIPSAudioSystem::_sfUsevelocity field.

inline
bool &TRIPSAudioSystemBase::editUsevelocity(void)
{
    editSField(UsevelocityFieldMask);

    return _sfUsevelocity.getValue();
}

//! Get the value of the TRIPSAudioSystem::_sfUsevelocity field.
inline
      bool  TRIPSAudioSystemBase::getUsevelocity(void) const
{
    return _sfUsevelocity.getValue();
}

//! Set the value of the TRIPSAudioSystem::_sfUsevelocity field.
inline
void TRIPSAudioSystemBase::setUsevelocity(const bool value)
{
    editSField(UsevelocityFieldMask);

    _sfUsevelocity.setValue(value);
}
//! Get the value of the TRIPSAudioSystem::_sfVelocity field.

inline
Vec3f &TRIPSAudioSystemBase::editVelocity(void)
{
    editSField(VelocityFieldMask);

    return _sfVelocity.getValue();
}

//! Get the value of the TRIPSAudioSystem::_sfVelocity field.
inline
const Vec3f &TRIPSAudioSystemBase::getVelocity(void) const
{
    return _sfVelocity.getValue();
}

//! Set the value of the TRIPSAudioSystem::_sfVelocity field.
inline
void TRIPSAudioSystemBase::setVelocity(const Vec3f &value)
{
    editSField(VelocityFieldMask);

    _sfVelocity.setValue(value);
}
//! Get the value of the TRIPSAudioSystem::_sfLastframetime field.

inline
Time &TRIPSAudioSystemBase::editLastframetime(void)
{
    editSField(LastframetimeFieldMask);

    return _sfLastframetime.getValue();
}

//! Get the value of the TRIPSAudioSystem::_sfLastframetime field.
inline
const Time &TRIPSAudioSystemBase::getLastframetime(void) const
{
    return _sfLastframetime.getValue();
}

//! Set the value of the TRIPSAudioSystem::_sfLastframetime field.
inline
void TRIPSAudioSystemBase::setLastframetime(const Time &value)
{
    editSField(LastframetimeFieldMask);

    _sfLastframetime.setValue(value);
}
//! Get the value of the TRIPSAudioSystem::_sfLastlistenerposition field.

inline
Pnt3f &TRIPSAudioSystemBase::editLastlistenerposition(void)
{
    editSField(LastlistenerpositionFieldMask);

    return _sfLastlistenerposition.getValue();
}

//! Get the value of the TRIPSAudioSystem::_sfLastlistenerposition field.
inline
const Pnt3f &TRIPSAudioSystemBase::getLastlistenerposition(void) const
{
    return _sfLastlistenerposition.getValue();
}

//! Set the value of the TRIPSAudioSystem::_sfLastlistenerposition field.
inline
void TRIPSAudioSystemBase::setLastlistenerposition(const Pnt3f &value)
{
    editSField(LastlistenerpositionFieldMask);

    _sfLastlistenerposition.setValue(value);
}
//! Get the value of the TRIPSAudioSystem::_sfReverbtype field.

inline
Int32 &TRIPSAudioSystemBase::editReverbtype(void)
{
    editSField(ReverbtypeFieldMask);

    return _sfReverbtype.getValue();
}

//! Get the value of the TRIPSAudioSystem::_sfReverbtype field.
inline
      Int32  TRIPSAudioSystemBase::getReverbtype(void) const
{
    return _sfReverbtype.getValue();
}

//! Set the value of the TRIPSAudioSystem::_sfReverbtype field.
inline
void TRIPSAudioSystemBase::setReverbtype(const Int32 value)
{
    editSField(ReverbtypeFieldMask);

    _sfReverbtype.setValue(value);
}
//! Get the value of the TRIPSAudioSystem::_sfAudiotimer field.

inline
Time &TRIPSAudioSystemBase::editAudiotimer(void)
{
    editSField(AudiotimerFieldMask);

    return _sfAudiotimer.getValue();
}

//! Get the value of the TRIPSAudioSystem::_sfAudiotimer field.
inline
const Time &TRIPSAudioSystemBase::getAudiotimer(void) const
{
    return _sfAudiotimer.getValue();
}

//! Set the value of the TRIPSAudioSystem::_sfAudiotimer field.
inline
void TRIPSAudioSystemBase::setAudiotimer(const Time &value)
{
    editSField(AudiotimerFieldMask);

    _sfAudiotimer.setValue(value);
}
//! Get the value of the TRIPSAudioSystem::_sfAudioinit field.

inline
bool &TRIPSAudioSystemBase::editAudioinit(void)
{
    editSField(AudioinitFieldMask);

    return _sfAudioinit.getValue();
}

//! Get the value of the TRIPSAudioSystem::_sfAudioinit field.
inline
      bool  TRIPSAudioSystemBase::getAudioinit(void) const
{
    return _sfAudioinit.getValue();
}

//! Set the value of the TRIPSAudioSystem::_sfAudioinit field.
inline
void TRIPSAudioSystemBase::setAudioinit(const bool value)
{
    editSField(AudioinitFieldMask);

    _sfAudioinit.setValue(value);
}
//! Get the value of the TRIPSAudioSystem::_sfAudiomode field.

inline
UInt16 &TRIPSAudioSystemBase::editAudiomode(void)
{
    editSField(AudiomodeFieldMask);

    return _sfAudiomode.getValue();
}

//! Get the value of the TRIPSAudioSystem::_sfAudiomode field.
inline
      UInt16  TRIPSAudioSystemBase::getAudiomode(void) const
{
    return _sfAudiomode.getValue();
}

//! Set the value of the TRIPSAudioSystem::_sfAudiomode field.
inline
void TRIPSAudioSystemBase::setAudiomode(const UInt16 value)
{
    editSField(AudiomodeFieldMask);

    _sfAudiomode.setValue(value);
}
//! Get the value of the TRIPSAudioSystem::_sfAudiodriver field.

inline
UInt16 &TRIPSAudioSystemBase::editAudiodriver(void)
{
    editSField(AudiodriverFieldMask);

    return _sfAudiodriver.getValue();
}

//! Get the value of the TRIPSAudioSystem::_sfAudiodriver field.
inline
      UInt16  TRIPSAudioSystemBase::getAudiodriver(void) const
{
    return _sfAudiodriver.getValue();
}

//! Set the value of the TRIPSAudioSystem::_sfAudiodriver field.
inline
void TRIPSAudioSystemBase::setAudiodriver(const UInt16 value)
{
    editSField(AudiodriverFieldMask);

    _sfAudiodriver.setValue(value);
}
//! Get the value of the TRIPSAudioSystem::_sfSpeakermode field.

inline
UInt16 &TRIPSAudioSystemBase::editSpeakermode(void)
{
    editSField(SpeakermodeFieldMask);

    return _sfSpeakermode.getValue();
}

//! Get the value of the TRIPSAudioSystem::_sfSpeakermode field.
inline
      UInt16  TRIPSAudioSystemBase::getSpeakermode(void) const
{
    return _sfSpeakermode.getValue();
}

//! Set the value of the TRIPSAudioSystem::_sfSpeakermode field.
inline
void TRIPSAudioSystemBase::setSpeakermode(const UInt16 value)
{
    editSField(SpeakermodeFieldMask);

    _sfSpeakermode.setValue(value);
}
//! Get the value of the TRIPSAudioSystem::_sfInifilename field.

inline
std::string &TRIPSAudioSystemBase::editInifilename(void)
{
    editSField(InifilenameFieldMask);

    return _sfInifilename.getValue();
}

//! Get the value of the TRIPSAudioSystem::_sfInifilename field.
inline
const std::string &TRIPSAudioSystemBase::getInifilename(void) const
{
    return _sfInifilename.getValue();
}

//! Set the value of the TRIPSAudioSystem::_sfInifilename field.
inline
void TRIPSAudioSystemBase::setInifilename(const std::string &value)
{
    editSField(InifilenameFieldMask);

    _sfInifilename.setValue(value);
}




#ifdef OSG_MT_CPTR_ASPECT
inline
void TRIPSAudioSystemBase::execSync (      TRIPSAudioSystemBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (ListenerpositionFieldMask & whichField))
        _sfListenerposition.syncWith(pFrom->_sfListenerposition);

    if(FieldBits::NoField != (ListenerlookatFieldMask & whichField))
        _sfListenerlookat.syncWith(pFrom->_sfListenerlookat);

    if(FieldBits::NoField != (ListenerupFieldMask & whichField))
        _sfListenerup.syncWith(pFrom->_sfListenerup);

    if(FieldBits::NoField != (ListeneroffsetFieldMask & whichField))
        _sfListeneroffset.syncWith(pFrom->_sfListeneroffset);

    if(FieldBits::NoField != (UsevelocityFieldMask & whichField))
        _sfUsevelocity.syncWith(pFrom->_sfUsevelocity);

    if(FieldBits::NoField != (VelocityFieldMask & whichField))
        _sfVelocity.syncWith(pFrom->_sfVelocity);

    if(FieldBits::NoField != (LastframetimeFieldMask & whichField))
        _sfLastframetime.syncWith(pFrom->_sfLastframetime);

    if(FieldBits::NoField != (LastlistenerpositionFieldMask & whichField))
        _sfLastlistenerposition.syncWith(pFrom->_sfLastlistenerposition);

    if(FieldBits::NoField != (SoundlistFieldMask & whichField))
        _mfSoundlist.syncWith(pFrom->_mfSoundlist,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (TimesoundlistFieldMask & whichField))
        _mfTimesoundlist.syncWith(pFrom->_mfTimesoundlist,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (ReverbtypeFieldMask & whichField))
        _sfReverbtype.syncWith(pFrom->_sfReverbtype);

    if(FieldBits::NoField != (AudiotimerFieldMask & whichField))
        _sfAudiotimer.syncWith(pFrom->_sfAudiotimer);

    if(FieldBits::NoField != (AudioinitFieldMask & whichField))
        _sfAudioinit.syncWith(pFrom->_sfAudioinit);

    if(FieldBits::NoField != (AudiomodeFieldMask & whichField))
        _sfAudiomode.syncWith(pFrom->_sfAudiomode);

    if(FieldBits::NoField != (AudiodriverFieldMask & whichField))
        _sfAudiodriver.syncWith(pFrom->_sfAudiodriver);

    if(FieldBits::NoField != (SpeakermodeFieldMask & whichField))
        _sfSpeakermode.syncWith(pFrom->_sfSpeakermode);

    if(FieldBits::NoField != (InifilenameFieldMask & whichField))
        _sfInifilename.syncWith(pFrom->_sfInifilename);
}
#endif


inline
const Char8 *TRIPSAudioSystemBase::getClassname(void)
{
    return "TRIPSAudioSystem";
}
OSG_GEN_CONTAINERPTR(TRIPSAudioSystem);

OSG_END_NAMESPACE

