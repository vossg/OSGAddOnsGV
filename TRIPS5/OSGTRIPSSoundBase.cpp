/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TRIPSSound!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#include "OSGConfig.h"



#include "OSGNode.h"                    // Beacon Class
#include "OSGTRIPSAudioSystem.h"        // Audio Class

#include "OSGTRIPSSoundBase.h"
#include "OSGTRIPSSound.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::TRIPSSound
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Int32           TRIPSSoundBase::_sfSoundID
    ID to identify a special Sound
*/

/*! \var std::string     TRIPSSoundBase::_sfFilename
    FileName of the Sound
*/

/*! \var Node *          TRIPSSoundBase::_sfBeacon
    Pointer to a Node that holds 3D Position of the Sound
*/

/*! \var bool            TRIPSSoundBase::_sfUsevelocity
    Switch for automatic Velocity
*/

/*! \var Pnt3f           TRIPSSoundBase::_sfLastsoundposition
    last Sound Position
*/

/*! \var Vec3f           TRIPSSoundBase::_sfVelocity
    Velocity of Sound needed for doppler-effect
*/

/*! \var bool            TRIPSSoundBase::_sfIs3D
    Defines if Sound is 3D
*/

/*! \var Int32           TRIPSSoundBase::_sfChannel
    Channel Number in the FMOD Sound pool
*/

/*! \var Int32           TRIPSSoundBase::_sfSoundVolume
    soundvolume 0 to 255
*/

/*! \var Real32          TRIPSSoundBase::_sfMinDistance
    Minimum audible distance of a Sound
*/

/*! \var Real32          TRIPSSoundBase::_sfMaxDistance
    Minimum audible distance of a Sound
*/

/*! \var Int32           TRIPSSoundBase::_sfSoundtoplay
    Trigger what Sound to play
*/

/*! \var Int32           TRIPSSoundBase::_sfPlaymode
    used for different playback modes
*/

/*! \var Int32           TRIPSSoundBase::_sfPlaymodeparameter1
    used for different playback modes
*/

/*! \var Int32           TRIPSSoundBase::_sfPlaymodeparameter2
    used for different playback modes
*/

/*! \var Int32           TRIPSSoundBase::_sfPlaymodeparameter3
    used for different playback modes
*/

/*! \var TRIPSAudioSystem * TRIPSSoundBase::_sfAudio
    Points to Audio Context
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<TRIPSSound *, nsOSG>::_type(
    "TRIPSSoundPtr", 
    "AttachmentContainerPtr", 
    TRIPSSound::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(TRIPSSound *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           TRIPSSound *,
                           nsOSG);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           TRIPSSound *,
                           nsOSG);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void TRIPSSoundBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "soundID",
        "ID to identify a special Sound\n",
        SoundIDFieldId, SoundIDFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSSound::editHandleSoundID),
        static_cast<FieldGetMethodSig >(&TRIPSSound::getHandleSoundID));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "filename",
        "FileName of the Sound\n",
        FilenameFieldId, FilenameFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSSound::editHandleFilename),
        static_cast<FieldGetMethodSig >(&TRIPSSound::getHandleFilename));

    oType.addInitialDesc(pDesc);

    pDesc = new SFWeakNodePtr::Description(
        SFWeakNodePtr::getClassType(),
        "beacon",
        "Pointer to a Node that holds 3D Position of the Sound\n",
        BeaconFieldId, BeaconFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSSound::editHandleBeacon),
        static_cast<FieldGetMethodSig >(&TRIPSSound::getHandleBeacon));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "usevelocity",
        "Switch for automatic Velocity\n",
        UsevelocityFieldId, UsevelocityFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSSound::editHandleUsevelocity),
        static_cast<FieldGetMethodSig >(&TRIPSSound::getHandleUsevelocity));

    oType.addInitialDesc(pDesc);

    pDesc = new SFPnt3f::Description(
        SFPnt3f::getClassType(),
        "lastsoundposition",
        "last Sound Position\n",
        LastsoundpositionFieldId, LastsoundpositionFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSSound::editHandleLastsoundposition),
        static_cast<FieldGetMethodSig >(&TRIPSSound::getHandleLastsoundposition));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "velocity",
        "Velocity of Sound needed for doppler-effect\n",
        VelocityFieldId, VelocityFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSSound::editHandleVelocity),
        static_cast<FieldGetMethodSig >(&TRIPSSound::getHandleVelocity));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "is3D",
        "Defines if Sound is 3D\n",
        Is3DFieldId, Is3DFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSSound::editHandleIs3D),
        static_cast<FieldGetMethodSig >(&TRIPSSound::getHandleIs3D));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "channel",
        "Channel Number in the FMOD Sound pool\n",
        ChannelFieldId, ChannelFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSSound::editHandleChannel),
        static_cast<FieldGetMethodSig >(&TRIPSSound::getHandleChannel));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "soundVolume",
        "soundvolume 0 to 255\n",
        SoundVolumeFieldId, SoundVolumeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSSound::editHandleSoundVolume),
        static_cast<FieldGetMethodSig >(&TRIPSSound::getHandleSoundVolume));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "minDistance",
        "Minimum audible distance of a Sound\n",
        MinDistanceFieldId, MinDistanceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSSound::editHandleMinDistance),
        static_cast<FieldGetMethodSig >(&TRIPSSound::getHandleMinDistance));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "maxDistance",
        "Minimum audible distance of a Sound\n",
        MaxDistanceFieldId, MaxDistanceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSSound::editHandleMaxDistance),
        static_cast<FieldGetMethodSig >(&TRIPSSound::getHandleMaxDistance));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "soundtoplay",
        "Trigger what Sound to play\n",
        SoundtoplayFieldId, SoundtoplayFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSSound::editHandleSoundtoplay),
        static_cast<FieldGetMethodSig >(&TRIPSSound::getHandleSoundtoplay));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "playmode",
        "used for different playback modes\n",
        PlaymodeFieldId, PlaymodeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSSound::editHandlePlaymode),
        static_cast<FieldGetMethodSig >(&TRIPSSound::getHandlePlaymode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "playmodeparameter1",
        "used for different playback modes\n",
        Playmodeparameter1FieldId, Playmodeparameter1FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSSound::editHandlePlaymodeparameter1),
        static_cast<FieldGetMethodSig >(&TRIPSSound::getHandlePlaymodeparameter1));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "playmodeparameter2",
        "used for different playback modes\n",
        Playmodeparameter2FieldId, Playmodeparameter2FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSSound::editHandlePlaymodeparameter2),
        static_cast<FieldGetMethodSig >(&TRIPSSound::getHandlePlaymodeparameter2));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "playmodeparameter3",
        "used for different playback modes\n",
        Playmodeparameter3FieldId, Playmodeparameter3FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSSound::editHandlePlaymodeparameter3),
        static_cast<FieldGetMethodSig >(&TRIPSSound::getHandlePlaymodeparameter3));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecTRIPSAudioSystemPtr::Description(
        SFUnrecTRIPSAudioSystemPtr::getClassType(),
        "audio",
        "Points to Audio Context\n",
        AudioFieldId, AudioFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSSound::editHandleAudio),
        static_cast<FieldGetMethodSig >(&TRIPSSound::getHandleAudio));

    oType.addInitialDesc(pDesc);
}


TRIPSSoundBase::TypeObject TRIPSSoundBase::_type(
    TRIPSSoundBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&TRIPSSoundBase::createEmptyLocal),
    TRIPSSound::initMethod,
    TRIPSSound::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&TRIPSSound::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"TRIPSSound\"\n"
    "\tparent=\"AttachmentContainer\"\n"
    "\tlibrary=\"TRIPS\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"soundID\"\n"
    "\t\ttype=\"Int32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tID to identify a special Sound\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"filename\"\n"
    "\t\ttype=\"std::string\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tFileName of the Sound\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"beacon\"\n"
    "\t\tcategory=\"weakpointer\"\n"
    "    type=\"Node\"\t\t\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tPointer to a Node that holds 3D Position of the Sound\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"usevelocity\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tSwitch for automatic Velocity\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"lastsoundposition\"\n"
    "\t\ttype=\"Pnt3f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tlast Sound Position\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"velocity\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tVelocity of Sound needed for doppler-effect\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"is3D\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tDefines if Sound is 3D\n"
    "\t</Field>\t\n"
    "\t<Field\n"
    "\t\tname=\"channel\"\n"
    "\t\ttype=\"Int32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tChannel Number in the FMOD Sound pool\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"soundVolume\"\n"
    "\t\ttype=\"Int32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tsoundvolume 0 to 255\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"minDistance\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1.0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tMinimum audible distance of a Sound\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"maxDistance\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1000000000.0f  \"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tMinimum audible distance of a Sound\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"soundtoplay\"\n"
    "\t\ttype=\"Int32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tTrigger what Sound to play\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"playmode\"\n"
    "\t\ttype=\"Int32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tused for different playback modes\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"playmodeparameter1\"\n"
    "\t\ttype=\"Int32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tused for different playback modes\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"playmodeparameter2\"\n"
    "\t\ttype=\"Int32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tused for different playback modes\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"playmodeparameter3\"\n"
    "\t\ttype=\"Int32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tused for different playback modes\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"audio\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\ttype=\"TRIPSAudioSystem\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tPoints to Audio Context\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &TRIPSSoundBase::getType(void)
{
    return _type;
}

const FieldContainerType &TRIPSSoundBase::getType(void) const
{
    return _type;
}

UInt32 TRIPSSoundBase::getContainerSize(void) const
{
    return sizeof(TRIPSSound);
}

/*------------------------- decorator get ------------------------------*/


SFInt32 *TRIPSSoundBase::editSFSoundID(void)
{
    editSField(SoundIDFieldMask);

    return &_sfSoundID;
}

const SFInt32 *TRIPSSoundBase::getSFSoundID(void) const
{
    return &_sfSoundID;
}


SFString *TRIPSSoundBase::editSFFilename(void)
{
    editSField(FilenameFieldMask);

    return &_sfFilename;
}

const SFString *TRIPSSoundBase::getSFFilename(void) const
{
    return &_sfFilename;
}


//! Get the TRIPSSound::_sfBeacon field.
const SFWeakNodePtr *TRIPSSoundBase::getSFBeacon(void) const
{
    return &_sfBeacon;
}

SFWeakNodePtr       *TRIPSSoundBase::editSFBeacon         (void)
{
    editSField(BeaconFieldMask);

    return &_sfBeacon;
}

//! Get the value of the TRIPSSound::_sfBeacon field.
Node * TRIPSSoundBase::getBeacon(void) const
{
    return _sfBeacon.getValue();
}

//! Set the value of the TRIPSSound::_sfBeacon field.
void TRIPSSoundBase::setBeacon(Node * const value)
{
    editSField(BeaconFieldMask);

    _sfBeacon.setValue(value);
}


SFBool *TRIPSSoundBase::editSFUsevelocity(void)
{
    editSField(UsevelocityFieldMask);

    return &_sfUsevelocity;
}

const SFBool *TRIPSSoundBase::getSFUsevelocity(void) const
{
    return &_sfUsevelocity;
}


SFPnt3f *TRIPSSoundBase::editSFLastsoundposition(void)
{
    editSField(LastsoundpositionFieldMask);

    return &_sfLastsoundposition;
}

const SFPnt3f *TRIPSSoundBase::getSFLastsoundposition(void) const
{
    return &_sfLastsoundposition;
}


SFVec3f *TRIPSSoundBase::editSFVelocity(void)
{
    editSField(VelocityFieldMask);

    return &_sfVelocity;
}

const SFVec3f *TRIPSSoundBase::getSFVelocity(void) const
{
    return &_sfVelocity;
}


SFBool *TRIPSSoundBase::editSFIs3D(void)
{
    editSField(Is3DFieldMask);

    return &_sfIs3D;
}

const SFBool *TRIPSSoundBase::getSFIs3D(void) const
{
    return &_sfIs3D;
}


SFInt32 *TRIPSSoundBase::editSFChannel(void)
{
    editSField(ChannelFieldMask);

    return &_sfChannel;
}

const SFInt32 *TRIPSSoundBase::getSFChannel(void) const
{
    return &_sfChannel;
}


SFInt32 *TRIPSSoundBase::editSFSoundVolume(void)
{
    editSField(SoundVolumeFieldMask);

    return &_sfSoundVolume;
}

const SFInt32 *TRIPSSoundBase::getSFSoundVolume(void) const
{
    return &_sfSoundVolume;
}


SFReal32 *TRIPSSoundBase::editSFMinDistance(void)
{
    editSField(MinDistanceFieldMask);

    return &_sfMinDistance;
}

const SFReal32 *TRIPSSoundBase::getSFMinDistance(void) const
{
    return &_sfMinDistance;
}


SFReal32 *TRIPSSoundBase::editSFMaxDistance(void)
{
    editSField(MaxDistanceFieldMask);

    return &_sfMaxDistance;
}

const SFReal32 *TRIPSSoundBase::getSFMaxDistance(void) const
{
    return &_sfMaxDistance;
}


SFInt32 *TRIPSSoundBase::editSFSoundtoplay(void)
{
    editSField(SoundtoplayFieldMask);

    return &_sfSoundtoplay;
}

const SFInt32 *TRIPSSoundBase::getSFSoundtoplay(void) const
{
    return &_sfSoundtoplay;
}


SFInt32 *TRIPSSoundBase::editSFPlaymode(void)
{
    editSField(PlaymodeFieldMask);

    return &_sfPlaymode;
}

const SFInt32 *TRIPSSoundBase::getSFPlaymode(void) const
{
    return &_sfPlaymode;
}


SFInt32 *TRIPSSoundBase::editSFPlaymodeparameter1(void)
{
    editSField(Playmodeparameter1FieldMask);

    return &_sfPlaymodeparameter1;
}

const SFInt32 *TRIPSSoundBase::getSFPlaymodeparameter1(void) const
{
    return &_sfPlaymodeparameter1;
}


SFInt32 *TRIPSSoundBase::editSFPlaymodeparameter2(void)
{
    editSField(Playmodeparameter2FieldMask);

    return &_sfPlaymodeparameter2;
}

const SFInt32 *TRIPSSoundBase::getSFPlaymodeparameter2(void) const
{
    return &_sfPlaymodeparameter2;
}


SFInt32 *TRIPSSoundBase::editSFPlaymodeparameter3(void)
{
    editSField(Playmodeparameter3FieldMask);

    return &_sfPlaymodeparameter3;
}

const SFInt32 *TRIPSSoundBase::getSFPlaymodeparameter3(void) const
{
    return &_sfPlaymodeparameter3;
}


//! Get the TRIPSSound::_sfAudio field.
const SFUnrecTRIPSAudioSystemPtr *TRIPSSoundBase::getSFAudio(void) const
{
    return &_sfAudio;
}

SFUnrecTRIPSAudioSystemPtr *TRIPSSoundBase::editSFAudio          (void)
{
    editSField(AudioFieldMask);

    return &_sfAudio;
}

//! Get the value of the TRIPSSound::_sfAudio field.
TRIPSAudioSystem * TRIPSSoundBase::getAudio(void) const
{
    return _sfAudio.getValue();
}

//! Set the value of the TRIPSSound::_sfAudio field.
void TRIPSSoundBase::setAudio(TRIPSAudioSystem * const value)
{
    editSField(AudioFieldMask);

    _sfAudio.setValue(value);
}






/*------------------------------ access -----------------------------------*/

SizeT TRIPSSoundBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (SoundIDFieldMask & whichField))
    {
        returnValue += _sfSoundID.getBinSize();
    }
    if(FieldBits::NoField != (FilenameFieldMask & whichField))
    {
        returnValue += _sfFilename.getBinSize();
    }
    if(FieldBits::NoField != (BeaconFieldMask & whichField))
    {
        returnValue += _sfBeacon.getBinSize();
    }
    if(FieldBits::NoField != (UsevelocityFieldMask & whichField))
    {
        returnValue += _sfUsevelocity.getBinSize();
    }
    if(FieldBits::NoField != (LastsoundpositionFieldMask & whichField))
    {
        returnValue += _sfLastsoundposition.getBinSize();
    }
    if(FieldBits::NoField != (VelocityFieldMask & whichField))
    {
        returnValue += _sfVelocity.getBinSize();
    }
    if(FieldBits::NoField != (Is3DFieldMask & whichField))
    {
        returnValue += _sfIs3D.getBinSize();
    }
    if(FieldBits::NoField != (ChannelFieldMask & whichField))
    {
        returnValue += _sfChannel.getBinSize();
    }
    if(FieldBits::NoField != (SoundVolumeFieldMask & whichField))
    {
        returnValue += _sfSoundVolume.getBinSize();
    }
    if(FieldBits::NoField != (MinDistanceFieldMask & whichField))
    {
        returnValue += _sfMinDistance.getBinSize();
    }
    if(FieldBits::NoField != (MaxDistanceFieldMask & whichField))
    {
        returnValue += _sfMaxDistance.getBinSize();
    }
    if(FieldBits::NoField != (SoundtoplayFieldMask & whichField))
    {
        returnValue += _sfSoundtoplay.getBinSize();
    }
    if(FieldBits::NoField != (PlaymodeFieldMask & whichField))
    {
        returnValue += _sfPlaymode.getBinSize();
    }
    if(FieldBits::NoField != (Playmodeparameter1FieldMask & whichField))
    {
        returnValue += _sfPlaymodeparameter1.getBinSize();
    }
    if(FieldBits::NoField != (Playmodeparameter2FieldMask & whichField))
    {
        returnValue += _sfPlaymodeparameter2.getBinSize();
    }
    if(FieldBits::NoField != (Playmodeparameter3FieldMask & whichField))
    {
        returnValue += _sfPlaymodeparameter3.getBinSize();
    }
    if(FieldBits::NoField != (AudioFieldMask & whichField))
    {
        returnValue += _sfAudio.getBinSize();
    }

    return returnValue;
}

void TRIPSSoundBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (SoundIDFieldMask & whichField))
    {
        _sfSoundID.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FilenameFieldMask & whichField))
    {
        _sfFilename.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BeaconFieldMask & whichField))
    {
        _sfBeacon.copyToBin(pMem);
    }
    if(FieldBits::NoField != (UsevelocityFieldMask & whichField))
    {
        _sfUsevelocity.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LastsoundpositionFieldMask & whichField))
    {
        _sfLastsoundposition.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VelocityFieldMask & whichField))
    {
        _sfVelocity.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Is3DFieldMask & whichField))
    {
        _sfIs3D.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ChannelFieldMask & whichField))
    {
        _sfChannel.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SoundVolumeFieldMask & whichField))
    {
        _sfSoundVolume.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MinDistanceFieldMask & whichField))
    {
        _sfMinDistance.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MaxDistanceFieldMask & whichField))
    {
        _sfMaxDistance.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SoundtoplayFieldMask & whichField))
    {
        _sfSoundtoplay.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PlaymodeFieldMask & whichField))
    {
        _sfPlaymode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Playmodeparameter1FieldMask & whichField))
    {
        _sfPlaymodeparameter1.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Playmodeparameter2FieldMask & whichField))
    {
        _sfPlaymodeparameter2.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Playmodeparameter3FieldMask & whichField))
    {
        _sfPlaymodeparameter3.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AudioFieldMask & whichField))
    {
        _sfAudio.copyToBin(pMem);
    }
}

void TRIPSSoundBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (SoundIDFieldMask & whichField))
    {
        editSField(SoundIDFieldMask);
        _sfSoundID.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FilenameFieldMask & whichField))
    {
        editSField(FilenameFieldMask);
        _sfFilename.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BeaconFieldMask & whichField))
    {
        editSField(BeaconFieldMask);
        _sfBeacon.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (UsevelocityFieldMask & whichField))
    {
        editSField(UsevelocityFieldMask);
        _sfUsevelocity.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LastsoundpositionFieldMask & whichField))
    {
        editSField(LastsoundpositionFieldMask);
        _sfLastsoundposition.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VelocityFieldMask & whichField))
    {
        editSField(VelocityFieldMask);
        _sfVelocity.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Is3DFieldMask & whichField))
    {
        editSField(Is3DFieldMask);
        _sfIs3D.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ChannelFieldMask & whichField))
    {
        editSField(ChannelFieldMask);
        _sfChannel.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SoundVolumeFieldMask & whichField))
    {
        editSField(SoundVolumeFieldMask);
        _sfSoundVolume.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MinDistanceFieldMask & whichField))
    {
        editSField(MinDistanceFieldMask);
        _sfMinDistance.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MaxDistanceFieldMask & whichField))
    {
        editSField(MaxDistanceFieldMask);
        _sfMaxDistance.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SoundtoplayFieldMask & whichField))
    {
        editSField(SoundtoplayFieldMask);
        _sfSoundtoplay.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PlaymodeFieldMask & whichField))
    {
        editSField(PlaymodeFieldMask);
        _sfPlaymode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Playmodeparameter1FieldMask & whichField))
    {
        editSField(Playmodeparameter1FieldMask);
        _sfPlaymodeparameter1.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Playmodeparameter2FieldMask & whichField))
    {
        editSField(Playmodeparameter2FieldMask);
        _sfPlaymodeparameter2.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Playmodeparameter3FieldMask & whichField))
    {
        editSField(Playmodeparameter3FieldMask);
        _sfPlaymodeparameter3.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AudioFieldMask & whichField))
    {
        editSField(AudioFieldMask);
        _sfAudio.copyFromBin(pMem);
    }
}

//! create a new instance of the class
TRIPSSoundTransitPtr TRIPSSoundBase::createLocal(BitVector bFlags)
{
    TRIPSSoundTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<TRIPSSound>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
TRIPSSoundTransitPtr TRIPSSoundBase::createDependent(BitVector bFlags)
{
    TRIPSSoundTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<TRIPSSound>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
TRIPSSoundTransitPtr TRIPSSoundBase::create(void)
{
    TRIPSSoundTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<TRIPSSound>(tmpPtr);
    }

    return fc;
}

TRIPSSound *TRIPSSoundBase::createEmptyLocal(BitVector bFlags)
{
    TRIPSSound *returnValue;

    newPtr<TRIPSSound>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
TRIPSSound *TRIPSSoundBase::createEmpty(void)
{
    TRIPSSound *returnValue;

    newPtr<TRIPSSound>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr TRIPSSoundBase::shallowCopyLocal(
    BitVector bFlags) const
{
    TRIPSSound *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TRIPSSound *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr TRIPSSoundBase::shallowCopyDependent(
    BitVector bFlags) const
{
    TRIPSSound *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TRIPSSound *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr TRIPSSoundBase::shallowCopy(void) const
{
    TRIPSSound *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const TRIPSSound *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

TRIPSSoundBase::TRIPSSoundBase(void) :
    Inherited(),
    _sfSoundID                (),
    _sfFilename               (),
    _sfBeacon                 (NULL),
    _sfUsevelocity            (bool(true)),
    _sfLastsoundposition      (),
    _sfVelocity               (),
    _sfIs3D                   (),
    _sfChannel                (),
    _sfSoundVolume            (),
    _sfMinDistance            (Real32(1.0)),
    _sfMaxDistance            (Real32(1000000000.0f  )),
    _sfSoundtoplay            (),
    _sfPlaymode               (),
    _sfPlaymodeparameter1     (),
    _sfPlaymodeparameter2     (),
    _sfPlaymodeparameter3     (),
    _sfAudio                  (NULL)
{
}

TRIPSSoundBase::TRIPSSoundBase(const TRIPSSoundBase &source) :
    Inherited(source),
    _sfSoundID                (source._sfSoundID                ),
    _sfFilename               (source._sfFilename               ),
    _sfBeacon                 (NULL),
    _sfUsevelocity            (source._sfUsevelocity            ),
    _sfLastsoundposition      (source._sfLastsoundposition      ),
    _sfVelocity               (source._sfVelocity               ),
    _sfIs3D                   (source._sfIs3D                   ),
    _sfChannel                (source._sfChannel                ),
    _sfSoundVolume            (source._sfSoundVolume            ),
    _sfMinDistance            (source._sfMinDistance            ),
    _sfMaxDistance            (source._sfMaxDistance            ),
    _sfSoundtoplay            (source._sfSoundtoplay            ),
    _sfPlaymode               (source._sfPlaymode               ),
    _sfPlaymodeparameter1     (source._sfPlaymodeparameter1     ),
    _sfPlaymodeparameter2     (source._sfPlaymodeparameter2     ),
    _sfPlaymodeparameter3     (source._sfPlaymodeparameter3     ),
    _sfAudio                  (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

TRIPSSoundBase::~TRIPSSoundBase(void)
{
}

void TRIPSSoundBase::onCreate(const TRIPSSound *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        TRIPSSound *pThis = static_cast<TRIPSSound *>(this);

        pThis->setBeacon(source->getBeacon());

        pThis->setAudio(source->getAudio());
    }
}

GetFieldHandlePtr TRIPSSoundBase::getHandleSoundID         (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfSoundID,
             this->getType().getFieldDesc(SoundIDFieldId),
             const_cast<TRIPSSoundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSSoundBase::editHandleSoundID        (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfSoundID,
             this->getType().getFieldDesc(SoundIDFieldId),
             this));


    editSField(SoundIDFieldMask);

    return returnValue;
}

GetFieldHandlePtr TRIPSSoundBase::getHandleFilename        (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfFilename,
             this->getType().getFieldDesc(FilenameFieldId),
             const_cast<TRIPSSoundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSSoundBase::editHandleFilename       (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfFilename,
             this->getType().getFieldDesc(FilenameFieldId),
             this));


    editSField(FilenameFieldMask);

    return returnValue;
}

GetFieldHandlePtr TRIPSSoundBase::getHandleBeacon          (void) const
{
    SFWeakNodePtr::GetHandlePtr returnValue(
        new  SFWeakNodePtr::GetHandle(
             &_sfBeacon,
             this->getType().getFieldDesc(BeaconFieldId),
             const_cast<TRIPSSoundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSSoundBase::editHandleBeacon         (void)
{
    SFWeakNodePtr::EditHandlePtr returnValue(
        new  SFWeakNodePtr::EditHandle(
             &_sfBeacon,
             this->getType().getFieldDesc(BeaconFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&TRIPSSound::setBeacon,
                    static_cast<TRIPSSound *>(this), _1));

    editSField(BeaconFieldMask);

    return returnValue;
}

GetFieldHandlePtr TRIPSSoundBase::getHandleUsevelocity     (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfUsevelocity,
             this->getType().getFieldDesc(UsevelocityFieldId),
             const_cast<TRIPSSoundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSSoundBase::editHandleUsevelocity    (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfUsevelocity,
             this->getType().getFieldDesc(UsevelocityFieldId),
             this));


    editSField(UsevelocityFieldMask);

    return returnValue;
}

GetFieldHandlePtr TRIPSSoundBase::getHandleLastsoundposition (void) const
{
    SFPnt3f::GetHandlePtr returnValue(
        new  SFPnt3f::GetHandle(
             &_sfLastsoundposition,
             this->getType().getFieldDesc(LastsoundpositionFieldId),
             const_cast<TRIPSSoundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSSoundBase::editHandleLastsoundposition(void)
{
    SFPnt3f::EditHandlePtr returnValue(
        new  SFPnt3f::EditHandle(
             &_sfLastsoundposition,
             this->getType().getFieldDesc(LastsoundpositionFieldId),
             this));


    editSField(LastsoundpositionFieldMask);

    return returnValue;
}

GetFieldHandlePtr TRIPSSoundBase::getHandleVelocity        (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfVelocity,
             this->getType().getFieldDesc(VelocityFieldId),
             const_cast<TRIPSSoundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSSoundBase::editHandleVelocity       (void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfVelocity,
             this->getType().getFieldDesc(VelocityFieldId),
             this));


    editSField(VelocityFieldMask);

    return returnValue;
}

GetFieldHandlePtr TRIPSSoundBase::getHandleIs3D            (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfIs3D,
             this->getType().getFieldDesc(Is3DFieldId),
             const_cast<TRIPSSoundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSSoundBase::editHandleIs3D           (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfIs3D,
             this->getType().getFieldDesc(Is3DFieldId),
             this));


    editSField(Is3DFieldMask);

    return returnValue;
}

GetFieldHandlePtr TRIPSSoundBase::getHandleChannel         (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfChannel,
             this->getType().getFieldDesc(ChannelFieldId),
             const_cast<TRIPSSoundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSSoundBase::editHandleChannel        (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfChannel,
             this->getType().getFieldDesc(ChannelFieldId),
             this));


    editSField(ChannelFieldMask);

    return returnValue;
}

GetFieldHandlePtr TRIPSSoundBase::getHandleSoundVolume     (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfSoundVolume,
             this->getType().getFieldDesc(SoundVolumeFieldId),
             const_cast<TRIPSSoundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSSoundBase::editHandleSoundVolume    (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfSoundVolume,
             this->getType().getFieldDesc(SoundVolumeFieldId),
             this));


    editSField(SoundVolumeFieldMask);

    return returnValue;
}

GetFieldHandlePtr TRIPSSoundBase::getHandleMinDistance     (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfMinDistance,
             this->getType().getFieldDesc(MinDistanceFieldId),
             const_cast<TRIPSSoundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSSoundBase::editHandleMinDistance    (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfMinDistance,
             this->getType().getFieldDesc(MinDistanceFieldId),
             this));


    editSField(MinDistanceFieldMask);

    return returnValue;
}

GetFieldHandlePtr TRIPSSoundBase::getHandleMaxDistance     (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfMaxDistance,
             this->getType().getFieldDesc(MaxDistanceFieldId),
             const_cast<TRIPSSoundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSSoundBase::editHandleMaxDistance    (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfMaxDistance,
             this->getType().getFieldDesc(MaxDistanceFieldId),
             this));


    editSField(MaxDistanceFieldMask);

    return returnValue;
}

GetFieldHandlePtr TRIPSSoundBase::getHandleSoundtoplay     (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfSoundtoplay,
             this->getType().getFieldDesc(SoundtoplayFieldId),
             const_cast<TRIPSSoundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSSoundBase::editHandleSoundtoplay    (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfSoundtoplay,
             this->getType().getFieldDesc(SoundtoplayFieldId),
             this));


    editSField(SoundtoplayFieldMask);

    return returnValue;
}

GetFieldHandlePtr TRIPSSoundBase::getHandlePlaymode        (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfPlaymode,
             this->getType().getFieldDesc(PlaymodeFieldId),
             const_cast<TRIPSSoundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSSoundBase::editHandlePlaymode       (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfPlaymode,
             this->getType().getFieldDesc(PlaymodeFieldId),
             this));


    editSField(PlaymodeFieldMask);

    return returnValue;
}

GetFieldHandlePtr TRIPSSoundBase::getHandlePlaymodeparameter1 (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfPlaymodeparameter1,
             this->getType().getFieldDesc(Playmodeparameter1FieldId),
             const_cast<TRIPSSoundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSSoundBase::editHandlePlaymodeparameter1(void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfPlaymodeparameter1,
             this->getType().getFieldDesc(Playmodeparameter1FieldId),
             this));


    editSField(Playmodeparameter1FieldMask);

    return returnValue;
}

GetFieldHandlePtr TRIPSSoundBase::getHandlePlaymodeparameter2 (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfPlaymodeparameter2,
             this->getType().getFieldDesc(Playmodeparameter2FieldId),
             const_cast<TRIPSSoundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSSoundBase::editHandlePlaymodeparameter2(void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfPlaymodeparameter2,
             this->getType().getFieldDesc(Playmodeparameter2FieldId),
             this));


    editSField(Playmodeparameter2FieldMask);

    return returnValue;
}

GetFieldHandlePtr TRIPSSoundBase::getHandlePlaymodeparameter3 (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfPlaymodeparameter3,
             this->getType().getFieldDesc(Playmodeparameter3FieldId),
             const_cast<TRIPSSoundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSSoundBase::editHandlePlaymodeparameter3(void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfPlaymodeparameter3,
             this->getType().getFieldDesc(Playmodeparameter3FieldId),
             this));


    editSField(Playmodeparameter3FieldMask);

    return returnValue;
}

GetFieldHandlePtr TRIPSSoundBase::getHandleAudio           (void) const
{
    SFUnrecTRIPSAudioSystemPtr::GetHandlePtr returnValue(
        new  SFUnrecTRIPSAudioSystemPtr::GetHandle(
             &_sfAudio,
             this->getType().getFieldDesc(AudioFieldId),
             const_cast<TRIPSSoundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSSoundBase::editHandleAudio          (void)
{
    SFUnrecTRIPSAudioSystemPtr::EditHandlePtr returnValue(
        new  SFUnrecTRIPSAudioSystemPtr::EditHandle(
             &_sfAudio,
             this->getType().getFieldDesc(AudioFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&TRIPSSound::setAudio,
                    static_cast<TRIPSSound *>(this), _1));

    editSField(AudioFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void TRIPSSoundBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    TRIPSSound *pThis = static_cast<TRIPSSound *>(this);

    pThis->execSync(static_cast<TRIPSSound *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *TRIPSSoundBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    TRIPSSound *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const TRIPSSound *>(pRefAspect),
                  dynamic_cast<const TRIPSSound *>(this));

    return returnValue;
}
#endif

void TRIPSSoundBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<TRIPSSound *>(this)->setBeacon(NULL);

    static_cast<TRIPSSound *>(this)->setAudio(NULL);


}


OSG_END_NAMESPACE
