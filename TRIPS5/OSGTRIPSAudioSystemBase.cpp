/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TRIPSAudioSystem!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#include "OSGConfig.h"



#include "OSGTRIPSSound.h"              // Soundlist Class

#include "OSGTRIPSAudioSystemBase.h"
#include "OSGTRIPSAudioSystem.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::TRIPSAudioSystem
    Audio Node that holds information about Listener and a List of Sounds
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Pnt3f           TRIPSAudioSystemBase::_sfListenerposition
    global Listener Position
*/

/*! \var Vec3f           TRIPSAudioSystemBase::_sfListenerlookat
    Lookat Vector of Listener
*/

/*! \var Vec3f           TRIPSAudioSystemBase::_sfListenerup
    Up Vector of Listener
*/

/*! \var Vec3f           TRIPSAudioSystemBase::_sfListeneroffset
    Offset to Camera to Listener
*/

/*! \var bool            TRIPSAudioSystemBase::_sfUsevelocity
    Switch for automatic Velocity
*/

/*! \var Vec3f           TRIPSAudioSystemBase::_sfVelocity
    Velocity of Listener needed for doppler-effect
*/

/*! \var Time            TRIPSAudioSystemBase::_sfLastframetime
    Timer for Velocity calculation
*/

/*! \var Pnt3f           TRIPSAudioSystemBase::_sfLastlistenerposition
    last Listener Position
*/

/*! \var TRIPSSound *    TRIPSAudioSystemBase::_mfSoundlist
    List of Sounds
*/

/*! \var TRIPSSound *    TRIPSAudioSystemBase::_mfTimesoundlist
    List of timed Sounds
*/

/*! \var Int32           TRIPSAudioSystemBase::_sfReverbtype
    Reverb Environment
*/

/*! \var Time            TRIPSAudioSystemBase::_sfAudiotimer
    Timer
*/

/*! \var bool            TRIPSAudioSystemBase::_sfAudioinit
    AutoInit TRUE / FALSE
*/

/*! \var UInt16          TRIPSAudioSystemBase::_sfAudiomode
    AudioMode ACTIVE / MUTE
*/

/*! \var UInt16          TRIPSAudioSystemBase::_sfAudiodriver
    AudioDriver EAX / DSound / OSS ...
*/

/*! \var UInt16          TRIPSAudioSystemBase::_sfSpeakermode
    Speaker mode DOLBYDIGITAL / STEREO / HEADPHONES ..
*/

/*! \var std::string     TRIPSAudioSystemBase::_sfInifilename
    filename for ini or trips.ini if not set
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<TRIPSAudioSystem *, nsOSG>::_type(
    "TRIPSAudioSystemPtr", 
    "NodeCorePtr", 
    TRIPSAudioSystem::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(TRIPSAudioSystem *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           TRIPSAudioSystem *,
                           nsOSG);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           TRIPSAudioSystem *,
                           nsOSG);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void TRIPSAudioSystemBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFPnt3f::Description(
        SFPnt3f::getClassType(),
        "listenerposition",
        "global Listener Position\n",
        ListenerpositionFieldId, ListenerpositionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSAudioSystem::editHandleListenerposition),
        static_cast<FieldGetMethodSig >(&TRIPSAudioSystem::getHandleListenerposition));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "listenerlookat",
        "Lookat Vector of Listener\n",
        ListenerlookatFieldId, ListenerlookatFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSAudioSystem::editHandleListenerlookat),
        static_cast<FieldGetMethodSig >(&TRIPSAudioSystem::getHandleListenerlookat));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "listenerup",
        "Up Vector of Listener\n",
        ListenerupFieldId, ListenerupFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSAudioSystem::editHandleListenerup),
        static_cast<FieldGetMethodSig >(&TRIPSAudioSystem::getHandleListenerup));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "listeneroffset",
        "Offset to Camera to Listener\n",
        ListeneroffsetFieldId, ListeneroffsetFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSAudioSystem::editHandleListeneroffset),
        static_cast<FieldGetMethodSig >(&TRIPSAudioSystem::getHandleListeneroffset));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "usevelocity",
        "Switch for automatic Velocity\n",
        UsevelocityFieldId, UsevelocityFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSAudioSystem::editHandleUsevelocity),
        static_cast<FieldGetMethodSig >(&TRIPSAudioSystem::getHandleUsevelocity));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "velocity",
        "Velocity of Listener needed for doppler-effect\n",
        VelocityFieldId, VelocityFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSAudioSystem::editHandleVelocity),
        static_cast<FieldGetMethodSig >(&TRIPSAudioSystem::getHandleVelocity));

    oType.addInitialDesc(pDesc);

    pDesc = new SFTime::Description(
        SFTime::getClassType(),
        "lastframetime",
        "Timer for Velocity calculation\n",
        LastframetimeFieldId, LastframetimeFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSAudioSystem::editHandleLastframetime),
        static_cast<FieldGetMethodSig >(&TRIPSAudioSystem::getHandleLastframetime));

    oType.addInitialDesc(pDesc);

    pDesc = new SFPnt3f::Description(
        SFPnt3f::getClassType(),
        "lastlistenerposition",
        "last Listener Position\n",
        LastlistenerpositionFieldId, LastlistenerpositionFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSAudioSystem::editHandleLastlistenerposition),
        static_cast<FieldGetMethodSig >(&TRIPSAudioSystem::getHandleLastlistenerposition));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecTRIPSSoundPtr::Description(
        MFUnrecTRIPSSoundPtr::getClassType(),
        "soundlist",
        "List of Sounds\n",
        SoundlistFieldId, SoundlistFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSAudioSystem::editHandleSoundlist),
        static_cast<FieldGetMethodSig >(&TRIPSAudioSystem::getHandleSoundlist));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecTRIPSSoundPtr::Description(
        MFUnrecTRIPSSoundPtr::getClassType(),
        "timesoundlist",
        "List of timed Sounds\n",
        TimesoundlistFieldId, TimesoundlistFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSAudioSystem::editHandleTimesoundlist),
        static_cast<FieldGetMethodSig >(&TRIPSAudioSystem::getHandleTimesoundlist));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "reverbtype",
        "Reverb Environment\n",
        ReverbtypeFieldId, ReverbtypeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSAudioSystem::editHandleReverbtype),
        static_cast<FieldGetMethodSig >(&TRIPSAudioSystem::getHandleReverbtype));

    oType.addInitialDesc(pDesc);

    pDesc = new SFTime::Description(
        SFTime::getClassType(),
        "audiotimer",
        "Timer\n",
        AudiotimerFieldId, AudiotimerFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSAudioSystem::editHandleAudiotimer),
        static_cast<FieldGetMethodSig >(&TRIPSAudioSystem::getHandleAudiotimer));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "audioinit",
        "AutoInit TRUE / FALSE\n",
        AudioinitFieldId, AudioinitFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSAudioSystem::editHandleAudioinit),
        static_cast<FieldGetMethodSig >(&TRIPSAudioSystem::getHandleAudioinit));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt16::Description(
        SFUInt16::getClassType(),
        "audiomode",
        "AudioMode ACTIVE / MUTE\n",
        AudiomodeFieldId, AudiomodeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSAudioSystem::editHandleAudiomode),
        static_cast<FieldGetMethodSig >(&TRIPSAudioSystem::getHandleAudiomode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt16::Description(
        SFUInt16::getClassType(),
        "audiodriver",
        "AudioDriver EAX / DSound / OSS ...\n",
        AudiodriverFieldId, AudiodriverFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSAudioSystem::editHandleAudiodriver),
        static_cast<FieldGetMethodSig >(&TRIPSAudioSystem::getHandleAudiodriver));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt16::Description(
        SFUInt16::getClassType(),
        "speakermode",
        "Speaker mode DOLBYDIGITAL / STEREO / HEADPHONES ..\n",
        SpeakermodeFieldId, SpeakermodeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TRIPSAudioSystem::editHandleSpeakermode),
        static_cast<FieldGetMethodSig >(&TRIPSAudioSystem::getHandleSpeakermode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "inifilename",
        "filename for ini or trips.ini if not set\n",
        InifilenameFieldId, InifilenameFieldMask,
        false,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&TRIPSAudioSystem::editHandleInifilename),
        static_cast<FieldGetMethodSig >(&TRIPSAudioSystem::getHandleInifilename));

    oType.addInitialDesc(pDesc);
}


TRIPSAudioSystemBase::TypeObject TRIPSAudioSystemBase::_type(
    TRIPSAudioSystemBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&TRIPSAudioSystemBase::createEmptyLocal),
    TRIPSAudioSystem::initMethod,
    TRIPSAudioSystem::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&TRIPSAudioSystem::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"TRIPSAudioSystem\"\n"
    "\tparent=\"NodeCore\"\n"
    "\tlibrary=\"TRIPS\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    ">\n"
    "Audio Node that holds information about Listener and a List of Sounds\n"
    "\t<Field\n"
    "\t\tname=\"listenerposition\"\n"
    "\t\ttype=\"Pnt3f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.0f, 0.0f, 0.0f\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tglobal Listener Position\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"listenerlookat\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tLookat Vector of Listener\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"listenerup\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tUp Vector of Listener\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"listeneroffset\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tOffset to Camera to Listener\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"usevelocity\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tSwitch for automatic Velocity\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"velocity\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tVelocity of Listener needed for doppler-effect\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"lastframetime\"\n"
    "\t\ttype=\"Time\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tTimer for Velocity calculation\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"lastlistenerposition\"\n"
    "\t\ttype=\"Pnt3f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\tdefaultValue=\"0.0f, 0.0f, 0.0f\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tlast Listener Position\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"soundlist\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\ttype=\"TRIPSSound\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tList of Sounds\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"timesoundlist\"\n"
    "\t\tcategory=\"pointer\"\n"
    "\t\ttype=\"TRIPSSound\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tList of timed Sounds\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"reverbtype\"\n"
    "\t\ttype=\"Int32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tReverb Environment\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"audiotimer\"\n"
    "\t\ttype=\"Time\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tTimer\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"audioinit\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tAutoInit TRUE / FALSE\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"audiomode\"\n"
    "\t\ttype=\"UInt16\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"-1\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tAudioMode ACTIVE / MUTE\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"audiodriver\"\n"
    "\t\ttype=\"UInt16\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tAudioDriver EAX / DSound / OSS ...\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"speakermode\"\n"
    "\t\ttype=\"UInt16\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tSpeaker mode DOLBYDIGITAL / STEREO / HEADPHONES ..\n"
    "\t</Field>\n"
    "  <Field\n"
    "\t\tname=\"inifilename\"\n"
    "\t\ttype=\"std::string\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "    defaultValue=\"\"\n"
    "\t\taccess=\"public\"\n"
    "    fieldFlags=\"FClusterLocal\"\n"
    "\t>\n"
    "    filename for ini or trips.ini if not set\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    "Audio Node that holds information about Listener and a List of Sounds\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &TRIPSAudioSystemBase::getType(void)
{
    return _type;
}

const FieldContainerType &TRIPSAudioSystemBase::getType(void) const
{
    return _type;
}

UInt32 TRIPSAudioSystemBase::getContainerSize(void) const
{
    return sizeof(TRIPSAudioSystem);
}

/*------------------------- decorator get ------------------------------*/


SFPnt3f *TRIPSAudioSystemBase::editSFListenerposition(void)
{
    editSField(ListenerpositionFieldMask);

    return &_sfListenerposition;
}

const SFPnt3f *TRIPSAudioSystemBase::getSFListenerposition(void) const
{
    return &_sfListenerposition;
}


SFVec3f *TRIPSAudioSystemBase::editSFListenerlookat(void)
{
    editSField(ListenerlookatFieldMask);

    return &_sfListenerlookat;
}

const SFVec3f *TRIPSAudioSystemBase::getSFListenerlookat(void) const
{
    return &_sfListenerlookat;
}


SFVec3f *TRIPSAudioSystemBase::editSFListenerup(void)
{
    editSField(ListenerupFieldMask);

    return &_sfListenerup;
}

const SFVec3f *TRIPSAudioSystemBase::getSFListenerup(void) const
{
    return &_sfListenerup;
}


SFVec3f *TRIPSAudioSystemBase::editSFListeneroffset(void)
{
    editSField(ListeneroffsetFieldMask);

    return &_sfListeneroffset;
}

const SFVec3f *TRIPSAudioSystemBase::getSFListeneroffset(void) const
{
    return &_sfListeneroffset;
}


SFBool *TRIPSAudioSystemBase::editSFUsevelocity(void)
{
    editSField(UsevelocityFieldMask);

    return &_sfUsevelocity;
}

const SFBool *TRIPSAudioSystemBase::getSFUsevelocity(void) const
{
    return &_sfUsevelocity;
}


SFVec3f *TRIPSAudioSystemBase::editSFVelocity(void)
{
    editSField(VelocityFieldMask);

    return &_sfVelocity;
}

const SFVec3f *TRIPSAudioSystemBase::getSFVelocity(void) const
{
    return &_sfVelocity;
}


SFTime *TRIPSAudioSystemBase::editSFLastframetime(void)
{
    editSField(LastframetimeFieldMask);

    return &_sfLastframetime;
}

const SFTime *TRIPSAudioSystemBase::getSFLastframetime(void) const
{
    return &_sfLastframetime;
}


SFPnt3f *TRIPSAudioSystemBase::editSFLastlistenerposition(void)
{
    editSField(LastlistenerpositionFieldMask);

    return &_sfLastlistenerposition;
}

const SFPnt3f *TRIPSAudioSystemBase::getSFLastlistenerposition(void) const
{
    return &_sfLastlistenerposition;
}


//! Get the TRIPSAudioSystem::_mfSoundlist field.
const MFUnrecTRIPSSoundPtr *TRIPSAudioSystemBase::getMFSoundlist(void) const
{
    return &_mfSoundlist;
}

MFUnrecTRIPSSoundPtr *TRIPSAudioSystemBase::editMFSoundlist      (void)
{
    editMField(SoundlistFieldMask, _mfSoundlist);

    return &_mfSoundlist;
}
TRIPSSound * TRIPSAudioSystemBase::getSoundlist(const UInt32 index) const
{
    return _mfSoundlist[index];
}

//! Get the TRIPSAudioSystem::_mfTimesoundlist field.
const MFUnrecTRIPSSoundPtr *TRIPSAudioSystemBase::getMFTimesoundlist(void) const
{
    return &_mfTimesoundlist;
}

MFUnrecTRIPSSoundPtr *TRIPSAudioSystemBase::editMFTimesoundlist  (void)
{
    editMField(TimesoundlistFieldMask, _mfTimesoundlist);

    return &_mfTimesoundlist;
}
TRIPSSound * TRIPSAudioSystemBase::getTimesoundlist(const UInt32 index) const
{
    return _mfTimesoundlist[index];
}

SFInt32 *TRIPSAudioSystemBase::editSFReverbtype(void)
{
    editSField(ReverbtypeFieldMask);

    return &_sfReverbtype;
}

const SFInt32 *TRIPSAudioSystemBase::getSFReverbtype(void) const
{
    return &_sfReverbtype;
}


SFTime *TRIPSAudioSystemBase::editSFAudiotimer(void)
{
    editSField(AudiotimerFieldMask);

    return &_sfAudiotimer;
}

const SFTime *TRIPSAudioSystemBase::getSFAudiotimer(void) const
{
    return &_sfAudiotimer;
}


SFBool *TRIPSAudioSystemBase::editSFAudioinit(void)
{
    editSField(AudioinitFieldMask);

    return &_sfAudioinit;
}

const SFBool *TRIPSAudioSystemBase::getSFAudioinit(void) const
{
    return &_sfAudioinit;
}


SFUInt16 *TRIPSAudioSystemBase::editSFAudiomode(void)
{
    editSField(AudiomodeFieldMask);

    return &_sfAudiomode;
}

const SFUInt16 *TRIPSAudioSystemBase::getSFAudiomode(void) const
{
    return &_sfAudiomode;
}


SFUInt16 *TRIPSAudioSystemBase::editSFAudiodriver(void)
{
    editSField(AudiodriverFieldMask);

    return &_sfAudiodriver;
}

const SFUInt16 *TRIPSAudioSystemBase::getSFAudiodriver(void) const
{
    return &_sfAudiodriver;
}


SFUInt16 *TRIPSAudioSystemBase::editSFSpeakermode(void)
{
    editSField(SpeakermodeFieldMask);

    return &_sfSpeakermode;
}

const SFUInt16 *TRIPSAudioSystemBase::getSFSpeakermode(void) const
{
    return &_sfSpeakermode;
}


SFString *TRIPSAudioSystemBase::editSFInifilename(void)
{
    editSField(InifilenameFieldMask);

    return &_sfInifilename;
}

const SFString *TRIPSAudioSystemBase::getSFInifilename(void) const
{
    return &_sfInifilename;
}




void TRIPSAudioSystemBase::pushToSoundlist(TRIPSSound * const value)
{
    editMField(SoundlistFieldMask, _mfSoundlist);

    _mfSoundlist.push_back(value);
}

void TRIPSAudioSystemBase::assignSoundlist(const MFUnrecTRIPSSoundPtr &value)
{
    MFUnrecTRIPSSoundPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecTRIPSSoundPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<TRIPSAudioSystem *>(this)->clearSoundlist();

    while(elemIt != elemEnd)
    {
        this->pushToSoundlist(*elemIt);

        ++elemIt;
    }
}

void TRIPSAudioSystemBase::removeFromSoundlist(UInt32 uiIndex)
{
    if(uiIndex < _mfSoundlist.size())
    {
        editMField(SoundlistFieldMask, _mfSoundlist);

        _mfSoundlist.erase(uiIndex);
    }
}

void TRIPSAudioSystemBase::removeObjFromSoundlist(TRIPSSound * const value)
{
    Int32 iElemIdx = _mfSoundlist.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(SoundlistFieldMask, _mfSoundlist);

        _mfSoundlist.erase(iElemIdx);
    }
}
void TRIPSAudioSystemBase::clearSoundlist(void)
{
    editMField(SoundlistFieldMask, _mfSoundlist);


    _mfSoundlist.clear();
}

void TRIPSAudioSystemBase::pushToTimesoundlist(TRIPSSound * const value)
{
    editMField(TimesoundlistFieldMask, _mfTimesoundlist);

    _mfTimesoundlist.push_back(value);
}

void TRIPSAudioSystemBase::assignTimesoundlist(const MFUnrecTRIPSSoundPtr &value)
{
    MFUnrecTRIPSSoundPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecTRIPSSoundPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<TRIPSAudioSystem *>(this)->clearTimesoundlist();

    while(elemIt != elemEnd)
    {
        this->pushToTimesoundlist(*elemIt);

        ++elemIt;
    }
}

void TRIPSAudioSystemBase::removeFromTimesoundlist(UInt32 uiIndex)
{
    if(uiIndex < _mfTimesoundlist.size())
    {
        editMField(TimesoundlistFieldMask, _mfTimesoundlist);

        _mfTimesoundlist.erase(uiIndex);
    }
}

void TRIPSAudioSystemBase::removeObjFromTimesoundlist(TRIPSSound * const value)
{
    Int32 iElemIdx = _mfTimesoundlist.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(TimesoundlistFieldMask, _mfTimesoundlist);

        _mfTimesoundlist.erase(iElemIdx);
    }
}
void TRIPSAudioSystemBase::clearTimesoundlist(void)
{
    editMField(TimesoundlistFieldMask, _mfTimesoundlist);


    _mfTimesoundlist.clear();
}



/*------------------------------ access -----------------------------------*/

SizeT TRIPSAudioSystemBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ListenerpositionFieldMask & whichField))
    {
        returnValue += _sfListenerposition.getBinSize();
    }
    if(FieldBits::NoField != (ListenerlookatFieldMask & whichField))
    {
        returnValue += _sfListenerlookat.getBinSize();
    }
    if(FieldBits::NoField != (ListenerupFieldMask & whichField))
    {
        returnValue += _sfListenerup.getBinSize();
    }
    if(FieldBits::NoField != (ListeneroffsetFieldMask & whichField))
    {
        returnValue += _sfListeneroffset.getBinSize();
    }
    if(FieldBits::NoField != (UsevelocityFieldMask & whichField))
    {
        returnValue += _sfUsevelocity.getBinSize();
    }
    if(FieldBits::NoField != (VelocityFieldMask & whichField))
    {
        returnValue += _sfVelocity.getBinSize();
    }
    if(FieldBits::NoField != (LastframetimeFieldMask & whichField))
    {
        returnValue += _sfLastframetime.getBinSize();
    }
    if(FieldBits::NoField != (LastlistenerpositionFieldMask & whichField))
    {
        returnValue += _sfLastlistenerposition.getBinSize();
    }
    if(FieldBits::NoField != (SoundlistFieldMask & whichField))
    {
        returnValue += _mfSoundlist.getBinSize();
    }
    if(FieldBits::NoField != (TimesoundlistFieldMask & whichField))
    {
        returnValue += _mfTimesoundlist.getBinSize();
    }
    if(FieldBits::NoField != (ReverbtypeFieldMask & whichField))
    {
        returnValue += _sfReverbtype.getBinSize();
    }
    if(FieldBits::NoField != (AudiotimerFieldMask & whichField))
    {
        returnValue += _sfAudiotimer.getBinSize();
    }
    if(FieldBits::NoField != (AudioinitFieldMask & whichField))
    {
        returnValue += _sfAudioinit.getBinSize();
    }
    if(FieldBits::NoField != (AudiomodeFieldMask & whichField))
    {
        returnValue += _sfAudiomode.getBinSize();
    }
    if(FieldBits::NoField != (AudiodriverFieldMask & whichField))
    {
        returnValue += _sfAudiodriver.getBinSize();
    }
    if(FieldBits::NoField != (SpeakermodeFieldMask & whichField))
    {
        returnValue += _sfSpeakermode.getBinSize();
    }
    if(FieldBits::NoField != (InifilenameFieldMask & whichField))
    {
        returnValue += _sfInifilename.getBinSize();
    }

    return returnValue;
}

void TRIPSAudioSystemBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ListenerpositionFieldMask & whichField))
    {
        _sfListenerposition.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ListenerlookatFieldMask & whichField))
    {
        _sfListenerlookat.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ListenerupFieldMask & whichField))
    {
        _sfListenerup.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ListeneroffsetFieldMask & whichField))
    {
        _sfListeneroffset.copyToBin(pMem);
    }
    if(FieldBits::NoField != (UsevelocityFieldMask & whichField))
    {
        _sfUsevelocity.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VelocityFieldMask & whichField))
    {
        _sfVelocity.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LastframetimeFieldMask & whichField))
    {
        _sfLastframetime.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LastlistenerpositionFieldMask & whichField))
    {
        _sfLastlistenerposition.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SoundlistFieldMask & whichField))
    {
        _mfSoundlist.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TimesoundlistFieldMask & whichField))
    {
        _mfTimesoundlist.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ReverbtypeFieldMask & whichField))
    {
        _sfReverbtype.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AudiotimerFieldMask & whichField))
    {
        _sfAudiotimer.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AudioinitFieldMask & whichField))
    {
        _sfAudioinit.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AudiomodeFieldMask & whichField))
    {
        _sfAudiomode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AudiodriverFieldMask & whichField))
    {
        _sfAudiodriver.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SpeakermodeFieldMask & whichField))
    {
        _sfSpeakermode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InifilenameFieldMask & whichField))
    {
        _sfInifilename.copyToBin(pMem);
    }
}

void TRIPSAudioSystemBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ListenerpositionFieldMask & whichField))
    {
        editSField(ListenerpositionFieldMask);
        _sfListenerposition.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ListenerlookatFieldMask & whichField))
    {
        editSField(ListenerlookatFieldMask);
        _sfListenerlookat.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ListenerupFieldMask & whichField))
    {
        editSField(ListenerupFieldMask);
        _sfListenerup.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ListeneroffsetFieldMask & whichField))
    {
        editSField(ListeneroffsetFieldMask);
        _sfListeneroffset.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (UsevelocityFieldMask & whichField))
    {
        editSField(UsevelocityFieldMask);
        _sfUsevelocity.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VelocityFieldMask & whichField))
    {
        editSField(VelocityFieldMask);
        _sfVelocity.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LastframetimeFieldMask & whichField))
    {
        editSField(LastframetimeFieldMask);
        _sfLastframetime.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LastlistenerpositionFieldMask & whichField))
    {
        editSField(LastlistenerpositionFieldMask);
        _sfLastlistenerposition.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SoundlistFieldMask & whichField))
    {
        editMField(SoundlistFieldMask, _mfSoundlist);
        _mfSoundlist.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TimesoundlistFieldMask & whichField))
    {
        editMField(TimesoundlistFieldMask, _mfTimesoundlist);
        _mfTimesoundlist.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ReverbtypeFieldMask & whichField))
    {
        editSField(ReverbtypeFieldMask);
        _sfReverbtype.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AudiotimerFieldMask & whichField))
    {
        editSField(AudiotimerFieldMask);
        _sfAudiotimer.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AudioinitFieldMask & whichField))
    {
        editSField(AudioinitFieldMask);
        _sfAudioinit.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AudiomodeFieldMask & whichField))
    {
        editSField(AudiomodeFieldMask);
        _sfAudiomode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AudiodriverFieldMask & whichField))
    {
        editSField(AudiodriverFieldMask);
        _sfAudiodriver.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SpeakermodeFieldMask & whichField))
    {
        editSField(SpeakermodeFieldMask);
        _sfSpeakermode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InifilenameFieldMask & whichField))
    {
        editSField(InifilenameFieldMask);
        _sfInifilename.copyFromBin(pMem);
    }
}

//! create a new instance of the class
TRIPSAudioSystemTransitPtr TRIPSAudioSystemBase::createLocal(BitVector bFlags)
{
    TRIPSAudioSystemTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<TRIPSAudioSystem>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
TRIPSAudioSystemTransitPtr TRIPSAudioSystemBase::createDependent(BitVector bFlags)
{
    TRIPSAudioSystemTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<TRIPSAudioSystem>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
TRIPSAudioSystemTransitPtr TRIPSAudioSystemBase::create(void)
{
    TRIPSAudioSystemTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<TRIPSAudioSystem>(tmpPtr);
    }

    return fc;
}

TRIPSAudioSystem *TRIPSAudioSystemBase::createEmptyLocal(BitVector bFlags)
{
    TRIPSAudioSystem *returnValue;

    newPtr<TRIPSAudioSystem>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
TRIPSAudioSystem *TRIPSAudioSystemBase::createEmpty(void)
{
    TRIPSAudioSystem *returnValue;

    newPtr<TRIPSAudioSystem>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr TRIPSAudioSystemBase::shallowCopyLocal(
    BitVector bFlags) const
{
    TRIPSAudioSystem *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TRIPSAudioSystem *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr TRIPSAudioSystemBase::shallowCopyDependent(
    BitVector bFlags) const
{
    TRIPSAudioSystem *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TRIPSAudioSystem *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr TRIPSAudioSystemBase::shallowCopy(void) const
{
    TRIPSAudioSystem *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const TRIPSAudioSystem *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

TRIPSAudioSystemBase::TRIPSAudioSystemBase(void) :
    Inherited(),
    _sfListenerposition       (Pnt3f(0.0f, 0.0f, 0.0f)),
    _sfListenerlookat         (),
    _sfListenerup             (),
    _sfListeneroffset         (),
    _sfUsevelocity            (bool(true)),
    _sfVelocity               (),
    _sfLastframetime          (),
    _sfLastlistenerposition   (Pnt3f(0.0f, 0.0f, 0.0f)),
    _mfSoundlist              (),
    _mfTimesoundlist          (),
    _sfReverbtype             (),
    _sfAudiotimer             (),
    _sfAudioinit              (bool(true)),
    _sfAudiomode              (UInt16(-1)),
    _sfAudiodriver            (),
    _sfSpeakermode            (),
    _sfInifilename            ()
{
}

TRIPSAudioSystemBase::TRIPSAudioSystemBase(const TRIPSAudioSystemBase &source) :
    Inherited(source),
    _sfListenerposition       (source._sfListenerposition       ),
    _sfListenerlookat         (source._sfListenerlookat         ),
    _sfListenerup             (source._sfListenerup             ),
    _sfListeneroffset         (source._sfListeneroffset         ),
    _sfUsevelocity            (source._sfUsevelocity            ),
    _sfVelocity               (source._sfVelocity               ),
    _sfLastframetime          (source._sfLastframetime          ),
    _sfLastlistenerposition   (source._sfLastlistenerposition   ),
    _mfSoundlist              (),
    _mfTimesoundlist          (),
    _sfReverbtype             (source._sfReverbtype             ),
    _sfAudiotimer             (source._sfAudiotimer             ),
    _sfAudioinit              (source._sfAudioinit              ),
    _sfAudiomode              (source._sfAudiomode              ),
    _sfAudiodriver            (source._sfAudiodriver            ),
    _sfSpeakermode            (source._sfSpeakermode            ),
    _sfInifilename            (source._sfInifilename            )
{
}


/*-------------------------- destructors ----------------------------------*/

TRIPSAudioSystemBase::~TRIPSAudioSystemBase(void)
{
}

void TRIPSAudioSystemBase::onCreate(const TRIPSAudioSystem *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        TRIPSAudioSystem *pThis = static_cast<TRIPSAudioSystem *>(this);

        MFUnrecTRIPSSoundPtr::const_iterator SoundlistIt  =
            source->_mfSoundlist.begin();
        MFUnrecTRIPSSoundPtr::const_iterator SoundlistEnd =
            source->_mfSoundlist.end  ();

        while(SoundlistIt != SoundlistEnd)
        {
            pThis->pushToSoundlist(*SoundlistIt);

            ++SoundlistIt;
        }

        MFUnrecTRIPSSoundPtr::const_iterator TimesoundlistIt  =
            source->_mfTimesoundlist.begin();
        MFUnrecTRIPSSoundPtr::const_iterator TimesoundlistEnd =
            source->_mfTimesoundlist.end  ();

        while(TimesoundlistIt != TimesoundlistEnd)
        {
            pThis->pushToTimesoundlist(*TimesoundlistIt);

            ++TimesoundlistIt;
        }
    }
}

GetFieldHandlePtr TRIPSAudioSystemBase::getHandleListenerposition (void) const
{
    SFPnt3f::GetHandlePtr returnValue(
        new  SFPnt3f::GetHandle(
             &_sfListenerposition,
             this->getType().getFieldDesc(ListenerpositionFieldId),
             const_cast<TRIPSAudioSystemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSAudioSystemBase::editHandleListenerposition(void)
{
    SFPnt3f::EditHandlePtr returnValue(
        new  SFPnt3f::EditHandle(
             &_sfListenerposition,
             this->getType().getFieldDesc(ListenerpositionFieldId),
             this));


    editSField(ListenerpositionFieldMask);

    return returnValue;
}

GetFieldHandlePtr TRIPSAudioSystemBase::getHandleListenerlookat  (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfListenerlookat,
             this->getType().getFieldDesc(ListenerlookatFieldId),
             const_cast<TRIPSAudioSystemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSAudioSystemBase::editHandleListenerlookat (void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfListenerlookat,
             this->getType().getFieldDesc(ListenerlookatFieldId),
             this));


    editSField(ListenerlookatFieldMask);

    return returnValue;
}

GetFieldHandlePtr TRIPSAudioSystemBase::getHandleListenerup      (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfListenerup,
             this->getType().getFieldDesc(ListenerupFieldId),
             const_cast<TRIPSAudioSystemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSAudioSystemBase::editHandleListenerup     (void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfListenerup,
             this->getType().getFieldDesc(ListenerupFieldId),
             this));


    editSField(ListenerupFieldMask);

    return returnValue;
}

GetFieldHandlePtr TRIPSAudioSystemBase::getHandleListeneroffset  (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfListeneroffset,
             this->getType().getFieldDesc(ListeneroffsetFieldId),
             const_cast<TRIPSAudioSystemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSAudioSystemBase::editHandleListeneroffset (void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfListeneroffset,
             this->getType().getFieldDesc(ListeneroffsetFieldId),
             this));


    editSField(ListeneroffsetFieldMask);

    return returnValue;
}

GetFieldHandlePtr TRIPSAudioSystemBase::getHandleUsevelocity     (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfUsevelocity,
             this->getType().getFieldDesc(UsevelocityFieldId),
             const_cast<TRIPSAudioSystemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSAudioSystemBase::editHandleUsevelocity    (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfUsevelocity,
             this->getType().getFieldDesc(UsevelocityFieldId),
             this));


    editSField(UsevelocityFieldMask);

    return returnValue;
}

GetFieldHandlePtr TRIPSAudioSystemBase::getHandleVelocity        (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfVelocity,
             this->getType().getFieldDesc(VelocityFieldId),
             const_cast<TRIPSAudioSystemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSAudioSystemBase::editHandleVelocity       (void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfVelocity,
             this->getType().getFieldDesc(VelocityFieldId),
             this));


    editSField(VelocityFieldMask);

    return returnValue;
}

GetFieldHandlePtr TRIPSAudioSystemBase::getHandleLastframetime   (void) const
{
    SFTime::GetHandlePtr returnValue(
        new  SFTime::GetHandle(
             &_sfLastframetime,
             this->getType().getFieldDesc(LastframetimeFieldId),
             const_cast<TRIPSAudioSystemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSAudioSystemBase::editHandleLastframetime  (void)
{
    SFTime::EditHandlePtr returnValue(
        new  SFTime::EditHandle(
             &_sfLastframetime,
             this->getType().getFieldDesc(LastframetimeFieldId),
             this));


    editSField(LastframetimeFieldMask);

    return returnValue;
}

GetFieldHandlePtr TRIPSAudioSystemBase::getHandleLastlistenerposition (void) const
{
    SFPnt3f::GetHandlePtr returnValue(
        new  SFPnt3f::GetHandle(
             &_sfLastlistenerposition,
             this->getType().getFieldDesc(LastlistenerpositionFieldId),
             const_cast<TRIPSAudioSystemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSAudioSystemBase::editHandleLastlistenerposition(void)
{
    SFPnt3f::EditHandlePtr returnValue(
        new  SFPnt3f::EditHandle(
             &_sfLastlistenerposition,
             this->getType().getFieldDesc(LastlistenerpositionFieldId),
             this));


    editSField(LastlistenerpositionFieldMask);

    return returnValue;
}

GetFieldHandlePtr TRIPSAudioSystemBase::getHandleSoundlist       (void) const
{
    MFUnrecTRIPSSoundPtr::GetHandlePtr returnValue(
        new  MFUnrecTRIPSSoundPtr::GetHandle(
             &_mfSoundlist,
             this->getType().getFieldDesc(SoundlistFieldId),
             const_cast<TRIPSAudioSystemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSAudioSystemBase::editHandleSoundlist      (void)
{
    MFUnrecTRIPSSoundPtr::EditHandlePtr returnValue(
        new  MFUnrecTRIPSSoundPtr::EditHandle(
             &_mfSoundlist,
             this->getType().getFieldDesc(SoundlistFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&TRIPSAudioSystem::pushToSoundlist,
                    static_cast<TRIPSAudioSystem *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&TRIPSAudioSystem::removeFromSoundlist,
                    static_cast<TRIPSAudioSystem *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&TRIPSAudioSystem::removeObjFromSoundlist,
                    static_cast<TRIPSAudioSystem *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&TRIPSAudioSystem::clearSoundlist,
                    static_cast<TRIPSAudioSystem *>(this)));

    editMField(SoundlistFieldMask, _mfSoundlist);

    return returnValue;
}

GetFieldHandlePtr TRIPSAudioSystemBase::getHandleTimesoundlist   (void) const
{
    MFUnrecTRIPSSoundPtr::GetHandlePtr returnValue(
        new  MFUnrecTRIPSSoundPtr::GetHandle(
             &_mfTimesoundlist,
             this->getType().getFieldDesc(TimesoundlistFieldId),
             const_cast<TRIPSAudioSystemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSAudioSystemBase::editHandleTimesoundlist  (void)
{
    MFUnrecTRIPSSoundPtr::EditHandlePtr returnValue(
        new  MFUnrecTRIPSSoundPtr::EditHandle(
             &_mfTimesoundlist,
             this->getType().getFieldDesc(TimesoundlistFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&TRIPSAudioSystem::pushToTimesoundlist,
                    static_cast<TRIPSAudioSystem *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&TRIPSAudioSystem::removeFromTimesoundlist,
                    static_cast<TRIPSAudioSystem *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&TRIPSAudioSystem::removeObjFromTimesoundlist,
                    static_cast<TRIPSAudioSystem *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&TRIPSAudioSystem::clearTimesoundlist,
                    static_cast<TRIPSAudioSystem *>(this)));

    editMField(TimesoundlistFieldMask, _mfTimesoundlist);

    return returnValue;
}

GetFieldHandlePtr TRIPSAudioSystemBase::getHandleReverbtype      (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfReverbtype,
             this->getType().getFieldDesc(ReverbtypeFieldId),
             const_cast<TRIPSAudioSystemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSAudioSystemBase::editHandleReverbtype     (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfReverbtype,
             this->getType().getFieldDesc(ReverbtypeFieldId),
             this));


    editSField(ReverbtypeFieldMask);

    return returnValue;
}

GetFieldHandlePtr TRIPSAudioSystemBase::getHandleAudiotimer      (void) const
{
    SFTime::GetHandlePtr returnValue(
        new  SFTime::GetHandle(
             &_sfAudiotimer,
             this->getType().getFieldDesc(AudiotimerFieldId),
             const_cast<TRIPSAudioSystemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSAudioSystemBase::editHandleAudiotimer     (void)
{
    SFTime::EditHandlePtr returnValue(
        new  SFTime::EditHandle(
             &_sfAudiotimer,
             this->getType().getFieldDesc(AudiotimerFieldId),
             this));


    editSField(AudiotimerFieldMask);

    return returnValue;
}

GetFieldHandlePtr TRIPSAudioSystemBase::getHandleAudioinit       (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfAudioinit,
             this->getType().getFieldDesc(AudioinitFieldId),
             const_cast<TRIPSAudioSystemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSAudioSystemBase::editHandleAudioinit      (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfAudioinit,
             this->getType().getFieldDesc(AudioinitFieldId),
             this));


    editSField(AudioinitFieldMask);

    return returnValue;
}

GetFieldHandlePtr TRIPSAudioSystemBase::getHandleAudiomode       (void) const
{
    SFUInt16::GetHandlePtr returnValue(
        new  SFUInt16::GetHandle(
             &_sfAudiomode,
             this->getType().getFieldDesc(AudiomodeFieldId),
             const_cast<TRIPSAudioSystemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSAudioSystemBase::editHandleAudiomode      (void)
{
    SFUInt16::EditHandlePtr returnValue(
        new  SFUInt16::EditHandle(
             &_sfAudiomode,
             this->getType().getFieldDesc(AudiomodeFieldId),
             this));


    editSField(AudiomodeFieldMask);

    return returnValue;
}

GetFieldHandlePtr TRIPSAudioSystemBase::getHandleAudiodriver     (void) const
{
    SFUInt16::GetHandlePtr returnValue(
        new  SFUInt16::GetHandle(
             &_sfAudiodriver,
             this->getType().getFieldDesc(AudiodriverFieldId),
             const_cast<TRIPSAudioSystemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSAudioSystemBase::editHandleAudiodriver    (void)
{
    SFUInt16::EditHandlePtr returnValue(
        new  SFUInt16::EditHandle(
             &_sfAudiodriver,
             this->getType().getFieldDesc(AudiodriverFieldId),
             this));


    editSField(AudiodriverFieldMask);

    return returnValue;
}

GetFieldHandlePtr TRIPSAudioSystemBase::getHandleSpeakermode     (void) const
{
    SFUInt16::GetHandlePtr returnValue(
        new  SFUInt16::GetHandle(
             &_sfSpeakermode,
             this->getType().getFieldDesc(SpeakermodeFieldId),
             const_cast<TRIPSAudioSystemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSAudioSystemBase::editHandleSpeakermode    (void)
{
    SFUInt16::EditHandlePtr returnValue(
        new  SFUInt16::EditHandle(
             &_sfSpeakermode,
             this->getType().getFieldDesc(SpeakermodeFieldId),
             this));


    editSField(SpeakermodeFieldMask);

    return returnValue;
}

GetFieldHandlePtr TRIPSAudioSystemBase::getHandleInifilename     (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfInifilename,
             this->getType().getFieldDesc(InifilenameFieldId),
             const_cast<TRIPSAudioSystemBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TRIPSAudioSystemBase::editHandleInifilename    (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfInifilename,
             this->getType().getFieldDesc(InifilenameFieldId),
             this));


    editSField(InifilenameFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void TRIPSAudioSystemBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    TRIPSAudioSystem *pThis = static_cast<TRIPSAudioSystem *>(this);

    pThis->execSync(static_cast<TRIPSAudioSystem *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *TRIPSAudioSystemBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    TRIPSAudioSystem *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const TRIPSAudioSystem *>(pRefAspect),
                  dynamic_cast<const TRIPSAudioSystem *>(this));

    return returnValue;
}
#endif

void TRIPSAudioSystemBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<TRIPSAudioSystem *>(this)->clearSoundlist();

    static_cast<TRIPSAudioSystem *>(this)->clearTimesoundlist();


}


OSG_END_NAMESPACE
