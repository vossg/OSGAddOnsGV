/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TRIPSAudioSystem
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGTRIPSAUDIOSYSTEMBASE_H_
#define _OSGTRIPSAUDIOSYSTEMBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGTRIPSDef.h"

//#include "OSGBaseTypes.h"

#include "OSGNodeCore.h" // Parent

#include "OSGVecFields.h"               // Listenerposition type
#include "OSGSysFields.h"               // Usevelocity type
#include "OSGBaseFields.h"              // Lastframetime type
#include "OSGTRIPSSoundFields.h"        // Soundlist type

#include "OSGTRIPSAudioSystemFields.h"

OSG_BEGIN_NAMESPACE


class TRIPSAudioSystem;

//! \brief TRIPSAudioSystem Base Class.

class OSG_TRIPS_DLLMAPPING TRIPSAudioSystemBase : public NodeCore
{
  public:

    typedef NodeCore Inherited;
    typedef NodeCore ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(TRIPSAudioSystem);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        ListenerpositionFieldId = Inherited::NextFieldId,
        ListenerlookatFieldId = ListenerpositionFieldId + 1,
        ListenerupFieldId = ListenerlookatFieldId + 1,
        ListeneroffsetFieldId = ListenerupFieldId + 1,
        UsevelocityFieldId = ListeneroffsetFieldId + 1,
        VelocityFieldId = UsevelocityFieldId + 1,
        LastframetimeFieldId = VelocityFieldId + 1,
        LastlistenerpositionFieldId = LastframetimeFieldId + 1,
        SoundlistFieldId = LastlistenerpositionFieldId + 1,
        TimesoundlistFieldId = SoundlistFieldId + 1,
        ReverbtypeFieldId = TimesoundlistFieldId + 1,
        AudiotimerFieldId = ReverbtypeFieldId + 1,
        AudioinitFieldId = AudiotimerFieldId + 1,
        AudiomodeFieldId = AudioinitFieldId + 1,
        AudiodriverFieldId = AudiomodeFieldId + 1,
        SpeakermodeFieldId = AudiodriverFieldId + 1,
        InifilenameFieldId = SpeakermodeFieldId + 1,
        NextFieldId = InifilenameFieldId + 1
    };

    static const OSG::BitVector ListenerpositionFieldMask =
        (TypeTraits<BitVector>::One << ListenerpositionFieldId);
    static const OSG::BitVector ListenerlookatFieldMask =
        (TypeTraits<BitVector>::One << ListenerlookatFieldId);
    static const OSG::BitVector ListenerupFieldMask =
        (TypeTraits<BitVector>::One << ListenerupFieldId);
    static const OSG::BitVector ListeneroffsetFieldMask =
        (TypeTraits<BitVector>::One << ListeneroffsetFieldId);
    static const OSG::BitVector UsevelocityFieldMask =
        (TypeTraits<BitVector>::One << UsevelocityFieldId);
    static const OSG::BitVector VelocityFieldMask =
        (TypeTraits<BitVector>::One << VelocityFieldId);
    static const OSG::BitVector LastframetimeFieldMask =
        (TypeTraits<BitVector>::One << LastframetimeFieldId);
    static const OSG::BitVector LastlistenerpositionFieldMask =
        (TypeTraits<BitVector>::One << LastlistenerpositionFieldId);
    static const OSG::BitVector SoundlistFieldMask =
        (TypeTraits<BitVector>::One << SoundlistFieldId);
    static const OSG::BitVector TimesoundlistFieldMask =
        (TypeTraits<BitVector>::One << TimesoundlistFieldId);
    static const OSG::BitVector ReverbtypeFieldMask =
        (TypeTraits<BitVector>::One << ReverbtypeFieldId);
    static const OSG::BitVector AudiotimerFieldMask =
        (TypeTraits<BitVector>::One << AudiotimerFieldId);
    static const OSG::BitVector AudioinitFieldMask =
        (TypeTraits<BitVector>::One << AudioinitFieldId);
    static const OSG::BitVector AudiomodeFieldMask =
        (TypeTraits<BitVector>::One << AudiomodeFieldId);
    static const OSG::BitVector AudiodriverFieldMask =
        (TypeTraits<BitVector>::One << AudiodriverFieldId);
    static const OSG::BitVector SpeakermodeFieldMask =
        (TypeTraits<BitVector>::One << SpeakermodeFieldId);
    static const OSG::BitVector InifilenameFieldMask =
        (TypeTraits<BitVector>::One << InifilenameFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFPnt3f           SFListenerpositionType;
    typedef SFVec3f           SFListenerlookatType;
    typedef SFVec3f           SFListenerupType;
    typedef SFVec3f           SFListeneroffsetType;
    typedef SFBool            SFUsevelocityType;
    typedef SFVec3f           SFVelocityType;
    typedef SFTime            SFLastframetimeType;
    typedef SFPnt3f           SFLastlistenerpositionType;
    typedef MFUnrecTRIPSSoundPtr MFSoundlistType;
    typedef MFUnrecTRIPSSoundPtr MFTimesoundlistType;
    typedef SFInt32           SFReverbtypeType;
    typedef SFTime            SFAudiotimerType;
    typedef SFBool            SFAudioinitType;
    typedef SFUInt16          SFAudiomodeType;
    typedef SFUInt16          SFAudiodriverType;
    typedef SFUInt16          SFSpeakermodeType;
    typedef SFString          SFInifilenameType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFPnt3f             *editSFListenerposition(void);
            const SFPnt3f             *getSFListenerposition (void) const;

                  SFVec3f             *editSFListenerlookat (void);
            const SFVec3f             *getSFListenerlookat  (void) const;

                  SFVec3f             *editSFListenerup     (void);
            const SFVec3f             *getSFListenerup      (void) const;

                  SFVec3f             *editSFListeneroffset (void);
            const SFVec3f             *getSFListeneroffset  (void) const;

                  SFBool              *editSFUsevelocity    (void);
            const SFBool              *getSFUsevelocity     (void) const;

                  SFVec3f             *editSFVelocity       (void);
            const SFVec3f             *getSFVelocity        (void) const;

                  SFTime              *editSFLastframetime  (void);
            const SFTime              *getSFLastframetime   (void) const;

                  SFPnt3f             *editSFLastlistenerposition(void);
            const SFPnt3f             *getSFLastlistenerposition (void) const;
            const MFUnrecTRIPSSoundPtr *getMFSoundlist      (void) const;
                  MFUnrecTRIPSSoundPtr *editMFSoundlist      (void);
            const MFUnrecTRIPSSoundPtr *getMFTimesoundlist  (void) const;
                  MFUnrecTRIPSSoundPtr *editMFTimesoundlist  (void);

                  SFInt32             *editSFReverbtype     (void);
            const SFInt32             *getSFReverbtype      (void) const;

                  SFTime              *editSFAudiotimer     (void);
            const SFTime              *getSFAudiotimer      (void) const;

                  SFBool              *editSFAudioinit      (void);
            const SFBool              *getSFAudioinit       (void) const;

                  SFUInt16            *editSFAudiomode      (void);
            const SFUInt16            *getSFAudiomode       (void) const;

                  SFUInt16            *editSFAudiodriver    (void);
            const SFUInt16            *getSFAudiodriver     (void) const;

                  SFUInt16            *editSFSpeakermode    (void);
            const SFUInt16            *getSFSpeakermode     (void) const;

                  SFString            *editSFInifilename    (void);
            const SFString            *getSFInifilename     (void) const;


                  Pnt3f               &editListenerposition(void);
            const Pnt3f               &getListenerposition (void) const;

                  Vec3f               &editListenerlookat (void);
            const Vec3f               &getListenerlookat  (void) const;

                  Vec3f               &editListenerup     (void);
            const Vec3f               &getListenerup      (void) const;

                  Vec3f               &editListeneroffset (void);
            const Vec3f               &getListeneroffset  (void) const;

                  bool                &editUsevelocity    (void);
                  bool                 getUsevelocity     (void) const;

                  Vec3f               &editVelocity       (void);
            const Vec3f               &getVelocity        (void) const;

                  Time                &editLastframetime  (void);
            const Time                &getLastframetime   (void) const;

                  Pnt3f               &editLastlistenerposition(void);
            const Pnt3f               &getLastlistenerposition (void) const;

                  TRIPSSound * getSoundlist      (const UInt32 index) const;

                  TRIPSSound * getTimesoundlist  (const UInt32 index) const;

                  Int32               &editReverbtype     (void);
                  Int32                getReverbtype      (void) const;

                  Time                &editAudiotimer     (void);
            const Time                &getAudiotimer      (void) const;

                  bool                &editAudioinit      (void);
                  bool                 getAudioinit       (void) const;

                  UInt16              &editAudiomode      (void);
                  UInt16               getAudiomode       (void) const;

                  UInt16              &editAudiodriver    (void);
                  UInt16               getAudiodriver     (void) const;

                  UInt16              &editSpeakermode    (void);
                  UInt16               getSpeakermode     (void) const;

                  std::string         &editInifilename    (void);
            const std::string         &getInifilename     (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setListenerposition(const Pnt3f &value);
            void setListenerlookat (const Vec3f &value);
            void setListenerup     (const Vec3f &value);
            void setListeneroffset (const Vec3f &value);
            void setUsevelocity    (const bool value);
            void setVelocity       (const Vec3f &value);
            void setLastframetime  (const Time &value);
            void setLastlistenerposition(const Pnt3f &value);
            void setReverbtype     (const Int32 value);
            void setAudiotimer     (const Time &value);
            void setAudioinit      (const bool value);
            void setAudiomode      (const UInt16 value);
            void setAudiodriver    (const UInt16 value);
            void setSpeakermode    (const UInt16 value);
            void setInifilename    (const std::string &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    void pushToSoundlist           (TRIPSSound * const value   );
    void assignSoundlist          (const MFUnrecTRIPSSoundPtr &value);
    void removeFromSoundlist (UInt32               uiIndex );
    void removeObjFromSoundlist(TRIPSSound * const value   );
    void clearSoundlist             (void                         );

    void pushToTimesoundlist           (TRIPSSound * const value   );
    void assignTimesoundlist          (const MFUnrecTRIPSSoundPtr &value);
    void removeFromTimesoundlist (UInt32               uiIndex );
    void removeObjFromTimesoundlist(TRIPSSound * const value   );
    void clearTimesoundlist            (void                         );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual SizeT  getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  TRIPSAudioSystemTransitPtr  create          (void);
    static  TRIPSAudioSystem           *createEmpty     (void);

    static  TRIPSAudioSystemTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  TRIPSAudioSystem            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  TRIPSAudioSystemTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFPnt3f           _sfListenerposition;
    SFVec3f           _sfListenerlookat;
    SFVec3f           _sfListenerup;
    SFVec3f           _sfListeneroffset;
    SFBool            _sfUsevelocity;
    SFVec3f           _sfVelocity;
    SFTime            _sfLastframetime;
    SFPnt3f           _sfLastlistenerposition;
    MFUnrecTRIPSSoundPtr _mfSoundlist;
    MFUnrecTRIPSSoundPtr _mfTimesoundlist;
    SFInt32           _sfReverbtype;
    SFTime            _sfAudiotimer;
    SFBool            _sfAudioinit;
    SFUInt16          _sfAudiomode;
    SFUInt16          _sfAudiodriver;
    SFUInt16          _sfSpeakermode;
    SFString          _sfInifilename;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    TRIPSAudioSystemBase(void);
    TRIPSAudioSystemBase(const TRIPSAudioSystemBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~TRIPSAudioSystemBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const TRIPSAudioSystem *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

     GetFieldHandlePtr  getHandleListenerposition (void) const;
     EditFieldHandlePtr editHandleListenerposition(void);
     GetFieldHandlePtr  getHandleListenerlookat  (void) const;
     EditFieldHandlePtr editHandleListenerlookat (void);
     GetFieldHandlePtr  getHandleListenerup      (void) const;
     EditFieldHandlePtr editHandleListenerup     (void);
     GetFieldHandlePtr  getHandleListeneroffset  (void) const;
     EditFieldHandlePtr editHandleListeneroffset (void);
     GetFieldHandlePtr  getHandleUsevelocity     (void) const;
     EditFieldHandlePtr editHandleUsevelocity    (void);
     GetFieldHandlePtr  getHandleVelocity        (void) const;
     EditFieldHandlePtr editHandleVelocity       (void);
     GetFieldHandlePtr  getHandleLastframetime   (void) const;
     EditFieldHandlePtr editHandleLastframetime  (void);
     GetFieldHandlePtr  getHandleLastlistenerposition (void) const;
     EditFieldHandlePtr editHandleLastlistenerposition(void);
     GetFieldHandlePtr  getHandleSoundlist       (void) const;
     EditFieldHandlePtr editHandleSoundlist      (void);
     GetFieldHandlePtr  getHandleTimesoundlist   (void) const;
     EditFieldHandlePtr editHandleTimesoundlist  (void);
     GetFieldHandlePtr  getHandleReverbtype      (void) const;
     EditFieldHandlePtr editHandleReverbtype     (void);
     GetFieldHandlePtr  getHandleAudiotimer      (void) const;
     EditFieldHandlePtr editHandleAudiotimer     (void);
     GetFieldHandlePtr  getHandleAudioinit       (void) const;
     EditFieldHandlePtr editHandleAudioinit      (void);
     GetFieldHandlePtr  getHandleAudiomode       (void) const;
     EditFieldHandlePtr editHandleAudiomode      (void);
     GetFieldHandlePtr  getHandleAudiodriver     (void) const;
     EditFieldHandlePtr editHandleAudiodriver    (void);
     GetFieldHandlePtr  getHandleSpeakermode     (void) const;
     EditFieldHandlePtr editHandleSpeakermode    (void);
     GetFieldHandlePtr  getHandleInifilename     (void) const;
     EditFieldHandlePtr editHandleInifilename    (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      TRIPSAudioSystemBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const TRIPSAudioSystemBase &source);
};

typedef TRIPSAudioSystemBase *TRIPSAudioSystemBaseP;

OSG_END_NAMESPACE

#endif /* _OSGTRIPSAUDIOSYSTEMBASE_H_ */
