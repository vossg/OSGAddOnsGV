// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGBase_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "StatElemDescBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct StatElemDescBase_wrapper : OSG::StatElemDescBase, bp::wrapper< OSG::StatElemDescBase > {

    StatElemDescBase_wrapper(::OSG::Char8 const * name, ::OSG::Char8 const * description, ::OSG::StatElemDescBase::ResetMode reset=::OSG::StatElemDescBase::RESET_DRAW )
    : OSG::StatElemDescBase( name, description, reset )
      , bp::wrapper< OSG::StatElemDescBase >(){
        // constructor
    
    }

    virtual ::OSG::StatElem * createElem(  ){
        bp::override func_createElem = this->get_override( "createElem" );
        return func_createElem(  );
    }

};

void register_StatElemDescBase_class(){

    { //::OSG::StatElemDescBase
        typedef bp::class_< StatElemDescBase_wrapper, boost::noncopyable > StatElemDescBase_exposer_t;
        StatElemDescBase_exposer_t StatElemDescBase_exposer = StatElemDescBase_exposer_t( "StatElemDescBase", bp::init< OSG::Char8 const *, OSG::Char8 const *, bp::optional< OSG::StatElemDescBase::ResetMode > >(( bp::arg("name"), bp::arg("description"), bp::arg("reset")=(long)(::OSG::StatElemDescBase::RESET_DRAW) )) );
        bp::scope StatElemDescBase_scope( StatElemDescBase_exposer );
        bp::enum_< OSG::StatElemDescBase::ResetMode>("ResetMode")
            .value("RESET_NEVER", OSG::StatElemDescBase::RESET_NEVER)
            .value("RESET_DRAW", OSG::StatElemDescBase::RESET_DRAW)
            .value("RESET_ALWAYS", OSG::StatElemDescBase::RESET_ALWAYS)
            .export_values()
            ;
        { //::OSG::StatElemDescBase::getDesc
        
            typedef ::OSG::StatElemDescBase * ( *getDesc_function_type )( ::OSG::Int32 );
            
            StatElemDescBase_exposer.def( 
                "getDesc"
                , getDesc_function_type( &::OSG::StatElemDescBase::getDesc )
                , ( bp::arg("descId") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::StatElemDescBase::getDescription
        
            typedef ::std::string const & ( ::OSG::StatElemDescBase::*getDescription_function_type )(  ) ;
            
            StatElemDescBase_exposer.def( 
                "getDescription"
                , getDescription_function_type( &::OSG::StatElemDescBase::getDescription )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::StatElemDescBase::getID
        
            typedef ::OSG::Int32 ( ::OSG::StatElemDescBase::*getID_function_type )(  ) ;
            
            StatElemDescBase_exposer.def( 
                "getID"
                , getID_function_type( &::OSG::StatElemDescBase::getID ) );
        
        }
        { //::OSG::StatElemDescBase::getName
        
            typedef ::std::string const & ( ::OSG::StatElemDescBase::*getName_function_type )(  ) ;
            
            StatElemDescBase_exposer.def( 
                "getName"
                , getName_function_type( &::OSG::StatElemDescBase::getName )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::StatElemDescBase::getNumOfDescs
        
            typedef ::OSG::UInt32 ( *getNumOfDescs_function_type )(  );
            
            StatElemDescBase_exposer.def( 
                "getNumOfDescs"
                , getNumOfDescs_function_type( &::OSG::StatElemDescBase::getNumOfDescs ) );
        
        }
        { //::OSG::StatElemDescBase::getResetMode
        
            typedef ::OSG::StatElemDescBase::ResetMode ( ::OSG::StatElemDescBase::*getResetMode_function_type )(  ) const;
            
            StatElemDescBase_exposer.def( 
                "getResetMode"
                , getResetMode_function_type( &::OSG::StatElemDescBase::getResetMode ) );
        
        }
        { //::OSG::StatElemDescBase::isValidID
        
            typedef bool ( *isValidID_function_type )( ::OSG::Int32 );
            
            StatElemDescBase_exposer.def( 
                "isValidID"
                , isValidID_function_type( &::OSG::StatElemDescBase::isValidID )
                , ( bp::arg("descId") ) );
        
        }
        { //::OSG::StatElemDescBase::print
        
            typedef void ( ::OSG::StatElemDescBase::*print_function_type )(  ) ;
            
            StatElemDescBase_exposer.def( 
                "print"
                , print_function_type( &::OSG::StatElemDescBase::print ) );
        
        }
        { //::OSG::StatElemDescBase::printAll
        
            typedef void ( *printAll_function_type )(  );
            
            StatElemDescBase_exposer.def( 
                "printAll"
                , printAll_function_type( &::OSG::StatElemDescBase::printAll ) );
        
        }
        StatElemDescBase_exposer.staticmethod( "getDesc" );
        StatElemDescBase_exposer.staticmethod( "getNumOfDescs" );
        StatElemDescBase_exposer.staticmethod( "isValidID" );
        StatElemDescBase_exposer.staticmethod( "printAll" );
    }

}
