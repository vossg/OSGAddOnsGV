// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGBase_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "FieldContainerType.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_FieldContainerType_class(){

    { //::OSG::FieldContainerType
        typedef bp::class_< OSG::FieldContainerType, bp::bases< OSG::ReflexiveContainerType >, boost::noncopyable > FieldContainerType_exposer_t;
        FieldContainerType_exposer_t FieldContainerType_exposer = FieldContainerType_exposer_t( "FieldContainerType", bp::no_init );
        bp::scope FieldContainerType_scope( FieldContainerType_exposer );
        { //::OSG::FieldContainerType::createContainer
        
            typedef ::OSG::FieldContainerTransitPtr ( ::OSG::FieldContainerType::*createContainer_function_type )(  ) const;
            
            FieldContainerType_exposer.def( 
                "createContainer"
                , createContainer_function_type( &::OSG::FieldContainerType::createContainer ) );
        
        }
        { //::OSG::FieldContainerType::createLocalContainer
        
            typedef ::OSG::FieldContainerTransitPtr ( ::OSG::FieldContainerType::*createLocalContainer_function_type )( long unsigned int const ) const;
            
            FieldContainerType_exposer.def( 
                "createLocalContainer"
                , createLocalContainer_function_type( &::OSG::FieldContainerType::createLocalContainer )
                , ( bp::arg("lFlags") ) );
        
        }
        { //::OSG::FieldContainerType::dump
        
            typedef void ( ::OSG::FieldContainerType::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            FieldContainerType_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::FieldContainerType::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::FieldContainerType::getDocumentation
        
            typedef ::std::string ( ::OSG::FieldContainerType::*getDocumentation_function_type )(  ) const;
            
            FieldContainerType_exposer.def( 
                "getDocumentation"
                , getDocumentation_function_type( &::OSG::FieldContainerType::getDocumentation ) );
        
        }
        { //::OSG::FieldContainerType::getFcdXML
        
            typedef ::std::string ( ::OSG::FieldContainerType::*getFcdXML_function_type )(  ) const;
            
            FieldContainerType_exposer.def( 
                "getFcdXML"
                , getFcdXML_function_type( &::OSG::FieldContainerType::getFcdXML ) );
        
        }
        { //::OSG::FieldContainerType::getPrototype
        
            typedef ::OSG::FieldContainer * ( ::OSG::FieldContainerType::*getPrototype_function_type )(  ) const;
            
            FieldContainerType_exposer.def( 
                "getPrototype"
                , getPrototype_function_type( &::OSG::FieldContainerType::getPrototype )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FieldContainerType::isAbstract
        
            typedef bool ( ::OSG::FieldContainerType::*isAbstract_function_type )(  ) const;
            
            FieldContainerType_exposer.def( 
                "isAbstract"
                , isAbstract_function_type( &::OSG::FieldContainerType::isAbstract ) );
        
        }
        { //::OSG::FieldContainerType::isAttachment
        
            typedef bool ( ::OSG::FieldContainerType::*isAttachment_function_type )(  ) const;
            
            FieldContainerType_exposer.def( 
                "isAttachment"
                , isAttachment_function_type( &::OSG::FieldContainerType::isAttachment ) );
        
        }
        { //::OSG::FieldContainerType::isNode
        
            typedef bool ( ::OSG::FieldContainerType::*isNode_function_type )(  ) const;
            
            FieldContainerType_exposer.def( 
                "isNode"
                , isNode_function_type( &::OSG::FieldContainerType::isNode ) );
        
        }
        { //::OSG::FieldContainerType::markFieldsClusterLocal
        
            typedef void ( ::OSG::FieldContainerType::*markFieldsClusterLocal_function_type )( long unsigned int const ) ;
            
            FieldContainerType_exposer.def( 
                "markFieldsClusterLocal"
                , markFieldsClusterLocal_function_type( &::OSG::FieldContainerType::markFieldsClusterLocal )
                , ( bp::arg("bvFieldMasks") ) );
        
        }
        { //::OSG::FieldContainerType::markFieldsThreadLocal
        
            typedef void ( ::OSG::FieldContainerType::*markFieldsThreadLocal_function_type )( long unsigned int const ) ;
            
            FieldContainerType_exposer.def( 
                "markFieldsThreadLocal"
                , markFieldsThreadLocal_function_type( &::OSG::FieldContainerType::markFieldsThreadLocal )
                , ( bp::arg("bvFieldMasks") ) );
        
        }
        { //::OSG::FieldContainerType::setPrototype
        
            typedef bool ( ::OSG::FieldContainerType::*setPrototype_function_type )( ::OSG::FieldContainer * ) ;
            
            FieldContainerType_exposer.def( 
                "setPrototype"
                , setPrototype_function_type( &::OSG::FieldContainerType::setPrototype )
                , ( bp::arg("pPrototype") ) );
        
        }
        { //::OSG::FieldContainerType::unmarkFieldsClusterLocal
        
            typedef void ( ::OSG::FieldContainerType::*unmarkFieldsClusterLocal_function_type )( long unsigned int const ) ;
            
            FieldContainerType_exposer.def( 
                "unmarkFieldsClusterLocal"
                , unmarkFieldsClusterLocal_function_type( &::OSG::FieldContainerType::unmarkFieldsClusterLocal )
                , ( bp::arg("bvFieldMasks") ) );
        
        }
        { //::OSG::FieldContainerType::unmarkFieldsThreadLocal
        
            typedef void ( ::OSG::FieldContainerType::*unmarkFieldsThreadLocal_function_type )( long unsigned int const ) ;
            
            FieldContainerType_exposer.def( 
                "unmarkFieldsThreadLocal"
                , unmarkFieldsThreadLocal_function_type( &::OSG::FieldContainerType::unmarkFieldsThreadLocal )
                , ( bp::arg("bvFieldMasks") ) );
        
        }
    }

}
