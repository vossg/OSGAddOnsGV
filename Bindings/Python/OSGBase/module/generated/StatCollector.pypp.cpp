// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGBase_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "StatCollector.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct StatCollector_wrapper : OSG::StatCollector, bp::wrapper< OSG::StatCollector > {

    void addRef(  ){
        OSG::MemoryObject::addRef(  );
    }

    void addReferenceUnrecorded(  ){
        OSG::MemoryObject::addReferenceUnrecorded(  );
    }

    ::OSG::Int32 getRefCount(  ){
        return OSG::MemoryObject::getRefCount(  );
    }

    void subRef(  ){
        OSG::MemoryObject::subRef(  );
    }

    void subReferenceUnrecorded(  ){
        OSG::MemoryObject::subReferenceUnrecorded(  );
    }

};

void register_StatCollector_class(){

    { //::OSG::StatCollector
        typedef bp::class_< StatCollector_wrapper, bp::bases< OSG::MemoryObject >, boost::noncopyable > StatCollector_exposer_t;
        StatCollector_exposer_t StatCollector_exposer = StatCollector_exposer_t( "StatCollector" );
        bp::scope StatCollector_scope( StatCollector_exposer );
        { //::OSG::StatCollector::clearElems
        
            typedef void ( ::OSG::StatCollector::*clearElems_function_type )(  ) ;
            
            StatCollector_exposer.def( 
                "clearElems"
                , clearElems_function_type( &::OSG::StatCollector::clearElems ) );
        
        }
        { //::OSG::StatCollector::create
        
            typedef ::OSG::StatCollector * ( *create_function_type )(  );
            
            StatCollector_exposer.def( 
                "create"
                , create_function_type( &::OSG::StatCollector::create )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::StatCollector::getFromCString
        
            typedef bool ( ::OSG::StatCollector::*getFromCString_function_type )( ::OSG::Char8 const * & ) ;
            
            StatCollector_exposer.def( 
                "getFromCString"
                , getFromCString_function_type( &::OSG::StatCollector::getFromCString )
                , ( bp::arg("inVal") ) );
        
        }
        { //::OSG::StatCollector::getNumOfElems
        
            typedef ::OSG::UInt32 ( ::OSG::StatCollector::*getNumOfElems_function_type )(  ) const;
            
            StatCollector_exposer.def( 
                "getNumOfElems"
                , getNumOfElems_function_type( &::OSG::StatCollector::getNumOfElems ) );
        
        }
        { //::OSG::StatCollector::isValidID
        
            typedef bool ( ::OSG::StatCollector::*isValidID_function_type )( ::OSG::Int32 ) const;
            
            StatCollector_exposer.def( 
                "isValidID"
                , isValidID_function_type( &::OSG::StatCollector::isValidID )
                , ( bp::arg("elemId") ) );
        
        }
        { //::OSG::StatCollector::putToString
        
            typedef void ( ::OSG::StatCollector::*putToString_function_type )( ::std::string & ) const;
            
            StatCollector_exposer.def( 
                "putToString"
                , putToString_function_type( &::OSG::StatCollector::putToString )
                , ( bp::arg("outVal") ) );
        
        }
        { //::OSG::StatCollector::refitElemNum
        
            typedef void ( ::OSG::StatCollector::*refitElemNum_function_type )(  ) ;
            
            StatCollector_exposer.def( 
                "refitElemNum"
                , refitElemNum_function_type( &::OSG::StatCollector::refitElemNum ) );
        
        }
        { //::OSG::MemoryObject::addRef
        
            typedef void ( StatCollector_wrapper::*addRef_function_type )(  ) ;
            
            StatCollector_exposer.def( 
                "addRef"
                , addRef_function_type( &StatCollector_wrapper::addRef ) );
        
        }
        { //::OSG::MemoryObject::addReferenceUnrecorded
        
            typedef void ( StatCollector_wrapper::*addReferenceUnrecorded_function_type )(  ) ;
            
            StatCollector_exposer.def( 
                "addReferenceUnrecorded"
                , addReferenceUnrecorded_function_type( &StatCollector_wrapper::addReferenceUnrecorded ) );
        
        }
        { //::OSG::MemoryObject::getRefCount
        
            typedef ::OSG::Int32 ( StatCollector_wrapper::*getRefCount_function_type )(  ) ;
            
            StatCollector_exposer.def( 
                "getRefCount"
                , getRefCount_function_type( &StatCollector_wrapper::getRefCount ) );
        
        }
        { //::OSG::MemoryObject::subRef
        
            typedef void ( StatCollector_wrapper::*subRef_function_type )(  ) ;
            
            StatCollector_exposer.def( 
                "subRef"
                , subRef_function_type( &StatCollector_wrapper::subRef ) );
        
        }
        { //::OSG::MemoryObject::subReferenceUnrecorded
        
            typedef void ( StatCollector_wrapper::*subReferenceUnrecorded_function_type )(  ) ;
            
            StatCollector_exposer.def( 
                "subReferenceUnrecorded"
                , subReferenceUnrecorded_function_type( &StatCollector_wrapper::subReferenceUnrecorded ) );
        
        }
        StatCollector_exposer.staticmethod( "create" );
    }

}
