// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGBase_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "Node.pypp.hpp"

using namespace std;
namespace bp = boost::python;

boost::python::list Node_getMFChildren(OSG::Node *self)
{
   boost::python::list result;
   OSG::MFUnrecChildNodePtr const * mf_data = self->getMFChildren();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append(OSG::Node::ObjRecPtr((*mf_data)[i]));
   }
   return result;
}

namespace
{

bp::list getChildren(OSG::Node* node)
{
   bp::list children;

   OSG::UInt32 num_children(node->getNChildren());
   for ( OSG::UInt32 i = 0; i < num_children; ++i )
   {
      children.append(OSG::Node::ObjTransitPtr(node->getChild(i)));
   }

   return children;
}

}

void register_Node_class(){

    { //::OSG::Node
        typedef bp::class_< OSG::Node, bp::bases< OSG::AttachmentContainer >, OSG::Node::ObjRecPtr, boost::noncopyable > Node_exposer_t;
        Node_exposer_t Node_exposer = Node_exposer_t( "Node", bp::no_init );
        bp::scope Node_scope( Node_exposer );
        { //::OSG::Node::addChild
        
            typedef void ( ::OSG::Node::*addChild_function_type )( ::OSG::Node * const ) ;
            
            Node_exposer.def( 
                "addChild"
                , addChild_function_type( &::OSG::Node::addChild )
                , ( bp::arg("childP") ) );
        
        }
        { //::OSG::Node::addChild
        
            typedef void ( ::OSG::Node::*addChild_function_type )( ::OSG::NodeTransitPtr ) ;
            
            Node_exposer.def( 
                "addChild"
                , addChild_function_type( &::OSG::Node::addChild )
                , ( bp::arg("childP") ) );
        
        }
        { //::OSG::Node::changed
        
            typedef void ( ::OSG::Node::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            Node_exposer.def( 
                "changed"
                , changed_function_type( &::OSG::Node::changed )
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("details") ) );
        
        }
        { //::OSG::Node::clearChildren
        
            typedef void ( ::OSG::Node::*clearChildren_function_type )(  ) ;
            
            Node_exposer.def( 
                "clearChildren"
                , clearChildren_function_type( &::OSG::Node::clearChildren ) );
        
        }
        { //::OSG::Node::copyFromBin
        
            typedef void ( ::OSG::Node::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            Node_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::Node::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::Node::copyToBin
        
            typedef void ( ::OSG::Node::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            Node_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::Node::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::Node::create
        
            typedef ::OSG::TransitPtr< OSG::Node > ( *create_function_type )(  );
            
            Node_exposer.def( 
                "create"
                , create_function_type( &::OSG::Node::create ) );
        
        }
        { //::OSG::Node::createDependent
        
            typedef ::OSG::TransitPtr< OSG::Node > ( *createDependent_function_type )( ::OSG::BitVector );
            
            Node_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::Node::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::Node::createLocal
        
            typedef ::OSG::TransitPtr< OSG::Node > ( *createLocal_function_type )( ::OSG::BitVector );
            
            Node_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::Node::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::Node::dump
        
            typedef void ( ::OSG::Node::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            Node_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::Node::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::Node::findChild
        
            typedef ::OSG::Int32 ( ::OSG::Node::*findChild_function_type )( ::OSG::Node * const ) const;
            
            Node_exposer.def( 
                "findChild"
                , findChild_function_type( &::OSG::Node::findChild )
                , ( bp::arg("childP") ) );
        
        }
        { //::OSG::Node::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::Node::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            Node_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::Node::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::Node::getChild
        
            typedef ::OSG::Node * ( ::OSG::Node::*getChild_function_type )( ::OSG::UInt32 ) const;
            
            Node_exposer.def( 
                "getChild"
                , getChild_function_type( &::OSG::Node::getChild )
                , ( bp::arg("childIndex") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Node::getClassGroupId
        
            typedef ::OSG::UInt32 ( *getClassGroupId_function_type )(  );
            
            Node_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::Node::getClassGroupId ) );
        
        }
        { //::OSG::Node::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            Node_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::Node::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::Node::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            Node_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::Node::getClassTypeId ) );
        
        }
        { //::OSG::Node::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::Node::*getContainerSize_function_type )(  ) const;
            
            Node_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::Node::getContainerSize ) );
        
        }
        { //::OSG::Node::getCore
        
            typedef ::OSG::NodeCore * ( ::OSG::Node::*getCore_function_type )(  ) const;
            
            Node_exposer.def( 
                "getCore"
                , getCore_function_type( &::OSG::Node::getCore )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Node::getNChildren
        
            typedef ::OSG::UInt32 ( ::OSG::Node::*getNChildren_function_type )(  ) const;
            
            Node_exposer.def( 
                "getNChildren"
                , getNChildren_function_type( &::OSG::Node::getNChildren ) );
        
        }
        { //::OSG::Node::getParent
        
            typedef ::OSG::Node * ( ::OSG::Node::*getParent_function_type )(  ) ;
            
            Node_exposer.def( 
                "getParent"
                , getParent_function_type( &::OSG::Node::getParent )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Node::getSFCore
        
            typedef ::OSG::SFUnrecChildNodeCorePtr const * ( ::OSG::Node::*getSFCore_function_type )(  ) const;
            
            Node_exposer.def( 
                "getSFCore"
                , getSFCore_function_type( &::OSG::Node::getSFCore )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Node::getSFParent
        
            typedef ::OSG::SFParentNodePtr const * ( ::OSG::Node::*getSFParent_function_type )(  ) const;
            
            Node_exposer.def( 
                "getSFParent"
                , getSFParent_function_type( &::OSG::Node::getSFParent )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Node::getSFTravMask
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::Node::*getSFTravMask_function_type )(  ) const;
            
            Node_exposer.def( 
                "getSFTravMask"
                , getSFTravMask_function_type( &::OSG::Node::getSFTravMask )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Node::getSFVolume
        
            typedef ::OSG::SFBoxVolume const * ( ::OSG::Node::*getSFVolume_function_type )(  ) const;
            
            Node_exposer.def( 
                "getSFVolume"
                , getSFVolume_function_type( &::OSG::Node::getSFVolume )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Node::getToWorld
        
            typedef ::OSG::Matrix ( ::OSG::Node::*getToWorld_function_type )(  ) ;
            
            Node_exposer.def( 
                "getToWorld"
                , getToWorld_function_type( &::OSG::Node::getToWorld ) );
        
        }
        { //::OSG::Node::getToWorld
        
            typedef void ( ::OSG::Node::*getToWorld_function_type )( ::OSG::Matrix & ) ;
            
            Node_exposer.def( 
                "getToWorld"
                , getToWorld_function_type( &::OSG::Node::getToWorld )
                , ( bp::arg("result") ) );
        
        }
        { //::OSG::Node::getTravMask
        
            typedef ::OSG::UInt32 ( ::OSG::Node::*getTravMask_function_type )(  ) const;
            
            Node_exposer.def( 
                "getTravMask"
                , getTravMask_function_type( &::OSG::Node::getTravMask ) );
        
        }
        { //::OSG::Node::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::Node::*getType_function_type )(  ) ;
            
            Node_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::Node::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Node::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::Node::*getType_function_type )(  ) const;
            
            Node_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::Node::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Node::getVolume
        
            typedef ::OSG::BoxVolume const & ( ::OSG::Node::*getVolume_function_type )(  ) const;
            
            Node_exposer.def( 
                "getVolume"
                , getVolume_function_type( &::OSG::Node::getVolume )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::Node::getWorldVolume
        
            typedef void ( ::OSG::Node::*getWorldVolume_function_type )( ::OSG::BoxVolume & ) ;
            
            Node_exposer.def( 
                "getWorldVolume"
                , getWorldVolume_function_type( &::OSG::Node::getWorldVolume )
                , ( bp::arg("result") ) );
        
        }
        { //::OSG::Node::insertChild
        
            typedef void ( ::OSG::Node::*insertChild_function_type )( ::OSG::UInt32,::OSG::Node * const ) ;
            
            Node_exposer.def( 
                "insertChild"
                , insertChild_function_type( &::OSG::Node::insertChild )
                , ( bp::arg("childIndex"), bp::arg("childP") ) );
        
        }
        { //::OSG::Node::invalidateVolume
        
            typedef void ( ::OSG::Node::*invalidateVolume_function_type )(  ) ;
            
            Node_exposer.def( 
                "invalidateVolume"
                , invalidateVolume_function_type( &::OSG::Node::invalidateVolume ) );
        
        }
        { //::OSG::Node::replaceChild
        
            typedef void ( ::OSG::Node::*replaceChild_function_type )( ::OSG::UInt32,::OSG::Node * const ) ;
            
            Node_exposer.def( 
                "replaceChild"
                , replaceChild_function_type( &::OSG::Node::replaceChild )
                , ( bp::arg("childIndex"), bp::arg("childP") ) );
        
        }
        { //::OSG::Node::replaceChildBy
        
            typedef bool ( ::OSG::Node::*replaceChildBy_function_type )( ::OSG::Node * const,::OSG::Node * const ) ;
            
            Node_exposer.def( 
                "replaceChildBy"
                , replaceChildBy_function_type( &::OSG::Node::replaceChildBy )
                , ( bp::arg("childP"), bp::arg("newChildP") ) );
        
        }
        { //::OSG::Node::setCore
        
            typedef void ( ::OSG::Node::*setCore_function_type )( ::OSG::NodeCore * const ) ;
            
            Node_exposer.def( 
                "setCore"
                , setCore_function_type( &::OSG::Node::setCore )
                , ( bp::arg("core") ) );
        
        }
        { //::OSG::Node::setTravMask
        
            typedef void ( ::OSG::Node::*setTravMask_function_type )( ::OSG::UInt32 ) ;
            
            Node_exposer.def( 
                "setTravMask"
                , setTravMask_function_type( &::OSG::Node::setTravMask )
                , ( bp::arg("val") ) );
        
        }
        { //::OSG::Node::subChild
        
            typedef void ( ::OSG::Node::*subChild_function_type )( ::OSG::Node * const ) ;
            
            Node_exposer.def( 
                "subChild"
                , subChild_function_type( &::OSG::Node::subChild )
                , ( bp::arg("childP") ) );
        
        }
        { //::OSG::Node::subChild
        
            typedef void ( ::OSG::Node::*subChild_function_type )( ::OSG::UInt32 ) ;
            
            Node_exposer.def( 
                "subChild"
                , subChild_function_type( &::OSG::Node::subChild )
                , ( bp::arg("childIndex") ) );
        
        }
        { //::OSG::Node::updateVolume
        
            typedef void ( ::OSG::Node::*updateVolume_function_type )(  ) ;
            
            Node_exposer.def( 
                "updateVolume"
                , updateVolume_function_type( &::OSG::Node::updateVolume ) );
        
        }
        Node_exposer.staticmethod( "create" );
        Node_exposer.staticmethod( "createDependent" );
        Node_exposer.staticmethod( "createLocal" );
        Node_exposer.staticmethod( "getClassGroupId" );
        Node_exposer.staticmethod( "getClassType" );
        Node_exposer.staticmethod( "getClassTypeId" );
        Node_exposer.def("getMFChildren",Node_getMFChildren);
        pyopensg::register_transit< OSG::Node >::execute();
        bp::implicitly_convertible< OSG::Node::ObjRecPtr, OSG::Node* >();
        bp::implicitly_convertible< OSG::Node::ObjRecPtr, OSG::Node::ObjCPtr >();
        bp::implicitly_convertible< OSG::Node::ObjRecPtr, OSG::AttachmentContainer* >();
        bp::implicitly_convertible< OSG::Node::ObjRecPtr, OSG::AttachmentContainer::ObjRecPtr >();
        bp::implicitly_convertible<OSG::Node::ObjRecPtr, OSG::AttachmentContainer::ObjCPtr>();
        Node_exposer.add_property("children", getChildren);
    }

}
