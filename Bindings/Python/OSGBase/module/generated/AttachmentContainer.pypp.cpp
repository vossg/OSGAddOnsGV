// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGBase_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "AttachmentContainer.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_AttachmentContainer_class(){

    { //::OSG::AttachmentContainer
        typedef bp::class_< OSG::AttachmentContainer, bp::bases< OSG::FieldContainer >, boost::noncopyable > AttachmentContainer_exposer_t;
        AttachmentContainer_exposer_t AttachmentContainer_exposer = AttachmentContainer_exposer_t( "AttachmentContainer", bp::no_init );
        bp::scope AttachmentContainer_scope( AttachmentContainer_exposer );
        { //::OSG::AttachmentContainer::addAttachment
        
            typedef void ( ::OSG::AttachmentContainer::*addAttachment_function_type )( ::OSG::Attachment * const,::OSG::UInt16 ) ;
            
            AttachmentContainer_exposer.def( 
                "addAttachment"
                , addAttachment_function_type( &::OSG::AttachmentContainer::addAttachment )
                , ( bp::arg("pAttachment"), bp::arg("binding")=(::OSG::UInt16)(0) ) );
        
        }
        { //::OSG::AttachmentContainer::copyFromBin
        
            typedef void ( ::OSG::AttachmentContainer::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            AttachmentContainer_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::AttachmentContainer::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::AttachmentContainer::copyToBin
        
            typedef void ( ::OSG::AttachmentContainer::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            AttachmentContainer_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::AttachmentContainer::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::AttachmentContainer::dump
        
            typedef void ( ::OSG::AttachmentContainer::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            AttachmentContainer_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::AttachmentContainer::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::AttachmentContainer::findAttachment
        
            typedef ::OSG::Attachment * ( ::OSG::AttachmentContainer::*findAttachment_function_type )( ::OSG::UInt32,::OSG::UInt16 ) const;
            
            AttachmentContainer_exposer.def( 
                "findAttachment"
                , findAttachment_function_type( &::OSG::AttachmentContainer::findAttachment )
                , ( bp::arg("groupId"), bp::arg("binding")=(::OSG::UInt16)(0) )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::AttachmentContainer::findAttachment
        
            typedef ::OSG::Attachment * ( ::OSG::AttachmentContainer::*findAttachment_function_type )( ::OSG::FieldContainerType const &,::OSG::UInt16 ) const;
            
            AttachmentContainer_exposer.def( 
                "findAttachment"
                , findAttachment_function_type( &::OSG::AttachmentContainer::findAttachment )
                , ( bp::arg("type"), bp::arg("binding")=(::OSG::UInt16)(0) )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::AttachmentContainer::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::AttachmentContainer::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            AttachmentContainer_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::AttachmentContainer::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::AttachmentContainer::getClassGroupId
        
            typedef ::OSG::UInt32 ( *getClassGroupId_function_type )(  );
            
            AttachmentContainer_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::AttachmentContainer::getClassGroupId ) );
        
        }
        { //::OSG::AttachmentContainer::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            AttachmentContainer_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::AttachmentContainer::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::AttachmentContainer::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            AttachmentContainer_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::AttachmentContainer::getClassTypeId ) );
        
        }
        { //::OSG::AttachmentContainer::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::AttachmentContainer::*getContainerSize_function_type )(  ) const;
            
            AttachmentContainer_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::AttachmentContainer::getContainerSize ) );
        
        }
        { //::OSG::AttachmentContainer::getSFAttachments
        
            typedef ::OSG::SFAttachmentPtrMap const * ( ::OSG::AttachmentContainer::*getSFAttachments_function_type )(  ) const;
            
            AttachmentContainer_exposer.def( 
                "getSFAttachments"
                , getSFAttachments_function_type( &::OSG::AttachmentContainer::getSFAttachments )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::AttachmentContainer::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::AttachmentContainer::*getType_function_type )(  ) ;
            
            AttachmentContainer_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::AttachmentContainer::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::AttachmentContainer::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::AttachmentContainer::*getType_function_type )(  ) const;
            
            AttachmentContainer_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::AttachmentContainer::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::AttachmentContainer::replaceAttachmentByObj
        
            typedef void ( ::OSG::AttachmentContainer::*replaceAttachmentByObj_function_type )( ::OSG::Attachment * const,::OSG::Attachment * const ) ;
            
            AttachmentContainer_exposer.def( 
                "replaceAttachmentByObj"
                , replaceAttachmentByObj_function_type( &::OSG::AttachmentContainer::replaceAttachmentByObj )
                , ( bp::arg("pOld"), bp::arg("pNew") ) );
        
        }
        { //::OSG::AttachmentContainer::subAttachment
        
            typedef void ( ::OSG::AttachmentContainer::*subAttachment_function_type )( ::OSG::Attachment * const,::OSG::UInt16 ) ;
            
            AttachmentContainer_exposer.def( 
                "subAttachment"
                , subAttachment_function_type( &::OSG::AttachmentContainer::subAttachment )
                , ( bp::arg("pAttachment"), bp::arg("binding")=(::OSG::UInt16)(0) ) );
        
        }
        AttachmentContainer_exposer.staticmethod( "getClassGroupId" );
        AttachmentContainer_exposer.staticmethod( "getClassType" );
        AttachmentContainer_exposer.staticmethod( "getClassTypeId" );
        pyopensg::register_transit< OSG::AttachmentContainer >::execute();
        bp::register_ptr_to_python< OSG::AttachmentContainer::ObjRecPtr >();
        bp::implicitly_convertible< OSG::AttachmentContainer::ObjRecPtr, OSG::AttachmentContainer* >();
        bp::implicitly_convertible< OSG::AttachmentContainer::ObjRecPtr, OSG::AttachmentContainer::ObjCPtr >();
        bp::implicitly_convertible< OSG::AttachmentContainer::ObjRecPtr, OSG::FieldContainer* >();
        bp::implicitly_convertible< OSG::AttachmentContainer::ObjRecPtr, OSG::FieldContainer::ObjRecPtr >();
        bp::implicitly_convertible<OSG::AttachmentContainer::ObjRecPtr, OSG::FieldContainer::ObjCPtr>();
    }

}
