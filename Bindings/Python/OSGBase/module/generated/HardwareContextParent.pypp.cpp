// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGBase_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "HardwareContextParent.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct DataSlotMixin_less__OSG_scope_ContainerMixinHead_less__OSG_scope_HardwareContextDataSlotDesc__greater___greater__wrapper : OSG::DataSlotMixin< OSG::ContainerMixinHead< OSG::HardwareContextDataSlotDesc > >, bp::wrapper< OSG::DataSlotMixin< OSG::ContainerMixinHead< OSG::HardwareContextDataSlotDesc > > > {

    virtual void clearData( ::OSG::FieldContainer * pContainer, ::OSG::ConstFieldMaskArg whichField, ::OSG::Int32 iSlotId ) {
        if( bp::override func_clearData = this->get_override( "clearData" ) )
            func_clearData( boost::python::ptr(pContainer), whichField, iSlotId );
        else{
            this->OSG::DataSlotMixin< OSG::ContainerMixinHead< OSG::HardwareContextDataSlotDesc > >::clearData( boost::python::ptr(pContainer), whichField, iSlotId );
        }
    }
    
    void default_clearData( ::OSG::FieldContainer * pContainer, ::OSG::ConstFieldMaskArg whichField, ::OSG::Int32 iSlotId ) {
        OSG::DataSlotMixin< OSG::ContainerMixinHead< OSG::HardwareContextDataSlotDesc > >::clearData( boost::python::ptr(pContainer), whichField, iSlotId );
    }

};

void register_HardwareContextParent_class(){

    { //::OSG::DataSlotMixin< OSG::ContainerMixinHead< OSG::HardwareContextDataSlotDesc > >
        typedef bp::class_< DataSlotMixin_less__OSG_scope_ContainerMixinHead_less__OSG_scope_HardwareContextDataSlotDesc__greater___greater__wrapper, bp::bases< OSG::ContainerMixinHead< OSG::HardwareContextDataSlotDesc > >, boost::noncopyable > HardwareContextParent_exposer_t;
        HardwareContextParent_exposer_t HardwareContextParent_exposer = HardwareContextParent_exposer_t( "HardwareContextParent", bp::no_init );
        bp::scope HardwareContextParent_scope( HardwareContextParent_exposer );
        { //::OSG::DataSlotMixin< OSG::ContainerMixinHead< OSG::HardwareContextDataSlotDesc > >::clearData
        
            typedef OSG::DataSlotMixin< OSG::ContainerMixinHead< OSG::HardwareContextDataSlotDesc > > exported_class_t;
            typedef void ( exported_class_t::*clearData_function_type )( ::OSG::FieldContainer *,::OSG::ConstFieldMaskArg,::OSG::Int32 ) ;
            typedef void ( DataSlotMixin_less__OSG_scope_ContainerMixinHead_less__OSG_scope_HardwareContextDataSlotDesc__greater___greater__wrapper::*default_clearData_function_type )( ::OSG::FieldContainer *,::OSG::ConstFieldMaskArg,::OSG::Int32 ) ;
            
            HardwareContextParent_exposer.def( 
                "clearData"
                , clearData_function_type(&::OSG::DataSlotMixin< OSG::ContainerMixinHead< OSG::HardwareContextDataSlotDesc > >::clearData)
                , default_clearData_function_type(&DataSlotMixin_less__OSG_scope_ContainerMixinHead_less__OSG_scope_HardwareContextDataSlotDesc__greater___greater__wrapper::default_clearData)
                , ( bp::arg("pContainer"), bp::arg("whichField"), bp::arg("iSlotId") ) );
        
        }
        { //::OSG::DataSlotMixin< OSG::ContainerMixinHead< OSG::HardwareContextDataSlotDesc > >::dumpStore
        
            typedef OSG::DataSlotMixin< OSG::ContainerMixinHead< OSG::HardwareContextDataSlotDesc > > exported_class_t;
            typedef void ( exported_class_t::*dumpStore_function_type )(  ) ;
            
            HardwareContextParent_exposer.def( 
                "dumpStore"
                , dumpStore_function_type( &::OSG::DataSlotMixin< OSG::ContainerMixinHead< OSG::HardwareContextDataSlotDesc > >::dumpStore ) );
        
        }
        { //::OSG::DataSlotMixin< OSG::ContainerMixinHead< OSG::HardwareContextDataSlotDesc > >::setData
        
            typedef OSG::DataSlotMixin< OSG::ContainerMixinHead< OSG::HardwareContextDataSlotDesc > > exported_class_t;
            typedef void ( exported_class_t::*setData_function_type )( ::OSG::HardwareContextData *,::OSG::Int32 ) ;
            
            HardwareContextParent_exposer.def( 
                "setData"
                , setData_function_type( &::OSG::DataSlotMixin< OSG::ContainerMixinHead< OSG::HardwareContextDataSlotDesc > >::setData )
                , ( bp::arg("pData"), bp::arg("iSlotId") ) );
        
        }
    }

}
