// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGBase_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "OSGBasePy_free_functions.pypp.hpp"

using namespace std;
namespace bp = boost::python;

BOOST_PYTHON_FUNCTION_OVERLOADS( OSG_cloneTree_overloads, OSG::cloneTree, 1, 5 )

BOOST_PYTHON_FUNCTION_OVERLOADS( OSG_deepCloneTree_overloads, OSG::deepCloneTree, 1, 5 )

void register_free_functions(){

    { //::OSG::MatrixFrustum
    
        typedef bool ( *MatrixFrustum_function_type )( ::OSG::Matrix &,::OSG::Real32,::OSG::Real32,::OSG::Real32,::OSG::Real32,::OSG::Real32,::OSG::Real32 );
        
        bp::def( 
            "MatrixFrustum"
            , MatrixFrustum_function_type( &::OSG::MatrixFrustum )
            , ( bp::arg("result"), bp::arg("rLeft"), bp::arg("rRight"), bp::arg("rBottom"), bp::arg("rTop"), bp::arg("rNear"), bp::arg("rFar") ) );
    
    }

    { //::OSG::MatrixLookAt
    
        typedef bool ( *MatrixLookAt_function_type )( ::OSG::Matrix &,::OSG::Pnt3f,::OSG::Pnt3f,::OSG::Vec3f );
        
        bp::def( 
            "MatrixLookAt"
            , MatrixLookAt_function_type( &::OSG::MatrixLookAt )
            , ( bp::arg("result"), bp::arg("from"), bp::arg("at"), bp::arg("up") ) );
    
    }

    { //::OSG::MatrixLookAt
    
        typedef bool ( *MatrixLookAt_function_type )( ::OSG::Matrix &,::OSG::Real32,::OSG::Real32,::OSG::Real32,::OSG::Real32,::OSG::Real32,::OSG::Real32,::OSG::Real32,::OSG::Real32,::OSG::Real32 );
        
        bp::def( 
            "MatrixLookAt"
            , MatrixLookAt_function_type( &::OSG::MatrixLookAt )
            , ( bp::arg("result"), bp::arg("fromx"), bp::arg("fromy"), bp::arg("fromz"), bp::arg("atx"), bp::arg("aty"), bp::arg("atz"), bp::arg("upx"), bp::arg("upy"), bp::arg("upz") ) );
    
    }

    { //::OSG::MatrixOrthogonal
    
        typedef bool ( *MatrixOrthogonal_function_type )( ::OSG::Matrix &,::OSG::Real32,::OSG::Real32,::OSG::Real32,::OSG::Real32,::OSG::Real32,::OSG::Real32 );
        
        bp::def( 
            "MatrixOrthogonal"
            , MatrixOrthogonal_function_type( &::OSG::MatrixOrthogonal )
            , ( bp::arg("result"), bp::arg("rLeft"), bp::arg("rRight"), bp::arg("rBottom"), bp::arg("rTop"), bp::arg("rNear"), bp::arg("rFar") ) );
    
    }

    { //::OSG::MatrixPerspective
    
        typedef bool ( *MatrixPerspective_function_type )( ::OSG::Matrix &,::OSG::Real32,::OSG::Real32,::OSG::Real32,::OSG::Real32 );
        
        bp::def( 
            "MatrixPerspective"
            , MatrixPerspective_function_type( &::OSG::MatrixPerspective )
            , ( bp::arg("result"), bp::arg("rFovy"), bp::arg("rAspect"), bp::arg("rNear"), bp::arg("rFar") ) );
    
    }

    { //::OSG::MatrixProjection
    
        typedef bool ( *MatrixProjection_function_type )( ::OSG::Matrix &,::OSG::Real32,::OSG::Real32,::OSG::Real32,::OSG::Real32,::OSG::Real32,::OSG::Real32 );
        
        bp::def( 
            "MatrixProjection"
            , MatrixProjection_function_type( &::OSG::MatrixProjection )
            , ( bp::arg("result"), bp::arg("rLeft"), bp::arg("rRight"), bp::arg("rBottom"), bp::arg("rTop"), bp::arg("rNear"), bp::arg("rFar") ) );
    
    }

    { //::OSG::MatrixStereoPerspective
    
        typedef bool ( *MatrixStereoPerspective_function_type )( ::OSG::Matrix &,::OSG::Matrix &,::OSG::Real32,::OSG::Real32,::OSG::Real32,::OSG::Real32,::OSG::Real32,::OSG::Real32,::OSG::Real32,::OSG::Real32 );
        
        bp::def( 
            "MatrixStereoPerspective"
            , MatrixStereoPerspective_function_type( &::OSG::MatrixStereoPerspective )
            , ( bp::arg("projection"), bp::arg("projtrans"), bp::arg("rFovy"), bp::arg("rAspect"), bp::arg("rNear"), bp::arg("rFfar"), bp::arg("rZeroparallax"), bp::arg("rEyedistance"), bp::arg("rWhicheye"), bp::arg("rOverlap") ) );
    
    }

    bp::def( 
        "cloneTree"
        , (::OSG::NodeTransitPtr (*)( ::OSG::Node const *,::std::vector<std::string, std::allocator<std::string> > const &,::std::vector<std::string, std::allocator<std::string> > const &,::std::vector<std::string, std::allocator<std::string> > const &,::std::vector<std::string, std::allocator<std::string> > const & ))( &::OSG::cloneTree )
        , OSG_cloneTree_overloads( 
                bp::args( "rootNode", "cloneTypeNames", "ignoreTypeNames", "cloneGroupNames", "ignoreGroupNames" ) ) );

    bp::def( 
        "deepCloneTree"
        , (::OSG::NodeTransitPtr (*)( ::OSG::Node const *,::std::vector<std::string, std::allocator<std::string> > const &,::std::vector<std::string, std::allocator<std::string> > const &,::std::vector<std::string, std::allocator<std::string> > const &,::std::vector<std::string, std::allocator<std::string> > const & ))( &::OSG::deepCloneTree )
        , OSG_deepCloneTree_overloads( 
                bp::args( "rootNode", "shareTypeNames", "ignoreTypeNames", "shareGroupNames", "ignoreGroupNames" ) ) );

    { //::OSG::commitChanges
    
        typedef void ( *commitChanges_function_type )( ::OSG::UInt32 );
        
        bp::def( 
            "commitChanges"
            , commitChanges_function_type( &::OSG::commitChanges )
            , ( bp::arg("AdditionalChangeOrigin")=(::OSG::UInt32)(0) ) );
    
    }

    { //::OSG::getName
    
        typedef ::OSG::Char8 const * ( *getName_function_type )( ::OSG::AttachmentContainer const * const );
        
        bp::def( 
            "getName"
            , getName_function_type( &::OSG::getName )
            , ( bp::arg("container") ) );
    
    }

    { //::OSG::osgExit
    
        typedef bool ( *osgExit_function_type )(  );
        
        bp::def( 
            "osgExit"
            , osgExit_function_type( &::OSG::osgExit ) );
    
    }

    { //::OSG::setName
    
        typedef void ( *setName_function_type )( ::OSG::AttachmentContainer * const,::OSG::Char8 const * );
        
        bp::def( 
            "setName"
            , setName_function_type( &::OSG::setName )
            , ( bp::arg("container"), bp::arg("name") ) );
    
    }

    { //::OSG::setName
    
        typedef void ( *setName_function_type )( ::OSG::AttachmentContainer * const,::std::string const & );
        
        bp::def( 
            "setName"
            , setName_function_type( &::OSG::setName )
            , ( bp::arg("container"), bp::arg("name") ) );
    
    }

}
