// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGBase_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "FieldContainer.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct FieldContainer_wrapper : OSG::FieldContainer, bp::wrapper< OSG::FieldContainer > {



};

void register_FieldContainer_class(){

    { //::OSG::FieldContainer
        typedef bp::class_< FieldContainer_wrapper, bp::bases< OSG::ReflexiveContainer >, boost::noncopyable > FieldContainer_exposer_t;
        FieldContainer_exposer_t FieldContainer_exposer = FieldContainer_exposer_t( "FieldContainer", bp::no_init );
        bp::scope FieldContainer_scope( FieldContainer_exposer );
        bp::class_< OSG::FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC >( "attempt_to_create_CoredNodePtr_on_non_NodeCore_FC" );
        { //::OSG::FieldContainer::addChangedFunctor
        
            typedef void ( ::OSG::FieldContainer::*addChangedFunctor_function_type )( ::OSG::ChangedFunctor,::std::string const & ) ;
            
            FieldContainer_exposer.def( 
                "addChangedFunctor"
                , addChangedFunctor_function_type( &::OSG::FieldContainer::addChangedFunctor )
                , ( bp::arg("func"), bp::arg("createSymbol") ) );
        
        }
        { //::OSG::FieldContainer::callChangedFunctors
        
            typedef void ( ::OSG::FieldContainer::*callChangedFunctors_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32 ) ;
            
            FieldContainer_exposer.def( 
                "callChangedFunctors"
                , callChangedFunctors_function_type( &::OSG::FieldContainer::callChangedFunctors )
                , ( bp::arg("whichField"), bp::arg("origin") ) );
        
        }
        { //::OSG::FieldContainer::changed
        
            typedef void ( ::OSG::FieldContainer::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            FieldContainer_exposer.def( 
                "changed"
                , changed_function_type( &::OSG::FieldContainer::changed )
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("details") ) );
        
        }
        { //::OSG::FieldContainer::clearChangedFunctors
        
            typedef void ( ::OSG::FieldContainer::*clearChangedFunctors_function_type )(  ) ;
            
            FieldContainer_exposer.def( 
                "clearChangedFunctors"
                , clearChangedFunctors_function_type( &::OSG::FieldContainer::clearChangedFunctors ) );
        
        }
        { //::OSG::FieldContainer::copyFromBin
        
            typedef void ( ::OSG::FieldContainer::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            FieldContainer_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::FieldContainer::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::FieldContainer::dump
        
            typedef void ( ::OSG::FieldContainer::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            FieldContainer_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::FieldContainer::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::FieldContainer::dumpFieldInfo
        
            typedef void ( ::OSG::FieldContainer::*dumpFieldInfo_function_type )(  ) const;
            
            FieldContainer_exposer.def( 
                "dumpFieldInfo"
                , dumpFieldInfo_function_type( &::OSG::FieldContainer::dumpFieldInfo ) );
        
        }
        { //::OSG::FieldContainer::findNamedComponent
        
            typedef ::OSG::FieldContainer * ( ::OSG::FieldContainer::*findNamedComponent_function_type )( ::OSG::Char8 const * ) ;
            
            FieldContainer_exposer.def( 
                "findNamedComponent"
                , findNamedComponent_function_type( &::OSG::FieldContainer::findNamedComponent )
                , ( bp::arg("szName") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::FieldContainer::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            FieldContainer_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::FieldContainer::getClassGroupId ) );
        
        }
        { //::OSG::FieldContainer::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            FieldContainer_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::FieldContainer::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::FieldContainer::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            FieldContainer_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::FieldContainer::getClassTypeId ) );
        
        }
        { //::OSG::FieldContainer::getRefCount
        
            typedef ::OSG::RefCountStore ( ::OSG::FieldContainer::*getRefCount_function_type )(  ) ;
            
            FieldContainer_exposer.def( 
                "getRefCount"
                , getRefCount_function_type( &::OSG::FieldContainer::getRefCount ) );
        
        }
        { //::OSG::FieldContainer::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::FieldContainer::*getType_function_type )(  ) ;
            
            FieldContainer_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::FieldContainer::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FieldContainer::getWeakRefCount
        
            typedef ::OSG::RefCountStore ( ::OSG::FieldContainer::*getWeakRefCount_function_type )(  ) ;
            
            FieldContainer_exposer.def( 
                "getWeakRefCount"
                , getWeakRefCount_function_type( &::OSG::FieldContainer::getWeakRefCount ) );
        
        }
        { //::OSG::FieldContainer::hasChangedFunctor
        
            typedef bool ( ::OSG::FieldContainer::*hasChangedFunctor_function_type )( ::std::string const & ) ;
            
            FieldContainer_exposer.def( 
                "hasChangedFunctor"
                , hasChangedFunctor_function_type( &::OSG::FieldContainer::hasChangedFunctor )
                , ( bp::arg("createSymbol") ) );
        
        }
        { //::OSG::FieldContainer::invalidateVolume
        
            typedef void ( ::OSG::FieldContainer::*invalidateVolume_function_type )(  ) ;
            
            FieldContainer_exposer.def( 
                "invalidateVolume"
                , invalidateVolume_function_type( &::OSG::FieldContainer::invalidateVolume ) );
        
        }
        { //::OSG::FieldContainer::isMTLocal
        
            typedef bool ( ::OSG::FieldContainer::*isMTLocal_function_type )(  ) const;
            
            FieldContainer_exposer.def( 
                "isMTLocal"
                , isMTLocal_function_type( &::OSG::FieldContainer::isMTLocal ) );
        
        }
        { //::OSG::FieldContainer::markFieldsClusterLocal
        
            typedef void ( ::OSG::FieldContainer::*markFieldsClusterLocal_function_type )( long unsigned int const ) ;
            
            FieldContainer_exposer.def( 
                "markFieldsClusterLocal"
                , markFieldsClusterLocal_function_type( &::OSG::FieldContainer::markFieldsClusterLocal )
                , ( bp::arg("bvFieldMasks") ) );
        
        }
        { //::OSG::FieldContainer::markFieldsThreadLocal
        
            typedef void ( ::OSG::FieldContainer::*markFieldsThreadLocal_function_type )( long unsigned int const ) ;
            
            FieldContainer_exposer.def( 
                "markFieldsThreadLocal"
                , markFieldsThreadLocal_function_type( &::OSG::FieldContainer::markFieldsThreadLocal )
                , ( bp::arg("bvFieldMasks") ) );
        
        }
        { //::OSG::FieldContainer::shallowCopyDependent
        
            typedef ::OSG::TransitPtr< OSG::FieldContainer > ( ::OSG::FieldContainer::*shallowCopyDependent_function_type )( ::OSG::BitVector ) const;
            
            FieldContainer_exposer.def( 
                "shallowCopyDependent"
                , shallowCopyDependent_function_type( &::OSG::FieldContainer::shallowCopyDependent )
                , ( bp::arg("uiFlags") ) );
        
        }
        { //::OSG::FieldContainer::subChangedFunctor
        
            typedef void ( ::OSG::FieldContainer::*subChangedFunctor_function_type )( ::std::string const & ) ;
            
            FieldContainer_exposer.def( 
                "subChangedFunctor"
                , subChangedFunctor_function_type( &::OSG::FieldContainer::subChangedFunctor )
                , ( bp::arg("createSymbol") ) );
        
        }
        { //::OSG::FieldContainer::unlinkChild
        
            typedef bool ( ::OSG::FieldContainer::*unlinkChild_function_type )( ::OSG::FieldContainer * const,::OSG::UInt16 const ) ;
            
            FieldContainer_exposer.def( 
                "unlinkChild"
                , unlinkChild_function_type( &::OSG::FieldContainer::unlinkChild )
                , ( bp::arg("pChild"), bp::arg("childFieldId") ) );
        
        }
        { //::OSG::FieldContainer::unmarkFieldsClusterLocal
        
            typedef void ( ::OSG::FieldContainer::*unmarkFieldsClusterLocal_function_type )( long unsigned int const ) ;
            
            FieldContainer_exposer.def( 
                "unmarkFieldsClusterLocal"
                , unmarkFieldsClusterLocal_function_type( &::OSG::FieldContainer::unmarkFieldsClusterLocal )
                , ( bp::arg("bvFieldMasks") ) );
        
        }
        { //::OSG::FieldContainer::unmarkFieldsThreadLocal
        
            typedef void ( ::OSG::FieldContainer::*unmarkFieldsThreadLocal_function_type )( long unsigned int const ) ;
            
            FieldContainer_exposer.def( 
                "unmarkFieldsThreadLocal"
                , unmarkFieldsThreadLocal_function_type( &::OSG::FieldContainer::unmarkFieldsThreadLocal )
                , ( bp::arg("bvFieldMasks") ) );
        
        }
        { //::OSG::ReflexiveContainer::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::ReflexiveContainer::*getContainerSize_function_type )(  ) const;
            
            FieldContainer_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::ReflexiveContainer::getContainerSize ) );
        
        }
        FieldContainer_exposer.staticmethod( "getClassGroupId" );
        FieldContainer_exposer.staticmethod( "getClassType" );
        FieldContainer_exposer.staticmethod( "getClassTypeId" );
        pyopensg::register_transit< OSG::FieldContainer >::execute();
        bp::register_ptr_to_python< OSG::FieldContainer::ObjRecPtr >();
        bp::implicitly_convertible< OSG::FieldContainer::ObjRecPtr, OSG::FieldContainer* >();
        bp::implicitly_convertible< OSG::FieldContainer::ObjRecPtr, OSG::FieldContainer::ObjCPtr >();
    }

}
