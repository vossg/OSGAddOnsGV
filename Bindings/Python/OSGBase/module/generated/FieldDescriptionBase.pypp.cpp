// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGBase_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "FieldDescriptionBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct FieldDescriptionBase_wrapper : OSG::FieldDescriptionBase, bp::wrapper< OSG::FieldDescriptionBase > {

    FieldDescriptionBase_wrapper(::OSG::FieldDescriptionBase const & source )
    : OSG::FieldDescriptionBase( boost::ref(source) )
      , bp::wrapper< OSG::FieldDescriptionBase >(){
        // copy constructor
    
    }

    virtual void beginEdit( ::OSG::Field * pField, ::OSG::UInt32 uiAspect, ::OSG::AspectOffsetStore & oOffsets ){
        bp::override func_beginEdit = this->get_override( "beginEdit" );
        func_beginEdit( boost::python::ptr(pField), uiAspect, boost::ref(oOffsets) );
    }

    virtual ::OSG::FieldDescriptionBase * clone(  ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone(  );
    }

    virtual void copyFromBin( ::OSG::BinaryDataHandler & pMem, ::OSG::Field * pField ){
        bp::override func_copyFromBin = this->get_override( "copyFromBin" );
        func_copyFromBin( boost::ref(pMem), boost::python::ptr(pField) );
    }

    virtual void copyToBin( ::OSG::BinaryDataHandler & pMem, ::OSG::Field * pField ) const {
        bp::override func_copyToBin = this->get_override( "copyToBin" );
        func_copyToBin( boost::ref(pMem), boost::python::ptr(pField) );
    }

    virtual ::OSG::BasicFieldConnector * createConnector( ::OSG::Field const * pSrc, ::OSG::FieldDescriptionBase const * pDstDesc, ::OSG::Field * pDst ) const {
        bp::override func_createConnector = this->get_override( "createConnector" );
        return func_createConnector( boost::python::ptr(pSrc), boost::python::ptr(pDstDesc), boost::python::ptr(pDst) );
    }

    virtual ::OSG::EditFieldHandlePtr createEditHandler( ::OSG::Field * pField, ::OSG::FieldContainer * pCnt ){
        bp::override func_createEditHandler = this->get_override( "createEditHandler" );
        return func_createEditHandler( boost::python::ptr(pField), boost::python::ptr(pCnt) );
    }

    virtual ::OSG::Field * createField(  ) const {
        bp::override func_createField = this->get_override( "createField" );
        return func_createField(  );
    }

    virtual ::OSG::GetFieldHandlePtr createGetHandler( ::OSG::Field const * pField, ::OSG::FieldContainer * pCnt ){
        bp::override func_createGetHandler = this->get_override( "createGetHandler" );
        return func_createGetHandler( boost::python::ptr(pField), boost::python::ptr(pCnt) );
    }

    virtual void destroyField( ::OSG::Field * pField ) const {
        bp::override func_destroyField = this->get_override( "destroyField" );
        func_destroyField( boost::python::ptr(pField) );
    }

    virtual ::OSG::SizeT getBinSize( ::OSG::Field * pField ) const {
        bp::override func_getBinSize = this->get_override( "getBinSize" );
        return func_getBinSize( boost::python::ptr(pField) );
    }

    virtual bool isShared( ::OSG::Field * pField ){
        bp::override func_isShared = this->get_override( "isShared" );
        return func_isShared( boost::python::ptr(pField) );
    }

    void setDynamic( bool bDynamic ){
        OSG::FieldDescriptionBase::setDynamic( bDynamic );
    }

    virtual void sync( ::OSG::Field * pTo, ::OSG::Field * pFrom, ::OSG::AspectOffsetStore & oOffsets, ::OSG::ConstFieldMaskArg syncMode, ::OSG::UInt32 const uiSyncInfo ) const {
        bp::override func_sync = this->get_override( "sync" );
        func_sync( boost::python::ptr(pTo), boost::python::ptr(pFrom), boost::ref(oOffsets), syncMode, uiSyncInfo );
    }

};

void register_FieldDescriptionBase_class(){

    { //::OSG::FieldDescriptionBase
        typedef bp::class_< FieldDescriptionBase_wrapper, boost::noncopyable > FieldDescriptionBase_exposer_t;
        FieldDescriptionBase_exposer_t FieldDescriptionBase_exposer = FieldDescriptionBase_exposer_t( "FieldDescriptionBase", bp::no_init );
        bp::scope FieldDescriptionBase_scope( FieldDescriptionBase_exposer );
        FieldDescriptionBase_exposer.def( bp::init< OSG::FieldDescriptionBase const & >(( bp::arg("source") )) );
        { //::OSG::FieldDescriptionBase::beginEdit
        
            typedef void ( FieldDescriptionBase_wrapper::*beginEdit_function_type )( ::OSG::Field *,::OSG::UInt32,::OSG::AspectOffsetStore & ) ;
            
            FieldDescriptionBase_exposer.def( 
                "beginEdit"
                , beginEdit_function_type( &FieldDescriptionBase_wrapper::beginEdit )
                , ( bp::arg("pField"), bp::arg("uiAspect"), bp::arg("oOffsets") ) );
        
        }
        { //::OSG::FieldDescriptionBase::clone
        
            typedef ::OSG::FieldDescriptionBase * ( ::OSG::FieldDescriptionBase::*clone_function_type )(  ) const;
            
            FieldDescriptionBase_exposer.def( 
                "clone"
                , bp::pure_virtual( clone_function_type(&::OSG::FieldDescriptionBase::clone) )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::OSG::FieldDescriptionBase::copyFromBin
        
            typedef void ( ::OSG::FieldDescriptionBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::Field * ) ;
            
            FieldDescriptionBase_exposer.def( 
                "copyFromBin"
                , bp::pure_virtual( copyFromBin_function_type(&::OSG::FieldDescriptionBase::copyFromBin) )
                , ( bp::arg("pMem"), bp::arg("pField") ) );
        
        }
        { //::OSG::FieldDescriptionBase::copyToBin
        
            typedef void ( ::OSG::FieldDescriptionBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::Field * ) const;
            
            FieldDescriptionBase_exposer.def( 
                "copyToBin"
                , bp::pure_virtual( copyToBin_function_type(&::OSG::FieldDescriptionBase::copyToBin) )
                , ( bp::arg("pMem"), bp::arg("pField") ) );
        
        }
        { //::OSG::FieldDescriptionBase::createConnector
        
            typedef ::OSG::BasicFieldConnector * ( ::OSG::FieldDescriptionBase::*createConnector_function_type )( ::OSG::Field const *,::OSG::FieldDescriptionBase const *,::OSG::Field * ) const;
            
            FieldDescriptionBase_exposer.def( 
                "createConnector"
                , bp::pure_virtual( createConnector_function_type(&::OSG::FieldDescriptionBase::createConnector) )
                , ( bp::arg("pSrc"), bp::arg("pDstDesc"), bp::arg("pDst") )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::OSG::FieldDescriptionBase::createEditHandler
        
            typedef ::OSG::EditFieldHandlePtr ( ::OSG::FieldDescriptionBase::*createEditHandler_function_type )( ::OSG::Field *,::OSG::FieldContainer * ) ;
            
            FieldDescriptionBase_exposer.def( 
                "createEditHandler"
                , bp::pure_virtual( createEditHandler_function_type(&::OSG::FieldDescriptionBase::createEditHandler) )
                , ( bp::arg("pField"), bp::arg("pCnt") ) );
        
        }
        { //::OSG::FieldDescriptionBase::createField
        
            typedef ::OSG::Field * ( ::OSG::FieldDescriptionBase::*createField_function_type )(  ) const;
            
            FieldDescriptionBase_exposer.def( 
                "createField"
                , bp::pure_virtual( createField_function_type(&::OSG::FieldDescriptionBase::createField) )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::OSG::FieldDescriptionBase::createGetHandler
        
            typedef ::OSG::GetFieldHandlePtr ( ::OSG::FieldDescriptionBase::*createGetHandler_function_type )( ::OSG::Field const *,::OSG::FieldContainer * ) ;
            
            FieldDescriptionBase_exposer.def( 
                "createGetHandler"
                , bp::pure_virtual( createGetHandler_function_type(&::OSG::FieldDescriptionBase::createGetHandler) )
                , ( bp::arg("pField"), bp::arg("pCnt") ) );
        
        }
        { //::OSG::FieldDescriptionBase::destroyField
        
            typedef void ( ::OSG::FieldDescriptionBase::*destroyField_function_type )( ::OSG::Field * ) const;
            
            FieldDescriptionBase_exposer.def( 
                "destroyField"
                , bp::pure_virtual( destroyField_function_type(&::OSG::FieldDescriptionBase::destroyField) )
                , ( bp::arg("pField") ) );
        
        }
        { //::OSG::FieldDescriptionBase::editField
        
            typedef ::OSG::EditFieldHandlePtr ( ::OSG::FieldDescriptionBase::*editField_function_type )( ::OSG::ReflexiveContainer & ) const;
            
            FieldDescriptionBase_exposer.def( 
                "editField"
                , editField_function_type( &::OSG::FieldDescriptionBase::editField )
                , ( bp::arg("oContainer") ) );
        
        }
        { //::OSG::FieldDescriptionBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::FieldDescriptionBase::*getBinSize_function_type )( ::OSG::Field * ) const;
            
            FieldDescriptionBase_exposer.def( 
                "getBinSize"
                , bp::pure_virtual( getBinSize_function_type(&::OSG::FieldDescriptionBase::getBinSize) )
                , ( bp::arg("pField") ) );
        
        }
        { //::OSG::FieldDescriptionBase::getCName
        
            typedef ::OSG::Char8 const * ( ::OSG::FieldDescriptionBase::*getCName_function_type )(  ) const;
            
            FieldDescriptionBase_exposer.def( 
                "getCName"
                , getCName_function_type( &::OSG::FieldDescriptionBase::getCName ) );
        
        }
        { //::OSG::FieldDescriptionBase::getDocumentation
        
            typedef ::std::string ( ::OSG::FieldDescriptionBase::*getDocumentation_function_type )(  ) const;
            
            FieldDescriptionBase_exposer.def( 
                "getDocumentation"
                , getDocumentation_function_type( &::OSG::FieldDescriptionBase::getDocumentation ) );
        
        }
        { //::OSG::FieldDescriptionBase::getField
        
            typedef ::OSG::GetFieldHandlePtr ( ::OSG::FieldDescriptionBase::*getField_function_type )( ::OSG::ReflexiveContainer const & ) const;
            
            FieldDescriptionBase_exposer.def( 
                "getField"
                , getField_function_type( &::OSG::FieldDescriptionBase::getField )
                , ( bp::arg("oContainer") ) );
        
        }
        { //::OSG::FieldDescriptionBase::getFieldId
        
            typedef ::OSG::UInt32 ( ::OSG::FieldDescriptionBase::*getFieldId_function_type )(  ) const;
            
            FieldDescriptionBase_exposer.def( 
                "getFieldId"
                , getFieldId_function_type( &::OSG::FieldDescriptionBase::getFieldId ) );
        
        }
        { //::OSG::FieldDescriptionBase::getFieldMask
        
            typedef ::OSG::BitVector ( ::OSG::FieldDescriptionBase::*getFieldMask_function_type )(  ) const;
            
            FieldDescriptionBase_exposer.def( 
                "getFieldMask"
                , getFieldMask_function_type( &::OSG::FieldDescriptionBase::getFieldMask ) );
        
        }
        { //::OSG::FieldDescriptionBase::getFieldType
        
            typedef ::OSG::FieldType const & ( ::OSG::FieldDescriptionBase::*getFieldType_function_type )(  ) const;
            
            FieldDescriptionBase_exposer.def( 
                "getFieldType"
                , getFieldType_function_type( &::OSG::FieldDescriptionBase::getFieldType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FieldDescriptionBase::getFlags
        
            typedef ::OSG::UInt32 ( ::OSG::FieldDescriptionBase::*getFlags_function_type )(  ) const;
            
            FieldDescriptionBase_exposer.def( 
                "getFlags"
                , getFlags_function_type( &::OSG::FieldDescriptionBase::getFlags ) );
        
        }
        { //::OSG::FieldDescriptionBase::getName
        
            typedef ::std::string ( ::OSG::FieldDescriptionBase::*getName_function_type )(  ) const;
            
            FieldDescriptionBase_exposer.def( 
                "getName"
                , getName_function_type( &::OSG::FieldDescriptionBase::getName ) );
        
        }
        { //::OSG::FieldDescriptionBase::getTypeId
        
            typedef ::OSG::UInt32 ( ::OSG::FieldDescriptionBase::*getTypeId_function_type )(  ) const;
            
            FieldDescriptionBase_exposer.def( 
                "getTypeId"
                , getTypeId_function_type( &::OSG::FieldDescriptionBase::getTypeId ) );
        
        }
        { //::OSG::FieldDescriptionBase::isDynamic
        
            typedef bool ( ::OSG::FieldDescriptionBase::*isDynamic_function_type )(  ) const;
            
            FieldDescriptionBase_exposer.def( 
                "isDynamic"
                , isDynamic_function_type( &::OSG::FieldDescriptionBase::isDynamic ) );
        
        }
        { //::OSG::FieldDescriptionBase::isInternal
        
            typedef bool ( ::OSG::FieldDescriptionBase::*isInternal_function_type )(  ) const;
            
            FieldDescriptionBase_exposer.def( 
                "isInternal"
                , isInternal_function_type( &::OSG::FieldDescriptionBase::isInternal ) );
        
        }
        { //::OSG::FieldDescriptionBase::isMField
        
            typedef bool ( ::OSG::FieldDescriptionBase::*isMField_function_type )(  ) const;
            
            FieldDescriptionBase_exposer.def( 
                "isMField"
                , isMField_function_type( &::OSG::FieldDescriptionBase::isMField ) );
        
        }
        { //::OSG::FieldDescriptionBase::isSField
        
            typedef bool ( ::OSG::FieldDescriptionBase::*isSField_function_type )(  ) const;
            
            FieldDescriptionBase_exposer.def( 
                "isSField"
                , isSField_function_type( &::OSG::FieldDescriptionBase::isSField ) );
        
        }
        { //::OSG::FieldDescriptionBase::isShared
        
            typedef bool ( FieldDescriptionBase_wrapper::*isShared_function_type )( ::OSG::Field * ) ;
            
            FieldDescriptionBase_exposer.def( 
                "isShared"
                , isShared_function_type( &FieldDescriptionBase_wrapper::isShared )
                , ( bp::arg("pField") ) );
        
        }
        { //::OSG::FieldDescriptionBase::isValid
        
            typedef bool ( ::OSG::FieldDescriptionBase::*isValid_function_type )(  ) const;
            
            FieldDescriptionBase_exposer.def( 
                "isValid"
                , isValid_function_type( &::OSG::FieldDescriptionBase::isValid ) );
        
        }
        { //::OSG::FieldDescriptionBase::setDynamic
        
            typedef void ( FieldDescriptionBase_wrapper::*setDynamic_function_type )( bool ) ;
            
            FieldDescriptionBase_exposer.def( 
                "setDynamic"
                , setDynamic_function_type( &FieldDescriptionBase_wrapper::setDynamic )
                , ( bp::arg("bDynamic") ) );
        
        }
        { //::OSG::FieldDescriptionBase::setFieldId
        
            typedef void ( ::OSG::FieldDescriptionBase::*setFieldId_function_type )( ::OSG::UInt32 ) ;
            
            FieldDescriptionBase_exposer.def( 
                "setFieldId"
                , setFieldId_function_type( &::OSG::FieldDescriptionBase::setFieldId )
                , ( bp::arg("uiFieldId") ) );
        
        }
        { //::OSG::FieldDescriptionBase::setFieldMask
        
            typedef void ( ::OSG::FieldDescriptionBase::*setFieldMask_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            FieldDescriptionBase_exposer.def( 
                "setFieldMask"
                , setFieldMask_function_type( &::OSG::FieldDescriptionBase::setFieldMask )
                , ( bp::arg("vFieldMask") ) );
        
        }
        { //::OSG::FieldDescriptionBase::setFlags
        
            typedef void ( ::OSG::FieldDescriptionBase::*setFlags_function_type )( ::OSG::UInt32 ) ;
            
            FieldDescriptionBase_exposer.def( 
                "setFlags"
                , setFlags_function_type( &::OSG::FieldDescriptionBase::setFlags )
                , ( bp::arg("uiFlags") ) );
        
        }
        { //::OSG::FieldDescriptionBase::sync
        
            typedef void ( ::OSG::FieldDescriptionBase::*sync_function_type )( ::OSG::Field *,::OSG::Field *,::OSG::AspectOffsetStore &,::OSG::ConstFieldMaskArg,::OSG::UInt32 const ) const;
            
            FieldDescriptionBase_exposer.def( 
                "sync"
                , bp::pure_virtual( sync_function_type(&::OSG::FieldDescriptionBase::sync) )
                , ( bp::arg("pTo"), bp::arg("pFrom"), bp::arg("oOffsets"), bp::arg("syncMode"), bp::arg("uiSyncInfo") ) );
        
        }
    }

}
