// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGBase_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "ReflexiveContainerType.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_ReflexiveContainerType_class(){

    { //::OSG::ReflexiveContainerType
        typedef bp::class_< OSG::ReflexiveContainerType, bp::bases< OSG::DataType >, boost::noncopyable > ReflexiveContainerType_exposer_t;
        ReflexiveContainerType_exposer_t ReflexiveContainerType_exposer = ReflexiveContainerType_exposer_t( "ReflexiveContainerType", bp::no_init );
        bp::scope ReflexiveContainerType_scope( ReflexiveContainerType_exposer );
        { //::OSG::ReflexiveContainerType::addDescription
        
            typedef ::OSG::UInt32 ( ::OSG::ReflexiveContainerType::*addDescription_function_type )( ::OSG::FieldDescriptionBase const & ) ;
            
            ReflexiveContainerType_exposer.def( 
                "addDescription"
                , addDescription_function_type( &::OSG::ReflexiveContainerType::addDescription )
                , ( bp::arg("desc") ) );
        
        }
        { //::OSG::ReflexiveContainerType::addInitialDesc
        
            typedef void ( ::OSG::ReflexiveContainerType::*addInitialDesc_function_type )( ::OSG::FieldDescriptionBase * ) ;
            
            ReflexiveContainerType_exposer.def( 
                "addInitialDesc"
                , addInitialDesc_function_type( &::OSG::ReflexiveContainerType::addInitialDesc )
                , ( bp::arg("pDesc") ) );
        
        }
        { //::OSG::ReflexiveContainerType::clearFieldsUnmarkedOnCreate
        
            typedef void ( ::OSG::ReflexiveContainerType::*clearFieldsUnmarkedOnCreate_function_type )( long unsigned int const ) ;
            
            ReflexiveContainerType_exposer.def( 
                "clearFieldsUnmarkedOnCreate"
                , clearFieldsUnmarkedOnCreate_function_type( &::OSG::ReflexiveContainerType::clearFieldsUnmarkedOnCreate )
                , ( bp::arg("bvFieldMasks") ) );
        
        }
        { //::OSG::ReflexiveContainerType::dumpFieldInfo
        
            typedef void ( ::OSG::ReflexiveContainerType::*dumpFieldInfo_function_type )(  ) const;
            
            ReflexiveContainerType_exposer.def( 
                "dumpFieldInfo"
                , dumpFieldInfo_function_type( &::OSG::ReflexiveContainerType::dumpFieldInfo ) );
        
        }
        { //::OSG::ReflexiveContainerType::getFieldDesc
        
            typedef ::OSG::FieldDescriptionBase * ( ::OSG::ReflexiveContainerType::*getFieldDesc_function_type )( ::OSG::UInt32 ) ;
            
            ReflexiveContainerType_exposer.def( 
                "getFieldDesc"
                , getFieldDesc_function_type( &::OSG::ReflexiveContainerType::getFieldDesc )
                , ( bp::arg("uiFieldId") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ReflexiveContainerType::getFieldDesc
        
            typedef ::OSG::FieldDescriptionBase * ( ::OSG::ReflexiveContainerType::*getFieldDesc_function_type )( ::OSG::UInt32 ) const;
            
            ReflexiveContainerType_exposer.def( 
                "getFieldDesc"
                , getFieldDesc_function_type( &::OSG::ReflexiveContainerType::getFieldDesc )
                , ( bp::arg("uiFieldId") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ReflexiveContainerType::getFieldDesc
        
            typedef ::OSG::FieldDescriptionBase * ( ::OSG::ReflexiveContainerType::*getFieldDesc_function_type )( ::OSG::Char8 const * ) ;
            
            ReflexiveContainerType_exposer.def( 
                "getFieldDesc"
                , getFieldDesc_function_type( &::OSG::ReflexiveContainerType::getFieldDesc )
                , ( bp::arg("szFieldName") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ReflexiveContainerType::getFieldDesc
        
            typedef ::OSG::FieldDescriptionBase * ( ::OSG::ReflexiveContainerType::*getFieldDesc_function_type )( ::OSG::Char8 const * ) const;
            
            ReflexiveContainerType_exposer.def( 
                "getFieldDesc"
                , getFieldDesc_function_type( &::OSG::ReflexiveContainerType::getFieldDesc )
                , ( bp::arg("szFieldName") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ReflexiveContainerType::getGroupId
        
            typedef ::OSG::UInt16 ( ::OSG::ReflexiveContainerType::*getGroupId_function_type )(  ) const;
            
            ReflexiveContainerType_exposer.def( 
                "getGroupId"
                , getGroupId_function_type( &::OSG::ReflexiveContainerType::getGroupId ) );
        
        }
        { //::OSG::ReflexiveContainerType::getNumFieldDescs
        
            typedef ::OSG::UInt32 ( ::OSG::ReflexiveContainerType::*getNumFieldDescs_function_type )(  ) const;
            
            ReflexiveContainerType_exposer.def( 
                "getNumFieldDescs"
                , getNumFieldDescs_function_type( &::OSG::ReflexiveContainerType::getNumFieldDescs ) );
        
        }
        { //::OSG::ReflexiveContainerType::getUnmarkedOnCreate
        
            typedef ::OSG::BitVector ( ::OSG::ReflexiveContainerType::*getUnmarkedOnCreate_function_type )(  ) const;
            
            ReflexiveContainerType_exposer.def( 
                "getUnmarkedOnCreate"
                , getUnmarkedOnCreate_function_type( &::OSG::ReflexiveContainerType::getUnmarkedOnCreate ) );
        
        }
        { //::OSG::ReflexiveContainerType::setFieldsUnmarkedOnCreate
        
            typedef void ( ::OSG::ReflexiveContainerType::*setFieldsUnmarkedOnCreate_function_type )( long unsigned int const ) ;
            
            ReflexiveContainerType_exposer.def( 
                "setFieldsUnmarkedOnCreate"
                , setFieldsUnmarkedOnCreate_function_type( &::OSG::ReflexiveContainerType::setFieldsUnmarkedOnCreate )
                , ( bp::arg("bvFieldMasks") ) );
        
        }
        { //::OSG::ReflexiveContainerType::subDescription
        
            typedef bool ( ::OSG::ReflexiveContainerType::*subDescription_function_type )( ::OSG::UInt32 ) ;
            
            ReflexiveContainerType_exposer.def( 
                "subDescription"
                , subDescription_function_type( &::OSG::ReflexiveContainerType::subDescription )
                , ( bp::arg("uiFieldId") ) );
        
        }
    }

}
