// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGBase_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "SphereVolume.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_SphereVolume_class(){

    { //::OSG::SphereVolume
        typedef bp::class_< OSG::SphereVolume, bp::bases< OSG::Volume > > SphereVolume_exposer_t;
        SphereVolume_exposer_t SphereVolume_exposer = SphereVolume_exposer_t( "SphereVolume", bp::init< >() );
        bp::scope SphereVolume_scope( SphereVolume_exposer );
        SphereVolume_exposer.def( bp::init< OSG::SphereVolume const & >(( bp::arg("obj") )) );
        SphereVolume_exposer.def( bp::init< OSG::Pnt3f const &, OSG::Real32 >(( bp::arg("c"), bp::arg("r") )) );
        { //::OSG::SphereVolume::dump
        
            typedef void ( ::OSG::SphereVolume::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            SphereVolume_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::SphereVolume::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::SphereVolume::extendBy
        
            typedef void ( ::OSG::SphereVolume::*extendBy_function_type )( ::OSG::Pnt3f const & ) ;
            
            SphereVolume_exposer.def( 
                "extendBy"
                , extendBy_function_type( &::OSG::SphereVolume::extendBy )
                , ( bp::arg("pt") ) );
        
        }
        { //::OSG::SphereVolume::extendBy
        
            typedef void ( ::OSG::SphereVolume::*extendBy_function_type )( ::OSG::Volume const & ) ;
            
            SphereVolume_exposer.def( 
                "extendBy"
                , extendBy_function_type( &::OSG::SphereVolume::extendBy )
                , ( bp::arg("volume") ) );
        
        }
        { //::OSG::SphereVolume::extendBy
        
            typedef void ( ::OSG::SphereVolume::*extendBy_function_type )( ::OSG::SphereVolume const & ) ;
            
            SphereVolume_exposer.def( 
                "extendBy"
                , extendBy_function_type( &::OSG::SphereVolume::extendBy )
                , ( bp::arg("volume") ) );
        
        }
        { //::OSG::SphereVolume::getBounds
        
            typedef void ( ::OSG::SphereVolume::*getBounds_function_type )( ::OSG::Pnt3f &,::OSG::Pnt3f & ) const;
            
            SphereVolume_exposer.def( 
                "getBounds"
                , getBounds_function_type( &::OSG::SphereVolume::getBounds )
                , ( bp::arg("min"), bp::arg("max") ) );
        
        }
        { //::OSG::SphereVolume::getCenter
        
            typedef void ( ::OSG::SphereVolume::*getCenter_function_type )( ::OSG::Pnt3f & ) const;
            
            SphereVolume_exposer.def( 
                "getCenter"
                , getCenter_function_type( &::OSG::SphereVolume::getCenter )
                , ( bp::arg("center") ) );
        
        }
        { //::OSG::SphereVolume::getCenter
        
            typedef ::OSG::Pnt3f const & ( ::OSG::SphereVolume::*getCenter_function_type )(  ) const;
            
            SphereVolume_exposer.def( 
                "getCenter"
                , getCenter_function_type( &::OSG::SphereVolume::getCenter )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::SphereVolume::getRadius
        
            typedef ::OSG::Real32 ( ::OSG::SphereVolume::*getRadius_function_type )(  ) const;
            
            SphereVolume_exposer.def( 
                "getRadius"
                , getRadius_function_type( &::OSG::SphereVolume::getRadius ) );
        
        }
        { //::OSG::SphereVolume::getScalarVolume
        
            typedef ::OSG::Real32 ( ::OSG::SphereVolume::*getScalarVolume_function_type )(  ) const;
            
            SphereVolume_exposer.def( 
                "getScalarVolume"
                , getScalarVolume_function_type( &::OSG::SphereVolume::getScalarVolume ) );
        
        }
        { //::OSG::SphereVolume::intersect
        
            typedef bool ( ::OSG::SphereVolume::*intersect_function_type )( ::OSG::Pnt3f const & ) const;
            
            SphereVolume_exposer.def( 
                "intersect"
                , intersect_function_type( &::OSG::SphereVolume::intersect )
                , ( bp::arg("point") ) );
        
        }
        { //::OSG::SphereVolume::intersect
        
            typedef bool ( ::OSG::SphereVolume::*intersect_function_type )( ::OSG::Line const & ) const;
            
            SphereVolume_exposer.def( 
                "intersect"
                , intersect_function_type( &::OSG::SphereVolume::intersect )
                , ( bp::arg("line") ) );
        
        }
        { //::OSG::SphereVolume::intersect
        
            typedef bool ( ::OSG::SphereVolume::*intersect_function_type )( ::OSG::Line const &,::OSG::Real32 &,::OSG::Real32 & ) const;
            
            SphereVolume_exposer.def( 
                "intersect"
                , intersect_function_type( &::OSG::SphereVolume::intersect )
                , ( bp::arg("line"), bp::arg("enter"), bp::arg("exit") ) );
        
        }
        { //::OSG::SphereVolume::intersect
        
            typedef bool ( ::OSG::SphereVolume::*intersect_function_type )( ::OSG::Volume const & ) const;
            
            SphereVolume_exposer.def( 
                "intersect"
                , intersect_function_type( &::OSG::SphereVolume::intersect )
                , ( bp::arg("volume") ) );
        
        }
        { //::OSG::SphereVolume::intersect
        
            typedef bool ( ::OSG::SphereVolume::*intersect_function_type )( ::OSG::SphereVolume const & ) const;
            
            SphereVolume_exposer.def( 
                "intersect"
                , intersect_function_type( &::OSG::SphereVolume::intersect )
                , ( bp::arg("volume") ) );
        
        }
        { //::OSG::SphereVolume::isOnSurface
        
            typedef bool ( ::OSG::SphereVolume::*isOnSurface_function_type )( ::OSG::Pnt3f const & ) const;
            
            SphereVolume_exposer.def( 
                "isOnSurface"
                , isOnSurface_function_type( &::OSG::SphereVolume::isOnSurface )
                , ( bp::arg("point") ) );
        
        }
        { //::OSG::SphereVolume::print
        
            typedef void ( ::OSG::SphereVolume::*print_function_type )( ::std::ostream & ) const;
            
            SphereVolume_exposer.def( 
                "print"
                , print_function_type( &::OSG::SphereVolume::print )
                , ( bp::arg("os") ) );
        
        }
        { //::OSG::SphereVolume::setCenter
        
            typedef void ( ::OSG::SphereVolume::*setCenter_function_type )( ::OSG::Pnt3f const & ) ;
            
            SphereVolume_exposer.def( 
                "setCenter"
                , setCenter_function_type( &::OSG::SphereVolume::setCenter )
                , ( bp::arg("c") ) );
        
        }
        { //::OSG::SphereVolume::setRadius
        
            typedef void ( ::OSG::SphereVolume::*setRadius_function_type )( ::OSG::Real32 ) ;
            
            SphereVolume_exposer.def( 
                "setRadius"
                , setRadius_function_type( &::OSG::SphereVolume::setRadius )
                , ( bp::arg("r") ) );
        
        }
        { //::OSG::SphereVolume::setValue
        
            typedef void ( ::OSG::SphereVolume::*setValue_function_type )( ::OSG::Pnt3f const &,::OSG::Real32 ) ;
            
            SphereVolume_exposer.def( 
                "setValue"
                , setValue_function_type( &::OSG::SphereVolume::setValue )
                , ( bp::arg("c"), bp::arg("r") ) );
        
        }
        { //::OSG::SphereVolume::transform
        
            typedef void ( ::OSG::SphereVolume::*transform_function_type )( ::OSG::Matrix const & ) ;
            
            SphereVolume_exposer.def( 
                "transform"
                , transform_function_type( &::OSG::SphereVolume::transform )
                , ( bp::arg("mat") ) );
        
        }
    }

}
