// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGBase_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "Volume.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct Volume_wrapper : OSG::Volume, bp::wrapper< OSG::Volume > {

    virtual void dump( ::OSG::UInt32 uiIndent=0, long unsigned int const bvFlags=0 ) const {
        bp::override func_dump = this->get_override( "dump" );
        func_dump( uiIndent, bvFlags );
    }

    virtual void extendBy( ::OSG::Pnt3f const & pt ){
        bp::override func_extendBy = this->get_override( "extendBy" );
        func_extendBy( boost::ref(pt) );
    }

    virtual void extendBy( ::OSG::Volume const & volume ){
        bp::override func_extendBy = this->get_override( "extendBy" );
        func_extendBy( boost::ref(volume) );
    }

    virtual void getBounds( ::OSG::Pnt3f & min, ::OSG::Pnt3f & max ) const {
        bp::override func_getBounds = this->get_override( "getBounds" );
        func_getBounds( boost::ref(min), boost::ref(max) );
    }

    virtual void getCenter( ::OSG::Pnt3f & center ) const {
        bp::override func_getCenter = this->get_override( "getCenter" );
        func_getCenter( boost::ref(center) );
    }

    virtual ::OSG::Real32 getScalarVolume(  ) const {
        bp::override func_getScalarVolume = this->get_override( "getScalarVolume" );
        return func_getScalarVolume(  );
    }

    virtual bool intersect( ::OSG::Pnt3f const & point ) const {
        bp::override func_intersect = this->get_override( "intersect" );
        return func_intersect( boost::ref(point) );
    }

    virtual bool intersect( ::OSG::Line const & line ) const {
        bp::override func_intersect = this->get_override( "intersect" );
        return func_intersect( boost::ref(line) );
    }

    virtual bool intersect( ::OSG::Line const & line, ::OSG::Real32 & enter, ::OSG::Real32 & exit ) const {
        bp::override func_intersect = this->get_override( "intersect" );
        return func_intersect( boost::ref(line), enter, exit );
    }

    virtual bool intersect( ::OSG::Volume const & volume ) const {
        bp::override func_intersect = this->get_override( "intersect" );
        return func_intersect( boost::ref(volume) );
    }

    virtual bool isOnSurface( ::OSG::Pnt3f const & point ) const {
        bp::override func_isOnSurface = this->get_override( "isOnSurface" );
        return func_isOnSurface( boost::ref(point) );
    }

    virtual void print( ::std::ostream & os ) const {
        bp::override func_print = this->get_override( "print" );
        func_print( boost::ref(os) );
    }

    virtual void transform( ::OSG::Matrix const & matrix ){
        bp::override func_transform = this->get_override( "transform" );
        func_transform( boost::ref(matrix) );
    }

};

void register_Volume_class(){

    { //::OSG::Volume
        typedef bp::class_< Volume_wrapper, boost::noncopyable > Volume_exposer_t;
        Volume_exposer_t Volume_exposer = Volume_exposer_t( "Volume", bp::no_init );
        bp::scope Volume_scope( Volume_exposer );
        { //::OSG::Volume::dump
        
            typedef void ( ::OSG::Volume::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            Volume_exposer.def( 
                "dump"
                , bp::pure_virtual( dump_function_type(&::OSG::Volume::dump) )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::Volume::extendBy
        
            typedef void ( ::OSG::Volume::*extendBy_function_type )( ::OSG::Pnt3f const & ) ;
            
            Volume_exposer.def( 
                "extendBy"
                , bp::pure_virtual( extendBy_function_type(&::OSG::Volume::extendBy) )
                , ( bp::arg("pt") ) );
        
        }
        { //::OSG::Volume::extendBy
        
            typedef void ( ::OSG::Volume::*extendBy_function_type )( ::OSG::Volume const & ) ;
            
            Volume_exposer.def( 
                "extendBy"
                , bp::pure_virtual( extendBy_function_type(&::OSG::Volume::extendBy) )
                , ( bp::arg("volume") ) );
        
        }
        { //::OSG::Volume::getBounds
        
            typedef void ( ::OSG::Volume::*getBounds_function_type )( ::OSG::Pnt3f &,::OSG::Pnt3f & ) const;
            
            Volume_exposer.def( 
                "getBounds"
                , bp::pure_virtual( getBounds_function_type(&::OSG::Volume::getBounds) )
                , ( bp::arg("min"), bp::arg("max") ) );
        
        }
        { //::OSG::Volume::getCenter
        
            typedef void ( ::OSG::Volume::*getCenter_function_type )( ::OSG::Pnt3f & ) const;
            
            Volume_exposer.def( 
                "getCenter"
                , bp::pure_virtual( getCenter_function_type(&::OSG::Volume::getCenter) )
                , ( bp::arg("center") ) );
        
        }
        { //::OSG::Volume::getMax
        
            typedef ::OSG::Pnt3f ( ::OSG::Volume::*getMax_function_type )(  ) const;
            
            Volume_exposer.def( 
                "getMax"
                , getMax_function_type( &::OSG::Volume::getMax ) );
        
        }
        { //::OSG::Volume::getMin
        
            typedef ::OSG::Pnt3f ( ::OSG::Volume::*getMin_function_type )(  ) const;
            
            Volume_exposer.def( 
                "getMin"
                , getMin_function_type( &::OSG::Volume::getMin ) );
        
        }
        { //::OSG::Volume::getScalarVolume
        
            typedef ::OSG::Real32 ( ::OSG::Volume::*getScalarVolume_function_type )(  ) const;
            
            Volume_exposer.def( 
                "getScalarVolume"
                , bp::pure_virtual( getScalarVolume_function_type(&::OSG::Volume::getScalarVolume) ) );
        
        }
        { //::OSG::Volume::getState
        
            typedef ::OSG::UInt16 ( ::OSG::Volume::*getState_function_type )(  ) const;
            
            Volume_exposer.def( 
                "getState"
                , getState_function_type( &::OSG::Volume::getState ) );
        
        }
        { //::OSG::Volume::intersect
        
            typedef bool ( ::OSG::Volume::*intersect_function_type )( ::OSG::Pnt3f const & ) const;
            
            Volume_exposer.def( 
                "intersect"
                , bp::pure_virtual( intersect_function_type(&::OSG::Volume::intersect) )
                , ( bp::arg("point") ) );
        
        }
        { //::OSG::Volume::intersect
        
            typedef bool ( ::OSG::Volume::*intersect_function_type )( ::OSG::Line const & ) const;
            
            Volume_exposer.def( 
                "intersect"
                , bp::pure_virtual( intersect_function_type(&::OSG::Volume::intersect) )
                , ( bp::arg("line") ) );
        
        }
        { //::OSG::Volume::intersect
        
            typedef bool ( ::OSG::Volume::*intersect_function_type )( ::OSG::Line const &,::OSG::Real32 &,::OSG::Real32 & ) const;
            
            Volume_exposer.def( 
                "intersect"
                , bp::pure_virtual( intersect_function_type(&::OSG::Volume::intersect) )
                , ( bp::arg("line"), bp::arg("enter"), bp::arg("exit") ) );
        
        }
        { //::OSG::Volume::intersect
        
            typedef bool ( ::OSG::Volume::*intersect_function_type )( ::OSG::Volume const & ) const;
            
            Volume_exposer.def( 
                "intersect"
                , bp::pure_virtual( intersect_function_type(&::OSG::Volume::intersect) )
                , ( bp::arg("volume") ) );
        
        }
        { //::OSG::Volume::invalidate
        
            typedef void ( ::OSG::Volume::*invalidate_function_type )(  ) ;
            
            Volume_exposer.def( 
                "invalidate"
                , invalidate_function_type( &::OSG::Volume::invalidate ) );
        
        }
        { //::OSG::Volume::isEmpty
        
            typedef bool ( ::OSG::Volume::*isEmpty_function_type )(  ) const;
            
            Volume_exposer.def( 
                "isEmpty"
                , isEmpty_function_type( &::OSG::Volume::isEmpty ) );
        
        }
        { //::OSG::Volume::isInfinite
        
            typedef bool ( ::OSG::Volume::*isInfinite_function_type )(  ) const;
            
            Volume_exposer.def( 
                "isInfinite"
                , isInfinite_function_type( &::OSG::Volume::isInfinite ) );
        
        }
        { //::OSG::Volume::isInvalidated
        
            typedef bool ( ::OSG::Volume::*isInvalidated_function_type )(  ) const;
            
            Volume_exposer.def( 
                "isInvalidated"
                , isInvalidated_function_type( &::OSG::Volume::isInvalidated ) );
        
        }
        { //::OSG::Volume::isOnSurface
        
            typedef bool ( ::OSG::Volume::*isOnSurface_function_type )( ::OSG::Pnt3f const & ) const;
            
            Volume_exposer.def( 
                "isOnSurface"
                , bp::pure_virtual( isOnSurface_function_type(&::OSG::Volume::isOnSurface) )
                , ( bp::arg("point") ) );
        
        }
        { //::OSG::Volume::isStatic
        
            typedef bool ( ::OSG::Volume::*isStatic_function_type )(  ) const;
            
            Volume_exposer.def( 
                "isStatic"
                , isStatic_function_type( &::OSG::Volume::isStatic ) );
        
        }
        { //::OSG::Volume::isUntouchable
        
            typedef bool ( ::OSG::Volume::*isUntouchable_function_type )(  ) const;
            
            Volume_exposer.def( 
                "isUntouchable"
                , isUntouchable_function_type( &::OSG::Volume::isUntouchable ) );
        
        }
        { //::OSG::Volume::isValid
        
            typedef bool ( ::OSG::Volume::*isValid_function_type )(  ) const;
            
            Volume_exposer.def( 
                "isValid"
                , isValid_function_type( &::OSG::Volume::isValid ) );
        
        }
        { //::OSG::Volume::print
        
            typedef void ( ::OSG::Volume::*print_function_type )( ::std::ostream & ) const;
            
            Volume_exposer.def( 
                "print"
                , bp::pure_virtual( print_function_type(&::OSG::Volume::print) )
                , ( bp::arg("os") ) );
        
        }
        { //::OSG::Volume::setEmpty
        
            typedef void ( ::OSG::Volume::*setEmpty_function_type )( bool const ) ;
            
            Volume_exposer.def( 
                "setEmpty"
                , setEmpty_function_type( &::OSG::Volume::setEmpty )
                , ( bp::arg("value")=(bool const)(true) ) );
        
        }
        { //::OSG::Volume::setInfinite
        
            typedef void ( ::OSG::Volume::*setInfinite_function_type )( bool const ) ;
            
            Volume_exposer.def( 
                "setInfinite"
                , setInfinite_function_type( &::OSG::Volume::setInfinite )
                , ( bp::arg("value")=(bool const)(true) ) );
        
        }
        { //::OSG::Volume::setState
        
            typedef void ( ::OSG::Volume::*setState_function_type )( ::OSG::UInt16 ) ;
            
            Volume_exposer.def( 
                "setState"
                , setState_function_type( &::OSG::Volume::setState )
                , ( bp::arg("val") ) );
        
        }
        { //::OSG::Volume::setStatic
        
            typedef void ( ::OSG::Volume::*setStatic_function_type )( bool const ) ;
            
            Volume_exposer.def( 
                "setStatic"
                , setStatic_function_type( &::OSG::Volume::setStatic )
                , ( bp::arg("value")=(bool const)(true) ) );
        
        }
        { //::OSG::Volume::setValid
        
            typedef void ( ::OSG::Volume::*setValid_function_type )( bool const ) ;
            
            Volume_exposer.def( 
                "setValid"
                , setValid_function_type( &::OSG::Volume::setValid )
                , ( bp::arg("value")=(bool const)(true) ) );
        
        }
        { //::OSG::Volume::transform
        
            typedef void ( ::OSG::Volume::*transform_function_type )( ::OSG::Matrix const & ) ;
            
            Volume_exposer.def( 
                "transform"
                , bp::pure_virtual( transform_function_type(&::OSG::Volume::transform) )
                , ( bp::arg("matrix") ) );
        
        }
    }

}
