// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGBase_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "HardwareContext.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_HardwareContext_class(){

    { //::OSG::HardwareContext
        typedef bp::class_< OSG::HardwareContext, bp::bases< OSG::HardwareContextBase >, boost::noncopyable > HardwareContext_exposer_t;
        HardwareContext_exposer_t HardwareContext_exposer = HardwareContext_exposer_t( "HardwareContext", bp::no_init );
        bp::scope HardwareContext_scope( HardwareContext_exposer );
        bp::enum_< OSG::HardwareContext::InitState>("InitState")
            .value("OpenGLInitialized", OSG::HardwareContext::OpenGLInitialized)
            .value("CudaInitialized", OSG::HardwareContext::CudaInitialized)
            .value("OpenCLInitialized", OSG::HardwareContext::OpenCLInitialized)
            .export_values()
            ;
        bp::enum_< OSG::HardwareContext::OpenGLFeatures>("OpenGLFeatures")
            .value("HasAttribAliasing", OSG::HardwareContext::HasAttribAliasing)
            .value("HasVAODListProblems", OSG::HardwareContext::HasVAODListProblems)
            .export_values()
            ;
        { //::OSG::HardwareContext::changed
        
            typedef void ( ::OSG::HardwareContext::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            HardwareContext_exposer.def( 
                "changed"
                , changed_function_type( &::OSG::HardwareContext::changed )
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("details") ) );
        
        }
        { //::OSG::HardwareContext::dump
        
            typedef void ( ::OSG::HardwareContext::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            HardwareContext_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::HardwareContext::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::HardwareContext::getOGLFeatures
        
            typedef ::OSG::UInt32 ( ::OSG::HardwareContext::*getOGLFeatures_function_type )(  ) const;
            
            HardwareContext_exposer.def( 
                "getOGLFeatures"
                , getOGLFeatures_function_type( &::OSG::HardwareContext::getOGLFeatures ) );
        
        }
        { //::OSG::HardwareContext::hasAttribAliasing
        
            typedef bool ( ::OSG::HardwareContext::*hasAttribAliasing_function_type )(  ) const;
            
            HardwareContext_exposer.def( 
                "hasAttribAliasing"
                , hasAttribAliasing_function_type( &::OSG::HardwareContext::hasAttribAliasing ) );
        
        }
        { //::OSG::HardwareContext::hasVAODListProblems
        
            typedef bool ( ::OSG::HardwareContext::*hasVAODListProblems_function_type )(  ) const;
            
            HardwareContext_exposer.def( 
                "hasVAODListProblems"
                , hasVAODListProblems_function_type( &::OSG::HardwareContext::hasVAODListProblems ) );
        
        }
        { //::OSG::HardwareContext::setCudaInit
        
            typedef void ( ::OSG::HardwareContext::*setCudaInit_function_type )(  ) ;
            
            HardwareContext_exposer.def( 
                "setCudaInit"
                , setCudaInit_function_type( &::OSG::HardwareContext::setCudaInit ) );
        
        }
        { //::OSG::HardwareContext::submitTask
        
            typedef void ( ::OSG::HardwareContext::*submitTask_function_type )( ::OSG::HardwareContextTask * ) ;
            
            HardwareContext_exposer.def( 
                "submitTask"
                , submitTask_function_type( &::OSG::HardwareContext::submitTask )
                , ( bp::arg("pTask") ) );
        
        }
        { //::OSG::HardwareContext::submitTaskAndWait
        
            typedef void ( ::OSG::HardwareContext::*submitTaskAndWait_function_type )( ::OSG::BlockingTask * ) ;
            
            HardwareContext_exposer.def( 
                "submitTaskAndWait"
                , submitTaskAndWait_function_type( &::OSG::HardwareContext::submitTaskAndWait )
                , ( bp::arg("pTask") ) );
        
        }
        pyopensg::register_transit< OSG::HardwareContext >::execute();
        bp::register_ptr_to_python< OSG::HardwareContext::ObjRecPtr >();
        bp::implicitly_convertible< OSG::HardwareContext::ObjRecPtr, OSG::HardwareContext* >();
        bp::implicitly_convertible< OSG::HardwareContext::ObjRecPtr, OSG::HardwareContext::ObjCPtr >();
        bp::implicitly_convertible< OSG::HardwareContext::ObjRecPtr, OSG::AttachmentContainer* >();
        bp::implicitly_convertible< OSG::HardwareContext::ObjRecPtr, OSG::AttachmentContainer::ObjRecPtr >();
        bp::implicitly_convertible<OSG::HardwareContext::ObjRecPtr, OSG::AttachmentContainer::ObjCPtr>();
    }

}
