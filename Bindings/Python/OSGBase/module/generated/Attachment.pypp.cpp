// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGBase_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "Attachment.pypp.hpp"

using namespace std;
namespace bp = boost::python;

boost::python::list Attachment_getMFParents(OSG::Attachment *self)
{
   boost::python::list result;
   OSG::MFParentFieldContainerPtr const * mf_data = self->getMFParents();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

void register_Attachment_class(){

    { //::OSG::Attachment
        typedef bp::class_< OSG::Attachment, bp::bases< OSG::AttachmentBase >, boost::noncopyable > Attachment_exposer_t;
        Attachment_exposer_t Attachment_exposer = Attachment_exposer_t( "Attachment", bp::no_init );
        bp::scope Attachment_scope( Attachment_exposer );
        { //::OSG::Attachment::changed
        
            typedef void ( ::OSG::Attachment::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            Attachment_exposer.def( 
                "changed"
                , changed_function_type( &::OSG::Attachment::changed )
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("details") ) );
        
        }
        { //::OSG::Attachment::dump
        
            typedef void ( ::OSG::Attachment::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            Attachment_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::Attachment::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::Attachment::getParents
        
            typedef ::OSG::FieldContainer * ( ::OSG::Attachment::*getParents_function_type )( ::OSG::UInt32 const ) const;
            
            Attachment_exposer.def( 
                "getParents"
                , getParents_function_type( &::OSG::Attachment::getParents )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        Attachment_exposer.def("getMFParents",Attachment_getMFParents);
        pyopensg::register_transit< OSG::Attachment >::execute();
        bp::register_ptr_to_python< OSG::Attachment::ObjRecPtr >();
        bp::implicitly_convertible< OSG::Attachment::ObjRecPtr, OSG::Attachment* >();
        bp::implicitly_convertible< OSG::Attachment::ObjRecPtr, OSG::Attachment::ObjCPtr >();
        bp::implicitly_convertible< OSG::Attachment::ObjRecPtr, OSG::AttachmentContainer* >();
        bp::implicitly_convertible< OSG::Attachment::ObjRecPtr, OSG::AttachmentContainer::ObjRecPtr >();
        bp::implicitly_convertible<OSG::Attachment::ObjRecPtr, OSG::AttachmentContainer::ObjCPtr>();
    }

}
