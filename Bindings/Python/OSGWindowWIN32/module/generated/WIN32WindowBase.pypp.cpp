// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGWindowWIN32_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "WIN32WindowBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct WIN32WindowBase_wrapper : OSG::WIN32WindowBase, bp::wrapper< OSG::WIN32WindowBase > {

    virtual void doActivate(  ){
        bp::override func_doActivate = this->get_override( "doActivate" );
        func_doActivate(  );
    }

    virtual void doDeactivate(  ){
        bp::override func_doDeactivate = this->get_override( "doDeactivate" );
        func_doDeactivate(  );
    }

    virtual bool doSwap(  ){
        bp::override func_doSwap = this->get_override( "doSwap" );
        return func_doSwap(  );
    }

    virtual bool hasContext(  ){
        bp::override func_hasContext = this->get_override( "hasContext" );
        return func_hasContext(  );
    }

    virtual void terminate(  ){
        bp::override func_terminate = this->get_override( "terminate" );
        func_terminate(  );
    }

};

void register_WIN32WindowBase_class(){

    { //::OSG::WIN32WindowBase
        typedef bp::class_< WIN32WindowBase_wrapper, bp::bases< ::OSG::Window >, boost::noncopyable > WIN32WindowBase_exposer_t;
        WIN32WindowBase_exposer_t WIN32WindowBase_exposer = WIN32WindowBase_exposer_t( "WIN32WindowBase", bp::no_init );
        bp::scope WIN32WindowBase_scope( WIN32WindowBase_exposer );
        bp::scope().attr("HwndFieldId") = (int)OSG::WIN32WindowBase::HwndFieldId;
        bp::scope().attr("HdcFieldId") = (int)OSG::WIN32WindowBase::HdcFieldId;
        bp::scope().attr("HglrcFieldId") = (int)OSG::WIN32WindowBase::HglrcFieldId;
        bp::scope().attr("Dummy0FieldId") = (int)OSG::WIN32WindowBase::Dummy0FieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::WIN32WindowBase::NextFieldId;
        { //::OSG::WIN32WindowBase::copyFromBin
        
            typedef void ( ::OSG::WIN32WindowBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            WIN32WindowBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::WIN32WindowBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::WIN32WindowBase::copyToBin
        
            typedef void ( ::OSG::WIN32WindowBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            WIN32WindowBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::WIN32WindowBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::WIN32WindowBase::create
        
            typedef ::OSG::WIN32WindowTransitPtr ( *create_function_type )(  );
            
            WIN32WindowBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::WIN32WindowBase::create ) );
        
        }
        { //::OSG::WIN32WindowBase::createDependent
        
            typedef ::OSG::WIN32WindowTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            WIN32WindowBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::WIN32WindowBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::WIN32WindowBase::createLocal
        
            typedef ::OSG::WIN32WindowTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            WIN32WindowBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::WIN32WindowBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::WIN32WindowBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::WIN32WindowBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            WIN32WindowBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::WIN32WindowBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::WIN32WindowBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            WIN32WindowBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::WIN32WindowBase::getClassGroupId ) );
        
        }
        { //::OSG::WIN32WindowBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            WIN32WindowBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::WIN32WindowBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::WIN32WindowBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            WIN32WindowBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::WIN32WindowBase::getClassTypeId ) );
        
        }
        { //::OSG::WIN32WindowBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::WIN32WindowBase::*getContainerSize_function_type )(  ) const;
            
            WIN32WindowBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::WIN32WindowBase::getContainerSize ) );
        
        }
        { //::OSG::WIN32WindowBase::getDummy0
        
            typedef ::OSG::Int32 ( ::OSG::WIN32WindowBase::*getDummy0_function_type )(  ) const;
            
            WIN32WindowBase_exposer.def( 
                "getDummy0"
                , getDummy0_function_type( &::OSG::WIN32WindowBase::getDummy0 ) );
        
        }
        { //::OSG::WIN32WindowBase::getHdc
        
            typedef ::HDC const & ( ::OSG::WIN32WindowBase::*getHdc_function_type )(  ) const;
            
            WIN32WindowBase_exposer.def( 
                "getHdc"
                , getHdc_function_type( &::OSG::WIN32WindowBase::getHdc )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::WIN32WindowBase::getHglrc
        
            typedef ::HGLRC const & ( ::OSG::WIN32WindowBase::*getHglrc_function_type )(  ) const;
            
            WIN32WindowBase_exposer.def( 
                "getHglrc"
                , getHglrc_function_type( &::OSG::WIN32WindowBase::getHglrc )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::WIN32WindowBase::getHwnd
        
            typedef ::HWND const & ( ::OSG::WIN32WindowBase::*getHwnd_function_type )(  ) const;
            
            WIN32WindowBase_exposer.def( 
                "getHwnd"
                , getHwnd_function_type( &::OSG::WIN32WindowBase::getHwnd )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::WIN32WindowBase::getSFDummy0
        
            typedef ::OSG::SFInt32 const * ( ::OSG::WIN32WindowBase::*getSFDummy0_function_type )(  ) const;
            
            WIN32WindowBase_exposer.def( 
                "getSFDummy0"
                , getSFDummy0_function_type( &::OSG::WIN32WindowBase::getSFDummy0 )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::WIN32WindowBase::getSFHdc
        
            typedef ::OSG::SFHDC const * ( ::OSG::WIN32WindowBase::*getSFHdc_function_type )(  ) const;
            
            WIN32WindowBase_exposer.def( 
                "getSFHdc"
                , getSFHdc_function_type( &::OSG::WIN32WindowBase::getSFHdc )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::WIN32WindowBase::getSFHglrc
        
            typedef ::OSG::SFHGLRC const * ( ::OSG::WIN32WindowBase::*getSFHglrc_function_type )(  ) const;
            
            WIN32WindowBase_exposer.def( 
                "getSFHglrc"
                , getSFHglrc_function_type( &::OSG::WIN32WindowBase::getSFHglrc )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::WIN32WindowBase::getSFHwnd
        
            typedef ::OSG::SFHWND const * ( ::OSG::WIN32WindowBase::*getSFHwnd_function_type )(  ) const;
            
            WIN32WindowBase_exposer.def( 
                "getSFHwnd"
                , getSFHwnd_function_type( &::OSG::WIN32WindowBase::getSFHwnd )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::WIN32WindowBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::WIN32WindowBase::*getType_function_type )(  ) ;
            
            WIN32WindowBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::WIN32WindowBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::WIN32WindowBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::WIN32WindowBase::*getType_function_type )(  ) const;
            
            WIN32WindowBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::WIN32WindowBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::WIN32WindowBase::setDummy0
        
            typedef void ( ::OSG::WIN32WindowBase::*setDummy0_function_type )( ::OSG::Int32 const ) ;
            
            WIN32WindowBase_exposer.def( 
                "setDummy0"
                , setDummy0_function_type( &::OSG::WIN32WindowBase::setDummy0 )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::WIN32WindowBase::setHdc
        
            typedef void ( ::OSG::WIN32WindowBase::*setHdc_function_type )( ::HDC const & ) ;
            
            WIN32WindowBase_exposer.def( 
                "setHdc"
                , setHdc_function_type( &::OSG::WIN32WindowBase::setHdc )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::WIN32WindowBase::setHglrc
        
            typedef void ( ::OSG::WIN32WindowBase::*setHglrc_function_type )( ::HGLRC const & ) ;
            
            WIN32WindowBase_exposer.def( 
                "setHglrc"
                , setHglrc_function_type( &::OSG::WIN32WindowBase::setHglrc )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::WIN32WindowBase::setHwnd
        
            typedef void ( ::OSG::WIN32WindowBase::*setHwnd_function_type )( ::HWND const & ) ;
            
            WIN32WindowBase_exposer.def( 
                "setHwnd"
                , setHwnd_function_type( &::OSG::WIN32WindowBase::setHwnd )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::Window::doActivate
        
            typedef void ( WIN32WindowBase_wrapper::*doActivate_function_type )(  ) ;
            
            WIN32WindowBase_exposer.def( 
                "doActivate"
                , doActivate_function_type( &WIN32WindowBase_wrapper::doActivate ) );
        
        }
        { //::OSG::Window::doDeactivate
        
            typedef void ( WIN32WindowBase_wrapper::*doDeactivate_function_type )(  ) ;
            
            WIN32WindowBase_exposer.def( 
                "doDeactivate"
                , doDeactivate_function_type( &WIN32WindowBase_wrapper::doDeactivate ) );
        
        }
        { //::OSG::Window::doSwap
        
            typedef bool ( WIN32WindowBase_wrapper::*doSwap_function_type )(  ) ;
            
            WIN32WindowBase_exposer.def( 
                "doSwap"
                , doSwap_function_type( &WIN32WindowBase_wrapper::doSwap ) );
        
        }
        { //::OSG::Window::hasContext
        
            typedef bool ( WIN32WindowBase_wrapper::*hasContext_function_type )(  ) ;
            
            WIN32WindowBase_exposer.def( 
                "hasContext"
                , hasContext_function_type( &WIN32WindowBase_wrapper::hasContext ) );
        
        }
        { //::OSG::Window::terminate
        
            typedef void ( ::OSG::Window::*terminate_function_type )(  ) ;
            
            WIN32WindowBase_exposer.def( 
                "terminate"
                , bp::pure_virtual( terminate_function_type(&::OSG::Window::terminate) ) );
        
        }
        WIN32WindowBase_exposer.staticmethod( "create" );
        WIN32WindowBase_exposer.staticmethod( "createDependent" );
        WIN32WindowBase_exposer.staticmethod( "createLocal" );
        WIN32WindowBase_exposer.staticmethod( "getClassGroupId" );
        WIN32WindowBase_exposer.staticmethod( "getClassType" );
        WIN32WindowBase_exposer.staticmethod( "getClassTypeId" );
    }

}
