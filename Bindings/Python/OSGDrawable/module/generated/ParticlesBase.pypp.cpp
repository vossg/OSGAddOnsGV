// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGDrawable_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "ParticlesBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct ParticlesBase_wrapper : OSG::ParticlesBase, bp::wrapper< OSG::ParticlesBase > {

    virtual void fill( ::OSG::DrawableStatsAttachment * pStat ){
        bp::override func_fill = this->get_override( "fill" );
        func_fill( boost::python::ptr(pStat) );
    }

};

boost::python::list ParticlesBase_getMFSizes(OSG::ParticlesBase *self)
{
   boost::python::list result;
   OSG::MFVec3f const * mf_data = self->getMFSizes();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list ParticlesBase_getMFIndices(OSG::ParticlesBase *self)
{
   boost::python::list result;
   OSG::MFInt32 const * mf_data = self->getMFIndices();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list ParticlesBase_getMFTextureZs(OSG::ParticlesBase *self)
{
   boost::python::list result;
   OSG::MFReal32 const * mf_data = self->getMFTextureZs();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

void register_ParticlesBase_class(){

    { //::OSG::ParticlesBase
        typedef bp::class_< ParticlesBase_wrapper, bp::bases< ::OSG::MaterialDrawable >, boost::noncopyable > ParticlesBase_exposer_t;
        ParticlesBase_exposer_t ParticlesBase_exposer = ParticlesBase_exposer_t( "ParticlesBase", bp::no_init );
        bp::scope ParticlesBase_scope( ParticlesBase_exposer );
        bp::scope().attr("ModeFieldId") = (int)OSG::ParticlesBase::ModeFieldId;
        bp::scope().attr("PositionsFieldId") = (int)OSG::ParticlesBase::PositionsFieldId;
        bp::scope().attr("SizesFieldId") = (int)OSG::ParticlesBase::SizesFieldId;
        bp::scope().attr("SecPositionsFieldId") = (int)OSG::ParticlesBase::SecPositionsFieldId;
        bp::scope().attr("ColorsFieldId") = (int)OSG::ParticlesBase::ColorsFieldId;
        bp::scope().attr("NormalsFieldId") = (int)OSG::ParticlesBase::NormalsFieldId;
        bp::scope().attr("IndicesFieldId") = (int)OSG::ParticlesBase::IndicesFieldId;
        bp::scope().attr("TextureZsFieldId") = (int)OSG::ParticlesBase::TextureZsFieldId;
        bp::scope().attr("DrawOrderFieldId") = (int)OSG::ParticlesBase::DrawOrderFieldId;
        bp::scope().attr("DynamicFieldId") = (int)OSG::ParticlesBase::DynamicFieldId;
        bp::scope().attr("PumpFieldId") = (int)OSG::ParticlesBase::PumpFieldId;
        bp::scope().attr("BspFieldId") = (int)OSG::ParticlesBase::BspFieldId;
        bp::scope().attr("NumParticlesFieldId") = (int)OSG::ParticlesBase::NumParticlesFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::ParticlesBase::NextFieldId;
        { //::OSG::ParticlesBase::copyFromBin
        
            typedef void ( ::OSG::ParticlesBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            ParticlesBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::ParticlesBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::ParticlesBase::copyToBin
        
            typedef void ( ::OSG::ParticlesBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            ParticlesBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::ParticlesBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::ParticlesBase::create
        
            typedef ::OSG::ParticlesTransitPtr ( *create_function_type )(  );
            
            ParticlesBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::ParticlesBase::create ) );
        
        }
        { //::OSG::ParticlesBase::createDependent
        
            typedef ::OSG::ParticlesTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            ParticlesBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::ParticlesBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::ParticlesBase::createLocal
        
            typedef ::OSG::ParticlesTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            ParticlesBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::ParticlesBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::ParticlesBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::ParticlesBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            ParticlesBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::ParticlesBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::ParticlesBase::getBsp
        
            typedef ::OSG::ParticleBSPTree const & ( ::OSG::ParticlesBase::*getBsp_function_type )(  ) const;
            
            ParticlesBase_exposer.def( 
                "getBsp"
                , getBsp_function_type( &::OSG::ParticlesBase::getBsp )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::ParticlesBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            ParticlesBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::ParticlesBase::getClassGroupId ) );
        
        }
        { //::OSG::ParticlesBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            ParticlesBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::ParticlesBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::ParticlesBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            ParticlesBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::ParticlesBase::getClassTypeId ) );
        
        }
        { //::OSG::ParticlesBase::getColors
        
            typedef ::OSG::GeoVectorProperty * ( ::OSG::ParticlesBase::*getColors_function_type )(  ) const;
            
            ParticlesBase_exposer.def( 
                "getColors"
                , getColors_function_type( &::OSG::ParticlesBase::getColors )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ParticlesBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::ParticlesBase::*getContainerSize_function_type )(  ) const;
            
            ParticlesBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::ParticlesBase::getContainerSize ) );
        
        }
        { //::OSG::ParticlesBase::getDrawOrder
        
            typedef ::OSG::UInt32 ( ::OSG::ParticlesBase::*getDrawOrder_function_type )(  ) const;
            
            ParticlesBase_exposer.def( 
                "getDrawOrder"
                , getDrawOrder_function_type( &::OSG::ParticlesBase::getDrawOrder ) );
        
        }
        { //::OSG::ParticlesBase::getDynamic
        
            typedef bool ( ::OSG::ParticlesBase::*getDynamic_function_type )(  ) const;
            
            ParticlesBase_exposer.def( 
                "getDynamic"
                , getDynamic_function_type( &::OSG::ParticlesBase::getDynamic ) );
        
        }
        { //::OSG::ParticlesBase::getIndices
        
            typedef ::OSG::Int32 ( ::OSG::ParticlesBase::*getIndices_function_type )( ::OSG::UInt32 const ) const;
            
            ParticlesBase_exposer.def( 
                "getIndices"
                , getIndices_function_type( &::OSG::ParticlesBase::getIndices )
                , ( bp::arg("index") ) );
        
        }
        { //::OSG::ParticlesBase::getMode
        
            typedef ::OSG::UInt32 ( ::OSG::ParticlesBase::*getMode_function_type )(  ) const;
            
            ParticlesBase_exposer.def( 
                "getMode"
                , getMode_function_type( &::OSG::ParticlesBase::getMode ) );
        
        }
        { //::OSG::ParticlesBase::getNormals
        
            typedef ::OSG::GeoVectorProperty * ( ::OSG::ParticlesBase::*getNormals_function_type )(  ) const;
            
            ParticlesBase_exposer.def( 
                "getNormals"
                , getNormals_function_type( &::OSG::ParticlesBase::getNormals )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ParticlesBase::getNumParticles
        
            typedef ::OSG::Int32 ( ::OSG::ParticlesBase::*getNumParticles_function_type )(  ) const;
            
            ParticlesBase_exposer.def( 
                "getNumParticles"
                , getNumParticles_function_type( &::OSG::ParticlesBase::getNumParticles ) );
        
        }
        { //::OSG::ParticlesBase::getPositions
        
            typedef ::OSG::GeoVectorProperty * ( ::OSG::ParticlesBase::*getPositions_function_type )(  ) const;
            
            ParticlesBase_exposer.def( 
                "getPositions"
                , getPositions_function_type( &::OSG::ParticlesBase::getPositions )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ParticlesBase::getSFBsp
        
            typedef ::OSG::SFParticleBSPTree const * ( ::OSG::ParticlesBase::*getSFBsp_function_type )(  ) const;
            
            ParticlesBase_exposer.def( 
                "getSFBsp"
                , getSFBsp_function_type( &::OSG::ParticlesBase::getSFBsp )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ParticlesBase::getSFColors
        
            typedef ::OSG::SFUnrecChildGeoVectorPropertyPtr const * ( ::OSG::ParticlesBase::*getSFColors_function_type )(  ) const;
            
            ParticlesBase_exposer.def( 
                "getSFColors"
                , getSFColors_function_type( &::OSG::ParticlesBase::getSFColors )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ParticlesBase::getSFDrawOrder
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::ParticlesBase::*getSFDrawOrder_function_type )(  ) const;
            
            ParticlesBase_exposer.def( 
                "getSFDrawOrder"
                , getSFDrawOrder_function_type( &::OSG::ParticlesBase::getSFDrawOrder )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ParticlesBase::getSFDynamic
        
            typedef ::OSG::SFBool const * ( ::OSG::ParticlesBase::*getSFDynamic_function_type )(  ) const;
            
            ParticlesBase_exposer.def( 
                "getSFDynamic"
                , getSFDynamic_function_type( &::OSG::ParticlesBase::getSFDynamic )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ParticlesBase::getSFMode
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::ParticlesBase::*getSFMode_function_type )(  ) const;
            
            ParticlesBase_exposer.def( 
                "getSFMode"
                , getSFMode_function_type( &::OSG::ParticlesBase::getSFMode )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ParticlesBase::getSFNormals
        
            typedef ::OSG::SFUnrecChildGeoVectorPropertyPtr const * ( ::OSG::ParticlesBase::*getSFNormals_function_type )(  ) const;
            
            ParticlesBase_exposer.def( 
                "getSFNormals"
                , getSFNormals_function_type( &::OSG::ParticlesBase::getSFNormals )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ParticlesBase::getSFNumParticles
        
            typedef ::OSG::SFInt32 const * ( ::OSG::ParticlesBase::*getSFNumParticles_function_type )(  ) const;
            
            ParticlesBase_exposer.def( 
                "getSFNumParticles"
                , getSFNumParticles_function_type( &::OSG::ParticlesBase::getSFNumParticles )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ParticlesBase::getSFPositions
        
            typedef ::OSG::SFUnrecChildGeoVectorPropertyPtr const * ( ::OSG::ParticlesBase::*getSFPositions_function_type )(  ) const;
            
            ParticlesBase_exposer.def( 
                "getSFPositions"
                , getSFPositions_function_type( &::OSG::ParticlesBase::getSFPositions )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ParticlesBase::getSFSecPositions
        
            typedef ::OSG::SFUnrecChildGeoVectorPropertyPtr const * ( ::OSG::ParticlesBase::*getSFSecPositions_function_type )(  ) const;
            
            ParticlesBase_exposer.def( 
                "getSFSecPositions"
                , getSFSecPositions_function_type( &::OSG::ParticlesBase::getSFSecPositions )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ParticlesBase::getSecPositions
        
            typedef ::OSG::GeoVectorProperty * ( ::OSG::ParticlesBase::*getSecPositions_function_type )(  ) const;
            
            ParticlesBase_exposer.def( 
                "getSecPositions"
                , getSecPositions_function_type( &::OSG::ParticlesBase::getSecPositions )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ParticlesBase::getSizes
        
            typedef ::OSG::Vec3f const & ( ::OSG::ParticlesBase::*getSizes_function_type )( ::OSG::UInt32 const ) const;
            
            ParticlesBase_exposer.def( 
                "getSizes"
                , getSizes_function_type( &::OSG::ParticlesBase::getSizes )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::ParticlesBase::getTextureZs
        
            typedef ::OSG::Real32 ( ::OSG::ParticlesBase::*getTextureZs_function_type )( ::OSG::UInt32 const ) const;
            
            ParticlesBase_exposer.def( 
                "getTextureZs"
                , getTextureZs_function_type( &::OSG::ParticlesBase::getTextureZs )
                , ( bp::arg("index") ) );
        
        }
        { //::OSG::ParticlesBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::ParticlesBase::*getType_function_type )(  ) ;
            
            ParticlesBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::ParticlesBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ParticlesBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::ParticlesBase::*getType_function_type )(  ) const;
            
            ParticlesBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::ParticlesBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ParticlesBase::setBsp
        
            typedef void ( ::OSG::ParticlesBase::*setBsp_function_type )( ::OSG::ParticleBSPTree const & ) ;
            
            ParticlesBase_exposer.def( 
                "setBsp"
                , setBsp_function_type( &::OSG::ParticlesBase::setBsp )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ParticlesBase::setColors
        
            typedef void ( ::OSG::ParticlesBase::*setColors_function_type )( ::OSG::GeoVectorProperty * const ) ;
            
            ParticlesBase_exposer.def( 
                "setColors"
                , setColors_function_type( &::OSG::ParticlesBase::setColors )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ParticlesBase::setDrawOrder
        
            typedef void ( ::OSG::ParticlesBase::*setDrawOrder_function_type )( ::OSG::UInt32 const ) ;
            
            ParticlesBase_exposer.def( 
                "setDrawOrder"
                , setDrawOrder_function_type( &::OSG::ParticlesBase::setDrawOrder )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ParticlesBase::setDynamic
        
            typedef void ( ::OSG::ParticlesBase::*setDynamic_function_type )( bool const ) ;
            
            ParticlesBase_exposer.def( 
                "setDynamic"
                , setDynamic_function_type( &::OSG::ParticlesBase::setDynamic )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ParticlesBase::setMode
        
            typedef void ( ::OSG::ParticlesBase::*setMode_function_type )( ::OSG::UInt32 const ) ;
            
            ParticlesBase_exposer.def( 
                "setMode"
                , setMode_function_type( &::OSG::ParticlesBase::setMode )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ParticlesBase::setNormals
        
            typedef void ( ::OSG::ParticlesBase::*setNormals_function_type )( ::OSG::GeoVectorProperty * const ) ;
            
            ParticlesBase_exposer.def( 
                "setNormals"
                , setNormals_function_type( &::OSG::ParticlesBase::setNormals )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ParticlesBase::setNumParticles
        
            typedef void ( ::OSG::ParticlesBase::*setNumParticles_function_type )( ::OSG::Int32 const ) ;
            
            ParticlesBase_exposer.def( 
                "setNumParticles"
                , setNumParticles_function_type( &::OSG::ParticlesBase::setNumParticles )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ParticlesBase::setPositions
        
            typedef void ( ::OSG::ParticlesBase::*setPositions_function_type )( ::OSG::GeoVectorProperty * const ) ;
            
            ParticlesBase_exposer.def( 
                "setPositions"
                , setPositions_function_type( &::OSG::ParticlesBase::setPositions )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ParticlesBase::setSecPositions
        
            typedef void ( ::OSG::ParticlesBase::*setSecPositions_function_type )( ::OSG::GeoVectorProperty * const ) ;
            
            ParticlesBase_exposer.def( 
                "setSecPositions"
                , setSecPositions_function_type( &::OSG::ParticlesBase::setSecPositions )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::Drawable::fill
        
            typedef void ( ::OSG::Drawable::*fill_function_type )( ::OSG::DrawableStatsAttachment * ) ;
            
            ParticlesBase_exposer.def( 
                "fill"
                , bp::pure_virtual( fill_function_type(&::OSG::Drawable::fill) )
                , ( bp::arg("pStat") ) );
        
        }
        ParticlesBase_exposer.staticmethod( "create" );
        ParticlesBase_exposer.staticmethod( "createDependent" );
        ParticlesBase_exposer.staticmethod( "createLocal" );
        ParticlesBase_exposer.staticmethod( "getClassGroupId" );
        ParticlesBase_exposer.staticmethod( "getClassType" );
        ParticlesBase_exposer.staticmethod( "getClassTypeId" );
        ParticlesBase_exposer.def("getMFSizes",ParticlesBase_getMFSizes);
        ParticlesBase_exposer.def("getMFIndices",ParticlesBase_getMFIndices);
        ParticlesBase_exposer.def("getMFTextureZs",ParticlesBase_getMFTextureZs);
    }

}
