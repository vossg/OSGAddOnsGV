// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGDrawable_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "GeoVec4dProperty.pypp.hpp"

using namespace std;
namespace bp = boost::python;

boost::python::list TypedGeoVectorProperty_OSG__GeoVec4dPropertyDesc__getFieldPtr(OSG::TypedGeoVectorProperty<OSG::GeoVec4dPropertyDesc> *self)
{
   boost::python::list result;
   OSG::MFVec4d const * mf_data = self->getFieldPtr();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list TypedGeoVectorProperty_OSG__GeoVec4dPropertyDesc__getField(OSG::TypedGeoVectorProperty<OSG::GeoVec4dPropertyDesc> *self)
{
   boost::python::list result;
   OSG::MFVec4d const & mf_data = self->getField();
   const OSG::UInt32 size(mf_data.size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append(mf_data[i]);
   }
   return result;
}

void register_GeoVec4dProperty_class(){

    { //::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >
        typedef bp::class_< OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >, bp::bases< ::OSG::GeoVectorProperty >, OSG::TypedGeoVectorProperty<OSG::GeoVec4dPropertyDesc>::ObjRecPtr, boost::noncopyable > GeoVec4dProperty_exposer_t;
        GeoVec4dProperty_exposer_t GeoVec4dProperty_exposer = GeoVec4dProperty_exposer_t( "GeoVec4dProperty", bp::no_init );
        bp::scope GeoVec4dProperty_scope( GeoVec4dProperty_exposer );
        bp::scope().attr("GeoPropDataFieldId") = (int)OSG::TypedGeoVectorProperty<OSG::GeoVec4dPropertyDesc>::GeoPropDataFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::TypedGeoVectorProperty<OSG::GeoVec4dPropertyDesc>::NextFieldId;
        { //::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::clone
        
            typedef OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc > exported_class_t;
            typedef ::OSG::TransitPtr< OSG::GeoProperty > ( exported_class_t::*clone_function_type )(  ) ;
            
            GeoVec4dProperty_exposer.def( 
                "clone"
                , clone_function_type( &::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::clone ) );
        
        }
        { //::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::create
        
            typedef OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc > exported_class_t;
            typedef ::OSG::TransitPtr< OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc > > ( *create_function_type )(  );
            
            GeoVec4dProperty_exposer.def( 
                "create"
                , create_function_type( &::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::create ) );
        
        }
        { //::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::createDependent
        
            typedef OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc > exported_class_t;
            typedef ::OSG::TransitPtr< OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc > > ( *createDependent_function_type )( ::OSG::BitVector );
            
            GeoVec4dProperty_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::createLocal
        
            typedef OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc > exported_class_t;
            typedef ::OSG::TransitPtr< OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc > > ( *createLocal_function_type )( ::OSG::BitVector );
            
            GeoVec4dProperty_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::dump
        
            typedef OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc > exported_class_t;
            typedef void ( exported_class_t::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            GeoVec4dProperty_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::getClassGroupId
        
            typedef OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc > exported_class_t;
            typedef ::OSG::UInt32 ( *getClassGroupId_function_type )(  );
            
            GeoVec4dProperty_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::getClassGroupId ) );
        
        }
        { //::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::getClassType
        
            typedef OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc > exported_class_t;
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            GeoVec4dProperty_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::getClassTypeId
        
            typedef OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc > exported_class_t;
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            GeoVec4dProperty_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::getClassTypeId ) );
        
        }
        { //::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::getContainerSize
        
            typedef OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc > exported_class_t;
            typedef ::OSG::UInt32 ( exported_class_t::*getContainerSize_function_type )(  ) const;
            
            GeoVec4dProperty_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::getContainerSize ) );
        
        }
        { //::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::getFormat
        
            typedef OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc > exported_class_t;
            typedef ::OSG::UInt32 ( exported_class_t::*getFormat_function_type )(  ) const;
            
            GeoVec4dProperty_exposer.def( 
                "getFormat"
                , getFormat_function_type( &::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::getFormat ) );
        
        }
        { //::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::getFormatSize
        
            typedef OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc > exported_class_t;
            typedef ::OSG::UInt32 ( exported_class_t::*getFormatSize_function_type )(  ) const;
            
            GeoVec4dProperty_exposer.def( 
                "getFormatSize"
                , getFormatSize_function_type( &::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::getFormatSize ) );
        
        }
        { //::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::getStride
        
            typedef OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc > exported_class_t;
            typedef ::OSG::UInt32 ( exported_class_t::*getStride_function_type )(  ) const;
            
            GeoVec4dProperty_exposer.def( 
                "getStride"
                , getStride_function_type( &::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::getStride ) );
        
        }
        { //::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::getType
        
            typedef OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc > exported_class_t;
            typedef ::OSG::FieldContainerType & ( exported_class_t::*getType_function_type )(  ) ;
            
            GeoVec4dProperty_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::getType
        
            typedef OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc > exported_class_t;
            typedef ::OSG::FieldContainerType const & ( exported_class_t::*getType_function_type )(  ) const;
            
            GeoVec4dProperty_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::getValue
        
            typedef OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc > exported_class_t;
            typedef ::OSG::Vec4d ( exported_class_t::*getValue_function_type )( ::OSG::SizeT const ) const;
            
            GeoVec4dProperty_exposer.def( 
                "getValue"
                , getValue_function_type( &::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::getValue )
                , ( bp::arg("index") ) );
        
        }
        { //::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::getValue
        
            typedef OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc > exported_class_t;
            typedef void ( exported_class_t::*getValue_function_type )( ::OSG::Vec4d &,::OSG::SizeT const ) const;
            
            GeoVec4dProperty_exposer.def( 
                "getValue"
                , getValue_function_type( &::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::getValue )
                , ( bp::arg("val"), bp::arg("index") ) );
        
        }
        { //::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::getVectorType
        
            typedef OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc > exported_class_t;
            typedef ::OSG::UInt32 ( exported_class_t::*getVectorType_function_type )(  ) const;
            
            GeoVec4dProperty_exposer.def( 
                "getVectorType"
                , getVectorType_function_type( &::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::getVectorType ) );
        
        }
        { //::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::operator[]
        
            typedef OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc > exported_class_t;
            typedef ::OSG::Vector< double, 4u > const & ( exported_class_t::*__getitem___function_type )( ::OSG::SizeT ) const;
            
            GeoVec4dProperty_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::operator[] )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::operator[]
        
            typedef OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc > exported_class_t;
            typedef ::OSG::Vector< double, 4u > & ( exported_class_t::*__getitem___function_type )( ::OSG::SizeT ) ;
            
            GeoVec4dProperty_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::operator[] )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::size32
        
            typedef OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc > exported_class_t;
            typedef ::OSG::UInt32 ( exported_class_t::*size32_function_type )(  ) const;
            
            GeoVec4dProperty_exposer.def( 
                "size32"
                , size32_function_type( &::OSG::TypedGeoVectorProperty< OSG::GeoVec4dPropertyDesc >::size32 ) );
        
        }
        GeoVec4dProperty_exposer.staticmethod( "create" );
        GeoVec4dProperty_exposer.staticmethod( "createDependent" );
        GeoVec4dProperty_exposer.staticmethod( "createLocal" );
        GeoVec4dProperty_exposer.staticmethod( "getClassGroupId" );
        GeoVec4dProperty_exposer.staticmethod( "getClassType" );
        GeoVec4dProperty_exposer.staticmethod( "getClassTypeId" );
        GeoVec4dProperty_exposer.def("getFieldPtr",TypedGeoVectorProperty_OSG__GeoVec4dPropertyDesc__getFieldPtr);
        GeoVec4dProperty_exposer.def("getField",TypedGeoVectorProperty_OSG__GeoVec4dPropertyDesc__getField);
        pyopensg::register_transit< OSG::TypedGeoVectorProperty<OSG::GeoVec4dPropertyDesc> >::execute();
        bp::implicitly_convertible< OSG::TypedGeoVectorProperty<OSG::GeoVec4dPropertyDesc>::ObjRecPtr, OSG::TypedGeoVectorProperty<OSG::GeoVec4dPropertyDesc>* >();
        bp::implicitly_convertible< OSG::TypedGeoVectorProperty<OSG::GeoVec4dPropertyDesc>::ObjRecPtr, OSG::TypedGeoVectorProperty<OSG::GeoVec4dPropertyDesc>::ObjCPtr >();
        bp::implicitly_convertible< OSG::TypedGeoVectorProperty<OSG::GeoVec4dPropertyDesc>::ObjRecPtr, OSG::GeoVectorProperty* >();
        bp::implicitly_convertible< OSG::TypedGeoVectorProperty<OSG::GeoVec4dPropertyDesc>::ObjRecPtr, OSG::GeoVectorProperty::ObjRecPtr >();
        bp::implicitly_convertible<OSG::TypedGeoVectorProperty<OSG::GeoVec4dPropertyDesc>::ObjRecPtr, OSG::GeoVectorProperty::ObjCPtr>();
    }

}
