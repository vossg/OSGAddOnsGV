// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGDrawable_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "OSGDrawablePy_free_functions.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_free_functions(){

    { //::OSG::calcFaceNormalsGeo
    
        typedef ::OSG::NodeTransitPtr ( *calcFaceNormalsGeo_function_type )( ::OSG::Geometry *,::OSG::Real32 );
        
        bp::def( 
            "calcFaceNormalsGeo"
            , calcFaceNormalsGeo_function_type( &::OSG::calcFaceNormalsGeo )
            , ( bp::arg("geo"), bp::arg("length") ) );
    
    }

    { //::OSG::calcVertexNormals
    
        typedef void ( *calcVertexNormals_function_type )( ::OSG::Geometry *,::OSG::Real32 );
        
        bp::def( 
            "calcVertexNormals"
            , calcVertexNormals_function_type( &::OSG::calcVertexNormals )
            , ( bp::arg("geo"), bp::arg("creaseAngle") ) );
    
    }

    { //::OSG::calcVertexNormals
    
        typedef void ( *calcVertexNormals_function_type )( ::OSG::Geometry * );
        
        bp::def( 
            "calcVertexNormals"
            , calcVertexNormals_function_type( &::OSG::calcVertexNormals )
            , ( bp::arg("geo") ) );
    
    }

    { //::OSG::calcVertexNormalsGeo
    
        typedef ::OSG::NodeTransitPtr ( *calcVertexNormalsGeo_function_type )( ::OSG::Geometry *,::OSG::Real32 );
        
        bp::def( 
            "calcVertexNormalsGeo"
            , calcVertexNormalsGeo_function_type( &::OSG::calcVertexNormalsGeo )
            , ( bp::arg("geo"), bp::arg("length") ) );
    
    }

    { //::OSG::makeBox
    
        typedef ::OSG::NodeTransitPtr ( *makeBox_function_type )( ::OSG::Real32,::OSG::Real32,::OSG::Real32,::OSG::UInt16,::OSG::UInt16,::OSG::UInt16 );
        
        bp::def( 
            "makeBox"
            , makeBox_function_type( &::OSG::makeBox )
            , ( bp::arg("xsize"), bp::arg("ysize"), bp::arg("zsize"), bp::arg("hor"), bp::arg("vert"), bp::arg("depth") ) );
    
    }

    { //::OSG::makeBoxGeo
    
        typedef ::OSG::GeometryTransitPtr ( *makeBoxGeo_function_type )( ::OSG::Real32,::OSG::Real32,::OSG::Real32,::OSG::UInt16,::OSG::UInt16,::OSG::UInt16,bool );
        
        bp::def( 
            "makeBoxGeo"
            , makeBoxGeo_function_type( &::OSG::makeBoxGeo )
            , ( bp::arg("xsize"), bp::arg("ysize"), bp::arg("zsize"), bp::arg("hor"), bp::arg("vert"), bp::arg("depth"), bp::arg("bInv")=(bool)(false) ) );
    
    }

    { //::OSG::makeCone
    
        typedef ::OSG::NodeTransitPtr ( *makeCone_function_type )( ::OSG::Real32,::OSG::Real32,::OSG::UInt16,bool,bool );
        
        bp::def( 
            "makeCone"
            , makeCone_function_type( &::OSG::makeCone )
            , ( bp::arg("height"), bp::arg("botradius"), bp::arg("sides"), bp::arg("doSide"), bp::arg("doBottom") ) );
    
    }

    { //::OSG::makeConeGeo
    
        typedef ::OSG::GeometryTransitPtr ( *makeConeGeo_function_type )( ::OSG::Real32,::OSG::Real32,::OSG::UInt16,bool,bool );
        
        bp::def( 
            "makeConeGeo"
            , makeConeGeo_function_type( &::OSG::makeConeGeo )
            , ( bp::arg("height"), bp::arg("botradius"), bp::arg("sides"), bp::arg("doSide"), bp::arg("doBottom") ) );
    
    }

    { //::OSG::makeConicalFrustum
    
        typedef ::OSG::NodeTransitPtr ( *makeConicalFrustum_function_type )( ::OSG::Real32,::OSG::Real32,::OSG::Real32,::OSG::UInt16,bool,bool,bool );
        
        bp::def( 
            "makeConicalFrustum"
            , makeConicalFrustum_function_type( &::OSG::makeConicalFrustum )
            , ( bp::arg("height"), bp::arg("topradius"), bp::arg("botradius"), bp::arg("sides"), bp::arg("doSide"), bp::arg("doTop"), bp::arg("doBottom") ) );
    
    }

    { //::OSG::makeConicalFrustumGeo
    
        typedef ::OSG::GeometryTransitPtr ( *makeConicalFrustumGeo_function_type )( ::OSG::Real32,::OSG::Real32,::OSG::Real32,::OSG::UInt16,bool,bool,bool );
        
        bp::def( 
            "makeConicalFrustumGeo"
            , makeConicalFrustumGeo_function_type( &::OSG::makeConicalFrustumGeo )
            , ( bp::arg("height"), bp::arg("topradius"), bp::arg("botradius"), bp::arg("sides"), bp::arg("doSide"), bp::arg("doTop"), bp::arg("doBottom") ) );
    
    }

    { //::OSG::makeCoordAxis
    
        typedef ::OSG::NodeTransitPtr ( *makeCoordAxis_function_type )( ::OSG::Real32,::OSG::Real32,bool );
        
        bp::def( 
            "makeCoordAxis"
            , makeCoordAxis_function_type( &::OSG::makeCoordAxis )
            , ( bp::arg("length"), bp::arg("lineWidth")=2.0e+0f, bp::arg("showAxisName")=(bool)(true) ) );
    
    }

    { //::OSG::makeCoordAxisGeo
    
        typedef ::OSG::GeometryTransitPtr ( *makeCoordAxisGeo_function_type )( ::OSG::Real32,::OSG::Real32,bool );
        
        bp::def( 
            "makeCoordAxisGeo"
            , makeCoordAxisGeo_function_type( &::OSG::makeCoordAxisGeo )
            , ( bp::arg("length"), bp::arg("lineWidth")=2.0e+0f, bp::arg("showAxisName")=(bool)(true) ) );
    
    }

    { //::OSG::makeCylinder
    
        typedef ::OSG::NodeTransitPtr ( *makeCylinder_function_type )( ::OSG::Real32,::OSG::Real32,::OSG::UInt16,bool,bool,bool );
        
        bp::def( 
            "makeCylinder"
            , makeCylinder_function_type( &::OSG::makeCylinder )
            , ( bp::arg("height"), bp::arg("radius"), bp::arg("sides"), bp::arg("doSide"), bp::arg("doTop"), bp::arg("doBottom") ) );
    
    }

    { //::OSG::makeCylinderGeo
    
        typedef ::OSG::GeometryTransitPtr ( *makeCylinderGeo_function_type )( ::OSG::Real32,::OSG::Real32,::OSG::UInt16,bool,bool,bool );
        
        bp::def( 
            "makeCylinderGeo"
            , makeCylinderGeo_function_type( &::OSG::makeCylinderGeo )
            , ( bp::arg("height"), bp::arg("radius"), bp::arg("sides"), bp::arg("doSide"), bp::arg("doTop"), bp::arg("doBottom") ) );
    
    }

    { //::OSG::makeLatLongSphere
    
        typedef ::OSG::NodeTransitPtr ( *makeLatLongSphere_function_type )( ::OSG::UInt16,::OSG::UInt16,::OSG::Real32 );
        
        bp::def( 
            "makeLatLongSphere"
            , makeLatLongSphere_function_type( &::OSG::makeLatLongSphere )
            , ( bp::arg("latres"), bp::arg("longres"), bp::arg("radius") ) );
    
    }

    { //::OSG::makeLatLongSphereGeo
    
        typedef ::OSG::GeometryTransitPtr ( *makeLatLongSphereGeo_function_type )( ::OSG::UInt16,::OSG::UInt16,::OSG::Real32 );
        
        bp::def( 
            "makeLatLongSphereGeo"
            , makeLatLongSphereGeo_function_type( &::OSG::makeLatLongSphereGeo )
            , ( bp::arg("latres"), bp::arg("longres"), bp::arg("radius") ) );
    
    }

    { //::OSG::makePlane
    
        typedef ::OSG::NodeTransitPtr ( *makePlane_function_type )( ::OSG::Real32,::OSG::Real32,::OSG::UInt16,::OSG::UInt16 );
        
        bp::def( 
            "makePlane"
            , makePlane_function_type( &::OSG::makePlane )
            , ( bp::arg("xsize"), bp::arg("ysize"), bp::arg("hor"), bp::arg("vert") ) );
    
    }

    { //::OSG::makePlaneGeo
    
        typedef ::OSG::GeometryTransitPtr ( *makePlaneGeo_function_type )( ::OSG::Real32,::OSG::Real32,::OSG::UInt16,::OSG::UInt16 );
        
        bp::def( 
            "makePlaneGeo"
            , makePlaneGeo_function_type( &::OSG::makePlaneGeo )
            , ( bp::arg("xsize"), bp::arg("ysize"), bp::arg("hor"), bp::arg("vert") ) );
    
    }

    { //::OSG::makeSphere
    
        typedef ::OSG::NodeTransitPtr ( *makeSphere_function_type )( ::OSG::UInt16,::OSG::Real32 );
        
        bp::def( 
            "makeSphere"
            , makeSphere_function_type( &::OSG::makeSphere )
            , ( bp::arg("depth"), bp::arg("radius") ) );
    
    }

    { //::OSG::makeSphereGeo
    
        typedef ::OSG::GeometryTransitPtr ( *makeSphereGeo_function_type )( ::OSG::UInt16,::OSG::Real32 );
        
        bp::def( 
            "makeSphereGeo"
            , makeSphereGeo_function_type( &::OSG::makeSphereGeo )
            , ( bp::arg("depth"), bp::arg("radius") ) );
    
    }

    { //::OSG::makeTeapot
    
        typedef ::OSG::NodeTransitPtr ( *makeTeapot_function_type )( ::OSG::UInt16,::OSG::Real32 );
        
        bp::def( 
            "makeTeapot"
            , makeTeapot_function_type( &::OSG::makeTeapot )
            , ( bp::arg("depth"), bp::arg("rScale")=1.0e+0f ) );
    
    }

    { //::OSG::makeTeapotGeo
    
        typedef ::OSG::GeometryTransitPtr ( *makeTeapotGeo_function_type )( ::OSG::UInt16,::OSG::Real32 );
        
        bp::def( 
            "makeTeapotGeo"
            , makeTeapotGeo_function_type( &::OSG::makeTeapotGeo )
            , ( bp::arg("depth"), bp::arg("rScale")=1.0e+0f ) );
    
    }

    { //::OSG::makeTorus
    
        typedef ::OSG::NodeTransitPtr ( *makeTorus_function_type )( ::OSG::Real32,::OSG::Real32,::OSG::UInt16,::OSG::UInt16 );
        
        bp::def( 
            "makeTorus"
            , makeTorus_function_type( &::OSG::makeTorus )
            , ( bp::arg("innerRadius"), bp::arg("outerRadius"), bp::arg("sides"), bp::arg("rings") ) );
    
    }

    { //::OSG::makeTorusGeo
    
        typedef ::OSG::GeometryTransitPtr ( *makeTorusGeo_function_type )( ::OSG::Real32,::OSG::Real32,::OSG::UInt16,::OSG::UInt16 );
        
        bp::def( 
            "makeTorusGeo"
            , makeTorusGeo_function_type( &::OSG::makeTorusGeo )
            , ( bp::arg("innerRadius"), bp::arg("outerRadius"), bp::arg("sides"), bp::arg("rings") ) );
    
    }

}
