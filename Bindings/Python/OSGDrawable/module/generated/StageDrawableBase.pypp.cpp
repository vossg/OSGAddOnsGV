// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGDrawable_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "StageDrawableBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct StageDrawableBase_wrapper : OSG::StageDrawableBase, bp::wrapper< OSG::StageDrawableBase > {

    virtual void changed( ::OSG::ConstFieldMaskArg whichField, ::OSG::UInt32 origin, ::OSG::BitVector details ) {
        if( bp::override func_changed = this->get_override( "changed" ) )
            func_changed( whichField, origin, details );
        else{
            this->OSG::StageHandlerMixin< OSG::ContainerMixinHead< OSG::StageDrawableDesc > >::changed( whichField, origin, details );
        }
    }
    
    void default_changed( ::OSG::ConstFieldMaskArg whichField, ::OSG::UInt32 origin, ::OSG::BitVector details ) {
        OSG::StageHandlerMixin< OSG::ContainerMixinHead< OSG::StageDrawableDesc > >::changed( whichField, origin, details );
    }

    virtual void dump( ::OSG::UInt32 uiIndent=0, long unsigned int const bvFlags=0 ) const  {
        if( bp::override func_dump = this->get_override( "dump" ) )
            func_dump( uiIndent, bvFlags );
        else{
            this->OSG::StageHandlerMixin< OSG::ContainerMixinHead< OSG::StageDrawableDesc > >::dump( uiIndent, bvFlags );
        }
    }
    
    void default_dump( ::OSG::UInt32 uiIndent=0, long unsigned int const bvFlags=0 ) const  {
        OSG::StageHandlerMixin< OSG::ContainerMixinHead< OSG::StageDrawableDesc > >::dump( uiIndent, bvFlags );
    }

    virtual void fill( ::OSG::DrawableStatsAttachment * pStat ){
        bp::override func_fill = this->get_override( "fill" );
        func_fill( boost::python::ptr(pStat) );
    }

};

void register_StageDrawableBase_class(){

    { //::OSG::StageDrawableBase
        typedef bp::class_< StageDrawableBase_wrapper, bp::bases< OSG::StageHandlerMixin< OSG::ContainerMixinHead< OSG::StageDrawableDesc > > >, boost::noncopyable > StageDrawableBase_exposer_t;
        StageDrawableBase_exposer_t StageDrawableBase_exposer = StageDrawableBase_exposer_t( "StageDrawableBase", bp::no_init );
        bp::scope StageDrawableBase_scope( StageDrawableBase_exposer );
        { //::OSG::StageDrawableBase::copyFromBin
        
            typedef void ( ::OSG::StageDrawableBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            StageDrawableBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::StageDrawableBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::StageDrawableBase::copyToBin
        
            typedef void ( ::OSG::StageDrawableBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            StageDrawableBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::StageDrawableBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::StageDrawableBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::StageDrawableBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            StageDrawableBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::StageDrawableBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::StageDrawableBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            StageDrawableBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::StageDrawableBase::getClassGroupId ) );
        
        }
        { //::OSG::StageDrawableBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            StageDrawableBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::StageDrawableBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::StageDrawableBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            StageDrawableBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::StageDrawableBase::getClassTypeId ) );
        
        }
        { //::OSG::StageDrawableBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::StageDrawableBase::*getContainerSize_function_type )(  ) const;
            
            StageDrawableBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::StageDrawableBase::getContainerSize ) );
        
        }
        { //::OSG::StageDrawableBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::StageDrawableBase::*getType_function_type )(  ) ;
            
            StageDrawableBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::StageDrawableBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::StageDrawableBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::StageDrawableBase::*getType_function_type )(  ) const;
            
            StageDrawableBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::StageDrawableBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::StageHandlerMixin< OSG::ContainerMixinHead< OSG::StageDrawableDesc > >::changed
        
            typedef OSG::StageDrawableBase exported_class_t;
            typedef void ( exported_class_t::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            typedef void ( StageDrawableBase_wrapper::*default_changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            StageDrawableBase_exposer.def( 
                "changed"
                , changed_function_type(&::OSG::StageHandlerMixin< OSG::ContainerMixinHead< OSG::StageDrawableDesc > >::changed)
                , default_changed_function_type(&StageDrawableBase_wrapper::default_changed)
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("details") ) );
        
        }
        { //::OSG::StageHandlerMixin< OSG::ContainerMixinHead< OSG::StageDrawableDesc > >::dump
        
            typedef OSG::StageDrawableBase exported_class_t;
            typedef void ( exported_class_t::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            typedef void ( StageDrawableBase_wrapper::*default_dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            StageDrawableBase_exposer.def( 
                "dump"
                , dump_function_type(&::OSG::StageHandlerMixin< OSG::ContainerMixinHead< OSG::StageDrawableDesc > >::dump)
                , default_dump_function_type(&StageDrawableBase_wrapper::default_dump)
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::Drawable::fill
        
            typedef void ( ::OSG::Drawable::*fill_function_type )( ::OSG::DrawableStatsAttachment * ) ;
            
            StageDrawableBase_exposer.def( 
                "fill"
                , bp::pure_virtual( fill_function_type(&::OSG::Drawable::fill) )
                , ( bp::arg("pStat") ) );
        
        }
        StageDrawableBase_exposer.staticmethod( "getClassGroupId" );
        StageDrawableBase_exposer.staticmethod( "getClassType" );
        StageDrawableBase_exposer.staticmethod( "getClassTypeId" );
    }

}
