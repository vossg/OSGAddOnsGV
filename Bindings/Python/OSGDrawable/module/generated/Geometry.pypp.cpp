// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGDrawable_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "Geometry.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_Geometry_class(){

    { //::OSG::Geometry
        typedef bp::class_< OSG::Geometry, bp::bases< OSG::GeometryBase >, OSG::Geometry::ObjRecPtr, boost::noncopyable > Geometry_exposer_t;
        Geometry_exposer_t Geometry_exposer = Geometry_exposer_t( "Geometry", bp::no_init );
        bp::scope Geometry_scope( Geometry_exposer );
        { //::OSG::Geometry::adjustVolume
        
            typedef void ( ::OSG::Geometry::*adjustVolume_function_type )( ::OSG::Volume & ) ;
            
            Geometry_exposer.def( 
                "adjustVolume"
                , adjustVolume_function_type( &::OSG::Geometry::adjustVolume )
                , ( bp::arg("volume") ) );
        
        }
        { //::OSG::Geometry::beginEdges
        
            typedef ::OSG::EdgeIterator ( ::OSG::Geometry::*beginEdges_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "beginEdges"
                , beginEdges_function_type( &::OSG::Geometry::beginEdges ) );
        
        }
        { //::OSG::Geometry::beginFaces
        
            typedef ::OSG::FaceIterator ( ::OSG::Geometry::*beginFaces_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "beginFaces"
                , beginFaces_function_type( &::OSG::Geometry::beginFaces ) );
        
        }
        { //::OSG::Geometry::beginLines
        
            typedef ::OSG::LineIterator ( ::OSG::Geometry::*beginLines_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "beginLines"
                , beginLines_function_type( &::OSG::Geometry::beginLines ) );
        
        }
        { //::OSG::Geometry::beginPoints
        
            typedef ::OSG::PointIterator ( ::OSG::Geometry::*beginPoints_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "beginPoints"
                , beginPoints_function_type( &::OSG::Geometry::beginPoints ) );
        
        }
        { //::OSG::Geometry::beginPrimitives
        
            typedef ::OSG::PrimitiveIterator ( ::OSG::Geometry::*beginPrimitives_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "beginPrimitives"
                , beginPrimitives_function_type( &::OSG::Geometry::beginPrimitives ) );
        
        }
        { //::OSG::Geometry::beginTriangles
        
            typedef ::OSG::TriangleIterator ( ::OSG::Geometry::*beginTriangles_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "beginTriangles"
                , beginTriangles_function_type( &::OSG::Geometry::beginTriangles ) );
        
        }
        { //::OSG::Geometry::changed
        
            typedef void ( ::OSG::Geometry::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            Geometry_exposer.def( 
                "changed"
                , changed_function_type( &::OSG::Geometry::changed )
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("detail") ) );
        
        }
        { //::OSG::Geometry::drawPrimitives
        
            typedef void ( ::OSG::Geometry::*drawPrimitives_function_type )( ::OSG::DrawEnv * ) ;
            
            Geometry_exposer.def( 
                "drawPrimitives"
                , drawPrimitives_function_type( &::OSG::Geometry::drawPrimitives )
                , ( bp::arg("pEnv") ) );
        
        }
        { //::OSG::Geometry::dump
        
            typedef void ( ::OSG::Geometry::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            Geometry_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::Geometry::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::Geometry::endEdges
        
            typedef ::OSG::EdgeIterator ( ::OSG::Geometry::*endEdges_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "endEdges"
                , endEdges_function_type( &::OSG::Geometry::endEdges ) );
        
        }
        { //::OSG::Geometry::endFaces
        
            typedef ::OSG::FaceIterator ( ::OSG::Geometry::*endFaces_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "endFaces"
                , endFaces_function_type( &::OSG::Geometry::endFaces ) );
        
        }
        { //::OSG::Geometry::endLines
        
            typedef ::OSG::LineIterator ( ::OSG::Geometry::*endLines_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "endLines"
                , endLines_function_type( &::OSG::Geometry::endLines ) );
        
        }
        { //::OSG::Geometry::endPoints
        
            typedef ::OSG::PointIterator ( ::OSG::Geometry::*endPoints_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "endPoints"
                , endPoints_function_type( &::OSG::Geometry::endPoints ) );
        
        }
        { //::OSG::Geometry::endPrimitives
        
            typedef ::OSG::PrimitiveIterator ( ::OSG::Geometry::*endPrimitives_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "endPrimitives"
                , endPrimitives_function_type( &::OSG::Geometry::endPrimitives ) );
        
        }
        { //::OSG::Geometry::endTriangles
        
            typedef ::OSG::TriangleIterator ( ::OSG::Geometry::*endTriangles_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "endTriangles"
                , endTriangles_function_type( &::OSG::Geometry::endTriangles ) );
        
        }
        { //::OSG::Geometry::fill
        
            typedef void ( ::OSG::Geometry::*fill_function_type )( ::OSG::DrawableStatsAttachment * ) ;
            
            Geometry_exposer.def( 
                "fill"
                , fill_function_type( &::OSG::Geometry::fill )
                , ( bp::arg("pStat") ) );
        
        }
        { //::OSG::Geometry::getAttGLId
        
            typedef ::OSG::Int32 ( ::OSG::Geometry::*getAttGLId_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getAttGLId"
                , getAttGLId_function_type( &::OSG::Geometry::getAttGLId ) );
        
        }
        { //::OSG::Geometry::getClassicGLId
        
            typedef ::OSG::Int32 ( ::OSG::Geometry::*getClassicGLId_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getClassicGLId"
                , getClassicGLId_function_type( &::OSG::Geometry::getClassicGLId ) );
        
        }
        { //::OSG::Geometry::getColors
        
            typedef ::OSG::GeoVectorProperty * ( ::OSG::Geometry::*getColors_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getColors"
                , getColors_function_type( &::OSG::Geometry::getColors )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Geometry::getFuncIdDrawArraysInstanced
        
            typedef ::OSG::UInt32 ( *getFuncIdDrawArraysInstanced_function_type )(  );
            
            Geometry_exposer.def( 
                "getFuncIdDrawArraysInstanced"
                , getFuncIdDrawArraysInstanced_function_type( &::OSG::Geometry::getFuncIdDrawArraysInstanced ) );
        
        }
        { //::OSG::Geometry::getFuncIdDrawElementsInstanced
        
            typedef ::OSG::UInt32 ( *getFuncIdDrawElementsInstanced_function_type )(  );
            
            Geometry_exposer.def( 
                "getFuncIdDrawElementsInstanced"
                , getFuncIdDrawElementsInstanced_function_type( &::OSG::Geometry::getFuncIdDrawElementsInstanced ) );
        
        }
        { //::OSG::Geometry::getIndex
        
            typedef ::OSG::GeoIntegralProperty * ( ::OSG::Geometry::*getIndex_function_type )( ::OSG::UInt16 ) const;
            
            Geometry_exposer.def( 
                "getIndex"
                , getIndex_function_type( &::OSG::Geometry::getIndex )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Geometry::getIndices
        
            typedef ::OSG::GeoIntegralProperty * ( ::OSG::Geometry::*getIndices_function_type )(  ) ;
            
            Geometry_exposer.def( 
                "getIndices"
                , getIndices_function_type( &::OSG::Geometry::getIndices )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Geometry::getLengths
        
            typedef ::OSG::GeoIntegralProperty * ( ::OSG::Geometry::*getLengths_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getLengths"
                , getLengths_function_type( &::OSG::Geometry::getLengths )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Geometry::getNormals
        
            typedef ::OSG::GeoVectorProperty * ( ::OSG::Geometry::*getNormals_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getNormals"
                , getNormals_function_type( &::OSG::Geometry::getNormals )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Geometry::getPositions
        
            typedef ::OSG::GeoVectorProperty * ( ::OSG::Geometry::*getPositions_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getPositions"
                , getPositions_function_type( &::OSG::Geometry::getPositions )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Geometry::getProperty
        
            typedef ::OSG::GeoVectorProperty * ( ::OSG::Geometry::*getProperty_function_type )( ::OSG::UInt16 ) const;
            
            Geometry_exposer.def( 
                "getProperty"
                , getProperty_function_type( &::OSG::Geometry::getProperty )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Geometry::getPumpGroupStorage
        
            typedef ::std::vector< OSG::GeoPumpGroup* > & ( *getPumpGroupStorage_function_type )(  );
            
            Geometry_exposer.def( 
                "getPumpGroupStorage"
                , getPumpGroupStorage_function_type( &::OSG::Geometry::getPumpGroupStorage )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Geometry::getSecondaryColors
        
            typedef ::OSG::GeoVectorProperty * ( ::OSG::Geometry::*getSecondaryColors_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getSecondaryColors"
                , getSecondaryColors_function_type( &::OSG::Geometry::getSecondaryColors )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Geometry::getTexCoords
        
            typedef ::OSG::GeoVectorProperty * ( ::OSG::Geometry::*getTexCoords_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getTexCoords"
                , getTexCoords_function_type( &::OSG::Geometry::getTexCoords )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Geometry::getTexCoords1
        
            typedef ::OSG::GeoVectorProperty * ( ::OSG::Geometry::*getTexCoords1_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getTexCoords1"
                , getTexCoords1_function_type( &::OSG::Geometry::getTexCoords1 )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Geometry::getTexCoords2
        
            typedef ::OSG::GeoVectorProperty * ( ::OSG::Geometry::*getTexCoords2_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getTexCoords2"
                , getTexCoords2_function_type( &::OSG::Geometry::getTexCoords2 )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Geometry::getTexCoords3
        
            typedef ::OSG::GeoVectorProperty * ( ::OSG::Geometry::*getTexCoords3_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getTexCoords3"
                , getTexCoords3_function_type( &::OSG::Geometry::getTexCoords3 )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Geometry::getTexCoords4
        
            typedef ::OSG::GeoVectorProperty * ( ::OSG::Geometry::*getTexCoords4_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getTexCoords4"
                , getTexCoords4_function_type( &::OSG::Geometry::getTexCoords4 )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Geometry::getTexCoords5
        
            typedef ::OSG::GeoVectorProperty * ( ::OSG::Geometry::*getTexCoords5_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getTexCoords5"
                , getTexCoords5_function_type( &::OSG::Geometry::getTexCoords5 )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Geometry::getTexCoords6
        
            typedef ::OSG::GeoVectorProperty * ( ::OSG::Geometry::*getTexCoords6_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getTexCoords6"
                , getTexCoords6_function_type( &::OSG::Geometry::getTexCoords6 )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Geometry::getTexCoords7
        
            typedef ::OSG::GeoVectorProperty * ( ::OSG::Geometry::*getTexCoords7_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getTexCoords7"
                , getTexCoords7_function_type( &::OSG::Geometry::getTexCoords7 )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Geometry::getTypes
        
            typedef ::OSG::GeoIntegralProperty * ( ::OSG::Geometry::*getTypes_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getTypes"
                , getTypes_function_type( &::OSG::Geometry::getTypes )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Geometry::getUniqueIndexBag
        
            typedef ::std::vector< std::pair<OSG::GeoIntegralProperty*, std::vector<short unsigned int, std::allocator<short unsigned int> > > > ( ::OSG::Geometry::*getUniqueIndexBag_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getUniqueIndexBag"
                , getUniqueIndexBag_function_type( &::OSG::Geometry::getUniqueIndexBag ) );
        
        }
        { //::OSG::Geometry::indexOccurrence
        
            typedef ::OSG::UInt32 ( ::OSG::Geometry::*indexOccurrence_function_type )( ::OSG::GeoIntegralProperty * const ) const;
            
            Geometry_exposer.def( 
                "indexOccurrence"
                , indexOccurrence_function_type( &::OSG::Geometry::indexOccurrence )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::Geometry::intersectEnter
        
            typedef ::OSG::ActionBase::ResultE ( ::OSG::Geometry::*intersectEnter_function_type )( ::OSG::Action * ) ;
            
            Geometry_exposer.def( 
                "intersectEnter"
                , intersectEnter_function_type( &::OSG::Geometry::intersectEnter )
                , ( bp::arg("action") ) );
        
        }
        { //::OSG::Geometry::invalidateDlistCache
        
            typedef void ( ::OSG::Geometry::*invalidateDlistCache_function_type )(  ) ;
            
            Geometry_exposer.def( 
                "invalidateDlistCache"
                , invalidateDlistCache_function_type( &::OSG::Geometry::invalidateDlistCache ) );
        
        }
        { //::OSG::Geometry::isSingleIndex
        
            typedef bool ( ::OSG::Geometry::*isSingleIndex_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "isSingleIndex"
                , isSingleIndex_function_type( &::OSG::Geometry::isSingleIndex ) );
        
        }
        { //::OSG::Geometry::mapType
        
            typedef char const * ( *mapType_function_type )( ::OSG::UInt8 );
            
            Geometry_exposer.def( 
                "mapType"
                , mapType_function_type( &::OSG::Geometry::mapType )
                , ( bp::arg("type") ) );
        
        }
        { //::OSG::Geometry::reservePropIndices
        
            typedef void ( ::OSG::Geometry::*reservePropIndices_function_type )( ::size_t ) ;
            
            Geometry_exposer.def( 
                "reservePropIndices"
                , reservePropIndices_function_type( &::OSG::Geometry::reservePropIndices )
                , ( bp::arg("newsize") ) );
        
        }
        { //::OSG::Geometry::reserveProperties
        
            typedef void ( ::OSG::Geometry::*reserveProperties_function_type )( ::size_t ) ;
            
            Geometry_exposer.def( 
                "reserveProperties"
                , reserveProperties_function_type( &::OSG::Geometry::reserveProperties )
                , ( bp::arg("newsize") ) );
        
        }
        { //::OSG::Geometry::resizePropIndices
        
            typedef void ( ::OSG::Geometry::*resizePropIndices_function_type )( ::size_t ) ;
            
            Geometry_exposer.def( 
                "resizePropIndices"
                , resizePropIndices_function_type( &::OSG::Geometry::resizePropIndices )
                , ( bp::arg("newsize") ) );
        
        }
        { //::OSG::Geometry::resizeProperties
        
            typedef void ( ::OSG::Geometry::*resizeProperties_function_type )( ::size_t ) ;
            
            Geometry_exposer.def( 
                "resizeProperties"
                , resizeProperties_function_type( &::OSG::Geometry::resizeProperties )
                , ( bp::arg("newsize") ) );
        
        }
        { //::OSG::Geometry::setColors
        
            typedef void ( ::OSG::Geometry::*setColors_function_type )( ::OSG::GeoVectorProperty * const ) ;
            
            Geometry_exposer.def( 
                "setColors"
                , setColors_function_type( &::OSG::Geometry::setColors )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::Geometry::setIndex
        
            typedef void ( ::OSG::Geometry::*setIndex_function_type )( ::OSG::GeoIntegralProperty * const,::OSG::UInt16 ) ;
            
            Geometry_exposer.def( 
                "setIndex"
                , setIndex_function_type( &::OSG::Geometry::setIndex )
                , ( bp::arg("value"), bp::arg("index") ) );
        
        }
        { //::OSG::Geometry::setIndices
        
            typedef void ( ::OSG::Geometry::*setIndices_function_type )( ::OSG::GeoIntegralProperty * const ) ;
            
            Geometry_exposer.def( 
                "setIndices"
                , setIndices_function_type( &::OSG::Geometry::setIndices )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::Geometry::setMaterial
        
            typedef void ( ::OSG::Geometry::*setMaterial_function_type )( ::OSG::Material * const ) ;
            
            Geometry_exposer.def( 
                "setMaterial"
                , setMaterial_function_type( &::OSG::Geometry::setMaterial )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::Geometry::setNormals
        
            typedef void ( ::OSG::Geometry::*setNormals_function_type )( ::OSG::GeoVectorProperty * const ) ;
            
            Geometry_exposer.def( 
                "setNormals"
                , setNormals_function_type( &::OSG::Geometry::setNormals )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::Geometry::setPositions
        
            typedef void ( ::OSG::Geometry::*setPositions_function_type )( ::OSG::GeoVectorProperty * const ) ;
            
            Geometry_exposer.def( 
                "setPositions"
                , setPositions_function_type( &::OSG::Geometry::setPositions )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::Geometry::setProperty
        
            typedef void ( ::OSG::Geometry::*setProperty_function_type )( ::OSG::GeoVectorProperty * const,::OSG::UInt16 ) ;
            
            Geometry_exposer.def( 
                "setProperty"
                , setProperty_function_type( &::OSG::Geometry::setProperty )
                , ( bp::arg("value"), bp::arg("index") ) );
        
        }
        { //::OSG::Geometry::setSecondaryColors
        
            typedef void ( ::OSG::Geometry::*setSecondaryColors_function_type )( ::OSG::GeoVectorProperty * const ) ;
            
            Geometry_exposer.def( 
                "setSecondaryColors"
                , setSecondaryColors_function_type( &::OSG::Geometry::setSecondaryColors )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::Geometry::setTexCoords
        
            typedef void ( ::OSG::Geometry::*setTexCoords_function_type )( ::OSG::GeoVectorProperty * const ) ;
            
            Geometry_exposer.def( 
                "setTexCoords"
                , setTexCoords_function_type( &::OSG::Geometry::setTexCoords )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::Geometry::setTexCoords1
        
            typedef void ( ::OSG::Geometry::*setTexCoords1_function_type )( ::OSG::GeoVectorProperty * const ) ;
            
            Geometry_exposer.def( 
                "setTexCoords1"
                , setTexCoords1_function_type( &::OSG::Geometry::setTexCoords1 )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::Geometry::setTexCoords2
        
            typedef void ( ::OSG::Geometry::*setTexCoords2_function_type )( ::OSG::GeoVectorProperty * const ) ;
            
            Geometry_exposer.def( 
                "setTexCoords2"
                , setTexCoords2_function_type( &::OSG::Geometry::setTexCoords2 )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::Geometry::setTexCoords3
        
            typedef void ( ::OSG::Geometry::*setTexCoords3_function_type )( ::OSG::GeoVectorProperty * const ) ;
            
            Geometry_exposer.def( 
                "setTexCoords3"
                , setTexCoords3_function_type( &::OSG::Geometry::setTexCoords3 )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::Geometry::setTexCoords4
        
            typedef void ( ::OSG::Geometry::*setTexCoords4_function_type )( ::OSG::GeoVectorProperty * const ) ;
            
            Geometry_exposer.def( 
                "setTexCoords4"
                , setTexCoords4_function_type( &::OSG::Geometry::setTexCoords4 )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::Geometry::setTexCoords5
        
            typedef void ( ::OSG::Geometry::*setTexCoords5_function_type )( ::OSG::GeoVectorProperty * const ) ;
            
            Geometry_exposer.def( 
                "setTexCoords5"
                , setTexCoords5_function_type( &::OSG::Geometry::setTexCoords5 )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::Geometry::setTexCoords6
        
            typedef void ( ::OSG::Geometry::*setTexCoords6_function_type )( ::OSG::GeoVectorProperty * const ) ;
            
            Geometry_exposer.def( 
                "setTexCoords6"
                , setTexCoords6_function_type( &::OSG::Geometry::setTexCoords6 )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::Geometry::setTexCoords7
        
            typedef void ( ::OSG::Geometry::*setTexCoords7_function_type )( ::OSG::GeoVectorProperty * const ) ;
            
            Geometry_exposer.def( 
                "setTexCoords7"
                , setTexCoords7_function_type( &::OSG::Geometry::setTexCoords7 )
                , ( bp::arg("value") ) );
        
        }
        Geometry_exposer.staticmethod( "getFuncIdDrawArraysInstanced" );
        Geometry_exposer.staticmethod( "getFuncIdDrawElementsInstanced" );
        Geometry_exposer.staticmethod( "getPumpGroupStorage" );
        Geometry_exposer.staticmethod( "mapType" );
        pyopensg::register_transit< OSG::Geometry >::execute();
        bp::implicitly_convertible< OSG::Geometry::ObjRecPtr, OSG::Geometry* >();
        bp::implicitly_convertible< OSG::Geometry::ObjRecPtr, OSG::Geometry::ObjCPtr >();
        bp::implicitly_convertible< OSG::Geometry::ObjRecPtr, OSG::MaterialDrawable* >();
        bp::implicitly_convertible< OSG::Geometry::ObjRecPtr, OSG::MaterialDrawable::ObjRecPtr >();
        bp::implicitly_convertible<OSG::Geometry::ObjRecPtr, OSG::MaterialDrawable::ObjCPtr>();
    }

}
