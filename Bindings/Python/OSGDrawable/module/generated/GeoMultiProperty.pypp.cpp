// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGDrawable_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "GeoMultiProperty.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_GeoMultiProperty_class(){

    { //::OSG::GeoMultiProperty
        typedef bp::class_< OSG::GeoMultiProperty, bp::bases< OSG::GeoMultiPropertyBase >, OSG::GeoMultiProperty::ObjRecPtr, boost::noncopyable > GeoMultiProperty_exposer_t;
        GeoMultiProperty_exposer_t GeoMultiProperty_exposer = GeoMultiProperty_exposer_t( "GeoMultiProperty", bp::no_init );
        bp::scope GeoMultiProperty_scope( GeoMultiProperty_exposer );
        { //::OSG::GeoMultiProperty::changed
        
            typedef void ( ::OSG::GeoMultiProperty::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            GeoMultiProperty_exposer.def( 
                "changed"
                , changed_function_type( &::OSG::GeoMultiProperty::changed )
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("detail") ) );
        
        }
        { //::OSG::GeoMultiProperty::clear
        
            typedef void ( ::OSG::GeoMultiProperty::*clear_function_type )(  ) ;
            
            GeoMultiProperty_exposer.def( 
                "clear"
                , clear_function_type( &::OSG::GeoMultiProperty::clear ) );
        
        }
        { //::OSG::GeoMultiProperty::clone
        
            typedef ::OSG::GeoPropertyTransitPtr ( ::OSG::GeoMultiProperty::*clone_function_type )(  ) ;
            
            GeoMultiProperty_exposer.def( 
                "clone"
                , clone_function_type( &::OSG::GeoMultiProperty::clone ) );
        
        }
        { //::OSG::GeoMultiProperty::dump
        
            typedef void ( ::OSG::GeoMultiProperty::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            GeoMultiProperty_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::GeoMultiProperty::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::GeoMultiProperty::getClass
        
            typedef ::OSG::StateChunkClass const * ( ::OSG::GeoMultiProperty::*getClass_function_type )(  ) const;
            
            GeoMultiProperty_exposer.def( 
                "getClass"
                , getClass_function_type( &::OSG::GeoMultiProperty::getClass )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::GeoMultiProperty::getDimension
        
            typedef ::OSG::UInt32 ( ::OSG::GeoMultiProperty::*getDimension_function_type )(  ) const;
            
            GeoMultiProperty_exposer.def( 
                "getDimension"
                , getDimension_function_type( &::OSG::GeoMultiProperty::getDimension ) );
        
        }
        { //::OSG::GeoMultiProperty::getFormat
        
            typedef ::OSG::UInt32 ( ::OSG::GeoMultiProperty::*getFormat_function_type )(  ) const;
            
            GeoMultiProperty_exposer.def( 
                "getFormat"
                , getFormat_function_type( &::OSG::GeoMultiProperty::getFormat ) );
        
        }
        { //::OSG::GeoMultiProperty::getFormatSize
        
            typedef ::OSG::UInt32 ( ::OSG::GeoMultiProperty::*getFormatSize_function_type )(  ) const;
            
            GeoMultiProperty_exposer.def( 
                "getFormatSize"
                , getFormatSize_function_type( &::OSG::GeoMultiProperty::getFormatSize ) );
        
        }
        { //::OSG::GeoMultiProperty::getNormalize
        
            typedef bool ( ::OSG::GeoMultiProperty::*getNormalize_function_type )(  ) const;
            
            GeoMultiProperty_exposer.def( 
                "getNormalize"
                , getNormalize_function_type( &::OSG::GeoMultiProperty::getNormalize ) );
        
        }
        { //::OSG::GeoMultiProperty::getStaticClass
        
            typedef ::OSG::StateChunkClass const * ( *getStaticClass_function_type )(  );
            
            GeoMultiProperty_exposer.def( 
                "getStaticClass"
                , getStaticClass_function_type( &::OSG::GeoMultiProperty::getStaticClass )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::GeoMultiProperty::getStaticClassId
        
            typedef ::OSG::UInt32 ( *getStaticClassId_function_type )(  );
            
            GeoMultiProperty_exposer.def( 
                "getStaticClassId"
                , getStaticClassId_function_type( &::OSG::GeoMultiProperty::getStaticClassId ) );
        
        }
        { //::OSG::GeoMultiProperty::getStride
        
            typedef ::OSG::UInt32 ( ::OSG::GeoMultiProperty::*getStride_function_type )(  ) const;
            
            GeoMultiProperty_exposer.def( 
                "getStride"
                , getStride_function_type( &::OSG::GeoMultiProperty::getStride ) );
        
        }
        { //::OSG::GeoMultiProperty::getValue
        
            typedef ::OSG::Vec4d ( ::OSG::GeoMultiProperty::*getValue_function_type )( ::OSG::SizeT const ) const;
            
            GeoMultiProperty_exposer.def( 
                "getValue"
                , getValue_function_type( &::OSG::GeoMultiProperty::getValue )
                , ( bp::arg("index") ) );
        
        }
        { //::OSG::GeoMultiProperty::getValue
        
            typedef void ( ::OSG::GeoMultiProperty::*getValue_function_type )( ::OSG::Vec4d &,::OSG::SizeT const ) const;
            
            GeoMultiProperty_exposer.def( 
                "getValue"
                , getValue_function_type( &::OSG::GeoMultiProperty::getValue )
                , ( bp::arg("val"), bp::arg("index") ) );
        
        }
        { //::OSG::GeoMultiProperty::getVectorType
        
            typedef ::OSG::UInt32 ( ::OSG::GeoMultiProperty::*getVectorType_function_type )(  ) const;
            
            GeoMultiProperty_exposer.def( 
                "getVectorType"
                , getVectorType_function_type( &::OSG::GeoMultiProperty::getVectorType ) );
        
        }
        { //::OSG::GeoMultiProperty::isTransparent
        
            typedef bool ( ::OSG::GeoMultiProperty::*isTransparent_function_type )(  ) const;
            
            GeoMultiProperty_exposer.def( 
                "isTransparent"
                , isTransparent_function_type( &::OSG::GeoMultiProperty::isTransparent ) );
        
        }
        { //::OSG::GeoMultiProperty::resize
        
            typedef void ( ::OSG::GeoMultiProperty::*resize_function_type )( ::OSG::SizeT ) ;
            
            GeoMultiProperty_exposer.def( 
                "resize"
                , resize_function_type( &::OSG::GeoMultiProperty::resize )
                , ( bp::arg("newsize") ) );
        
        }
        { //::OSG::GeoMultiProperty::setDimension
        
            typedef void ( ::OSG::GeoMultiProperty::*setDimension_function_type )( ::OSG::UInt32 ) ;
            
            GeoMultiProperty_exposer.def( 
                "setDimension"
                , setDimension_function_type( &::OSG::GeoMultiProperty::setDimension )
                , ( bp::arg("val") ) );
        
        }
        { //::OSG::GeoMultiProperty::setFormat
        
            typedef void ( ::OSG::GeoMultiProperty::*setFormat_function_type )( ::OSG::UInt32 ) ;
            
            GeoMultiProperty_exposer.def( 
                "setFormat"
                , setFormat_function_type( &::OSG::GeoMultiProperty::setFormat )
                , ( bp::arg("val") ) );
        
        }
        { //::OSG::GeoMultiProperty::setNormalize
        
            typedef void ( ::OSG::GeoMultiProperty::*setNormalize_function_type )( bool ) ;
            
            GeoMultiProperty_exposer.def( 
                "setNormalize"
                , setNormalize_function_type( &::OSG::GeoMultiProperty::setNormalize )
                , ( bp::arg("val") ) );
        
        }
        { //::OSG::GeoMultiProperty::setSize
        
            typedef void ( ::OSG::GeoMultiProperty::*setSize_function_type )( ::OSG::UInt32 ) ;
            
            GeoMultiProperty_exposer.def( 
                "setSize"
                , setSize_function_type( &::OSG::GeoMultiProperty::setSize )
                , ( bp::arg("val") ) );
        
        }
        { //::OSG::GeoMultiProperty::setStride
        
            typedef void ( ::OSG::GeoMultiProperty::*setStride_function_type )( ::OSG::UInt32 ) ;
            
            GeoMultiProperty_exposer.def( 
                "setStride"
                , setStride_function_type( &::OSG::GeoMultiProperty::setStride )
                , ( bp::arg("val") ) );
        
        }
        { //::OSG::GeoMultiProperty::setValue
        
            typedef void ( ::OSG::GeoMultiProperty::*setValue_function_type )( ::OSG::Vec4d const &,::OSG::UInt32 const ) ;
            
            GeoMultiProperty_exposer.def( 
                "setValue"
                , setValue_function_type( &::OSG::GeoMultiProperty::setValue )
                , ( bp::arg("val"), bp::arg("index") ) );
        
        }
        { //::OSG::GeoMultiProperty::size
        
            typedef ::OSG::SizeT ( ::OSG::GeoMultiProperty::*size_function_type )(  ) const;
            
            GeoMultiProperty_exposer.def( 
                "size"
                , size_function_type( &::OSG::GeoMultiProperty::size ) );
        
        }
        { //::OSG::GeoMultiProperty::size32
        
            typedef ::OSG::UInt32 ( ::OSG::GeoMultiProperty::*size32_function_type )(  ) const;
            
            GeoMultiProperty_exposer.def( 
                "size32"
                , size32_function_type( &::OSG::GeoMultiProperty::size32 ) );
        
        }
        { //::OSG::GeoMultiProperty::switchCost
        
            typedef ::OSG::Real32 ( ::OSG::GeoMultiProperty::*switchCost_function_type )( ::OSG::StateChunk * ) ;
            
            GeoMultiProperty_exposer.def( 
                "switchCost"
                , switchCost_function_type( &::OSG::GeoMultiProperty::switchCost )
                , ( bp::arg("chunk") ) );
        
        }
        GeoMultiProperty_exposer.staticmethod( "getStaticClass" );
        GeoMultiProperty_exposer.staticmethod( "getStaticClassId" );
        pyopensg::register_transit< OSG::GeoMultiProperty >::execute();
        bp::implicitly_convertible< OSG::GeoMultiProperty::ObjRecPtr, OSG::GeoMultiProperty* >();
        bp::implicitly_convertible< OSG::GeoMultiProperty::ObjRecPtr, OSG::GeoMultiProperty::ObjCPtr >();
        bp::implicitly_convertible< OSG::GeoMultiProperty::ObjRecPtr, OSG::GeoVectorProperty* >();
        bp::implicitly_convertible< OSG::GeoMultiProperty::ObjRecPtr, OSG::GeoVectorProperty::ObjRecPtr >();
        bp::implicitly_convertible<OSG::GeoMultiProperty::ObjRecPtr, OSG::GeoVectorProperty::ObjCPtr>();
    }

}
