// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGDrawable_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "Surface.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_Surface_class(){

    { //::OSG::Surface
        typedef bp::class_< OSG::Surface, bp::bases< OSG::SurfaceBase >, OSG::Surface::ObjRecPtr, boost::noncopyable > Surface_exposer_t;
        Surface_exposer_t Surface_exposer = Surface_exposer_t( "Surface", bp::no_init );
        bp::scope Surface_scope( Surface_exposer );
        { //::OSG::Surface::addCurve
        
            typedef void ( ::OSG::Surface::*addCurve_function_type )( ::OSG::UInt32,::std::vector< double > const &,::std::vector< OSG::Point<float, 2u> > const &,bool ) ;
            
            Surface_exposer.def( 
                "addCurve"
                , addCurve_function_type( &::OSG::Surface::addCurve )
                , ( bp::arg("dim"), bp::arg("knots"), bp::arg("controlpoints"), bp::arg("newloop")=(bool)(false) ) );
        
        }
        { //::OSG::Surface::addCurve
        
            typedef void ( ::OSG::Surface::*addCurve_function_type )( ::OSG::UInt32,::std::vector< double > const &,::std::vector< OSG::Point<float, 3u> > const &,bool ) ;
            
            Surface_exposer.def( 
                "addCurve"
                , addCurve_function_type( &::OSG::Surface::addCurve )
                , ( bp::arg("dim"), bp::arg("knots"), bp::arg("controlpoints"), bp::arg("newloop")=(bool)(false) ) );
        
        }
        { //::OSG::Surface::changed
        
            typedef void ( ::OSG::Surface::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            Surface_exposer.def( 
                "changed"
                , changed_function_type( &::OSG::Surface::changed )
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("detail") ) );
        
        }
        { //::OSG::Surface::clone
        
            typedef ::OSG::SurfaceTransitPtr ( ::OSG::Surface::*clone_function_type )(  ) ;
            
            Surface_exposer.def( 
                "clone"
                , clone_function_type( &::OSG::Surface::clone ) );
        
        }
        { //::OSG::Surface::dump
        
            typedef void ( ::OSG::Surface::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            Surface_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::Surface::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::Surface::flip
        
            typedef void ( ::OSG::Surface::*flip_function_type )(  ) ;
            
            Surface_exposer.def( 
                "flip"
                , flip_function_type( &::OSG::Surface::flip ) );
        
        }
        { //::OSG::Surface::forceTessellate
        
            typedef void ( ::OSG::Surface::*forceTessellate_function_type )(  ) ;
            
            Surface_exposer.def( 
                "forceTessellate"
                , forceTessellate_function_type( &::OSG::Surface::forceTessellate ) );
        
        }
        { //::OSG::Surface::getDesiredError
        
            typedef ::OSG::Real64 ( ::OSG::Surface::*getDesiredError_function_type )( ::OSG::Pnt3f,::OSG::Real64 ) ;
            
            Surface_exposer.def( 
                "getDesiredError"
                , getDesiredError_function_type( &::OSG::Surface::getDesiredError )
                , ( bp::arg("viewPos"), bp::arg("halfPixelSize") ) );
        
        }
        { //::OSG::Surface::readFromTSO
        
            typedef void ( ::OSG::Surface::*readFromTSO_function_type )( ::std::istream &,bool ) ;
            
            Surface_exposer.def( 
                "readFromTSO"
                , readFromTSO_function_type( &::OSG::Surface::readFromTSO )
                , ( bp::arg("infile"), bp::arg("useTextures")=(bool)(false) ) );
        
        }
        { //::OSG::Surface::removeCurves
        
            typedef void ( ::OSG::Surface::*removeCurves_function_type )(  ) ;
            
            Surface_exposer.def( 
                "removeCurves"
                , removeCurves_function_type( &::OSG::Surface::removeCurves ) );
        
        }
        { //::OSG::Surface::writeToOBJ
        
            typedef ::OSG::UInt32 ( ::OSG::Surface::*writeToOBJ_function_type )( ::std::ostream &,::OSG::UInt32 ) ;
            
            Surface_exposer.def( 
                "writeToOBJ"
                , writeToOBJ_function_type( &::OSG::Surface::writeToOBJ )
                , ( bp::arg("outfile"), bp::arg("offset") ) );
        
        }
        { //::OSG::Surface::writeToTSO
        
            typedef void ( ::OSG::Surface::*writeToTSO_function_type )( ::std::ostream & ) ;
            
            Surface_exposer.def( 
                "writeToTSO"
                , writeToTSO_function_type( &::OSG::Surface::writeToTSO )
                , ( bp::arg("outfile") ) );
        
        }
        pyopensg::register_transit< OSG::Surface >::execute();
        bp::implicitly_convertible< OSG::Surface::ObjRecPtr, OSG::Surface* >();
        bp::implicitly_convertible< OSG::Surface::ObjRecPtr, OSG::Surface::ObjCPtr >();
        bp::implicitly_convertible< OSG::Surface::ObjRecPtr, OSG::Geometry* >();
        bp::implicitly_convertible< OSG::Surface::ObjRecPtr, OSG::Geometry::ObjRecPtr >();
        bp::implicitly_convertible<OSG::Surface::ObjRecPtr, OSG::Geometry::ObjCPtr>();
    }

}
