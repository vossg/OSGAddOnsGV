// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGDrawable_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "GeoMultiPropertyDataBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct GeoMultiPropertyDataBase_wrapper : OSG::GeoMultiPropertyDataBase, bp::wrapper< OSG::GeoMultiPropertyDataBase > {



};

boost::python::list GeoMultiPropertyDataBase_getMFIData(OSG::GeoMultiPropertyDataBase *self)
{
   boost::python::list result;
   OSG::MFUInt8 const * mf_data = self->getMFIData();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

void register_GeoMultiPropertyDataBase_class(){

    { //::OSG::GeoMultiPropertyDataBase
        typedef bp::class_< GeoMultiPropertyDataBase_wrapper, bp::bases< ::OSG::StateChunk >, boost::noncopyable > GeoMultiPropertyDataBase_exposer_t;
        GeoMultiPropertyDataBase_exposer_t GeoMultiPropertyDataBase_exposer = GeoMultiPropertyDataBase_exposer_t( "GeoMultiPropertyDataBase", bp::no_init );
        bp::scope GeoMultiPropertyDataBase_scope( GeoMultiPropertyDataBase_exposer );
        bp::scope().attr("IDataFieldId") = (int)OSG::GeoMultiPropertyDataBase::IDataFieldId;
        bp::scope().attr("GLIdFieldId") = (int)OSG::GeoMultiPropertyDataBase::GLIdFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::GeoMultiPropertyDataBase::NextFieldId;
        { //::OSG::GeoMultiPropertyDataBase::copyFromBin
        
            typedef void ( ::OSG::GeoMultiPropertyDataBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            GeoMultiPropertyDataBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::GeoMultiPropertyDataBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::GeoMultiPropertyDataBase::copyToBin
        
            typedef void ( ::OSG::GeoMultiPropertyDataBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            GeoMultiPropertyDataBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::GeoMultiPropertyDataBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::GeoMultiPropertyDataBase::create
        
            typedef ::OSG::GeoMultiPropertyDataTransitPtr ( *create_function_type )(  );
            
            GeoMultiPropertyDataBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::GeoMultiPropertyDataBase::create ) );
        
        }
        { //::OSG::GeoMultiPropertyDataBase::createDependent
        
            typedef ::OSG::GeoMultiPropertyDataTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            GeoMultiPropertyDataBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::GeoMultiPropertyDataBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::GeoMultiPropertyDataBase::createLocal
        
            typedef ::OSG::GeoMultiPropertyDataTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            GeoMultiPropertyDataBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::GeoMultiPropertyDataBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::GeoMultiPropertyDataBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::GeoMultiPropertyDataBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            GeoMultiPropertyDataBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::GeoMultiPropertyDataBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::GeoMultiPropertyDataBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            GeoMultiPropertyDataBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::GeoMultiPropertyDataBase::getClassGroupId ) );
        
        }
        { //::OSG::GeoMultiPropertyDataBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            GeoMultiPropertyDataBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::GeoMultiPropertyDataBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::GeoMultiPropertyDataBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            GeoMultiPropertyDataBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::GeoMultiPropertyDataBase::getClassTypeId ) );
        
        }
        { //::OSG::GeoMultiPropertyDataBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::GeoMultiPropertyDataBase::*getContainerSize_function_type )(  ) const;
            
            GeoMultiPropertyDataBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::GeoMultiPropertyDataBase::getContainerSize ) );
        
        }
        { //::OSG::GeoMultiPropertyDataBase::getGLId
        
            typedef ::OSG::UInt32 ( ::OSG::GeoMultiPropertyDataBase::*getGLId_function_type )(  ) const;
            
            GeoMultiPropertyDataBase_exposer.def( 
                "getGLId"
                , getGLId_function_type( &::OSG::GeoMultiPropertyDataBase::getGLId ) );
        
        }
        { //::OSG::GeoMultiPropertyDataBase::getIData
        
            typedef ::OSG::UInt8 ( ::OSG::GeoMultiPropertyDataBase::*getIData_function_type )( ::OSG::UInt32 const ) const;
            
            GeoMultiPropertyDataBase_exposer.def( 
                "getIData"
                , getIData_function_type( &::OSG::GeoMultiPropertyDataBase::getIData )
                , ( bp::arg("index") ) );
        
        }
        { //::OSG::GeoMultiPropertyDataBase::getSFGLId
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::GeoMultiPropertyDataBase::*getSFGLId_function_type )(  ) const;
            
            GeoMultiPropertyDataBase_exposer.def( 
                "getSFGLId"
                , getSFGLId_function_type( &::OSG::GeoMultiPropertyDataBase::getSFGLId )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::GeoMultiPropertyDataBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::GeoMultiPropertyDataBase::*getType_function_type )(  ) ;
            
            GeoMultiPropertyDataBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::GeoMultiPropertyDataBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::GeoMultiPropertyDataBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::GeoMultiPropertyDataBase::*getType_function_type )(  ) const;
            
            GeoMultiPropertyDataBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::GeoMultiPropertyDataBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::GeoMultiPropertyDataBase::setGLId
        
            typedef void ( ::OSG::GeoMultiPropertyDataBase::*setGLId_function_type )( ::OSG::UInt32 const ) ;
            
            GeoMultiPropertyDataBase_exposer.def( 
                "setGLId"
                , setGLId_function_type( &::OSG::GeoMultiPropertyDataBase::setGLId )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::StateChunk::activate
        
            typedef void ( ::OSG::StateChunk::*activate_function_type )( ::OSG::DrawEnv *,::OSG::UInt32 ) ;
            
            GeoMultiPropertyDataBase_exposer.def( 
                "activate"
                , activate_function_type( &::OSG::StateChunk::activate )
                , ( bp::arg("pEnv"), bp::arg("index")=(::OSG::UInt32)(0) ) );
        
        }
        { //::OSG::StateChunk::changeFrom
        
            typedef void ( ::OSG::StateChunk::*changeFrom_function_type )( ::OSG::DrawEnv *,::OSG::StateChunk *,::OSG::UInt32 ) ;
            
            GeoMultiPropertyDataBase_exposer.def( 
                "changeFrom"
                , changeFrom_function_type( &::OSG::StateChunk::changeFrom )
                , ( bp::arg("pEnv"), bp::arg("pOld"), bp::arg("index")=(::OSG::UInt32)(0) ) );
        
        }
        { //::OSG::StateChunk::deactivate
        
            typedef void ( ::OSG::StateChunk::*deactivate_function_type )( ::OSG::DrawEnv *,::OSG::UInt32 ) ;
            
            GeoMultiPropertyDataBase_exposer.def( 
                "deactivate"
                , deactivate_function_type( &::OSG::StateChunk::deactivate )
                , ( bp::arg("pEnv"), bp::arg("index")=(::OSG::UInt32)(0) ) );
        
        }
        GeoMultiPropertyDataBase_exposer.staticmethod( "create" );
        GeoMultiPropertyDataBase_exposer.staticmethod( "createDependent" );
        GeoMultiPropertyDataBase_exposer.staticmethod( "createLocal" );
        GeoMultiPropertyDataBase_exposer.staticmethod( "getClassGroupId" );
        GeoMultiPropertyDataBase_exposer.staticmethod( "getClassType" );
        GeoMultiPropertyDataBase_exposer.staticmethod( "getClassTypeId" );
        GeoMultiPropertyDataBase_exposer.def("getMFIData",GeoMultiPropertyDataBase_getMFIData);
    }

}
