// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGDrawable_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "GeoIntegralProperty.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct GeoIntegralProperty_wrapper : OSG::GeoIntegralProperty, bp::wrapper< OSG::GeoIntegralProperty > {

    virtual ::OSG::GeoPropertyTransitPtr clone(  ){
        bp::override func_clone = this->get_override( "clone" );
        return func_clone(  );
    }

    virtual ::OSG::UInt32 getDimension(  ) const {
        bp::override func_getDimension = this->get_override( "getDimension" );
        return func_getDimension(  );
    }

    virtual ::OSG::UInt32 getFormat(  ) const {
        bp::override func_getFormat = this->get_override( "getFormat" );
        return func_getFormat(  );
    }

    virtual ::OSG::UInt32 getFormatSize(  ) const {
        bp::override func_getFormatSize = this->get_override( "getFormatSize" );
        return func_getFormatSize(  );
    }

    virtual ::OSG::UInt32 getStride(  ) const {
        bp::override func_getStride = this->get_override( "getStride" );
        return func_getStride(  );
    }

};

void register_GeoIntegralProperty_class(){

    { //::OSG::GeoIntegralProperty
        typedef bp::class_< GeoIntegralProperty_wrapper, bp::bases< OSG::GeoIntegralPropertyBase >, boost::noncopyable > GeoIntegralProperty_exposer_t;
        GeoIntegralProperty_exposer_t GeoIntegralProperty_exposer = GeoIntegralProperty_exposer_t( "GeoIntegralProperty", bp::no_init );
        bp::scope GeoIntegralProperty_scope( GeoIntegralProperty_exposer );
        { //::OSG::GeoIntegralProperty::addValue
        
            typedef void ( ::OSG::GeoIntegralProperty::*addValue_function_type )( unsigned int const & ) ;
            
            GeoIntegralProperty_exposer.def( 
                "addValue"
                , addValue_function_type( &::OSG::GeoIntegralProperty::addValue )
                , ( bp::arg("val") ) );
        
        }
        { //::OSG::GeoIntegralProperty::changed
        
            typedef void ( ::OSG::GeoIntegralProperty::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            GeoIntegralProperty_exposer.def( 
                "changed"
                , changed_function_type( &::OSG::GeoIntegralProperty::changed )
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("detail") ) );
        
        }
        { //::OSG::GeoIntegralProperty::clear
        
            typedef void ( ::OSG::GeoIntegralProperty::*clear_function_type )(  ) ;
            
            GeoIntegralProperty_exposer.def( 
                "clear"
                , clear_function_type( &::OSG::GeoIntegralProperty::clear ) );
        
        }
        { //::OSG::GeoIntegralProperty::dump
        
            typedef void ( ::OSG::GeoIntegralProperty::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            GeoIntegralProperty_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::GeoIntegralProperty::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::GeoIntegralProperty::getClass
        
            typedef ::OSG::StateChunkClass const * ( ::OSG::GeoIntegralProperty::*getClass_function_type )(  ) const;
            
            GeoIntegralProperty_exposer.def( 
                "getClass"
                , getClass_function_type( &::OSG::GeoIntegralProperty::getClass )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::GeoIntegralProperty::getStaticClass
        
            typedef ::OSG::StateChunkClass const * ( *getStaticClass_function_type )(  );
            
            GeoIntegralProperty_exposer.def( 
                "getStaticClass"
                , getStaticClass_function_type( &::OSG::GeoIntegralProperty::getStaticClass )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::GeoIntegralProperty::getStaticClassId
        
            typedef ::OSG::UInt32 ( *getStaticClassId_function_type )(  );
            
            GeoIntegralProperty_exposer.def( 
                "getStaticClassId"
                , getStaticClassId_function_type( &::OSG::GeoIntegralProperty::getStaticClassId ) );
        
        }
        { //::OSG::GeoIntegralProperty::getValue
        
            typedef ::OSG::UInt32 ( ::OSG::GeoIntegralProperty::*getValue_UInt32_function_type )( ::OSG::SizeT const ) const;
            
            GeoIntegralProperty_exposer.def( 
                "getValue_UInt32"
                , getValue_UInt32_function_type( &::OSG::GeoIntegralProperty::getValue )
                , ( bp::arg("index") ) );
        
        }
        { //::OSG::GeoIntegralProperty::getValue<int>
        
            typedef int ( ::OSG::GeoIntegralProperty::*getValue_int_function_type )( ::OSG::SizeT const ) const;
            
            GeoIntegralProperty_exposer.def( 
                "getValue_int"
                , getValue_int_function_type( &::OSG::GeoIntegralProperty::getValue<int> )
                , ( bp::arg("index") ) );
        
        }
        { //::OSG::GeoIntegralProperty::getValue<unsigned char>
        
            typedef unsigned char ( ::OSG::GeoIntegralProperty::*getValue_unsigned_char_function_type )( ::OSG::SizeT const ) const;
            
            GeoIntegralProperty_exposer.def( 
                "getValue_unsigned_char"
                , getValue_unsigned_char_function_type( &::OSG::GeoIntegralProperty::getValue<unsigned char> )
                , ( bp::arg("index") ) );
        
        }
        { //::OSG::GeoIntegralProperty::getValue<unsigned int>
        
            typedef unsigned int ( ::OSG::GeoIntegralProperty::*getValue_unsigned_int_function_type )( ::OSG::SizeT const ) const;
            
            GeoIntegralProperty_exposer.def( 
                "getValue_unsigned_int"
                , getValue_unsigned_int_function_type( &::OSG::GeoIntegralProperty::getValue<unsigned int> )
                , ( bp::arg("index") ) );
        
        }
        { //::OSG::GeoIntegralProperty::getValue<unsigned short>
        
            typedef short unsigned int ( ::OSG::GeoIntegralProperty::*getValue_short_unsigned_int_function_type )( ::OSG::SizeT const ) const;
            
            GeoIntegralProperty_exposer.def( 
                "getValue_short_unsigned_int"
                , getValue_short_unsigned_int_function_type( &::OSG::GeoIntegralProperty::getValue<unsigned short> )
                , ( bp::arg("index") ) );
        
        }
        { //::OSG::GeoIntegralProperty::getVectorType
        
            typedef ::OSG::UInt32 ( ::OSG::GeoIntegralProperty::*getVectorType_function_type )(  ) const;
            
            GeoIntegralProperty_exposer.def( 
                "getVectorType"
                , getVectorType_function_type( &::OSG::GeoIntegralProperty::getVectorType ) );
        
        }
        { //::OSG::GeoIntegralProperty::isInVBO
        
            typedef bool ( ::OSG::GeoIntegralProperty::*isInVBO_function_type )( ::OSG::DrawEnv * ) ;
            
            GeoIntegralProperty_exposer.def( 
                "isInVBO"
                , isInVBO_function_type( &::OSG::GeoIntegralProperty::isInVBO )
                , ( bp::arg("pEnv") ) );
        
        }
        { //::OSG::GeoIntegralProperty::push_back
        
            typedef void ( ::OSG::GeoIntegralProperty::*push_back_function_type )( unsigned int const & ) ;
            
            GeoIntegralProperty_exposer.def( 
                "push_back"
                , push_back_function_type( &::OSG::GeoIntegralProperty::push_back )
                , ( bp::arg("val") ) );
        
        }
        { //::OSG::GeoIntegralProperty::resize
        
            typedef void ( ::OSG::GeoIntegralProperty::*resize_function_type )( ::OSG::SizeT ) ;
            
            GeoIntegralProperty_exposer.def( 
                "resize"
                , resize_function_type( &::OSG::GeoIntegralProperty::resize )
                , ( bp::arg("newsize") ) );
        
        }
        { //::OSG::GeoIntegralProperty::setValue
        
            typedef void ( ::OSG::GeoIntegralProperty::*setValue_function_type )( unsigned int const &,::OSG::SizeT const ) ;
            
            GeoIntegralProperty_exposer.def( 
                "setValue"
                , setValue_function_type( &::OSG::GeoIntegralProperty::setValue )
                , ( bp::arg("val"), bp::arg("index") ) );
        
        }
        { //::OSG::GeoIntegralProperty::size
        
            typedef ::OSG::SizeT ( ::OSG::GeoIntegralProperty::*size_function_type )(  ) const;
            
            GeoIntegralProperty_exposer.def( 
                "size"
                , size_function_type( &::OSG::GeoIntegralProperty::size ) );
        
        }
        { //::OSG::GeoIntegralProperty::size32
        
            typedef ::OSG::UInt32 ( ::OSG::GeoIntegralProperty::*size32_function_type )(  ) const;
            
            GeoIntegralProperty_exposer.def( 
                "size32"
                , size32_function_type( &::OSG::GeoIntegralProperty::size32 ) );
        
        }
        { //::OSG::GeoIntegralProperty::unmapBuffer
        
            typedef bool ( ::OSG::GeoIntegralProperty::*unmapBuffer_function_type )( ::OSG::DrawEnv * ) ;
            
            GeoIntegralProperty_exposer.def( 
                "unmapBuffer"
                , unmapBuffer_function_type( &::OSG::GeoIntegralProperty::unmapBuffer )
                , ( bp::arg("pEnv") ) );
        
        }
        { //::OSG::GeoProperty::clone
        
            typedef ::OSG::GeoPropertyTransitPtr ( ::OSG::GeoProperty::*clone_function_type )(  ) ;
            
            GeoIntegralProperty_exposer.def( 
                "clone"
                , bp::pure_virtual( clone_function_type(&::OSG::GeoProperty::clone) ) );
        
        }
        { //::OSG::GeoProperty::getDimension
        
            typedef ::OSG::UInt32 ( ::OSG::GeoProperty::*getDimension_function_type )(  ) const;
            
            GeoIntegralProperty_exposer.def( 
                "getDimension"
                , bp::pure_virtual( getDimension_function_type(&::OSG::GeoProperty::getDimension) ) );
        
        }
        { //::OSG::GeoProperty::getFormat
        
            typedef ::OSG::UInt32 ( ::OSG::GeoProperty::*getFormat_function_type )(  ) const;
            
            GeoIntegralProperty_exposer.def( 
                "getFormat"
                , bp::pure_virtual( getFormat_function_type(&::OSG::GeoProperty::getFormat) ) );
        
        }
        { //::OSG::GeoProperty::getFormatSize
        
            typedef ::OSG::UInt32 ( ::OSG::GeoProperty::*getFormatSize_function_type )(  ) const;
            
            GeoIntegralProperty_exposer.def( 
                "getFormatSize"
                , bp::pure_virtual( getFormatSize_function_type(&::OSG::GeoProperty::getFormatSize) ) );
        
        }
        { //::OSG::GeoProperty::getStride
        
            typedef ::OSG::UInt32 ( ::OSG::GeoProperty::*getStride_function_type )(  ) const;
            
            GeoIntegralProperty_exposer.def( 
                "getStride"
                , bp::pure_virtual( getStride_function_type(&::OSG::GeoProperty::getStride) ) );
        
        }
        GeoIntegralProperty_exposer.staticmethod( "getStaticClass" );
        GeoIntegralProperty_exposer.staticmethod( "getStaticClassId" );
        pyopensg::register_transit< OSG::GeoIntegralProperty >::execute();
        bp::register_ptr_to_python< OSG::GeoIntegralProperty::ObjRecPtr >();
        bp::implicitly_convertible< OSG::GeoIntegralProperty::ObjRecPtr, OSG::GeoIntegralProperty* >();
        bp::implicitly_convertible< OSG::GeoIntegralProperty::ObjRecPtr, OSG::GeoIntegralProperty::ObjCPtr >();
        bp::implicitly_convertible< OSG::GeoIntegralProperty::ObjRecPtr, OSG::GeoProperty* >();
        bp::implicitly_convertible< OSG::GeoIntegralProperty::ObjRecPtr, OSG::GeoProperty::ObjRecPtr >();
        bp::implicitly_convertible<OSG::GeoIntegralProperty::ObjRecPtr, OSG::GeoProperty::ObjCPtr>();
    }

}
