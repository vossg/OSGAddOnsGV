// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGEffectGroups_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "HDR2StageBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_HDR2StageBase_class(){

    { //::OSG::HDR2StageBase
        typedef bp::class_< OSG::HDR2StageBase, bp::bases< ::OSG::Stage >, boost::noncopyable > HDR2StageBase_exposer_t;
        HDR2StageBase_exposer_t HDR2StageBase_exposer = HDR2StageBase_exposer_t( "HDR2StageBase", bp::no_init );
        bp::scope HDR2StageBase_scope( HDR2StageBase_exposer );
        bp::scope().attr("ApplyGammaFieldId") = (int)OSG::HDR2StageBase::ApplyGammaFieldId;
        bp::scope().attr("AccurateGammaFieldId") = (int)OSG::HDR2StageBase::AccurateGammaFieldId;
        bp::scope().attr("AdjustLuminanceFieldId") = (int)OSG::HDR2StageBase::AdjustLuminanceFieldId;
        bp::scope().attr("TauFieldId") = (int)OSG::HDR2StageBase::TauFieldId;
        bp::scope().attr("PerformBloomFieldId") = (int)OSG::HDR2StageBase::PerformBloomFieldId;
        bp::scope().attr("BloomThresholdFieldId") = (int)OSG::HDR2StageBase::BloomThresholdFieldId;
        bp::scope().attr("BloomBackgroundFieldId") = (int)OSG::HDR2StageBase::BloomBackgroundFieldId;
        bp::scope().attr("BloomMagnitudeFieldId") = (int)OSG::HDR2StageBase::BloomMagnitudeFieldId;
        bp::scope().attr("NumTapsFieldId") = (int)OSG::HDR2StageBase::NumTapsFieldId;
        bp::scope().attr("BlurGaussSigmaFieldId") = (int)OSG::HDR2StageBase::BlurGaussSigmaFieldId;
        bp::scope().attr("ToneMappingModeFieldId") = (int)OSG::HDR2StageBase::ToneMappingModeFieldId;
        bp::scope().attr("ForceBackgroundFieldId") = (int)OSG::HDR2StageBase::ForceBackgroundFieldId;
        bp::scope().attr("Use_ITU_R_BT_709FieldId") = (int)OSG::HDR2StageBase::Use_ITU_R_BT_709FieldId;
        bp::scope().attr("AutoExposureModeFieldId") = (int)OSG::HDR2StageBase::AutoExposureModeFieldId;
        bp::scope().attr("ExposureFieldId") = (int)OSG::HDR2StageBase::ExposureFieldId;
        bp::scope().attr("KeyValueFieldId") = (int)OSG::HDR2StageBase::KeyValueFieldId;
        bp::scope().attr("WhiteLevelFieldId") = (int)OSG::HDR2StageBase::WhiteLevelFieldId;
        bp::scope().attr("SaturationFieldId") = (int)OSG::HDR2StageBase::SaturationFieldId;
        bp::scope().attr("UseLinChromCorrectionFieldId") = (int)OSG::HDR2StageBase::UseLinChromCorrectionFieldId;
        bp::scope().attr("FilmicShoulderStrenghtFieldId") = (int)OSG::HDR2StageBase::FilmicShoulderStrenghtFieldId;
        bp::scope().attr("FilmicLinearStrengthFieldId") = (int)OSG::HDR2StageBase::FilmicLinearStrengthFieldId;
        bp::scope().attr("FilmicLinearAngleFieldId") = (int)OSG::HDR2StageBase::FilmicLinearAngleFieldId;
        bp::scope().attr("FilmicToeStrengthFieldId") = (int)OSG::HDR2StageBase::FilmicToeStrengthFieldId;
        bp::scope().attr("FilmicToeNumeratorFieldId") = (int)OSG::HDR2StageBase::FilmicToeNumeratorFieldId;
        bp::scope().attr("FilmicToeDenominatorFieldId") = (int)OSG::HDR2StageBase::FilmicToeDenominatorFieldId;
        bp::scope().attr("FilmicLinearWhiteFieldId") = (int)OSG::HDR2StageBase::FilmicLinearWhiteFieldId;
        bp::scope().attr("DragoBiasFieldId") = (int)OSG::HDR2StageBase::DragoBiasFieldId;
        bp::scope().attr("TargetFieldId") = (int)OSG::HDR2StageBase::TargetFieldId;
        bp::scope().attr("CarryDepthFieldId") = (int)OSG::HDR2StageBase::CarryDepthFieldId;
        bp::scope().attr("ColorBufferInternalFormatFieldId") = (int)OSG::HDR2StageBase::ColorBufferInternalFormatFieldId;
        bp::scope().attr("ColorBufferPixelFormatFieldId") = (int)OSG::HDR2StageBase::ColorBufferPixelFormatFieldId;
        bp::scope().attr("ColorBufferTypeFieldId") = (int)OSG::HDR2StageBase::ColorBufferTypeFieldId;
        bp::scope().attr("DepthBufferInternalFormatFieldId") = (int)OSG::HDR2StageBase::DepthBufferInternalFormatFieldId;
        bp::scope().attr("DepthBufferPixelFormatFieldId") = (int)OSG::HDR2StageBase::DepthBufferPixelFormatFieldId;
        bp::scope().attr("DepthBufferTypeFieldId") = (int)OSG::HDR2StageBase::DepthBufferTypeFieldId;
        bp::scope().attr("LumBufferInternalFormatFieldId") = (int)OSG::HDR2StageBase::LumBufferInternalFormatFieldId;
        bp::scope().attr("LumBufferPixelFormatFieldId") = (int)OSG::HDR2StageBase::LumBufferPixelFormatFieldId;
        bp::scope().attr("LumBufferTypeFieldId") = (int)OSG::HDR2StageBase::LumBufferTypeFieldId;
        bp::scope().attr("ImageBufferInternalFormatFieldId") = (int)OSG::HDR2StageBase::ImageBufferInternalFormatFieldId;
        bp::scope().attr("ImageBufferPixelFormatFieldId") = (int)OSG::HDR2StageBase::ImageBufferPixelFormatFieldId;
        bp::scope().attr("ImageBufferTypeFieldId") = (int)OSG::HDR2StageBase::ImageBufferTypeFieldId;
        bp::scope().attr("NumSamplesFieldId") = (int)OSG::HDR2StageBase::NumSamplesFieldId;
        bp::scope().attr("MipmapLevelFieldId") = (int)OSG::HDR2StageBase::MipmapLevelFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::HDR2StageBase::NextFieldId;
        { //::OSG::HDR2StageBase::copyFromBin
        
            typedef void ( ::OSG::HDR2StageBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            HDR2StageBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::HDR2StageBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::HDR2StageBase::copyToBin
        
            typedef void ( ::OSG::HDR2StageBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            HDR2StageBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::HDR2StageBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::HDR2StageBase::create
        
            typedef ::OSG::HDR2StageTransitPtr ( *create_function_type )(  );
            
            HDR2StageBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::HDR2StageBase::create ) );
        
        }
        { //::OSG::HDR2StageBase::createDependent
        
            typedef ::OSG::HDR2StageTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            HDR2StageBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::HDR2StageBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::HDR2StageBase::createLocal
        
            typedef ::OSG::HDR2StageTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            HDR2StageBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::HDR2StageBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::HDR2StageBase::getAccurateGamma
        
            typedef bool ( ::OSG::HDR2StageBase::*getAccurateGamma_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getAccurateGamma"
                , getAccurateGamma_function_type( &::OSG::HDR2StageBase::getAccurateGamma ) );
        
        }
        { //::OSG::HDR2StageBase::getAdjustLuminance
        
            typedef bool ( ::OSG::HDR2StageBase::*getAdjustLuminance_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getAdjustLuminance"
                , getAdjustLuminance_function_type( &::OSG::HDR2StageBase::getAdjustLuminance ) );
        
        }
        { //::OSG::HDR2StageBase::getApplyGamma
        
            typedef bool ( ::OSG::HDR2StageBase::*getApplyGamma_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getApplyGamma"
                , getApplyGamma_function_type( &::OSG::HDR2StageBase::getApplyGamma ) );
        
        }
        { //::OSG::HDR2StageBase::getAutoExposureMode
        
            typedef ::OSG::UInt32 ( ::OSG::HDR2StageBase::*getAutoExposureMode_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getAutoExposureMode"
                , getAutoExposureMode_function_type( &::OSG::HDR2StageBase::getAutoExposureMode ) );
        
        }
        { //::OSG::HDR2StageBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::HDR2StageBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            HDR2StageBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::HDR2StageBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::HDR2StageBase::getBloomBackground
        
            typedef bool ( ::OSG::HDR2StageBase::*getBloomBackground_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getBloomBackground"
                , getBloomBackground_function_type( &::OSG::HDR2StageBase::getBloomBackground ) );
        
        }
        { //::OSG::HDR2StageBase::getBloomMagnitude
        
            typedef ::OSG::Real32 ( ::OSG::HDR2StageBase::*getBloomMagnitude_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getBloomMagnitude"
                , getBloomMagnitude_function_type( &::OSG::HDR2StageBase::getBloomMagnitude ) );
        
        }
        { //::OSG::HDR2StageBase::getBloomThreshold
        
            typedef ::OSG::Real32 ( ::OSG::HDR2StageBase::*getBloomThreshold_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getBloomThreshold"
                , getBloomThreshold_function_type( &::OSG::HDR2StageBase::getBloomThreshold ) );
        
        }
        { //::OSG::HDR2StageBase::getBlurGaussSigma
        
            typedef ::OSG::Real32 ( ::OSG::HDR2StageBase::*getBlurGaussSigma_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getBlurGaussSigma"
                , getBlurGaussSigma_function_type( &::OSG::HDR2StageBase::getBlurGaussSigma ) );
        
        }
        { //::OSG::HDR2StageBase::getCarryDepth
        
            typedef bool ( ::OSG::HDR2StageBase::*getCarryDepth_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getCarryDepth"
                , getCarryDepth_function_type( &::OSG::HDR2StageBase::getCarryDepth ) );
        
        }
        { //::OSG::HDR2StageBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            HDR2StageBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::HDR2StageBase::getClassGroupId ) );
        
        }
        { //::OSG::HDR2StageBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            HDR2StageBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::HDR2StageBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::HDR2StageBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            HDR2StageBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::HDR2StageBase::getClassTypeId ) );
        
        }
        { //::OSG::HDR2StageBase::getColorBufferInternalFormat
        
            typedef ::GLenum const & ( ::OSG::HDR2StageBase::*getColorBufferInternalFormat_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getColorBufferInternalFormat"
                , getColorBufferInternalFormat_function_type( &::OSG::HDR2StageBase::getColorBufferInternalFormat )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::HDR2StageBase::getColorBufferPixelFormat
        
            typedef ::GLenum const & ( ::OSG::HDR2StageBase::*getColorBufferPixelFormat_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getColorBufferPixelFormat"
                , getColorBufferPixelFormat_function_type( &::OSG::HDR2StageBase::getColorBufferPixelFormat )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::HDR2StageBase::getColorBufferType
        
            typedef ::GLenum const & ( ::OSG::HDR2StageBase::*getColorBufferType_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getColorBufferType"
                , getColorBufferType_function_type( &::OSG::HDR2StageBase::getColorBufferType )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::HDR2StageBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::HDR2StageBase::*getContainerSize_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::HDR2StageBase::getContainerSize ) );
        
        }
        { //::OSG::HDR2StageBase::getDepthBufferInternalFormat
        
            typedef ::GLenum const & ( ::OSG::HDR2StageBase::*getDepthBufferInternalFormat_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getDepthBufferInternalFormat"
                , getDepthBufferInternalFormat_function_type( &::OSG::HDR2StageBase::getDepthBufferInternalFormat )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::HDR2StageBase::getDepthBufferPixelFormat
        
            typedef ::GLenum const & ( ::OSG::HDR2StageBase::*getDepthBufferPixelFormat_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getDepthBufferPixelFormat"
                , getDepthBufferPixelFormat_function_type( &::OSG::HDR2StageBase::getDepthBufferPixelFormat )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::HDR2StageBase::getDepthBufferType
        
            typedef ::GLenum const & ( ::OSG::HDR2StageBase::*getDepthBufferType_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getDepthBufferType"
                , getDepthBufferType_function_type( &::OSG::HDR2StageBase::getDepthBufferType )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::HDR2StageBase::getDragoBias
        
            typedef ::OSG::Real32 ( ::OSG::HDR2StageBase::*getDragoBias_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getDragoBias"
                , getDragoBias_function_type( &::OSG::HDR2StageBase::getDragoBias ) );
        
        }
        { //::OSG::HDR2StageBase::getExposure
        
            typedef ::OSG::Real32 ( ::OSG::HDR2StageBase::*getExposure_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getExposure"
                , getExposure_function_type( &::OSG::HDR2StageBase::getExposure ) );
        
        }
        { //::OSG::HDR2StageBase::getFilmicLinearAngle
        
            typedef ::OSG::Real32 ( ::OSG::HDR2StageBase::*getFilmicLinearAngle_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getFilmicLinearAngle"
                , getFilmicLinearAngle_function_type( &::OSG::HDR2StageBase::getFilmicLinearAngle ) );
        
        }
        { //::OSG::HDR2StageBase::getFilmicLinearStrength
        
            typedef ::OSG::Real32 ( ::OSG::HDR2StageBase::*getFilmicLinearStrength_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getFilmicLinearStrength"
                , getFilmicLinearStrength_function_type( &::OSG::HDR2StageBase::getFilmicLinearStrength ) );
        
        }
        { //::OSG::HDR2StageBase::getFilmicLinearWhite
        
            typedef ::OSG::Real32 ( ::OSG::HDR2StageBase::*getFilmicLinearWhite_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getFilmicLinearWhite"
                , getFilmicLinearWhite_function_type( &::OSG::HDR2StageBase::getFilmicLinearWhite ) );
        
        }
        { //::OSG::HDR2StageBase::getFilmicShoulderStrenght
        
            typedef ::OSG::Real32 ( ::OSG::HDR2StageBase::*getFilmicShoulderStrenght_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getFilmicShoulderStrenght"
                , getFilmicShoulderStrenght_function_type( &::OSG::HDR2StageBase::getFilmicShoulderStrenght ) );
        
        }
        { //::OSG::HDR2StageBase::getFilmicToeDenominator
        
            typedef ::OSG::Real32 ( ::OSG::HDR2StageBase::*getFilmicToeDenominator_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getFilmicToeDenominator"
                , getFilmicToeDenominator_function_type( &::OSG::HDR2StageBase::getFilmicToeDenominator ) );
        
        }
        { //::OSG::HDR2StageBase::getFilmicToeNumerator
        
            typedef ::OSG::Real32 ( ::OSG::HDR2StageBase::*getFilmicToeNumerator_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getFilmicToeNumerator"
                , getFilmicToeNumerator_function_type( &::OSG::HDR2StageBase::getFilmicToeNumerator ) );
        
        }
        { //::OSG::HDR2StageBase::getFilmicToeStrength
        
            typedef ::OSG::Real32 ( ::OSG::HDR2StageBase::*getFilmicToeStrength_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getFilmicToeStrength"
                , getFilmicToeStrength_function_type( &::OSG::HDR2StageBase::getFilmicToeStrength ) );
        
        }
        { //::OSG::HDR2StageBase::getForceBackground
        
            typedef bool ( ::OSG::HDR2StageBase::*getForceBackground_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getForceBackground"
                , getForceBackground_function_type( &::OSG::HDR2StageBase::getForceBackground ) );
        
        }
        { //::OSG::HDR2StageBase::getImageBufferInternalFormat
        
            typedef ::GLenum const & ( ::OSG::HDR2StageBase::*getImageBufferInternalFormat_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getImageBufferInternalFormat"
                , getImageBufferInternalFormat_function_type( &::OSG::HDR2StageBase::getImageBufferInternalFormat )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::HDR2StageBase::getImageBufferPixelFormat
        
            typedef ::GLenum const & ( ::OSG::HDR2StageBase::*getImageBufferPixelFormat_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getImageBufferPixelFormat"
                , getImageBufferPixelFormat_function_type( &::OSG::HDR2StageBase::getImageBufferPixelFormat )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::HDR2StageBase::getImageBufferType
        
            typedef ::GLenum const & ( ::OSG::HDR2StageBase::*getImageBufferType_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getImageBufferType"
                , getImageBufferType_function_type( &::OSG::HDR2StageBase::getImageBufferType )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::HDR2StageBase::getKeyValue
        
            typedef ::OSG::Real32 ( ::OSG::HDR2StageBase::*getKeyValue_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getKeyValue"
                , getKeyValue_function_type( &::OSG::HDR2StageBase::getKeyValue ) );
        
        }
        { //::OSG::HDR2StageBase::getLumBufferInternalFormat
        
            typedef ::GLenum const & ( ::OSG::HDR2StageBase::*getLumBufferInternalFormat_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getLumBufferInternalFormat"
                , getLumBufferInternalFormat_function_type( &::OSG::HDR2StageBase::getLumBufferInternalFormat )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::HDR2StageBase::getLumBufferPixelFormat
        
            typedef ::GLenum const & ( ::OSG::HDR2StageBase::*getLumBufferPixelFormat_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getLumBufferPixelFormat"
                , getLumBufferPixelFormat_function_type( &::OSG::HDR2StageBase::getLumBufferPixelFormat )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::HDR2StageBase::getLumBufferType
        
            typedef ::GLenum const & ( ::OSG::HDR2StageBase::*getLumBufferType_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getLumBufferType"
                , getLumBufferType_function_type( &::OSG::HDR2StageBase::getLumBufferType )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::HDR2StageBase::getMipmapLevel
        
            typedef ::OSG::Int32 ( ::OSG::HDR2StageBase::*getMipmapLevel_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getMipmapLevel"
                , getMipmapLevel_function_type( &::OSG::HDR2StageBase::getMipmapLevel ) );
        
        }
        { //::OSG::HDR2StageBase::getNumSamples
        
            typedef ::OSG::Int32 ( ::OSG::HDR2StageBase::*getNumSamples_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getNumSamples"
                , getNumSamples_function_type( &::OSG::HDR2StageBase::getNumSamples ) );
        
        }
        { //::OSG::HDR2StageBase::getNumTaps
        
            typedef ::OSG::Int32 ( ::OSG::HDR2StageBase::*getNumTaps_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getNumTaps"
                , getNumTaps_function_type( &::OSG::HDR2StageBase::getNumTaps ) );
        
        }
        { //::OSG::HDR2StageBase::getPerformBloom
        
            typedef bool ( ::OSG::HDR2StageBase::*getPerformBloom_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getPerformBloom"
                , getPerformBloom_function_type( &::OSG::HDR2StageBase::getPerformBloom ) );
        
        }
        { //::OSG::HDR2StageBase::getSFAccurateGamma
        
            typedef ::OSG::SFBool const * ( ::OSG::HDR2StageBase::*getSFAccurateGamma_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFAccurateGamma"
                , getSFAccurateGamma_function_type( &::OSG::HDR2StageBase::getSFAccurateGamma )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFAdjustLuminance
        
            typedef ::OSG::SFBool const * ( ::OSG::HDR2StageBase::*getSFAdjustLuminance_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFAdjustLuminance"
                , getSFAdjustLuminance_function_type( &::OSG::HDR2StageBase::getSFAdjustLuminance )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFApplyGamma
        
            typedef ::OSG::SFBool const * ( ::OSG::HDR2StageBase::*getSFApplyGamma_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFApplyGamma"
                , getSFApplyGamma_function_type( &::OSG::HDR2StageBase::getSFApplyGamma )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFAutoExposureMode
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::HDR2StageBase::*getSFAutoExposureMode_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFAutoExposureMode"
                , getSFAutoExposureMode_function_type( &::OSG::HDR2StageBase::getSFAutoExposureMode )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFBloomBackground
        
            typedef ::OSG::SFBool const * ( ::OSG::HDR2StageBase::*getSFBloomBackground_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFBloomBackground"
                , getSFBloomBackground_function_type( &::OSG::HDR2StageBase::getSFBloomBackground )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFBloomMagnitude
        
            typedef ::OSG::SFReal32 const * ( ::OSG::HDR2StageBase::*getSFBloomMagnitude_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFBloomMagnitude"
                , getSFBloomMagnitude_function_type( &::OSG::HDR2StageBase::getSFBloomMagnitude )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFBloomThreshold
        
            typedef ::OSG::SFReal32 const * ( ::OSG::HDR2StageBase::*getSFBloomThreshold_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFBloomThreshold"
                , getSFBloomThreshold_function_type( &::OSG::HDR2StageBase::getSFBloomThreshold )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFBlurGaussSigma
        
            typedef ::OSG::SFReal32 const * ( ::OSG::HDR2StageBase::*getSFBlurGaussSigma_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFBlurGaussSigma"
                , getSFBlurGaussSigma_function_type( &::OSG::HDR2StageBase::getSFBlurGaussSigma )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFCarryDepth
        
            typedef ::OSG::SFBool const * ( ::OSG::HDR2StageBase::*getSFCarryDepth_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFCarryDepth"
                , getSFCarryDepth_function_type( &::OSG::HDR2StageBase::getSFCarryDepth )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFColorBufferInternalFormat
        
            typedef ::OSG::SFGLenum const * ( ::OSG::HDR2StageBase::*getSFColorBufferInternalFormat_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFColorBufferInternalFormat"
                , getSFColorBufferInternalFormat_function_type( &::OSG::HDR2StageBase::getSFColorBufferInternalFormat )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFColorBufferPixelFormat
        
            typedef ::OSG::SFGLenum const * ( ::OSG::HDR2StageBase::*getSFColorBufferPixelFormat_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFColorBufferPixelFormat"
                , getSFColorBufferPixelFormat_function_type( &::OSG::HDR2StageBase::getSFColorBufferPixelFormat )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFColorBufferType
        
            typedef ::OSG::SFGLenum const * ( ::OSG::HDR2StageBase::*getSFColorBufferType_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFColorBufferType"
                , getSFColorBufferType_function_type( &::OSG::HDR2StageBase::getSFColorBufferType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFDepthBufferInternalFormat
        
            typedef ::OSG::SFGLenum const * ( ::OSG::HDR2StageBase::*getSFDepthBufferInternalFormat_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFDepthBufferInternalFormat"
                , getSFDepthBufferInternalFormat_function_type( &::OSG::HDR2StageBase::getSFDepthBufferInternalFormat )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFDepthBufferPixelFormat
        
            typedef ::OSG::SFGLenum const * ( ::OSG::HDR2StageBase::*getSFDepthBufferPixelFormat_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFDepthBufferPixelFormat"
                , getSFDepthBufferPixelFormat_function_type( &::OSG::HDR2StageBase::getSFDepthBufferPixelFormat )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFDepthBufferType
        
            typedef ::OSG::SFGLenum const * ( ::OSG::HDR2StageBase::*getSFDepthBufferType_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFDepthBufferType"
                , getSFDepthBufferType_function_type( &::OSG::HDR2StageBase::getSFDepthBufferType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFDragoBias
        
            typedef ::OSG::SFReal32 const * ( ::OSG::HDR2StageBase::*getSFDragoBias_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFDragoBias"
                , getSFDragoBias_function_type( &::OSG::HDR2StageBase::getSFDragoBias )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFExposure
        
            typedef ::OSG::SFReal32 const * ( ::OSG::HDR2StageBase::*getSFExposure_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFExposure"
                , getSFExposure_function_type( &::OSG::HDR2StageBase::getSFExposure )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFFilmicLinearAngle
        
            typedef ::OSG::SFReal32 const * ( ::OSG::HDR2StageBase::*getSFFilmicLinearAngle_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFFilmicLinearAngle"
                , getSFFilmicLinearAngle_function_type( &::OSG::HDR2StageBase::getSFFilmicLinearAngle )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFFilmicLinearStrength
        
            typedef ::OSG::SFReal32 const * ( ::OSG::HDR2StageBase::*getSFFilmicLinearStrength_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFFilmicLinearStrength"
                , getSFFilmicLinearStrength_function_type( &::OSG::HDR2StageBase::getSFFilmicLinearStrength )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFFilmicLinearWhite
        
            typedef ::OSG::SFReal32 const * ( ::OSG::HDR2StageBase::*getSFFilmicLinearWhite_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFFilmicLinearWhite"
                , getSFFilmicLinearWhite_function_type( &::OSG::HDR2StageBase::getSFFilmicLinearWhite )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFFilmicShoulderStrenght
        
            typedef ::OSG::SFReal32 const * ( ::OSG::HDR2StageBase::*getSFFilmicShoulderStrenght_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFFilmicShoulderStrenght"
                , getSFFilmicShoulderStrenght_function_type( &::OSG::HDR2StageBase::getSFFilmicShoulderStrenght )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFFilmicToeDenominator
        
            typedef ::OSG::SFReal32 const * ( ::OSG::HDR2StageBase::*getSFFilmicToeDenominator_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFFilmicToeDenominator"
                , getSFFilmicToeDenominator_function_type( &::OSG::HDR2StageBase::getSFFilmicToeDenominator )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFFilmicToeNumerator
        
            typedef ::OSG::SFReal32 const * ( ::OSG::HDR2StageBase::*getSFFilmicToeNumerator_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFFilmicToeNumerator"
                , getSFFilmicToeNumerator_function_type( &::OSG::HDR2StageBase::getSFFilmicToeNumerator )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFFilmicToeStrength
        
            typedef ::OSG::SFReal32 const * ( ::OSG::HDR2StageBase::*getSFFilmicToeStrength_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFFilmicToeStrength"
                , getSFFilmicToeStrength_function_type( &::OSG::HDR2StageBase::getSFFilmicToeStrength )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFForceBackground
        
            typedef ::OSG::SFBool const * ( ::OSG::HDR2StageBase::*getSFForceBackground_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFForceBackground"
                , getSFForceBackground_function_type( &::OSG::HDR2StageBase::getSFForceBackground )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFImageBufferInternalFormat
        
            typedef ::OSG::SFGLenum const * ( ::OSG::HDR2StageBase::*getSFImageBufferInternalFormat_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFImageBufferInternalFormat"
                , getSFImageBufferInternalFormat_function_type( &::OSG::HDR2StageBase::getSFImageBufferInternalFormat )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFImageBufferPixelFormat
        
            typedef ::OSG::SFGLenum const * ( ::OSG::HDR2StageBase::*getSFImageBufferPixelFormat_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFImageBufferPixelFormat"
                , getSFImageBufferPixelFormat_function_type( &::OSG::HDR2StageBase::getSFImageBufferPixelFormat )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFImageBufferType
        
            typedef ::OSG::SFGLenum const * ( ::OSG::HDR2StageBase::*getSFImageBufferType_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFImageBufferType"
                , getSFImageBufferType_function_type( &::OSG::HDR2StageBase::getSFImageBufferType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFKeyValue
        
            typedef ::OSG::SFReal32 const * ( ::OSG::HDR2StageBase::*getSFKeyValue_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFKeyValue"
                , getSFKeyValue_function_type( &::OSG::HDR2StageBase::getSFKeyValue )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFLumBufferInternalFormat
        
            typedef ::OSG::SFGLenum const * ( ::OSG::HDR2StageBase::*getSFLumBufferInternalFormat_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFLumBufferInternalFormat"
                , getSFLumBufferInternalFormat_function_type( &::OSG::HDR2StageBase::getSFLumBufferInternalFormat )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFLumBufferPixelFormat
        
            typedef ::OSG::SFGLenum const * ( ::OSG::HDR2StageBase::*getSFLumBufferPixelFormat_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFLumBufferPixelFormat"
                , getSFLumBufferPixelFormat_function_type( &::OSG::HDR2StageBase::getSFLumBufferPixelFormat )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFLumBufferType
        
            typedef ::OSG::SFGLenum const * ( ::OSG::HDR2StageBase::*getSFLumBufferType_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFLumBufferType"
                , getSFLumBufferType_function_type( &::OSG::HDR2StageBase::getSFLumBufferType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFMipmapLevel
        
            typedef ::OSG::SFInt32 const * ( ::OSG::HDR2StageBase::*getSFMipmapLevel_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFMipmapLevel"
                , getSFMipmapLevel_function_type( &::OSG::HDR2StageBase::getSFMipmapLevel )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFNumSamples
        
            typedef ::OSG::SFInt32 const * ( ::OSG::HDR2StageBase::*getSFNumSamples_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFNumSamples"
                , getSFNumSamples_function_type( &::OSG::HDR2StageBase::getSFNumSamples )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFNumTaps
        
            typedef ::OSG::SFInt32 const * ( ::OSG::HDR2StageBase::*getSFNumTaps_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFNumTaps"
                , getSFNumTaps_function_type( &::OSG::HDR2StageBase::getSFNumTaps )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFPerformBloom
        
            typedef ::OSG::SFBool const * ( ::OSG::HDR2StageBase::*getSFPerformBloom_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFPerformBloom"
                , getSFPerformBloom_function_type( &::OSG::HDR2StageBase::getSFPerformBloom )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFSaturation
        
            typedef ::OSG::SFReal32 const * ( ::OSG::HDR2StageBase::*getSFSaturation_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFSaturation"
                , getSFSaturation_function_type( &::OSG::HDR2StageBase::getSFSaturation )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFTarget
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::HDR2StageBase::*getSFTarget_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFTarget"
                , getSFTarget_function_type( &::OSG::HDR2StageBase::getSFTarget )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFTau
        
            typedef ::OSG::SFReal32 const * ( ::OSG::HDR2StageBase::*getSFTau_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFTau"
                , getSFTau_function_type( &::OSG::HDR2StageBase::getSFTau )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFToneMappingMode
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::HDR2StageBase::*getSFToneMappingMode_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFToneMappingMode"
                , getSFToneMappingMode_function_type( &::OSG::HDR2StageBase::getSFToneMappingMode )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFUseLinChromCorrection
        
            typedef ::OSG::SFBool const * ( ::OSG::HDR2StageBase::*getSFUseLinChromCorrection_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFUseLinChromCorrection"
                , getSFUseLinChromCorrection_function_type( &::OSG::HDR2StageBase::getSFUseLinChromCorrection )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFUse_ITU_R_BT_709
        
            typedef ::OSG::SFBool const * ( ::OSG::HDR2StageBase::*getSFUse_ITU_R_BT_709_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFUse_ITU_R_BT_709"
                , getSFUse_ITU_R_BT_709_function_type( &::OSG::HDR2StageBase::getSFUse_ITU_R_BT_709 )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSFWhiteLevel
        
            typedef ::OSG::SFReal32 const * ( ::OSG::HDR2StageBase::*getSFWhiteLevel_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSFWhiteLevel"
                , getSFWhiteLevel_function_type( &::OSG::HDR2StageBase::getSFWhiteLevel )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getSaturation
        
            typedef ::OSG::Real32 ( ::OSG::HDR2StageBase::*getSaturation_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getSaturation"
                , getSaturation_function_type( &::OSG::HDR2StageBase::getSaturation ) );
        
        }
        { //::OSG::HDR2StageBase::getTarget
        
            typedef ::OSG::UInt32 ( ::OSG::HDR2StageBase::*getTarget_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getTarget"
                , getTarget_function_type( &::OSG::HDR2StageBase::getTarget ) );
        
        }
        { //::OSG::HDR2StageBase::getTau
        
            typedef ::OSG::Real32 ( ::OSG::HDR2StageBase::*getTau_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getTau"
                , getTau_function_type( &::OSG::HDR2StageBase::getTau ) );
        
        }
        { //::OSG::HDR2StageBase::getToneMappingMode
        
            typedef ::OSG::UInt32 ( ::OSG::HDR2StageBase::*getToneMappingMode_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getToneMappingMode"
                , getToneMappingMode_function_type( &::OSG::HDR2StageBase::getToneMappingMode ) );
        
        }
        { //::OSG::HDR2StageBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::HDR2StageBase::*getType_function_type )(  ) ;
            
            HDR2StageBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::HDR2StageBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::HDR2StageBase::*getType_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::HDR2StageBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageBase::getUseLinChromCorrection
        
            typedef bool ( ::OSG::HDR2StageBase::*getUseLinChromCorrection_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getUseLinChromCorrection"
                , getUseLinChromCorrection_function_type( &::OSG::HDR2StageBase::getUseLinChromCorrection ) );
        
        }
        { //::OSG::HDR2StageBase::getUse_ITU_R_BT_709
        
            typedef bool ( ::OSG::HDR2StageBase::*getUse_ITU_R_BT_709_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getUse_ITU_R_BT_709"
                , getUse_ITU_R_BT_709_function_type( &::OSG::HDR2StageBase::getUse_ITU_R_BT_709 ) );
        
        }
        { //::OSG::HDR2StageBase::getWhiteLevel
        
            typedef ::OSG::Real32 ( ::OSG::HDR2StageBase::*getWhiteLevel_function_type )(  ) const;
            
            HDR2StageBase_exposer.def( 
                "getWhiteLevel"
                , getWhiteLevel_function_type( &::OSG::HDR2StageBase::getWhiteLevel ) );
        
        }
        { //::OSG::HDR2StageBase::setAccurateGamma
        
            typedef void ( ::OSG::HDR2StageBase::*setAccurateGamma_function_type )( bool const ) ;
            
            HDR2StageBase_exposer.def( 
                "setAccurateGamma"
                , setAccurateGamma_function_type( &::OSG::HDR2StageBase::setAccurateGamma )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setAdjustLuminance
        
            typedef void ( ::OSG::HDR2StageBase::*setAdjustLuminance_function_type )( bool const ) ;
            
            HDR2StageBase_exposer.def( 
                "setAdjustLuminance"
                , setAdjustLuminance_function_type( &::OSG::HDR2StageBase::setAdjustLuminance )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setApplyGamma
        
            typedef void ( ::OSG::HDR2StageBase::*setApplyGamma_function_type )( bool const ) ;
            
            HDR2StageBase_exposer.def( 
                "setApplyGamma"
                , setApplyGamma_function_type( &::OSG::HDR2StageBase::setApplyGamma )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setAutoExposureMode
        
            typedef void ( ::OSG::HDR2StageBase::*setAutoExposureMode_function_type )( ::OSG::UInt32 const ) ;
            
            HDR2StageBase_exposer.def( 
                "setAutoExposureMode"
                , setAutoExposureMode_function_type( &::OSG::HDR2StageBase::setAutoExposureMode )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setBloomBackground
        
            typedef void ( ::OSG::HDR2StageBase::*setBloomBackground_function_type )( bool const ) ;
            
            HDR2StageBase_exposer.def( 
                "setBloomBackground"
                , setBloomBackground_function_type( &::OSG::HDR2StageBase::setBloomBackground )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setBloomMagnitude
        
            typedef void ( ::OSG::HDR2StageBase::*setBloomMagnitude_function_type )( ::OSG::Real32 const ) ;
            
            HDR2StageBase_exposer.def( 
                "setBloomMagnitude"
                , setBloomMagnitude_function_type( &::OSG::HDR2StageBase::setBloomMagnitude )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setBloomThreshold
        
            typedef void ( ::OSG::HDR2StageBase::*setBloomThreshold_function_type )( ::OSG::Real32 const ) ;
            
            HDR2StageBase_exposer.def( 
                "setBloomThreshold"
                , setBloomThreshold_function_type( &::OSG::HDR2StageBase::setBloomThreshold )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setBlurGaussSigma
        
            typedef void ( ::OSG::HDR2StageBase::*setBlurGaussSigma_function_type )( ::OSG::Real32 const ) ;
            
            HDR2StageBase_exposer.def( 
                "setBlurGaussSigma"
                , setBlurGaussSigma_function_type( &::OSG::HDR2StageBase::setBlurGaussSigma )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setCarryDepth
        
            typedef void ( ::OSG::HDR2StageBase::*setCarryDepth_function_type )( bool const ) ;
            
            HDR2StageBase_exposer.def( 
                "setCarryDepth"
                , setCarryDepth_function_type( &::OSG::HDR2StageBase::setCarryDepth )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setColorBufferInternalFormat
        
            typedef void ( ::OSG::HDR2StageBase::*setColorBufferInternalFormat_function_type )( ::GLenum const & ) ;
            
            HDR2StageBase_exposer.def( 
                "setColorBufferInternalFormat"
                , setColorBufferInternalFormat_function_type( &::OSG::HDR2StageBase::setColorBufferInternalFormat )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setColorBufferPixelFormat
        
            typedef void ( ::OSG::HDR2StageBase::*setColorBufferPixelFormat_function_type )( ::GLenum const & ) ;
            
            HDR2StageBase_exposer.def( 
                "setColorBufferPixelFormat"
                , setColorBufferPixelFormat_function_type( &::OSG::HDR2StageBase::setColorBufferPixelFormat )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setColorBufferType
        
            typedef void ( ::OSG::HDR2StageBase::*setColorBufferType_function_type )( ::GLenum const & ) ;
            
            HDR2StageBase_exposer.def( 
                "setColorBufferType"
                , setColorBufferType_function_type( &::OSG::HDR2StageBase::setColorBufferType )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setDepthBufferInternalFormat
        
            typedef void ( ::OSG::HDR2StageBase::*setDepthBufferInternalFormat_function_type )( ::GLenum const & ) ;
            
            HDR2StageBase_exposer.def( 
                "setDepthBufferInternalFormat"
                , setDepthBufferInternalFormat_function_type( &::OSG::HDR2StageBase::setDepthBufferInternalFormat )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setDepthBufferPixelFormat
        
            typedef void ( ::OSG::HDR2StageBase::*setDepthBufferPixelFormat_function_type )( ::GLenum const & ) ;
            
            HDR2StageBase_exposer.def( 
                "setDepthBufferPixelFormat"
                , setDepthBufferPixelFormat_function_type( &::OSG::HDR2StageBase::setDepthBufferPixelFormat )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setDepthBufferType
        
            typedef void ( ::OSG::HDR2StageBase::*setDepthBufferType_function_type )( ::GLenum const & ) ;
            
            HDR2StageBase_exposer.def( 
                "setDepthBufferType"
                , setDepthBufferType_function_type( &::OSG::HDR2StageBase::setDepthBufferType )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setDragoBias
        
            typedef void ( ::OSG::HDR2StageBase::*setDragoBias_function_type )( ::OSG::Real32 const ) ;
            
            HDR2StageBase_exposer.def( 
                "setDragoBias"
                , setDragoBias_function_type( &::OSG::HDR2StageBase::setDragoBias )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setExposure
        
            typedef void ( ::OSG::HDR2StageBase::*setExposure_function_type )( ::OSG::Real32 const ) ;
            
            HDR2StageBase_exposer.def( 
                "setExposure"
                , setExposure_function_type( &::OSG::HDR2StageBase::setExposure )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setFilmicLinearAngle
        
            typedef void ( ::OSG::HDR2StageBase::*setFilmicLinearAngle_function_type )( ::OSG::Real32 const ) ;
            
            HDR2StageBase_exposer.def( 
                "setFilmicLinearAngle"
                , setFilmicLinearAngle_function_type( &::OSG::HDR2StageBase::setFilmicLinearAngle )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setFilmicLinearStrength
        
            typedef void ( ::OSG::HDR2StageBase::*setFilmicLinearStrength_function_type )( ::OSG::Real32 const ) ;
            
            HDR2StageBase_exposer.def( 
                "setFilmicLinearStrength"
                , setFilmicLinearStrength_function_type( &::OSG::HDR2StageBase::setFilmicLinearStrength )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setFilmicLinearWhite
        
            typedef void ( ::OSG::HDR2StageBase::*setFilmicLinearWhite_function_type )( ::OSG::Real32 const ) ;
            
            HDR2StageBase_exposer.def( 
                "setFilmicLinearWhite"
                , setFilmicLinearWhite_function_type( &::OSG::HDR2StageBase::setFilmicLinearWhite )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setFilmicShoulderStrenght
        
            typedef void ( ::OSG::HDR2StageBase::*setFilmicShoulderStrenght_function_type )( ::OSG::Real32 const ) ;
            
            HDR2StageBase_exposer.def( 
                "setFilmicShoulderStrenght"
                , setFilmicShoulderStrenght_function_type( &::OSG::HDR2StageBase::setFilmicShoulderStrenght )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setFilmicToeDenominator
        
            typedef void ( ::OSG::HDR2StageBase::*setFilmicToeDenominator_function_type )( ::OSG::Real32 const ) ;
            
            HDR2StageBase_exposer.def( 
                "setFilmicToeDenominator"
                , setFilmicToeDenominator_function_type( &::OSG::HDR2StageBase::setFilmicToeDenominator )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setFilmicToeNumerator
        
            typedef void ( ::OSG::HDR2StageBase::*setFilmicToeNumerator_function_type )( ::OSG::Real32 const ) ;
            
            HDR2StageBase_exposer.def( 
                "setFilmicToeNumerator"
                , setFilmicToeNumerator_function_type( &::OSG::HDR2StageBase::setFilmicToeNumerator )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setFilmicToeStrength
        
            typedef void ( ::OSG::HDR2StageBase::*setFilmicToeStrength_function_type )( ::OSG::Real32 const ) ;
            
            HDR2StageBase_exposer.def( 
                "setFilmicToeStrength"
                , setFilmicToeStrength_function_type( &::OSG::HDR2StageBase::setFilmicToeStrength )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setForceBackground
        
            typedef void ( ::OSG::HDR2StageBase::*setForceBackground_function_type )( bool const ) ;
            
            HDR2StageBase_exposer.def( 
                "setForceBackground"
                , setForceBackground_function_type( &::OSG::HDR2StageBase::setForceBackground )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setImageBufferInternalFormat
        
            typedef void ( ::OSG::HDR2StageBase::*setImageBufferInternalFormat_function_type )( ::GLenum const & ) ;
            
            HDR2StageBase_exposer.def( 
                "setImageBufferInternalFormat"
                , setImageBufferInternalFormat_function_type( &::OSG::HDR2StageBase::setImageBufferInternalFormat )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setImageBufferPixelFormat
        
            typedef void ( ::OSG::HDR2StageBase::*setImageBufferPixelFormat_function_type )( ::GLenum const & ) ;
            
            HDR2StageBase_exposer.def( 
                "setImageBufferPixelFormat"
                , setImageBufferPixelFormat_function_type( &::OSG::HDR2StageBase::setImageBufferPixelFormat )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setImageBufferType
        
            typedef void ( ::OSG::HDR2StageBase::*setImageBufferType_function_type )( ::GLenum const & ) ;
            
            HDR2StageBase_exposer.def( 
                "setImageBufferType"
                , setImageBufferType_function_type( &::OSG::HDR2StageBase::setImageBufferType )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setKeyValue
        
            typedef void ( ::OSG::HDR2StageBase::*setKeyValue_function_type )( ::OSG::Real32 const ) ;
            
            HDR2StageBase_exposer.def( 
                "setKeyValue"
                , setKeyValue_function_type( &::OSG::HDR2StageBase::setKeyValue )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setLumBufferInternalFormat
        
            typedef void ( ::OSG::HDR2StageBase::*setLumBufferInternalFormat_function_type )( ::GLenum const & ) ;
            
            HDR2StageBase_exposer.def( 
                "setLumBufferInternalFormat"
                , setLumBufferInternalFormat_function_type( &::OSG::HDR2StageBase::setLumBufferInternalFormat )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setLumBufferPixelFormat
        
            typedef void ( ::OSG::HDR2StageBase::*setLumBufferPixelFormat_function_type )( ::GLenum const & ) ;
            
            HDR2StageBase_exposer.def( 
                "setLumBufferPixelFormat"
                , setLumBufferPixelFormat_function_type( &::OSG::HDR2StageBase::setLumBufferPixelFormat )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setLumBufferType
        
            typedef void ( ::OSG::HDR2StageBase::*setLumBufferType_function_type )( ::GLenum const & ) ;
            
            HDR2StageBase_exposer.def( 
                "setLumBufferType"
                , setLumBufferType_function_type( &::OSG::HDR2StageBase::setLumBufferType )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setMipmapLevel
        
            typedef void ( ::OSG::HDR2StageBase::*setMipmapLevel_function_type )( ::OSG::Int32 const ) ;
            
            HDR2StageBase_exposer.def( 
                "setMipmapLevel"
                , setMipmapLevel_function_type( &::OSG::HDR2StageBase::setMipmapLevel )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setNumSamples
        
            typedef void ( ::OSG::HDR2StageBase::*setNumSamples_function_type )( ::OSG::Int32 const ) ;
            
            HDR2StageBase_exposer.def( 
                "setNumSamples"
                , setNumSamples_function_type( &::OSG::HDR2StageBase::setNumSamples )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setNumTaps
        
            typedef void ( ::OSG::HDR2StageBase::*setNumTaps_function_type )( ::OSG::Int32 const ) ;
            
            HDR2StageBase_exposer.def( 
                "setNumTaps"
                , setNumTaps_function_type( &::OSG::HDR2StageBase::setNumTaps )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setPerformBloom
        
            typedef void ( ::OSG::HDR2StageBase::*setPerformBloom_function_type )( bool const ) ;
            
            HDR2StageBase_exposer.def( 
                "setPerformBloom"
                , setPerformBloom_function_type( &::OSG::HDR2StageBase::setPerformBloom )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setSaturation
        
            typedef void ( ::OSG::HDR2StageBase::*setSaturation_function_type )( ::OSG::Real32 const ) ;
            
            HDR2StageBase_exposer.def( 
                "setSaturation"
                , setSaturation_function_type( &::OSG::HDR2StageBase::setSaturation )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setTarget
        
            typedef void ( ::OSG::HDR2StageBase::*setTarget_function_type )( ::OSG::UInt32 const ) ;
            
            HDR2StageBase_exposer.def( 
                "setTarget"
                , setTarget_function_type( &::OSG::HDR2StageBase::setTarget )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setTau
        
            typedef void ( ::OSG::HDR2StageBase::*setTau_function_type )( ::OSG::Real32 const ) ;
            
            HDR2StageBase_exposer.def( 
                "setTau"
                , setTau_function_type( &::OSG::HDR2StageBase::setTau )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setToneMappingMode
        
            typedef void ( ::OSG::HDR2StageBase::*setToneMappingMode_function_type )( ::OSG::UInt32 const ) ;
            
            HDR2StageBase_exposer.def( 
                "setToneMappingMode"
                , setToneMappingMode_function_type( &::OSG::HDR2StageBase::setToneMappingMode )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setUseLinChromCorrection
        
            typedef void ( ::OSG::HDR2StageBase::*setUseLinChromCorrection_function_type )( bool const ) ;
            
            HDR2StageBase_exposer.def( 
                "setUseLinChromCorrection"
                , setUseLinChromCorrection_function_type( &::OSG::HDR2StageBase::setUseLinChromCorrection )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setUse_ITU_R_BT_709
        
            typedef void ( ::OSG::HDR2StageBase::*setUse_ITU_R_BT_709_function_type )( bool const ) ;
            
            HDR2StageBase_exposer.def( 
                "setUse_ITU_R_BT_709"
                , setUse_ITU_R_BT_709_function_type( &::OSG::HDR2StageBase::setUse_ITU_R_BT_709 )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageBase::setWhiteLevel
        
            typedef void ( ::OSG::HDR2StageBase::*setWhiteLevel_function_type )( ::OSG::Real32 const ) ;
            
            HDR2StageBase_exposer.def( 
                "setWhiteLevel"
                , setWhiteLevel_function_type( &::OSG::HDR2StageBase::setWhiteLevel )
                , ( bp::arg("value") ) );
        
        }
        HDR2StageBase_exposer.staticmethod( "create" );
        HDR2StageBase_exposer.staticmethod( "createDependent" );
        HDR2StageBase_exposer.staticmethod( "createLocal" );
        HDR2StageBase_exposer.staticmethod( "getClassGroupId" );
        HDR2StageBase_exposer.staticmethod( "getClassType" );
        HDR2StageBase_exposer.staticmethod( "getClassTypeId" );
    }

}
