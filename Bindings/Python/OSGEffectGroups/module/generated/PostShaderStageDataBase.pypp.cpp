// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGEffectGroups_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "PostShaderStageDataBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

boost::python::list PostShaderStageDataBase_getMFShaderMaterials(OSG::PostShaderStageDataBase *self)
{
   boost::python::list result;
   OSG::MFUnrecChunkMaterialPtr const * mf_data = self->getMFShaderMaterials();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append(OSG::ChunkMaterial::ObjRecPtr((*mf_data)[i]));
   }
   return result;
}

boost::python::list PostShaderStageDataBase_getMFRenderTargets(OSG::PostShaderStageDataBase *self)
{
   boost::python::list result;
   OSG::MFUnrecFrameBufferObjectPtr const * mf_data = self->getMFRenderTargets();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append(OSG::FrameBufferObject::ObjRecPtr((*mf_data)[i]));
   }
   return result;
}

void register_PostShaderStageDataBase_class(){

    { //::OSG::PostShaderStageDataBase
        typedef bp::class_< OSG::PostShaderStageDataBase, bp::bases< ::OSG::StageData >, boost::noncopyable > PostShaderStageDataBase_exposer_t;
        PostShaderStageDataBase_exposer_t PostShaderStageDataBase_exposer = PostShaderStageDataBase_exposer_t( "PostShaderStageDataBase", bp::no_init );
        bp::scope PostShaderStageDataBase_scope( PostShaderStageDataBase_exposer );
        bp::scope().attr("ShaderMaterialsFieldId") = (int)OSG::PostShaderStageDataBase::ShaderMaterialsFieldId;
        bp::scope().attr("WidthFieldId") = (int)OSG::PostShaderStageDataBase::WidthFieldId;
        bp::scope().attr("HeightFieldId") = (int)OSG::PostShaderStageDataBase::HeightFieldId;
        bp::scope().attr("RenderTargetsFieldId") = (int)OSG::PostShaderStageDataBase::RenderTargetsFieldId;
        bp::scope().attr("CameraFieldId") = (int)OSG::PostShaderStageDataBase::CameraFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::PostShaderStageDataBase::NextFieldId;
        { //::OSG::PostShaderStageDataBase::assignRenderTargets
        
            typedef void ( ::OSG::PostShaderStageDataBase::*assignRenderTargets_function_type )( ::OSG::MFUnrecFrameBufferObjectPtr const & ) ;
            
            PostShaderStageDataBase_exposer.def( 
                "assignRenderTargets"
                , assignRenderTargets_function_type( &::OSG::PostShaderStageDataBase::assignRenderTargets )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::PostShaderStageDataBase::assignShaderMaterials
        
            typedef void ( ::OSG::PostShaderStageDataBase::*assignShaderMaterials_function_type )( ::OSG::MFUnrecChunkMaterialPtr const & ) ;
            
            PostShaderStageDataBase_exposer.def( 
                "assignShaderMaterials"
                , assignShaderMaterials_function_type( &::OSG::PostShaderStageDataBase::assignShaderMaterials )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::PostShaderStageDataBase::clearRenderTargets
        
            typedef void ( ::OSG::PostShaderStageDataBase::*clearRenderTargets_function_type )(  ) ;
            
            PostShaderStageDataBase_exposer.def( 
                "clearRenderTargets"
                , clearRenderTargets_function_type( &::OSG::PostShaderStageDataBase::clearRenderTargets ) );
        
        }
        { //::OSG::PostShaderStageDataBase::clearShaderMaterials
        
            typedef void ( ::OSG::PostShaderStageDataBase::*clearShaderMaterials_function_type )(  ) ;
            
            PostShaderStageDataBase_exposer.def( 
                "clearShaderMaterials"
                , clearShaderMaterials_function_type( &::OSG::PostShaderStageDataBase::clearShaderMaterials ) );
        
        }
        { //::OSG::PostShaderStageDataBase::copyFromBin
        
            typedef void ( ::OSG::PostShaderStageDataBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            PostShaderStageDataBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::PostShaderStageDataBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::PostShaderStageDataBase::copyToBin
        
            typedef void ( ::OSG::PostShaderStageDataBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            PostShaderStageDataBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::PostShaderStageDataBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::PostShaderStageDataBase::create
        
            typedef ::OSG::PostShaderStageDataTransitPtr ( *create_function_type )(  );
            
            PostShaderStageDataBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::PostShaderStageDataBase::create ) );
        
        }
        { //::OSG::PostShaderStageDataBase::createDependent
        
            typedef ::OSG::PostShaderStageDataTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            PostShaderStageDataBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::PostShaderStageDataBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::PostShaderStageDataBase::createLocal
        
            typedef ::OSG::PostShaderStageDataTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            PostShaderStageDataBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::PostShaderStageDataBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::PostShaderStageDataBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::PostShaderStageDataBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            PostShaderStageDataBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::PostShaderStageDataBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::PostShaderStageDataBase::getCamera
        
            typedef ::OSG::Camera * ( ::OSG::PostShaderStageDataBase::*getCamera_function_type )(  ) const;
            
            PostShaderStageDataBase_exposer.def( 
                "getCamera"
                , getCamera_function_type( &::OSG::PostShaderStageDataBase::getCamera )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::PostShaderStageDataBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            PostShaderStageDataBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::PostShaderStageDataBase::getClassGroupId ) );
        
        }
        { //::OSG::PostShaderStageDataBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            PostShaderStageDataBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::PostShaderStageDataBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::PostShaderStageDataBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            PostShaderStageDataBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::PostShaderStageDataBase::getClassTypeId ) );
        
        }
        { //::OSG::PostShaderStageDataBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::PostShaderStageDataBase::*getContainerSize_function_type )(  ) const;
            
            PostShaderStageDataBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::PostShaderStageDataBase::getContainerSize ) );
        
        }
        { //::OSG::PostShaderStageDataBase::getHeight
        
            typedef ::OSG::Int32 ( ::OSG::PostShaderStageDataBase::*getHeight_function_type )(  ) const;
            
            PostShaderStageDataBase_exposer.def( 
                "getHeight"
                , getHeight_function_type( &::OSG::PostShaderStageDataBase::getHeight ) );
        
        }
        { //::OSG::PostShaderStageDataBase::getRenderTargets
        
            typedef ::OSG::FrameBufferObject * ( ::OSG::PostShaderStageDataBase::*getRenderTargets_function_type )( ::OSG::UInt32 const ) const;
            
            PostShaderStageDataBase_exposer.def( 
                "getRenderTargets"
                , getRenderTargets_function_type( &::OSG::PostShaderStageDataBase::getRenderTargets )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::PostShaderStageDataBase::getSFCamera
        
            typedef ::OSG::SFUnrecCameraPtr const * ( ::OSG::PostShaderStageDataBase::*getSFCamera_function_type )(  ) const;
            
            PostShaderStageDataBase_exposer.def( 
                "getSFCamera"
                , getSFCamera_function_type( &::OSG::PostShaderStageDataBase::getSFCamera )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::PostShaderStageDataBase::getSFHeight
        
            typedef ::OSG::SFInt32 const * ( ::OSG::PostShaderStageDataBase::*getSFHeight_function_type )(  ) const;
            
            PostShaderStageDataBase_exposer.def( 
                "getSFHeight"
                , getSFHeight_function_type( &::OSG::PostShaderStageDataBase::getSFHeight )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::PostShaderStageDataBase::getSFWidth
        
            typedef ::OSG::SFInt32 const * ( ::OSG::PostShaderStageDataBase::*getSFWidth_function_type )(  ) const;
            
            PostShaderStageDataBase_exposer.def( 
                "getSFWidth"
                , getSFWidth_function_type( &::OSG::PostShaderStageDataBase::getSFWidth )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::PostShaderStageDataBase::getShaderMaterials
        
            typedef ::OSG::ChunkMaterial * ( ::OSG::PostShaderStageDataBase::*getShaderMaterials_function_type )( ::OSG::UInt32 const ) const;
            
            PostShaderStageDataBase_exposer.def( 
                "getShaderMaterials"
                , getShaderMaterials_function_type( &::OSG::PostShaderStageDataBase::getShaderMaterials )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::PostShaderStageDataBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::PostShaderStageDataBase::*getType_function_type )(  ) ;
            
            PostShaderStageDataBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::PostShaderStageDataBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::PostShaderStageDataBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::PostShaderStageDataBase::*getType_function_type )(  ) const;
            
            PostShaderStageDataBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::PostShaderStageDataBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::PostShaderStageDataBase::getWidth
        
            typedef ::OSG::Int32 ( ::OSG::PostShaderStageDataBase::*getWidth_function_type )(  ) const;
            
            PostShaderStageDataBase_exposer.def( 
                "getWidth"
                , getWidth_function_type( &::OSG::PostShaderStageDataBase::getWidth ) );
        
        }
        { //::OSG::PostShaderStageDataBase::pushToRenderTargets
        
            typedef void ( ::OSG::PostShaderStageDataBase::*pushToRenderTargets_function_type )( ::OSG::FrameBufferObject * const ) ;
            
            PostShaderStageDataBase_exposer.def( 
                "pushToRenderTargets"
                , pushToRenderTargets_function_type( &::OSG::PostShaderStageDataBase::pushToRenderTargets )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::PostShaderStageDataBase::pushToShaderMaterials
        
            typedef void ( ::OSG::PostShaderStageDataBase::*pushToShaderMaterials_function_type )( ::OSG::ChunkMaterial * const ) ;
            
            PostShaderStageDataBase_exposer.def( 
                "pushToShaderMaterials"
                , pushToShaderMaterials_function_type( &::OSG::PostShaderStageDataBase::pushToShaderMaterials )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::PostShaderStageDataBase::removeFromRenderTargets
        
            typedef void ( ::OSG::PostShaderStageDataBase::*removeFromRenderTargets_function_type )( ::OSG::UInt32 ) ;
            
            PostShaderStageDataBase_exposer.def( 
                "removeFromRenderTargets"
                , removeFromRenderTargets_function_type( &::OSG::PostShaderStageDataBase::removeFromRenderTargets )
                , ( bp::arg("uiIndex") ) );
        
        }
        { //::OSG::PostShaderStageDataBase::removeFromShaderMaterials
        
            typedef void ( ::OSG::PostShaderStageDataBase::*removeFromShaderMaterials_function_type )( ::OSG::UInt32 ) ;
            
            PostShaderStageDataBase_exposer.def( 
                "removeFromShaderMaterials"
                , removeFromShaderMaterials_function_type( &::OSG::PostShaderStageDataBase::removeFromShaderMaterials )
                , ( bp::arg("uiIndex") ) );
        
        }
        { //::OSG::PostShaderStageDataBase::removeObjFromRenderTargets
        
            typedef void ( ::OSG::PostShaderStageDataBase::*removeObjFromRenderTargets_function_type )( ::OSG::FrameBufferObject * const ) ;
            
            PostShaderStageDataBase_exposer.def( 
                "removeObjFromRenderTargets"
                , removeObjFromRenderTargets_function_type( &::OSG::PostShaderStageDataBase::removeObjFromRenderTargets )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::PostShaderStageDataBase::removeObjFromShaderMaterials
        
            typedef void ( ::OSG::PostShaderStageDataBase::*removeObjFromShaderMaterials_function_type )( ::OSG::ChunkMaterial * const ) ;
            
            PostShaderStageDataBase_exposer.def( 
                "removeObjFromShaderMaterials"
                , removeObjFromShaderMaterials_function_type( &::OSG::PostShaderStageDataBase::removeObjFromShaderMaterials )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::PostShaderStageDataBase::setCamera
        
            typedef void ( ::OSG::PostShaderStageDataBase::*setCamera_function_type )( ::OSG::Camera * const ) ;
            
            PostShaderStageDataBase_exposer.def( 
                "setCamera"
                , setCamera_function_type( &::OSG::PostShaderStageDataBase::setCamera )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::PostShaderStageDataBase::setHeight
        
            typedef void ( ::OSG::PostShaderStageDataBase::*setHeight_function_type )( ::OSG::Int32 const ) ;
            
            PostShaderStageDataBase_exposer.def( 
                "setHeight"
                , setHeight_function_type( &::OSG::PostShaderStageDataBase::setHeight )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::PostShaderStageDataBase::setWidth
        
            typedef void ( ::OSG::PostShaderStageDataBase::*setWidth_function_type )( ::OSG::Int32 const ) ;
            
            PostShaderStageDataBase_exposer.def( 
                "setWidth"
                , setWidth_function_type( &::OSG::PostShaderStageDataBase::setWidth )
                , ( bp::arg("value") ) );
        
        }
        PostShaderStageDataBase_exposer.staticmethod( "create" );
        PostShaderStageDataBase_exposer.staticmethod( "createDependent" );
        PostShaderStageDataBase_exposer.staticmethod( "createLocal" );
        PostShaderStageDataBase_exposer.staticmethod( "getClassGroupId" );
        PostShaderStageDataBase_exposer.staticmethod( "getClassType" );
        PostShaderStageDataBase_exposer.staticmethod( "getClassTypeId" );
        PostShaderStageDataBase_exposer.def("getMFShaderMaterials",PostShaderStageDataBase_getMFShaderMaterials);
        PostShaderStageDataBase_exposer.def("getMFRenderTargets",PostShaderStageDataBase_getMFRenderTargets);
    }

}
