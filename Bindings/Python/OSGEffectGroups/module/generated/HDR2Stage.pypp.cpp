// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGEffectGroups_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "HDR2Stage.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_HDR2Stage_class(){

    { //::OSG::HDR2Stage
        typedef bp::class_< OSG::HDR2Stage, bp::bases< OSG::HDR2StageBase >, OSG::HDR2Stage::ObjRecPtr, boost::noncopyable > HDR2Stage_exposer_t;
        HDR2Stage_exposer_t HDR2Stage_exposer = HDR2Stage_exposer_t( "HDR2Stage", bp::no_init );
        bp::scope HDR2Stage_scope( HDR2Stage_exposer );
        bp::enum_< OSG::HDR2Stage::FinalScreenTarget>("FinalScreenTarget")
            .value("SCENE_TEXTURE", OSG::HDR2Stage::SCENE_TEXTURE)
            .value("LUMINANCE_TEXTURE", OSG::HDR2Stage::LUMINANCE_TEXTURE)
            .value("ADAPTED_LUMINANCE_TEXTURE", OSG::HDR2Stage::ADAPTED_LUMINANCE_TEXTURE)
            .value("THRESHOLD_TEXTURE", OSG::HDR2Stage::THRESHOLD_TEXTURE)
            .value("BLURRED_TEXTURE", OSG::HDR2Stage::BLURRED_TEXTURE)
            .value("COMPOSITE_TEXTURE", OSG::HDR2Stage::COMPOSITE_TEXTURE)
            .value("EXPOSURE_TEXTURE", OSG::HDR2Stage::EXPOSURE_TEXTURE)
            .value("DEPTH_TEXTURE", OSG::HDR2Stage::DEPTH_TEXTURE)
            .value("LINEARIZED_DEPTH_TEXTURE", OSG::HDR2Stage::LINEARIZED_DEPTH_TEXTURE)
            .value("DOWN_SCALED_0", OSG::HDR2Stage::DOWN_SCALED_0)
            .value("DOWN_SCALED_1", OSG::HDR2Stage::DOWN_SCALED_1)
            .value("DOWN_SCALED_2", OSG::HDR2Stage::DOWN_SCALED_2)
            .value("BLUR_TEXTURE", OSG::HDR2Stage::BLUR_TEXTURE)
            .value("UPSCALED_SCALED_0", OSG::HDR2Stage::UPSCALED_SCALED_0)
            .value("UPSCALED_SCALED_1", OSG::HDR2Stage::UPSCALED_SCALED_1)
            .export_values()
            ;
        bp::enum_< OSG::HDR2Stage::ToneMappingModes>("ToneMappingModes")
            .value("NO_TONE_MAPPING", OSG::HDR2Stage::NO_TONE_MAPPING)
            .value("LOGARITHMIC_TONE_MAPPING", OSG::HDR2Stage::LOGARITHMIC_TONE_MAPPING)
            .value("EXPONENTIAL_TONE_MAPPING", OSG::HDR2Stage::EXPONENTIAL_TONE_MAPPING)
            .value("DRAGO_LOGARITHMIC_TONE_MAPPING", OSG::HDR2Stage::DRAGO_LOGARITHMIC_TONE_MAPPING)
            .value("REINHARD_TONE_MAPPING", OSG::HDR2Stage::REINHARD_TONE_MAPPING)
            .value("REINHARD_MODIFIED_TONE_MAPPING", OSG::HDR2Stage::REINHARD_MODIFIED_TONE_MAPPING)
            .value("FILMIC_HABLE_TONE_MAPPING", OSG::HDR2Stage::FILMIC_HABLE_TONE_MAPPING)
            .value("FILMIC_UNCHARTE2D_TONE_MAPPING", OSG::HDR2Stage::FILMIC_UNCHARTE2D_TONE_MAPPING)
            .export_values()
            ;
        { //::OSG::HDR2Stage::changed
        
            typedef void ( ::OSG::HDR2Stage::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            HDR2Stage_exposer.def( 
                "changed"
                , changed_function_type( &::OSG::HDR2Stage::changed )
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("details") ) );
        
        }
        { //::OSG::HDR2Stage::dump
        
            typedef void ( ::OSG::HDR2Stage::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            HDR2Stage_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::HDR2Stage::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::HDR2Stage::initData
        
            typedef void ( ::OSG::HDR2Stage::*initData_function_type )( ::OSG::RenderAction *,::OSG::Int32,::OSG::Int32 ) ;
            
            HDR2Stage_exposer.def( 
                "initData"
                , initData_function_type( &::OSG::HDR2Stage::initData )
                , ( bp::arg("pAction"), bp::arg("iVPWidth"), bp::arg("iVPHeight") ) );
        
        }
        { //::OSG::HDR2Stage::postProcess
        
            typedef void ( ::OSG::HDR2Stage::*postProcess_function_type )( ::OSG::DrawEnv * ) ;
            
            HDR2Stage_exposer.def( 
                "postProcess"
                , postProcess_function_type( &::OSG::HDR2Stage::postProcess )
                , ( bp::arg("pEnv") ) );
        
        }
        { //::OSG::HDR2Stage::updateData
        
            typedef void ( ::OSG::HDR2Stage::*updateData_function_type )( ::OSG::RenderAction *,::OSG::Int32,::OSG::Int32 ) ;
            
            HDR2Stage_exposer.def( 
                "updateData"
                , updateData_function_type( &::OSG::HDR2Stage::updateData )
                , ( bp::arg("pAction"), bp::arg("iVPWidth"), bp::arg("iVPHeight") ) );
        
        }
        pyopensg::register_transit< OSG::HDR2Stage >::execute();
        bp::implicitly_convertible< OSG::HDR2Stage::ObjRecPtr, OSG::HDR2Stage* >();
        bp::implicitly_convertible< OSG::HDR2Stage::ObjRecPtr, OSG::HDR2Stage::ObjCPtr >();
        bp::implicitly_convertible< OSG::HDR2Stage::ObjRecPtr, OSG::Stage* >();
        bp::implicitly_convertible< OSG::HDR2Stage::ObjRecPtr, OSG::Stage::ObjRecPtr >();
        bp::implicitly_convertible<OSG::HDR2Stage::ObjRecPtr, OSG::Stage::ObjCPtr>();
    }

}
