// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGEffectGroups_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "FogStageBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_FogStageBase_class(){

    { //::OSG::FogStageBase
        typedef bp::class_< OSG::FogStageBase, bp::bases< ::OSG::Stage >, boost::noncopyable > FogStageBase_exposer_t;
        FogStageBase_exposer_t FogStageBase_exposer = FogStageBase_exposer_t( "FogStageBase", bp::no_init );
        bp::scope FogStageBase_scope( FogStageBase_exposer );
        bp::scope().attr("BufferFormatFieldId") = (int)OSG::FogStageBase::BufferFormatFieldId;
        bp::scope().attr("FogColorFieldId") = (int)OSG::FogStageBase::FogColorFieldId;
        bp::scope().attr("FogModeFieldId") = (int)OSG::FogStageBase::FogModeFieldId;
        bp::scope().attr("FogStartFieldId") = (int)OSG::FogStageBase::FogStartFieldId;
        bp::scope().attr("FogEndFieldId") = (int)OSG::FogStageBase::FogEndFieldId;
        bp::scope().attr("FogDensityFieldId") = (int)OSG::FogStageBase::FogDensityFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::FogStageBase::NextFieldId;
        { //::OSG::FogStageBase::copyFromBin
        
            typedef void ( ::OSG::FogStageBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            FogStageBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::FogStageBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::FogStageBase::copyToBin
        
            typedef void ( ::OSG::FogStageBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            FogStageBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::FogStageBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::FogStageBase::create
        
            typedef ::OSG::FogStageTransitPtr ( *create_function_type )(  );
            
            FogStageBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::FogStageBase::create ) );
        
        }
        { //::OSG::FogStageBase::createDependent
        
            typedef ::OSG::FogStageTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            FogStageBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::FogStageBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::FogStageBase::createLocal
        
            typedef ::OSG::FogStageTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            FogStageBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::FogStageBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::FogStageBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::FogStageBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            FogStageBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::FogStageBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::FogStageBase::getBufferFormat
        
            typedef ::GLenum const & ( ::OSG::FogStageBase::*getBufferFormat_function_type )(  ) const;
            
            FogStageBase_exposer.def( 
                "getBufferFormat"
                , getBufferFormat_function_type( &::OSG::FogStageBase::getBufferFormat )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::FogStageBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            FogStageBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::FogStageBase::getClassGroupId ) );
        
        }
        { //::OSG::FogStageBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            FogStageBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::FogStageBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::FogStageBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            FogStageBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::FogStageBase::getClassTypeId ) );
        
        }
        { //::OSG::FogStageBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::FogStageBase::*getContainerSize_function_type )(  ) const;
            
            FogStageBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::FogStageBase::getContainerSize ) );
        
        }
        { //::OSG::FogStageBase::getFogColor
        
            typedef ::OSG::Color4f const & ( ::OSG::FogStageBase::*getFogColor_function_type )(  ) const;
            
            FogStageBase_exposer.def( 
                "getFogColor"
                , getFogColor_function_type( &::OSG::FogStageBase::getFogColor )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::FogStageBase::getFogDensity
        
            typedef ::OSG::Real32 ( ::OSG::FogStageBase::*getFogDensity_function_type )(  ) const;
            
            FogStageBase_exposer.def( 
                "getFogDensity"
                , getFogDensity_function_type( &::OSG::FogStageBase::getFogDensity ) );
        
        }
        { //::OSG::FogStageBase::getFogEnd
        
            typedef ::OSG::Real32 ( ::OSG::FogStageBase::*getFogEnd_function_type )(  ) const;
            
            FogStageBase_exposer.def( 
                "getFogEnd"
                , getFogEnd_function_type( &::OSG::FogStageBase::getFogEnd ) );
        
        }
        { //::OSG::FogStageBase::getFogMode
        
            typedef ::OSG::UInt16 ( ::OSG::FogStageBase::*getFogMode_function_type )(  ) const;
            
            FogStageBase_exposer.def( 
                "getFogMode"
                , getFogMode_function_type( &::OSG::FogStageBase::getFogMode ) );
        
        }
        { //::OSG::FogStageBase::getFogStart
        
            typedef ::OSG::Real32 ( ::OSG::FogStageBase::*getFogStart_function_type )(  ) const;
            
            FogStageBase_exposer.def( 
                "getFogStart"
                , getFogStart_function_type( &::OSG::FogStageBase::getFogStart ) );
        
        }
        { //::OSG::FogStageBase::getSFBufferFormat
        
            typedef ::OSG::SFGLenum const * ( ::OSG::FogStageBase::*getSFBufferFormat_function_type )(  ) const;
            
            FogStageBase_exposer.def( 
                "getSFBufferFormat"
                , getSFBufferFormat_function_type( &::OSG::FogStageBase::getSFBufferFormat )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FogStageBase::getSFFogColor
        
            typedef ::OSG::SFColor4f const * ( ::OSG::FogStageBase::*getSFFogColor_function_type )(  ) const;
            
            FogStageBase_exposer.def( 
                "getSFFogColor"
                , getSFFogColor_function_type( &::OSG::FogStageBase::getSFFogColor )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FogStageBase::getSFFogDensity
        
            typedef ::OSG::SFReal32 const * ( ::OSG::FogStageBase::*getSFFogDensity_function_type )(  ) const;
            
            FogStageBase_exposer.def( 
                "getSFFogDensity"
                , getSFFogDensity_function_type( &::OSG::FogStageBase::getSFFogDensity )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FogStageBase::getSFFogEnd
        
            typedef ::OSG::SFReal32 const * ( ::OSG::FogStageBase::*getSFFogEnd_function_type )(  ) const;
            
            FogStageBase_exposer.def( 
                "getSFFogEnd"
                , getSFFogEnd_function_type( &::OSG::FogStageBase::getSFFogEnd )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FogStageBase::getSFFogMode
        
            typedef ::OSG::SFUInt16 const * ( ::OSG::FogStageBase::*getSFFogMode_function_type )(  ) const;
            
            FogStageBase_exposer.def( 
                "getSFFogMode"
                , getSFFogMode_function_type( &::OSG::FogStageBase::getSFFogMode )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FogStageBase::getSFFogStart
        
            typedef ::OSG::SFReal32 const * ( ::OSG::FogStageBase::*getSFFogStart_function_type )(  ) const;
            
            FogStageBase_exposer.def( 
                "getSFFogStart"
                , getSFFogStart_function_type( &::OSG::FogStageBase::getSFFogStart )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FogStageBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::FogStageBase::*getType_function_type )(  ) ;
            
            FogStageBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::FogStageBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FogStageBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::FogStageBase::*getType_function_type )(  ) const;
            
            FogStageBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::FogStageBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FogStageBase::setBufferFormat
        
            typedef void ( ::OSG::FogStageBase::*setBufferFormat_function_type )( ::GLenum const & ) ;
            
            FogStageBase_exposer.def( 
                "setBufferFormat"
                , setBufferFormat_function_type( &::OSG::FogStageBase::setBufferFormat )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FogStageBase::setFogColor
        
            typedef void ( ::OSG::FogStageBase::*setFogColor_function_type )( ::OSG::Color4f const & ) ;
            
            FogStageBase_exposer.def( 
                "setFogColor"
                , setFogColor_function_type( &::OSG::FogStageBase::setFogColor )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FogStageBase::setFogDensity
        
            typedef void ( ::OSG::FogStageBase::*setFogDensity_function_type )( ::OSG::Real32 const ) ;
            
            FogStageBase_exposer.def( 
                "setFogDensity"
                , setFogDensity_function_type( &::OSG::FogStageBase::setFogDensity )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FogStageBase::setFogEnd
        
            typedef void ( ::OSG::FogStageBase::*setFogEnd_function_type )( ::OSG::Real32 const ) ;
            
            FogStageBase_exposer.def( 
                "setFogEnd"
                , setFogEnd_function_type( &::OSG::FogStageBase::setFogEnd )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FogStageBase::setFogMode
        
            typedef void ( ::OSG::FogStageBase::*setFogMode_function_type )( ::OSG::UInt16 const ) ;
            
            FogStageBase_exposer.def( 
                "setFogMode"
                , setFogMode_function_type( &::OSG::FogStageBase::setFogMode )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FogStageBase::setFogStart
        
            typedef void ( ::OSG::FogStageBase::*setFogStart_function_type )( ::OSG::Real32 const ) ;
            
            FogStageBase_exposer.def( 
                "setFogStart"
                , setFogStart_function_type( &::OSG::FogStageBase::setFogStart )
                , ( bp::arg("value") ) );
        
        }
        FogStageBase_exposer.staticmethod( "create" );
        FogStageBase_exposer.staticmethod( "createDependent" );
        FogStageBase_exposer.staticmethod( "createLocal" );
        FogStageBase_exposer.staticmethod( "getClassGroupId" );
        FogStageBase_exposer.staticmethod( "getClassType" );
        FogStageBase_exposer.staticmethod( "getClassTypeId" );
    }

}
