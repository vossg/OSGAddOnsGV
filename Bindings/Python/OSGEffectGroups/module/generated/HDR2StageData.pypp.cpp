// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGEffectGroups_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "HDR2StageData.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_HDR2StageData_class(){

    { //::OSG::HDR2StageData
        typedef bp::class_< OSG::HDR2StageData, bp::bases< OSG::HDR2StageDataBase >, OSG::HDR2StageData::ObjRecPtr, boost::noncopyable > HDR2StageData_exposer_t;
        HDR2StageData_exposer_t HDR2StageData_exposer = HDR2StageData_exposer_t( "HDR2StageData", bp::no_init );
        bp::scope HDR2StageData_scope( HDR2StageData_exposer );
        { //::OSG::HDR2StageData::changed
        
            typedef void ( ::OSG::HDR2StageData::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            HDR2StageData_exposer.def( 
                "changed"
                , changed_function_type( &::OSG::HDR2StageData::changed )
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("details") ) );
        
        }
        { //::OSG::HDR2StageData::dump
        
            typedef void ( ::OSG::HDR2StageData::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            HDR2StageData_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::HDR2StageData::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::HDR2StageData::getAdaptLuminanceTexObjChunk
        
            typedef ::OSG::TextureObjChunk * ( ::OSG::HDR2StageData::*getAdaptLuminanceTexObjChunk_function_type )( ::OSG::UInt32 ) const;
            
            HDR2StageData_exposer.def( 
                "getAdaptLuminanceTexObjChunk"
                , getAdaptLuminanceTexObjChunk_function_type( &::OSG::HDR2StageData::getAdaptLuminanceTexObjChunk )
                , ( bp::arg("idx") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageData::getBlurHorizTexObjChunk
        
            typedef ::OSG::TextureObjChunk * ( ::OSG::HDR2StageData::*getBlurHorizTexObjChunk_function_type )(  ) const;
            
            HDR2StageData_exposer.def( 
                "getBlurHorizTexObjChunk"
                , getBlurHorizTexObjChunk_function_type( &::OSG::HDR2StageData::getBlurHorizTexObjChunk )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageData::getBlurVertTexObjChunk
        
            typedef ::OSG::TextureObjChunk * ( ::OSG::HDR2StageData::*getBlurVertTexObjChunk_function_type )(  ) const;
            
            HDR2StageData_exposer.def( 
                "getBlurVertTexObjChunk"
                , getBlurVertTexObjChunk_function_type( &::OSG::HDR2StageData::getBlurVertTexObjChunk )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageData::getCompositeTexObjChunk
        
            typedef ::OSG::TextureObjChunk * ( ::OSG::HDR2StageData::*getCompositeTexObjChunk_function_type )(  ) const;
            
            HDR2StageData_exposer.def( 
                "getCompositeTexObjChunk"
                , getCompositeTexObjChunk_function_type( &::OSG::HDR2StageData::getCompositeTexObjChunk )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageData::getDepthTexObjChunk
        
            typedef ::OSG::TextureObjChunk * ( ::OSG::HDR2StageData::*getDepthTexObjChunk_function_type )(  ) const;
            
            HDR2StageData_exposer.def( 
                "getDepthTexObjChunk"
                , getDepthTexObjChunk_function_type( &::OSG::HDR2StageData::getDepthTexObjChunk )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageData::getExposureTexObjChunk
        
            typedef ::OSG::TextureObjChunk * ( ::OSG::HDR2StageData::*getExposureTexObjChunk_function_type )(  ) const;
            
            HDR2StageData_exposer.def( 
                "getExposureTexObjChunk"
                , getExposureTexObjChunk_function_type( &::OSG::HDR2StageData::getExposureTexObjChunk )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageData::getLuminanceTexObjChunk
        
            typedef ::OSG::TextureObjChunk * ( ::OSG::HDR2StageData::*getLuminanceTexObjChunk_function_type )(  ) const;
            
            HDR2StageData_exposer.def( 
                "getLuminanceTexObjChunk"
                , getLuminanceTexObjChunk_function_type( &::OSG::HDR2StageData::getLuminanceTexObjChunk )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageData::getScaleTexObjChunk
        
            typedef ::OSG::TextureObjChunk * ( ::OSG::HDR2StageData::*getScaleTexObjChunk_function_type )( ::OSG::UInt32 ) const;
            
            HDR2StageData_exposer.def( 
                "getScaleTexObjChunk"
                , getScaleTexObjChunk_function_type( &::OSG::HDR2StageData::getScaleTexObjChunk )
                , ( bp::arg("idx") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageData::getSceneTexObjChunk
        
            typedef ::OSG::TextureObjChunk * ( ::OSG::HDR2StageData::*getSceneTexObjChunk_function_type )(  ) const;
            
            HDR2StageData_exposer.def( 
                "getSceneTexObjChunk"
                , getSceneTexObjChunk_function_type( &::OSG::HDR2StageData::getSceneTexObjChunk )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageData::getThresholdTexObjChunk
        
            typedef ::OSG::TextureObjChunk * ( ::OSG::HDR2StageData::*getThresholdTexObjChunk_function_type )(  ) const;
            
            HDR2StageData_exposer.def( 
                "getThresholdTexObjChunk"
                , getThresholdTexObjChunk_function_type( &::OSG::HDR2StageData::getThresholdTexObjChunk )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageData::getTimeDeltaInSeconds
        
            typedef ::OSG::Real32 ( ::OSG::HDR2StageData::*getTimeDeltaInSeconds_function_type )(  ) const;
            
            HDR2StageData_exposer.def( 
                "getTimeDeltaInSeconds"
                , getTimeDeltaInSeconds_function_type( &::OSG::HDR2StageData::getTimeDeltaInSeconds ) );
        
        }
        pyopensg::register_transit< OSG::HDR2StageData >::execute();
        bp::implicitly_convertible< OSG::HDR2StageData::ObjRecPtr, OSG::HDR2StageData* >();
        bp::implicitly_convertible< OSG::HDR2StageData::ObjRecPtr, OSG::HDR2StageData::ObjCPtr >();
        bp::implicitly_convertible< OSG::HDR2StageData::ObjRecPtr, OSG::StageData* >();
        bp::implicitly_convertible< OSG::HDR2StageData::ObjRecPtr, OSG::StageData::ObjRecPtr >();
        bp::implicitly_convertible<OSG::HDR2StageData::ObjRecPtr, OSG::StageData::ObjCPtr>();
    }

}
