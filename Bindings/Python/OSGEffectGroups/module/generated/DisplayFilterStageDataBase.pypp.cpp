// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGEffectGroups_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "DisplayFilterStageDataBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_DisplayFilterStageDataBase_class(){

    { //::OSG::DisplayFilterStageDataBase
        typedef bp::class_< OSG::DisplayFilterStageDataBase, bp::bases< ::OSG::StageData >, boost::noncopyable > DisplayFilterStageDataBase_exposer_t;
        DisplayFilterStageDataBase_exposer_t DisplayFilterStageDataBase_exposer = DisplayFilterStageDataBase_exposer_t( "DisplayFilterStageDataBase", bp::no_init );
        bp::scope DisplayFilterStageDataBase_scope( DisplayFilterStageDataBase_exposer );
        bp::scope().attr("WidthFieldId") = (int)OSG::DisplayFilterStageDataBase::WidthFieldId;
        bp::scope().attr("HeightFieldId") = (int)OSG::DisplayFilterStageDataBase::HeightFieldId;
        bp::scope().attr("TargetFieldId") = (int)OSG::DisplayFilterStageDataBase::TargetFieldId;
        bp::scope().attr("BaseMaterialFieldId") = (int)OSG::DisplayFilterStageDataBase::BaseMaterialFieldId;
        bp::scope().attr("ColorFilterShaderFieldId") = (int)OSG::DisplayFilterStageDataBase::ColorFilterShaderFieldId;
        bp::scope().attr("ColorFilterTextureFieldId") = (int)OSG::DisplayFilterStageDataBase::ColorFilterTextureFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::DisplayFilterStageDataBase::NextFieldId;
        { //::OSG::DisplayFilterStageDataBase::copyFromBin
        
            typedef void ( ::OSG::DisplayFilterStageDataBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            DisplayFilterStageDataBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::DisplayFilterStageDataBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::DisplayFilterStageDataBase::copyToBin
        
            typedef void ( ::OSG::DisplayFilterStageDataBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            DisplayFilterStageDataBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::DisplayFilterStageDataBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::DisplayFilterStageDataBase::create
        
            typedef ::OSG::DisplayFilterStageDataTransitPtr ( *create_function_type )(  );
            
            DisplayFilterStageDataBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::DisplayFilterStageDataBase::create ) );
        
        }
        { //::OSG::DisplayFilterStageDataBase::createDependent
        
            typedef ::OSG::DisplayFilterStageDataTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            DisplayFilterStageDataBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::DisplayFilterStageDataBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::DisplayFilterStageDataBase::createLocal
        
            typedef ::OSG::DisplayFilterStageDataTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            DisplayFilterStageDataBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::DisplayFilterStageDataBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::DisplayFilterStageDataBase::getBaseMaterial
        
            typedef ::OSG::ChunkMaterial * ( ::OSG::DisplayFilterStageDataBase::*getBaseMaterial_function_type )(  ) const;
            
            DisplayFilterStageDataBase_exposer.def( 
                "getBaseMaterial"
                , getBaseMaterial_function_type( &::OSG::DisplayFilterStageDataBase::getBaseMaterial )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DisplayFilterStageDataBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::DisplayFilterStageDataBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            DisplayFilterStageDataBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::DisplayFilterStageDataBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::DisplayFilterStageDataBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            DisplayFilterStageDataBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::DisplayFilterStageDataBase::getClassGroupId ) );
        
        }
        { //::OSG::DisplayFilterStageDataBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            DisplayFilterStageDataBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::DisplayFilterStageDataBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::DisplayFilterStageDataBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            DisplayFilterStageDataBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::DisplayFilterStageDataBase::getClassTypeId ) );
        
        }
        { //::OSG::DisplayFilterStageDataBase::getColorFilterShader
        
            typedef ::OSG::SimpleSHLChunk * ( ::OSG::DisplayFilterStageDataBase::*getColorFilterShader_function_type )(  ) const;
            
            DisplayFilterStageDataBase_exposer.def( 
                "getColorFilterShader"
                , getColorFilterShader_function_type( &::OSG::DisplayFilterStageDataBase::getColorFilterShader )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DisplayFilterStageDataBase::getColorFilterTexture
        
            typedef ::OSG::TextureObjChunk * ( ::OSG::DisplayFilterStageDataBase::*getColorFilterTexture_function_type )(  ) const;
            
            DisplayFilterStageDataBase_exposer.def( 
                "getColorFilterTexture"
                , getColorFilterTexture_function_type( &::OSG::DisplayFilterStageDataBase::getColorFilterTexture )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DisplayFilterStageDataBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::DisplayFilterStageDataBase::*getContainerSize_function_type )(  ) const;
            
            DisplayFilterStageDataBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::DisplayFilterStageDataBase::getContainerSize ) );
        
        }
        { //::OSG::DisplayFilterStageDataBase::getHeight
        
            typedef ::OSG::UInt32 ( ::OSG::DisplayFilterStageDataBase::*getHeight_function_type )(  ) const;
            
            DisplayFilterStageDataBase_exposer.def( 
                "getHeight"
                , getHeight_function_type( &::OSG::DisplayFilterStageDataBase::getHeight ) );
        
        }
        { //::OSG::DisplayFilterStageDataBase::getSFBaseMaterial
        
            typedef ::OSG::SFUnrecChunkMaterialPtr const * ( ::OSG::DisplayFilterStageDataBase::*getSFBaseMaterial_function_type )(  ) const;
            
            DisplayFilterStageDataBase_exposer.def( 
                "getSFBaseMaterial"
                , getSFBaseMaterial_function_type( &::OSG::DisplayFilterStageDataBase::getSFBaseMaterial )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DisplayFilterStageDataBase::getSFColorFilterShader
        
            typedef ::OSG::SFUnrecSimpleSHLChunkPtr const * ( ::OSG::DisplayFilterStageDataBase::*getSFColorFilterShader_function_type )(  ) const;
            
            DisplayFilterStageDataBase_exposer.def( 
                "getSFColorFilterShader"
                , getSFColorFilterShader_function_type( &::OSG::DisplayFilterStageDataBase::getSFColorFilterShader )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DisplayFilterStageDataBase::getSFColorFilterTexture
        
            typedef ::OSG::SFUnrecTextureObjChunkPtr const * ( ::OSG::DisplayFilterStageDataBase::*getSFColorFilterTexture_function_type )(  ) const;
            
            DisplayFilterStageDataBase_exposer.def( 
                "getSFColorFilterTexture"
                , getSFColorFilterTexture_function_type( &::OSG::DisplayFilterStageDataBase::getSFColorFilterTexture )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DisplayFilterStageDataBase::getSFHeight
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::DisplayFilterStageDataBase::*getSFHeight_function_type )(  ) const;
            
            DisplayFilterStageDataBase_exposer.def( 
                "getSFHeight"
                , getSFHeight_function_type( &::OSG::DisplayFilterStageDataBase::getSFHeight )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DisplayFilterStageDataBase::getSFTarget
        
            typedef ::OSG::SFUnrecFrameBufferObjectPtr const * ( ::OSG::DisplayFilterStageDataBase::*getSFTarget_function_type )(  ) const;
            
            DisplayFilterStageDataBase_exposer.def( 
                "getSFTarget"
                , getSFTarget_function_type( &::OSG::DisplayFilterStageDataBase::getSFTarget )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DisplayFilterStageDataBase::getSFWidth
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::DisplayFilterStageDataBase::*getSFWidth_function_type )(  ) const;
            
            DisplayFilterStageDataBase_exposer.def( 
                "getSFWidth"
                , getSFWidth_function_type( &::OSG::DisplayFilterStageDataBase::getSFWidth )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DisplayFilterStageDataBase::getTarget
        
            typedef ::OSG::FrameBufferObject * ( ::OSG::DisplayFilterStageDataBase::*getTarget_function_type )(  ) const;
            
            DisplayFilterStageDataBase_exposer.def( 
                "getTarget"
                , getTarget_function_type( &::OSG::DisplayFilterStageDataBase::getTarget )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DisplayFilterStageDataBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::DisplayFilterStageDataBase::*getType_function_type )(  ) ;
            
            DisplayFilterStageDataBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::DisplayFilterStageDataBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DisplayFilterStageDataBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::DisplayFilterStageDataBase::*getType_function_type )(  ) const;
            
            DisplayFilterStageDataBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::DisplayFilterStageDataBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DisplayFilterStageDataBase::getWidth
        
            typedef ::OSG::UInt32 ( ::OSG::DisplayFilterStageDataBase::*getWidth_function_type )(  ) const;
            
            DisplayFilterStageDataBase_exposer.def( 
                "getWidth"
                , getWidth_function_type( &::OSG::DisplayFilterStageDataBase::getWidth ) );
        
        }
        { //::OSG::DisplayFilterStageDataBase::setBaseMaterial
        
            typedef void ( ::OSG::DisplayFilterStageDataBase::*setBaseMaterial_function_type )( ::OSG::ChunkMaterial * const ) ;
            
            DisplayFilterStageDataBase_exposer.def( 
                "setBaseMaterial"
                , setBaseMaterial_function_type( &::OSG::DisplayFilterStageDataBase::setBaseMaterial )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DisplayFilterStageDataBase::setColorFilterShader
        
            typedef void ( ::OSG::DisplayFilterStageDataBase::*setColorFilterShader_function_type )( ::OSG::SimpleSHLChunk * const ) ;
            
            DisplayFilterStageDataBase_exposer.def( 
                "setColorFilterShader"
                , setColorFilterShader_function_type( &::OSG::DisplayFilterStageDataBase::setColorFilterShader )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DisplayFilterStageDataBase::setColorFilterTexture
        
            typedef void ( ::OSG::DisplayFilterStageDataBase::*setColorFilterTexture_function_type )( ::OSG::TextureObjChunk * const ) ;
            
            DisplayFilterStageDataBase_exposer.def( 
                "setColorFilterTexture"
                , setColorFilterTexture_function_type( &::OSG::DisplayFilterStageDataBase::setColorFilterTexture )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DisplayFilterStageDataBase::setHeight
        
            typedef void ( ::OSG::DisplayFilterStageDataBase::*setHeight_function_type )( ::OSG::UInt32 const ) ;
            
            DisplayFilterStageDataBase_exposer.def( 
                "setHeight"
                , setHeight_function_type( &::OSG::DisplayFilterStageDataBase::setHeight )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DisplayFilterStageDataBase::setTarget
        
            typedef void ( ::OSG::DisplayFilterStageDataBase::*setTarget_function_type )( ::OSG::FrameBufferObject * const ) ;
            
            DisplayFilterStageDataBase_exposer.def( 
                "setTarget"
                , setTarget_function_type( &::OSG::DisplayFilterStageDataBase::setTarget )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DisplayFilterStageDataBase::setWidth
        
            typedef void ( ::OSG::DisplayFilterStageDataBase::*setWidth_function_type )( ::OSG::UInt32 const ) ;
            
            DisplayFilterStageDataBase_exposer.def( 
                "setWidth"
                , setWidth_function_type( &::OSG::DisplayFilterStageDataBase::setWidth )
                , ( bp::arg("value") ) );
        
        }
        DisplayFilterStageDataBase_exposer.staticmethod( "create" );
        DisplayFilterStageDataBase_exposer.staticmethod( "createDependent" );
        DisplayFilterStageDataBase_exposer.staticmethod( "createLocal" );
        DisplayFilterStageDataBase_exposer.staticmethod( "getClassGroupId" );
        DisplayFilterStageDataBase_exposer.staticmethod( "getClassType" );
        DisplayFilterStageDataBase_exposer.staticmethod( "getClassTypeId" );
    }

}
