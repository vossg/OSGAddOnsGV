// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGEffectGroups_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "DeferredShadingStageDataBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

boost::python::list DeferredShadingStageDataBase_getMFShadingStates(OSG::DeferredShadingStageDataBase *self)
{
   boost::python::list result;
   OSG::MFUnrecStatePtr const * mf_data = self->getMFShadingStates();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append(OSG::State::ObjRecPtr((*mf_data)[i]));
   }
   return result;
}

boost::python::list DeferredShadingStageDataBase_getMFShadingProgramChunks(OSG::DeferredShadingStageDataBase *self)
{
   boost::python::list result;
   OSG::MFUnrecShaderProgramChunkPtr const * mf_data = self->getMFShadingProgramChunks();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append(OSG::ShaderProgramChunk::ObjRecPtr((*mf_data)[i]));
   }
   return result;
}

boost::python::list DeferredShadingStageDataBase_getMFLightChunks(OSG::DeferredShadingStageDataBase *self)
{
   boost::python::list result;
   OSG::MFUnrecDSLightChunkPtr const * mf_data = self->getMFLightChunks();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append(OSG::DSLightChunk::ObjRecPtr((*mf_data)[i]));
   }
   return result;
}

void register_DeferredShadingStageDataBase_class(){

    { //::OSG::DeferredShadingStageDataBase
        typedef bp::class_< OSG::DeferredShadingStageDataBase, bp::bases< ::OSG::StageData >, boost::noncopyable > DeferredShadingStageDataBase_exposer_t;
        DeferredShadingStageDataBase_exposer_t DeferredShadingStageDataBase_exposer = DeferredShadingStageDataBase_exposer_t( "DeferredShadingStageDataBase", bp::no_init );
        bp::scope DeferredShadingStageDataBase_scope( DeferredShadingStageDataBase_exposer );
        bp::scope().attr("GBufferTargetFieldId") = (int)OSG::DeferredShadingStageDataBase::GBufferTargetFieldId;
        bp::scope().attr("GBufferBackgroundFieldId") = (int)OSG::DeferredShadingStageDataBase::GBufferBackgroundFieldId;
        bp::scope().attr("ShadingTargetFieldId") = (int)OSG::DeferredShadingStageDataBase::ShadingTargetFieldId;
        bp::scope().attr("ShadingStatesFieldId") = (int)OSG::DeferredShadingStageDataBase::ShadingStatesFieldId;
        bp::scope().attr("ShadingProgramChunksFieldId") = (int)OSG::DeferredShadingStageDataBase::ShadingProgramChunksFieldId;
        bp::scope().attr("LightChunksFieldId") = (int)OSG::DeferredShadingStageDataBase::LightChunksFieldId;
        bp::scope().attr("BlendChunkFieldId") = (int)OSG::DeferredShadingStageDataBase::BlendChunkFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::DeferredShadingStageDataBase::NextFieldId;
        { //::OSG::DeferredShadingStageDataBase::assignLightChunks
        
            typedef void ( ::OSG::DeferredShadingStageDataBase::*assignLightChunks_function_type )( ::OSG::MFUnrecDSLightChunkPtr const & ) ;
            
            DeferredShadingStageDataBase_exposer.def( 
                "assignLightChunks"
                , assignLightChunks_function_type( &::OSG::DeferredShadingStageDataBase::assignLightChunks )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DeferredShadingStageDataBase::assignShadingProgramChunks
        
            typedef void ( ::OSG::DeferredShadingStageDataBase::*assignShadingProgramChunks_function_type )( ::OSG::MFUnrecShaderProgramChunkPtr const & ) ;
            
            DeferredShadingStageDataBase_exposer.def( 
                "assignShadingProgramChunks"
                , assignShadingProgramChunks_function_type( &::OSG::DeferredShadingStageDataBase::assignShadingProgramChunks )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DeferredShadingStageDataBase::assignShadingStates
        
            typedef void ( ::OSG::DeferredShadingStageDataBase::*assignShadingStates_function_type )( ::OSG::MFUnrecStatePtr const & ) ;
            
            DeferredShadingStageDataBase_exposer.def( 
                "assignShadingStates"
                , assignShadingStates_function_type( &::OSG::DeferredShadingStageDataBase::assignShadingStates )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DeferredShadingStageDataBase::clearLightChunks
        
            typedef void ( ::OSG::DeferredShadingStageDataBase::*clearLightChunks_function_type )(  ) ;
            
            DeferredShadingStageDataBase_exposer.def( 
                "clearLightChunks"
                , clearLightChunks_function_type( &::OSG::DeferredShadingStageDataBase::clearLightChunks ) );
        
        }
        { //::OSG::DeferredShadingStageDataBase::clearShadingProgramChunks
        
            typedef void ( ::OSG::DeferredShadingStageDataBase::*clearShadingProgramChunks_function_type )(  ) ;
            
            DeferredShadingStageDataBase_exposer.def( 
                "clearShadingProgramChunks"
                , clearShadingProgramChunks_function_type( &::OSG::DeferredShadingStageDataBase::clearShadingProgramChunks ) );
        
        }
        { //::OSG::DeferredShadingStageDataBase::clearShadingStates
        
            typedef void ( ::OSG::DeferredShadingStageDataBase::*clearShadingStates_function_type )(  ) ;
            
            DeferredShadingStageDataBase_exposer.def( 
                "clearShadingStates"
                , clearShadingStates_function_type( &::OSG::DeferredShadingStageDataBase::clearShadingStates ) );
        
        }
        { //::OSG::DeferredShadingStageDataBase::copyFromBin
        
            typedef void ( ::OSG::DeferredShadingStageDataBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            DeferredShadingStageDataBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::DeferredShadingStageDataBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::DeferredShadingStageDataBase::copyToBin
        
            typedef void ( ::OSG::DeferredShadingStageDataBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            DeferredShadingStageDataBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::DeferredShadingStageDataBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::DeferredShadingStageDataBase::create
        
            typedef ::OSG::DeferredShadingStageDataTransitPtr ( *create_function_type )(  );
            
            DeferredShadingStageDataBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::DeferredShadingStageDataBase::create ) );
        
        }
        { //::OSG::DeferredShadingStageDataBase::createDependent
        
            typedef ::OSG::DeferredShadingStageDataTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            DeferredShadingStageDataBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::DeferredShadingStageDataBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::DeferredShadingStageDataBase::createLocal
        
            typedef ::OSG::DeferredShadingStageDataTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            DeferredShadingStageDataBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::DeferredShadingStageDataBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::DeferredShadingStageDataBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::DeferredShadingStageDataBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            DeferredShadingStageDataBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::DeferredShadingStageDataBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::DeferredShadingStageDataBase::getBlendChunk
        
            typedef ::OSG::BlendChunk * ( ::OSG::DeferredShadingStageDataBase::*getBlendChunk_function_type )(  ) const;
            
            DeferredShadingStageDataBase_exposer.def( 
                "getBlendChunk"
                , getBlendChunk_function_type( &::OSG::DeferredShadingStageDataBase::getBlendChunk )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DeferredShadingStageDataBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            DeferredShadingStageDataBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::DeferredShadingStageDataBase::getClassGroupId ) );
        
        }
        { //::OSG::DeferredShadingStageDataBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            DeferredShadingStageDataBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::DeferredShadingStageDataBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::DeferredShadingStageDataBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            DeferredShadingStageDataBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::DeferredShadingStageDataBase::getClassTypeId ) );
        
        }
        { //::OSG::DeferredShadingStageDataBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::DeferredShadingStageDataBase::*getContainerSize_function_type )(  ) const;
            
            DeferredShadingStageDataBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::DeferredShadingStageDataBase::getContainerSize ) );
        
        }
        { //::OSG::DeferredShadingStageDataBase::getGBufferBackground
        
            typedef ::OSG::Background * ( ::OSG::DeferredShadingStageDataBase::*getGBufferBackground_function_type )(  ) const;
            
            DeferredShadingStageDataBase_exposer.def( 
                "getGBufferBackground"
                , getGBufferBackground_function_type( &::OSG::DeferredShadingStageDataBase::getGBufferBackground )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DeferredShadingStageDataBase::getGBufferTarget
        
            typedef ::OSG::FrameBufferObject * ( ::OSG::DeferredShadingStageDataBase::*getGBufferTarget_function_type )(  ) const;
            
            DeferredShadingStageDataBase_exposer.def( 
                "getGBufferTarget"
                , getGBufferTarget_function_type( &::OSG::DeferredShadingStageDataBase::getGBufferTarget )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DeferredShadingStageDataBase::getLightChunks
        
            typedef ::OSG::DSLightChunk * ( ::OSG::DeferredShadingStageDataBase::*getLightChunks_function_type )( ::OSG::UInt32 const ) const;
            
            DeferredShadingStageDataBase_exposer.def( 
                "getLightChunks"
                , getLightChunks_function_type( &::OSG::DeferredShadingStageDataBase::getLightChunks )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DeferredShadingStageDataBase::getSFBlendChunk
        
            typedef ::OSG::SFUnrecBlendChunkPtr const * ( ::OSG::DeferredShadingStageDataBase::*getSFBlendChunk_function_type )(  ) const;
            
            DeferredShadingStageDataBase_exposer.def( 
                "getSFBlendChunk"
                , getSFBlendChunk_function_type( &::OSG::DeferredShadingStageDataBase::getSFBlendChunk )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DeferredShadingStageDataBase::getSFGBufferBackground
        
            typedef ::OSG::SFUnrecBackgroundPtr const * ( ::OSG::DeferredShadingStageDataBase::*getSFGBufferBackground_function_type )(  ) const;
            
            DeferredShadingStageDataBase_exposer.def( 
                "getSFGBufferBackground"
                , getSFGBufferBackground_function_type( &::OSG::DeferredShadingStageDataBase::getSFGBufferBackground )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DeferredShadingStageDataBase::getSFGBufferTarget
        
            typedef ::OSG::SFUnrecFrameBufferObjectPtr const * ( ::OSG::DeferredShadingStageDataBase::*getSFGBufferTarget_function_type )(  ) const;
            
            DeferredShadingStageDataBase_exposer.def( 
                "getSFGBufferTarget"
                , getSFGBufferTarget_function_type( &::OSG::DeferredShadingStageDataBase::getSFGBufferTarget )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DeferredShadingStageDataBase::getSFShadingTarget
        
            typedef ::OSG::SFUnrecFrameBufferObjectPtr const * ( ::OSG::DeferredShadingStageDataBase::*getSFShadingTarget_function_type )(  ) const;
            
            DeferredShadingStageDataBase_exposer.def( 
                "getSFShadingTarget"
                , getSFShadingTarget_function_type( &::OSG::DeferredShadingStageDataBase::getSFShadingTarget )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DeferredShadingStageDataBase::getShadingProgramChunks
        
            typedef ::OSG::ShaderProgramChunk * ( ::OSG::DeferredShadingStageDataBase::*getShadingProgramChunks_function_type )( ::OSG::UInt32 const ) const;
            
            DeferredShadingStageDataBase_exposer.def( 
                "getShadingProgramChunks"
                , getShadingProgramChunks_function_type( &::OSG::DeferredShadingStageDataBase::getShadingProgramChunks )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DeferredShadingStageDataBase::getShadingStates
        
            typedef ::OSG::State * ( ::OSG::DeferredShadingStageDataBase::*getShadingStates_function_type )( ::OSG::UInt32 const ) const;
            
            DeferredShadingStageDataBase_exposer.def( 
                "getShadingStates"
                , getShadingStates_function_type( &::OSG::DeferredShadingStageDataBase::getShadingStates )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DeferredShadingStageDataBase::getShadingTarget
        
            typedef ::OSG::FrameBufferObject * ( ::OSG::DeferredShadingStageDataBase::*getShadingTarget_function_type )(  ) const;
            
            DeferredShadingStageDataBase_exposer.def( 
                "getShadingTarget"
                , getShadingTarget_function_type( &::OSG::DeferredShadingStageDataBase::getShadingTarget )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DeferredShadingStageDataBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::DeferredShadingStageDataBase::*getType_function_type )(  ) ;
            
            DeferredShadingStageDataBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::DeferredShadingStageDataBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DeferredShadingStageDataBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::DeferredShadingStageDataBase::*getType_function_type )(  ) const;
            
            DeferredShadingStageDataBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::DeferredShadingStageDataBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DeferredShadingStageDataBase::pushToLightChunks
        
            typedef void ( ::OSG::DeferredShadingStageDataBase::*pushToLightChunks_function_type )( ::OSG::DSLightChunk * const ) ;
            
            DeferredShadingStageDataBase_exposer.def( 
                "pushToLightChunks"
                , pushToLightChunks_function_type( &::OSG::DeferredShadingStageDataBase::pushToLightChunks )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DeferredShadingStageDataBase::pushToShadingProgramChunks
        
            typedef void ( ::OSG::DeferredShadingStageDataBase::*pushToShadingProgramChunks_function_type )( ::OSG::ShaderProgramChunk * const ) ;
            
            DeferredShadingStageDataBase_exposer.def( 
                "pushToShadingProgramChunks"
                , pushToShadingProgramChunks_function_type( &::OSG::DeferredShadingStageDataBase::pushToShadingProgramChunks )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DeferredShadingStageDataBase::pushToShadingStates
        
            typedef void ( ::OSG::DeferredShadingStageDataBase::*pushToShadingStates_function_type )( ::OSG::State * const ) ;
            
            DeferredShadingStageDataBase_exposer.def( 
                "pushToShadingStates"
                , pushToShadingStates_function_type( &::OSG::DeferredShadingStageDataBase::pushToShadingStates )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DeferredShadingStageDataBase::removeFromLightChunks
        
            typedef void ( ::OSG::DeferredShadingStageDataBase::*removeFromLightChunks_function_type )( ::OSG::UInt32 ) ;
            
            DeferredShadingStageDataBase_exposer.def( 
                "removeFromLightChunks"
                , removeFromLightChunks_function_type( &::OSG::DeferredShadingStageDataBase::removeFromLightChunks )
                , ( bp::arg("uiIndex") ) );
        
        }
        { //::OSG::DeferredShadingStageDataBase::removeFromShadingProgramChunks
        
            typedef void ( ::OSG::DeferredShadingStageDataBase::*removeFromShadingProgramChunks_function_type )( ::OSG::UInt32 ) ;
            
            DeferredShadingStageDataBase_exposer.def( 
                "removeFromShadingProgramChunks"
                , removeFromShadingProgramChunks_function_type( &::OSG::DeferredShadingStageDataBase::removeFromShadingProgramChunks )
                , ( bp::arg("uiIndex") ) );
        
        }
        { //::OSG::DeferredShadingStageDataBase::removeFromShadingStates
        
            typedef void ( ::OSG::DeferredShadingStageDataBase::*removeFromShadingStates_function_type )( ::OSG::UInt32 ) ;
            
            DeferredShadingStageDataBase_exposer.def( 
                "removeFromShadingStates"
                , removeFromShadingStates_function_type( &::OSG::DeferredShadingStageDataBase::removeFromShadingStates )
                , ( bp::arg("uiIndex") ) );
        
        }
        { //::OSG::DeferredShadingStageDataBase::removeObjFromLightChunks
        
            typedef void ( ::OSG::DeferredShadingStageDataBase::*removeObjFromLightChunks_function_type )( ::OSG::DSLightChunk * const ) ;
            
            DeferredShadingStageDataBase_exposer.def( 
                "removeObjFromLightChunks"
                , removeObjFromLightChunks_function_type( &::OSG::DeferredShadingStageDataBase::removeObjFromLightChunks )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DeferredShadingStageDataBase::removeObjFromShadingProgramChunks
        
            typedef void ( ::OSG::DeferredShadingStageDataBase::*removeObjFromShadingProgramChunks_function_type )( ::OSG::ShaderProgramChunk * const ) ;
            
            DeferredShadingStageDataBase_exposer.def( 
                "removeObjFromShadingProgramChunks"
                , removeObjFromShadingProgramChunks_function_type( &::OSG::DeferredShadingStageDataBase::removeObjFromShadingProgramChunks )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DeferredShadingStageDataBase::removeObjFromShadingStates
        
            typedef void ( ::OSG::DeferredShadingStageDataBase::*removeObjFromShadingStates_function_type )( ::OSG::State * const ) ;
            
            DeferredShadingStageDataBase_exposer.def( 
                "removeObjFromShadingStates"
                , removeObjFromShadingStates_function_type( &::OSG::DeferredShadingStageDataBase::removeObjFromShadingStates )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DeferredShadingStageDataBase::setBlendChunk
        
            typedef void ( ::OSG::DeferredShadingStageDataBase::*setBlendChunk_function_type )( ::OSG::BlendChunk * const ) ;
            
            DeferredShadingStageDataBase_exposer.def( 
                "setBlendChunk"
                , setBlendChunk_function_type( &::OSG::DeferredShadingStageDataBase::setBlendChunk )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DeferredShadingStageDataBase::setGBufferBackground
        
            typedef void ( ::OSG::DeferredShadingStageDataBase::*setGBufferBackground_function_type )( ::OSG::Background * const ) ;
            
            DeferredShadingStageDataBase_exposer.def( 
                "setGBufferBackground"
                , setGBufferBackground_function_type( &::OSG::DeferredShadingStageDataBase::setGBufferBackground )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DeferredShadingStageDataBase::setGBufferTarget
        
            typedef void ( ::OSG::DeferredShadingStageDataBase::*setGBufferTarget_function_type )( ::OSG::FrameBufferObject * const ) ;
            
            DeferredShadingStageDataBase_exposer.def( 
                "setGBufferTarget"
                , setGBufferTarget_function_type( &::OSG::DeferredShadingStageDataBase::setGBufferTarget )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DeferredShadingStageDataBase::setShadingTarget
        
            typedef void ( ::OSG::DeferredShadingStageDataBase::*setShadingTarget_function_type )( ::OSG::FrameBufferObject * const ) ;
            
            DeferredShadingStageDataBase_exposer.def( 
                "setShadingTarget"
                , setShadingTarget_function_type( &::OSG::DeferredShadingStageDataBase::setShadingTarget )
                , ( bp::arg("value") ) );
        
        }
        DeferredShadingStageDataBase_exposer.staticmethod( "create" );
        DeferredShadingStageDataBase_exposer.staticmethod( "createDependent" );
        DeferredShadingStageDataBase_exposer.staticmethod( "createLocal" );
        DeferredShadingStageDataBase_exposer.staticmethod( "getClassGroupId" );
        DeferredShadingStageDataBase_exposer.staticmethod( "getClassType" );
        DeferredShadingStageDataBase_exposer.staticmethod( "getClassTypeId" );
        DeferredShadingStageDataBase_exposer.def("getMFShadingStates",DeferredShadingStageDataBase_getMFShadingStates);
        DeferredShadingStageDataBase_exposer.def("getMFShadingProgramChunks",DeferredShadingStageDataBase_getMFShadingProgramChunks);
        DeferredShadingStageDataBase_exposer.def("getMFLightChunks",DeferredShadingStageDataBase_getMFLightChunks);
    }

}
