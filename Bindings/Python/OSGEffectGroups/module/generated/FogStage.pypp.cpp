// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGEffectGroups_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "FogStage.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_FogStage_class(){

    { //::OSG::FogStage
        typedef bp::class_< OSG::FogStage, bp::bases< OSG::FogStageBase >, OSG::FogStage::ObjRecPtr, boost::noncopyable > FogStage_exposer_t;
        FogStage_exposer_t FogStage_exposer = FogStage_exposer_t( "FogStage", bp::no_init );
        bp::scope FogStage_scope( FogStage_exposer );
        bp::enum_< OSG::FogStage::FogModes>("FogModes")
            .value("FOG_MODE_LINEAR", OSG::FogStage::FOG_MODE_LINEAR)
            .value("FOG_MODE_EXP", OSG::FogStage::FOG_MODE_EXP)
            .value("FOG_MODE_EXP2", OSG::FogStage::FOG_MODE_EXP2)
            .export_values()
            ;
        { //::OSG::FogStage::changed
        
            typedef void ( ::OSG::FogStage::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            FogStage_exposer.def( 
                "changed"
                , changed_function_type( &::OSG::FogStage::changed )
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("details") ) );
        
        }
        { //::OSG::FogStage::dump
        
            typedef void ( ::OSG::FogStage::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            FogStage_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::FogStage::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::FogStage::generateFogFragmentProgram
        
            typedef ::OSG::SimpleSHLChunkTransitPtr ( ::OSG::FogStage::*generateFogFragmentProgram_function_type )(  ) ;
            
            FogStage_exposer.def( 
                "generateFogFragmentProgram"
                , generateFogFragmentProgram_function_type( &::OSG::FogStage::generateFogFragmentProgram ) );
        
        }
        { //::OSG::FogStage::initData
        
            typedef void ( ::OSG::FogStage::*initData_function_type )( ::OSG::RenderAction * ) ;
            
            FogStage_exposer.def( 
                "initData"
                , initData_function_type( &::OSG::FogStage::initData )
                , ( bp::arg("pAction") ) );
        
        }
        { //::OSG::FogStage::postProcess
        
            typedef void ( ::OSG::FogStage::*postProcess_function_type )( ::OSG::DrawEnv * ) ;
            
            FogStage_exposer.def( 
                "postProcess"
                , postProcess_function_type( &::OSG::FogStage::postProcess )
                , ( bp::arg("pEnv") ) );
        
        }
        { //::OSG::FogStage::renderEnter
        
            typedef ::OSG::ActionBase::ResultE ( ::OSG::FogStage::*renderEnter_function_type )( ::OSG::Action * ) ;
            
            FogStage_exposer.def( 
                "renderEnter"
                , renderEnter_function_type( &::OSG::FogStage::renderEnter )
                , ( bp::arg("action") ) );
        
        }
        { //::OSG::FogStage::renderLeave
        
            typedef ::OSG::ActionBase::ResultE ( ::OSG::FogStage::*renderLeave_function_type )( ::OSG::Action * ) ;
            
            FogStage_exposer.def( 
                "renderLeave"
                , renderLeave_function_type( &::OSG::FogStage::renderLeave )
                , ( bp::arg("action") ) );
        
        }
        { //::OSG::FogStage::resizeStageData
        
            typedef void ( ::OSG::FogStage::*resizeStageData_function_type )( ::OSG::FogStageData *,::OSG::Int32,::OSG::Int32 ) ;
            
            FogStage_exposer.def( 
                "resizeStageData"
                , resizeStageData_function_type( &::OSG::FogStage::resizeStageData )
                , ( bp::arg("pData"), bp::arg("iPixelWidth"), bp::arg("iPixelHeight") ) );
        
        }
        { //::OSG::FogStage::setupStageData
        
            typedef ::OSG::FogStageDataTransitPtr ( ::OSG::FogStage::*setupStageData_function_type )( ::OSG::Int32,::OSG::Int32 ) ;
            
            FogStage_exposer.def( 
                "setupStageData"
                , setupStageData_function_type( &::OSG::FogStage::setupStageData )
                , ( bp::arg("iPixelWidth"), bp::arg("iPixelHeight") ) );
        
        }
        pyopensg::register_transit< OSG::FogStage >::execute();
        bp::implicitly_convertible< OSG::FogStage::ObjRecPtr, OSG::FogStage* >();
        bp::implicitly_convertible< OSG::FogStage::ObjRecPtr, OSG::FogStage::ObjCPtr >();
        bp::implicitly_convertible< OSG::FogStage::ObjRecPtr, OSG::Stage* >();
        bp::implicitly_convertible< OSG::FogStage::ObjRecPtr, OSG::Stage::ObjRecPtr >();
        bp::implicitly_convertible<OSG::FogStage::ObjRecPtr, OSG::Stage::ObjCPtr>();
    }

}
