// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGEffectGroups_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "DeferredShadingStageBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

boost::python::list DeferredShadingStageBase_getMFPixelFormats(OSG::DeferredShadingStageBase *self)
{
   boost::python::list result;
   OSG::MFGLenum const * mf_data = self->getMFPixelFormats();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list DeferredShadingStageBase_getMFPixelTypes(OSG::DeferredShadingStageBase *self)
{
   boost::python::list result;
   OSG::MFGLenum const * mf_data = self->getMFPixelTypes();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list DeferredShadingStageBase_getMFLightPrograms(OSG::DeferredShadingStageBase *self)
{
   boost::python::list result;
   OSG::MFUnrecShaderProgramChunkPtr const * mf_data = self->getMFLightPrograms();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append(OSG::ShaderProgramChunk::ObjRecPtr((*mf_data)[i]));
   }
   return result;
}

boost::python::list DeferredShadingStageBase_getMFLights(OSG::DeferredShadingStageBase *self)
{
   boost::python::list result;
   OSG::MFUnrecLightPtr const * mf_data = self->getMFLights();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append(OSG::Light::ObjRecPtr((*mf_data)[i]));
   }
   return result;
}

void register_DeferredShadingStageBase_class(){

    { //::OSG::DeferredShadingStageBase
        typedef bp::class_< OSG::DeferredShadingStageBase, bp::bases< ::OSG::SimpleStage >, boost::noncopyable > DeferredShadingStageBase_exposer_t;
        DeferredShadingStageBase_exposer_t DeferredShadingStageBase_exposer = DeferredShadingStageBase_exposer_t( "DeferredShadingStageBase", bp::no_init );
        bp::scope DeferredShadingStageBase_scope( DeferredShadingStageBase_exposer );
        bp::scope().attr("PixelFormatsFieldId") = (int)OSG::DeferredShadingStageBase::PixelFormatsFieldId;
        bp::scope().attr("PixelTypesFieldId") = (int)OSG::DeferredShadingStageBase::PixelTypesFieldId;
        bp::scope().attr("GBufferProgramFieldId") = (int)OSG::DeferredShadingStageBase::GBufferProgramFieldId;
        bp::scope().attr("AmbientProgramFieldId") = (int)OSG::DeferredShadingStageBase::AmbientProgramFieldId;
        bp::scope().attr("LightProgramsFieldId") = (int)OSG::DeferredShadingStageBase::LightProgramsFieldId;
        bp::scope().attr("LightsFieldId") = (int)OSG::DeferredShadingStageBase::LightsFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::DeferredShadingStageBase::NextFieldId;
        { //::OSG::DeferredShadingStageBase::assignLightPrograms
        
            typedef void ( ::OSG::DeferredShadingStageBase::*assignLightPrograms_function_type )( ::OSG::MFUnrecShaderProgramChunkPtr const & ) ;
            
            DeferredShadingStageBase_exposer.def( 
                "assignLightPrograms"
                , assignLightPrograms_function_type( &::OSG::DeferredShadingStageBase::assignLightPrograms )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DeferredShadingStageBase::assignLights
        
            typedef void ( ::OSG::DeferredShadingStageBase::*assignLights_function_type )( ::OSG::MFUnrecLightPtr const & ) ;
            
            DeferredShadingStageBase_exposer.def( 
                "assignLights"
                , assignLights_function_type( &::OSG::DeferredShadingStageBase::assignLights )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DeferredShadingStageBase::clearLightPrograms
        
            typedef void ( ::OSG::DeferredShadingStageBase::*clearLightPrograms_function_type )(  ) ;
            
            DeferredShadingStageBase_exposer.def( 
                "clearLightPrograms"
                , clearLightPrograms_function_type( &::OSG::DeferredShadingStageBase::clearLightPrograms ) );
        
        }
        { //::OSG::DeferredShadingStageBase::clearLights
        
            typedef void ( ::OSG::DeferredShadingStageBase::*clearLights_function_type )(  ) ;
            
            DeferredShadingStageBase_exposer.def( 
                "clearLights"
                , clearLights_function_type( &::OSG::DeferredShadingStageBase::clearLights ) );
        
        }
        { //::OSG::DeferredShadingStageBase::copyFromBin
        
            typedef void ( ::OSG::DeferredShadingStageBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            DeferredShadingStageBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::DeferredShadingStageBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::DeferredShadingStageBase::copyToBin
        
            typedef void ( ::OSG::DeferredShadingStageBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            DeferredShadingStageBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::DeferredShadingStageBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::DeferredShadingStageBase::create
        
            typedef ::OSG::DeferredShadingStageTransitPtr ( *create_function_type )(  );
            
            DeferredShadingStageBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::DeferredShadingStageBase::create ) );
        
        }
        { //::OSG::DeferredShadingStageBase::createDependent
        
            typedef ::OSG::DeferredShadingStageTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            DeferredShadingStageBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::DeferredShadingStageBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::DeferredShadingStageBase::createLocal
        
            typedef ::OSG::DeferredShadingStageTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            DeferredShadingStageBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::DeferredShadingStageBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::DeferredShadingStageBase::getAmbientProgram
        
            typedef ::OSG::ShaderProgramChunk * ( ::OSG::DeferredShadingStageBase::*getAmbientProgram_function_type )(  ) const;
            
            DeferredShadingStageBase_exposer.def( 
                "getAmbientProgram"
                , getAmbientProgram_function_type( &::OSG::DeferredShadingStageBase::getAmbientProgram )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DeferredShadingStageBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::DeferredShadingStageBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            DeferredShadingStageBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::DeferredShadingStageBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::DeferredShadingStageBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            DeferredShadingStageBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::DeferredShadingStageBase::getClassGroupId ) );
        
        }
        { //::OSG::DeferredShadingStageBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            DeferredShadingStageBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::DeferredShadingStageBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::DeferredShadingStageBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            DeferredShadingStageBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::DeferredShadingStageBase::getClassTypeId ) );
        
        }
        { //::OSG::DeferredShadingStageBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::DeferredShadingStageBase::*getContainerSize_function_type )(  ) const;
            
            DeferredShadingStageBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::DeferredShadingStageBase::getContainerSize ) );
        
        }
        { //::OSG::DeferredShadingStageBase::getGBufferProgram
        
            typedef ::OSG::ShaderProgramChunk * ( ::OSG::DeferredShadingStageBase::*getGBufferProgram_function_type )(  ) const;
            
            DeferredShadingStageBase_exposer.def( 
                "getGBufferProgram"
                , getGBufferProgram_function_type( &::OSG::DeferredShadingStageBase::getGBufferProgram )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DeferredShadingStageBase::getLightPrograms
        
            typedef ::OSG::ShaderProgramChunk * ( ::OSG::DeferredShadingStageBase::*getLightPrograms_function_type )( ::OSG::UInt32 const ) const;
            
            DeferredShadingStageBase_exposer.def( 
                "getLightPrograms"
                , getLightPrograms_function_type( &::OSG::DeferredShadingStageBase::getLightPrograms )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DeferredShadingStageBase::getLights
        
            typedef ::OSG::Light * ( ::OSG::DeferredShadingStageBase::*getLights_function_type )( ::OSG::UInt32 const ) const;
            
            DeferredShadingStageBase_exposer.def( 
                "getLights"
                , getLights_function_type( &::OSG::DeferredShadingStageBase::getLights )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DeferredShadingStageBase::getPixelFormats
        
            typedef ::GLenum const & ( ::OSG::DeferredShadingStageBase::*getPixelFormats_function_type )( ::OSG::UInt32 const ) const;
            
            DeferredShadingStageBase_exposer.def( 
                "getPixelFormats"
                , getPixelFormats_function_type( &::OSG::DeferredShadingStageBase::getPixelFormats )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::DeferredShadingStageBase::getPixelTypes
        
            typedef ::GLenum const & ( ::OSG::DeferredShadingStageBase::*getPixelTypes_function_type )( ::OSG::UInt32 const ) const;
            
            DeferredShadingStageBase_exposer.def( 
                "getPixelTypes"
                , getPixelTypes_function_type( &::OSG::DeferredShadingStageBase::getPixelTypes )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::DeferredShadingStageBase::getSFAmbientProgram
        
            typedef ::OSG::SFUnrecShaderProgramChunkPtr const * ( ::OSG::DeferredShadingStageBase::*getSFAmbientProgram_function_type )(  ) const;
            
            DeferredShadingStageBase_exposer.def( 
                "getSFAmbientProgram"
                , getSFAmbientProgram_function_type( &::OSG::DeferredShadingStageBase::getSFAmbientProgram )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DeferredShadingStageBase::getSFGBufferProgram
        
            typedef ::OSG::SFUnrecShaderProgramChunkPtr const * ( ::OSG::DeferredShadingStageBase::*getSFGBufferProgram_function_type )(  ) const;
            
            DeferredShadingStageBase_exposer.def( 
                "getSFGBufferProgram"
                , getSFGBufferProgram_function_type( &::OSG::DeferredShadingStageBase::getSFGBufferProgram )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DeferredShadingStageBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::DeferredShadingStageBase::*getType_function_type )(  ) ;
            
            DeferredShadingStageBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::DeferredShadingStageBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DeferredShadingStageBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::DeferredShadingStageBase::*getType_function_type )(  ) const;
            
            DeferredShadingStageBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::DeferredShadingStageBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DeferredShadingStageBase::pushToLightPrograms
        
            typedef void ( ::OSG::DeferredShadingStageBase::*pushToLightPrograms_function_type )( ::OSG::ShaderProgramChunk * const ) ;
            
            DeferredShadingStageBase_exposer.def( 
                "pushToLightPrograms"
                , pushToLightPrograms_function_type( &::OSG::DeferredShadingStageBase::pushToLightPrograms )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DeferredShadingStageBase::pushToLights
        
            typedef void ( ::OSG::DeferredShadingStageBase::*pushToLights_function_type )( ::OSG::Light * const ) ;
            
            DeferredShadingStageBase_exposer.def( 
                "pushToLights"
                , pushToLights_function_type( &::OSG::DeferredShadingStageBase::pushToLights )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DeferredShadingStageBase::removeFromLightPrograms
        
            typedef void ( ::OSG::DeferredShadingStageBase::*removeFromLightPrograms_function_type )( ::OSG::UInt32 ) ;
            
            DeferredShadingStageBase_exposer.def( 
                "removeFromLightPrograms"
                , removeFromLightPrograms_function_type( &::OSG::DeferredShadingStageBase::removeFromLightPrograms )
                , ( bp::arg("uiIndex") ) );
        
        }
        { //::OSG::DeferredShadingStageBase::removeFromLights
        
            typedef void ( ::OSG::DeferredShadingStageBase::*removeFromLights_function_type )( ::OSG::UInt32 ) ;
            
            DeferredShadingStageBase_exposer.def( 
                "removeFromLights"
                , removeFromLights_function_type( &::OSG::DeferredShadingStageBase::removeFromLights )
                , ( bp::arg("uiIndex") ) );
        
        }
        { //::OSG::DeferredShadingStageBase::removeObjFromLightPrograms
        
            typedef void ( ::OSG::DeferredShadingStageBase::*removeObjFromLightPrograms_function_type )( ::OSG::ShaderProgramChunk * const ) ;
            
            DeferredShadingStageBase_exposer.def( 
                "removeObjFromLightPrograms"
                , removeObjFromLightPrograms_function_type( &::OSG::DeferredShadingStageBase::removeObjFromLightPrograms )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DeferredShadingStageBase::removeObjFromLights
        
            typedef void ( ::OSG::DeferredShadingStageBase::*removeObjFromLights_function_type )( ::OSG::Light * const ) ;
            
            DeferredShadingStageBase_exposer.def( 
                "removeObjFromLights"
                , removeObjFromLights_function_type( &::OSG::DeferredShadingStageBase::removeObjFromLights )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DeferredShadingStageBase::setAmbientProgram
        
            typedef void ( ::OSG::DeferredShadingStageBase::*setAmbientProgram_function_type )( ::OSG::ShaderProgramChunk * const ) ;
            
            DeferredShadingStageBase_exposer.def( 
                "setAmbientProgram"
                , setAmbientProgram_function_type( &::OSG::DeferredShadingStageBase::setAmbientProgram )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DeferredShadingStageBase::setGBufferProgram
        
            typedef void ( ::OSG::DeferredShadingStageBase::*setGBufferProgram_function_type )( ::OSG::ShaderProgramChunk * const ) ;
            
            DeferredShadingStageBase_exposer.def( 
                "setGBufferProgram"
                , setGBufferProgram_function_type( &::OSG::DeferredShadingStageBase::setGBufferProgram )
                , ( bp::arg("value") ) );
        
        }
        DeferredShadingStageBase_exposer.staticmethod( "create" );
        DeferredShadingStageBase_exposer.staticmethod( "createDependent" );
        DeferredShadingStageBase_exposer.staticmethod( "createLocal" );
        DeferredShadingStageBase_exposer.staticmethod( "getClassGroupId" );
        DeferredShadingStageBase_exposer.staticmethod( "getClassType" );
        DeferredShadingStageBase_exposer.staticmethod( "getClassTypeId" );
        DeferredShadingStageBase_exposer.def("getMFPixelFormats",DeferredShadingStageBase_getMFPixelFormats);
        DeferredShadingStageBase_exposer.def("getMFPixelTypes",DeferredShadingStageBase_getMFPixelTypes);
        DeferredShadingStageBase_exposer.def("getMFLightPrograms",DeferredShadingStageBase_getMFLightPrograms);
        DeferredShadingStageBase_exposer.def("getMFLights",DeferredShadingStageBase_getMFLights);
    }

}
