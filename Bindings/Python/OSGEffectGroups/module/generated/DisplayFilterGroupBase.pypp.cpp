// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGEffectGroups_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "DisplayFilterGroupBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_DisplayFilterGroupBase_class(){

    { //::OSG::DisplayFilterGroupBase
        typedef bp::class_< OSG::DisplayFilterGroupBase, bp::bases< ::OSG::AttachmentContainer >, boost::noncopyable > DisplayFilterGroupBase_exposer_t;
        DisplayFilterGroupBase_exposer_t DisplayFilterGroupBase_exposer = DisplayFilterGroupBase_exposer_t( "DisplayFilterGroupBase", bp::no_init );
        bp::scope DisplayFilterGroupBase_scope( DisplayFilterGroupBase_exposer );
        bp::scope().attr("CalibrationPatternFilterFieldId") = (int)OSG::DisplayFilterGroupBase::CalibrationPatternFilterFieldId;
        bp::scope().attr("ResolutionFilterFieldId") = (int)OSG::DisplayFilterGroupBase::ResolutionFilterFieldId;
        bp::scope().attr("ColorFilterFieldId") = (int)OSG::DisplayFilterGroupBase::ColorFilterFieldId;
        bp::scope().attr("DistortionFilterFieldId") = (int)OSG::DisplayFilterGroupBase::DistortionFilterFieldId;
        bp::scope().attr("DrawerIdFieldId") = (int)OSG::DisplayFilterGroupBase::DrawerIdFieldId;
        bp::scope().attr("DrawableIdFieldId") = (int)OSG::DisplayFilterGroupBase::DrawableIdFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::DisplayFilterGroupBase::NextFieldId;
        { //::OSG::DisplayFilterGroupBase::copyFromBin
        
            typedef void ( ::OSG::DisplayFilterGroupBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            DisplayFilterGroupBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::DisplayFilterGroupBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::DisplayFilterGroupBase::copyToBin
        
            typedef void ( ::OSG::DisplayFilterGroupBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            DisplayFilterGroupBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::DisplayFilterGroupBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::DisplayFilterGroupBase::create
        
            typedef ::OSG::DisplayFilterGroupTransitPtr ( *create_function_type )(  );
            
            DisplayFilterGroupBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::DisplayFilterGroupBase::create ) );
        
        }
        { //::OSG::DisplayFilterGroupBase::createDependent
        
            typedef ::OSG::DisplayFilterGroupTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            DisplayFilterGroupBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::DisplayFilterGroupBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::DisplayFilterGroupBase::createLocal
        
            typedef ::OSG::DisplayFilterGroupTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            DisplayFilterGroupBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::DisplayFilterGroupBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::DisplayFilterGroupBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::DisplayFilterGroupBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            DisplayFilterGroupBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::DisplayFilterGroupBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::DisplayFilterGroupBase::getCalibrationPatternFilter
        
            typedef ::OSG::CalibrationPatternFilter * ( ::OSG::DisplayFilterGroupBase::*getCalibrationPatternFilter_function_type )(  ) const;
            
            DisplayFilterGroupBase_exposer.def( 
                "getCalibrationPatternFilter"
                , getCalibrationPatternFilter_function_type( &::OSG::DisplayFilterGroupBase::getCalibrationPatternFilter )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DisplayFilterGroupBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            DisplayFilterGroupBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::DisplayFilterGroupBase::getClassGroupId ) );
        
        }
        { //::OSG::DisplayFilterGroupBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            DisplayFilterGroupBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::DisplayFilterGroupBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::DisplayFilterGroupBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            DisplayFilterGroupBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::DisplayFilterGroupBase::getClassTypeId ) );
        
        }
        { //::OSG::DisplayFilterGroupBase::getColorFilter
        
            typedef ::OSG::ColorDisplayFilter * ( ::OSG::DisplayFilterGroupBase::*getColorFilter_function_type )(  ) const;
            
            DisplayFilterGroupBase_exposer.def( 
                "getColorFilter"
                , getColorFilter_function_type( &::OSG::DisplayFilterGroupBase::getColorFilter )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DisplayFilterGroupBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::DisplayFilterGroupBase::*getContainerSize_function_type )(  ) const;
            
            DisplayFilterGroupBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::DisplayFilterGroupBase::getContainerSize ) );
        
        }
        { //::OSG::DisplayFilterGroupBase::getDistortionFilter
        
            typedef ::OSG::DistortionDisplayFilter * ( ::OSG::DisplayFilterGroupBase::*getDistortionFilter_function_type )(  ) const;
            
            DisplayFilterGroupBase_exposer.def( 
                "getDistortionFilter"
                , getDistortionFilter_function_type( &::OSG::DisplayFilterGroupBase::getDistortionFilter )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DisplayFilterGroupBase::getDrawableId
        
            typedef ::OSG::Int32 ( ::OSG::DisplayFilterGroupBase::*getDrawableId_function_type )(  ) const;
            
            DisplayFilterGroupBase_exposer.def( 
                "getDrawableId"
                , getDrawableId_function_type( &::OSG::DisplayFilterGroupBase::getDrawableId ) );
        
        }
        { //::OSG::DisplayFilterGroupBase::getDrawerId
        
            typedef ::OSG::Int32 ( ::OSG::DisplayFilterGroupBase::*getDrawerId_function_type )(  ) const;
            
            DisplayFilterGroupBase_exposer.def( 
                "getDrawerId"
                , getDrawerId_function_type( &::OSG::DisplayFilterGroupBase::getDrawerId ) );
        
        }
        { //::OSG::DisplayFilterGroupBase::getResolutionFilter
        
            typedef ::OSG::ResolutionDisplayFilter * ( ::OSG::DisplayFilterGroupBase::*getResolutionFilter_function_type )(  ) const;
            
            DisplayFilterGroupBase_exposer.def( 
                "getResolutionFilter"
                , getResolutionFilter_function_type( &::OSG::DisplayFilterGroupBase::getResolutionFilter )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DisplayFilterGroupBase::getSFCalibrationPatternFilter
        
            typedef ::OSG::SFUnrecCalibrationPatternFilterPtr const * ( ::OSG::DisplayFilterGroupBase::*getSFCalibrationPatternFilter_function_type )(  ) const;
            
            DisplayFilterGroupBase_exposer.def( 
                "getSFCalibrationPatternFilter"
                , getSFCalibrationPatternFilter_function_type( &::OSG::DisplayFilterGroupBase::getSFCalibrationPatternFilter )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DisplayFilterGroupBase::getSFColorFilter
        
            typedef ::OSG::SFUnrecColorDisplayFilterPtr const * ( ::OSG::DisplayFilterGroupBase::*getSFColorFilter_function_type )(  ) const;
            
            DisplayFilterGroupBase_exposer.def( 
                "getSFColorFilter"
                , getSFColorFilter_function_type( &::OSG::DisplayFilterGroupBase::getSFColorFilter )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DisplayFilterGroupBase::getSFDistortionFilter
        
            typedef ::OSG::SFUnrecDistortionDisplayFilterPtr const * ( ::OSG::DisplayFilterGroupBase::*getSFDistortionFilter_function_type )(  ) const;
            
            DisplayFilterGroupBase_exposer.def( 
                "getSFDistortionFilter"
                , getSFDistortionFilter_function_type( &::OSG::DisplayFilterGroupBase::getSFDistortionFilter )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DisplayFilterGroupBase::getSFDrawableId
        
            typedef ::OSG::SFInt32 const * ( ::OSG::DisplayFilterGroupBase::*getSFDrawableId_function_type )(  ) const;
            
            DisplayFilterGroupBase_exposer.def( 
                "getSFDrawableId"
                , getSFDrawableId_function_type( &::OSG::DisplayFilterGroupBase::getSFDrawableId )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DisplayFilterGroupBase::getSFDrawerId
        
            typedef ::OSG::SFInt32 const * ( ::OSG::DisplayFilterGroupBase::*getSFDrawerId_function_type )(  ) const;
            
            DisplayFilterGroupBase_exposer.def( 
                "getSFDrawerId"
                , getSFDrawerId_function_type( &::OSG::DisplayFilterGroupBase::getSFDrawerId )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DisplayFilterGroupBase::getSFResolutionFilter
        
            typedef ::OSG::SFUnrecResolutionDisplayFilterPtr const * ( ::OSG::DisplayFilterGroupBase::*getSFResolutionFilter_function_type )(  ) const;
            
            DisplayFilterGroupBase_exposer.def( 
                "getSFResolutionFilter"
                , getSFResolutionFilter_function_type( &::OSG::DisplayFilterGroupBase::getSFResolutionFilter )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DisplayFilterGroupBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::DisplayFilterGroupBase::*getType_function_type )(  ) ;
            
            DisplayFilterGroupBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::DisplayFilterGroupBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DisplayFilterGroupBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::DisplayFilterGroupBase::*getType_function_type )(  ) const;
            
            DisplayFilterGroupBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::DisplayFilterGroupBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DisplayFilterGroupBase::setCalibrationPatternFilter
        
            typedef void ( ::OSG::DisplayFilterGroupBase::*setCalibrationPatternFilter_function_type )( ::OSG::CalibrationPatternFilter * const ) ;
            
            DisplayFilterGroupBase_exposer.def( 
                "setCalibrationPatternFilter"
                , setCalibrationPatternFilter_function_type( &::OSG::DisplayFilterGroupBase::setCalibrationPatternFilter )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DisplayFilterGroupBase::setColorFilter
        
            typedef void ( ::OSG::DisplayFilterGroupBase::*setColorFilter_function_type )( ::OSG::ColorDisplayFilter * const ) ;
            
            DisplayFilterGroupBase_exposer.def( 
                "setColorFilter"
                , setColorFilter_function_type( &::OSG::DisplayFilterGroupBase::setColorFilter )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DisplayFilterGroupBase::setDistortionFilter
        
            typedef void ( ::OSG::DisplayFilterGroupBase::*setDistortionFilter_function_type )( ::OSG::DistortionDisplayFilter * const ) ;
            
            DisplayFilterGroupBase_exposer.def( 
                "setDistortionFilter"
                , setDistortionFilter_function_type( &::OSG::DisplayFilterGroupBase::setDistortionFilter )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DisplayFilterGroupBase::setDrawableId
        
            typedef void ( ::OSG::DisplayFilterGroupBase::*setDrawableId_function_type )( ::OSG::Int32 const ) ;
            
            DisplayFilterGroupBase_exposer.def( 
                "setDrawableId"
                , setDrawableId_function_type( &::OSG::DisplayFilterGroupBase::setDrawableId )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DisplayFilterGroupBase::setDrawerId
        
            typedef void ( ::OSG::DisplayFilterGroupBase::*setDrawerId_function_type )( ::OSG::Int32 const ) ;
            
            DisplayFilterGroupBase_exposer.def( 
                "setDrawerId"
                , setDrawerId_function_type( &::OSG::DisplayFilterGroupBase::setDrawerId )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DisplayFilterGroupBase::setResolutionFilter
        
            typedef void ( ::OSG::DisplayFilterGroupBase::*setResolutionFilter_function_type )( ::OSG::ResolutionDisplayFilter * const ) ;
            
            DisplayFilterGroupBase_exposer.def( 
                "setResolutionFilter"
                , setResolutionFilter_function_type( &::OSG::DisplayFilterGroupBase::setResolutionFilter )
                , ( bp::arg("value") ) );
        
        }
        DisplayFilterGroupBase_exposer.staticmethod( "create" );
        DisplayFilterGroupBase_exposer.staticmethod( "createDependent" );
        DisplayFilterGroupBase_exposer.staticmethod( "createLocal" );
        DisplayFilterGroupBase_exposer.staticmethod( "getClassGroupId" );
        DisplayFilterGroupBase_exposer.staticmethod( "getClassType" );
        DisplayFilterGroupBase_exposer.staticmethod( "getClassTypeId" );
    }

}
