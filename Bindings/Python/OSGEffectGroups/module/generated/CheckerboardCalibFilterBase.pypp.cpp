// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGEffectGroups_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "CheckerboardCalibFilterBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_CheckerboardCalibFilterBase_class(){

    { //::OSG::CheckerboardCalibFilterBase
        typedef bp::class_< OSG::CheckerboardCalibFilterBase, bp::bases< OSG::CalibrationPatternFilter >, boost::noncopyable > CheckerboardCalibFilterBase_exposer_t;
        CheckerboardCalibFilterBase_exposer_t CheckerboardCalibFilterBase_exposer = CheckerboardCalibFilterBase_exposer_t( "CheckerboardCalibFilterBase", bp::no_init );
        bp::scope CheckerboardCalibFilterBase_scope( CheckerboardCalibFilterBase_exposer );
        bp::scope().attr("ColorBlackFieldId") = (int)OSG::CheckerboardCalibFilterBase::ColorBlackFieldId;
        bp::scope().attr("ColorWhiteFieldId") = (int)OSG::CheckerboardCalibFilterBase::ColorWhiteFieldId;
        bp::scope().attr("ResolutionFieldId") = (int)OSG::CheckerboardCalibFilterBase::ResolutionFieldId;
        bp::scope().attr("CenterFieldId") = (int)OSG::CheckerboardCalibFilterBase::CenterFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::CheckerboardCalibFilterBase::NextFieldId;
        { //::OSG::CheckerboardCalibFilterBase::copyFromBin
        
            typedef void ( ::OSG::CheckerboardCalibFilterBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            CheckerboardCalibFilterBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::CheckerboardCalibFilterBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::CheckerboardCalibFilterBase::copyToBin
        
            typedef void ( ::OSG::CheckerboardCalibFilterBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            CheckerboardCalibFilterBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::CheckerboardCalibFilterBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::CheckerboardCalibFilterBase::create
        
            typedef ::OSG::CheckerboardCalibFilterTransitPtr ( *create_function_type )(  );
            
            CheckerboardCalibFilterBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::CheckerboardCalibFilterBase::create ) );
        
        }
        { //::OSG::CheckerboardCalibFilterBase::createDependent
        
            typedef ::OSG::CheckerboardCalibFilterTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            CheckerboardCalibFilterBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::CheckerboardCalibFilterBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::CheckerboardCalibFilterBase::createLocal
        
            typedef ::OSG::CheckerboardCalibFilterTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            CheckerboardCalibFilterBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::CheckerboardCalibFilterBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::CheckerboardCalibFilterBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::CheckerboardCalibFilterBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            CheckerboardCalibFilterBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::CheckerboardCalibFilterBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::CheckerboardCalibFilterBase::getCenter
        
            typedef bool ( ::OSG::CheckerboardCalibFilterBase::*getCenter_function_type )(  ) const;
            
            CheckerboardCalibFilterBase_exposer.def( 
                "getCenter"
                , getCenter_function_type( &::OSG::CheckerboardCalibFilterBase::getCenter ) );
        
        }
        { //::OSG::CheckerboardCalibFilterBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            CheckerboardCalibFilterBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::CheckerboardCalibFilterBase::getClassGroupId ) );
        
        }
        { //::OSG::CheckerboardCalibFilterBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            CheckerboardCalibFilterBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::CheckerboardCalibFilterBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::CheckerboardCalibFilterBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            CheckerboardCalibFilterBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::CheckerboardCalibFilterBase::getClassTypeId ) );
        
        }
        { //::OSG::CheckerboardCalibFilterBase::getColorBlack
        
            typedef ::OSG::Color3f const & ( ::OSG::CheckerboardCalibFilterBase::*getColorBlack_function_type )(  ) const;
            
            CheckerboardCalibFilterBase_exposer.def( 
                "getColorBlack"
                , getColorBlack_function_type( &::OSG::CheckerboardCalibFilterBase::getColorBlack )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::CheckerboardCalibFilterBase::getColorWhite
        
            typedef ::OSG::Color3f const & ( ::OSG::CheckerboardCalibFilterBase::*getColorWhite_function_type )(  ) const;
            
            CheckerboardCalibFilterBase_exposer.def( 
                "getColorWhite"
                , getColorWhite_function_type( &::OSG::CheckerboardCalibFilterBase::getColorWhite )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::CheckerboardCalibFilterBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::CheckerboardCalibFilterBase::*getContainerSize_function_type )(  ) const;
            
            CheckerboardCalibFilterBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::CheckerboardCalibFilterBase::getContainerSize ) );
        
        }
        { //::OSG::CheckerboardCalibFilterBase::getResolution
        
            typedef ::OSG::UInt32 ( ::OSG::CheckerboardCalibFilterBase::*getResolution_function_type )(  ) const;
            
            CheckerboardCalibFilterBase_exposer.def( 
                "getResolution"
                , getResolution_function_type( &::OSG::CheckerboardCalibFilterBase::getResolution ) );
        
        }
        { //::OSG::CheckerboardCalibFilterBase::getSFCenter
        
            typedef ::OSG::SFBool const * ( ::OSG::CheckerboardCalibFilterBase::*getSFCenter_function_type )(  ) const;
            
            CheckerboardCalibFilterBase_exposer.def( 
                "getSFCenter"
                , getSFCenter_function_type( &::OSG::CheckerboardCalibFilterBase::getSFCenter )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CheckerboardCalibFilterBase::getSFColorBlack
        
            typedef ::OSG::SFColor3f const * ( ::OSG::CheckerboardCalibFilterBase::*getSFColorBlack_function_type )(  ) const;
            
            CheckerboardCalibFilterBase_exposer.def( 
                "getSFColorBlack"
                , getSFColorBlack_function_type( &::OSG::CheckerboardCalibFilterBase::getSFColorBlack )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CheckerboardCalibFilterBase::getSFColorWhite
        
            typedef ::OSG::SFColor3f const * ( ::OSG::CheckerboardCalibFilterBase::*getSFColorWhite_function_type )(  ) const;
            
            CheckerboardCalibFilterBase_exposer.def( 
                "getSFColorWhite"
                , getSFColorWhite_function_type( &::OSG::CheckerboardCalibFilterBase::getSFColorWhite )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CheckerboardCalibFilterBase::getSFResolution
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::CheckerboardCalibFilterBase::*getSFResolution_function_type )(  ) const;
            
            CheckerboardCalibFilterBase_exposer.def( 
                "getSFResolution"
                , getSFResolution_function_type( &::OSG::CheckerboardCalibFilterBase::getSFResolution )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CheckerboardCalibFilterBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::CheckerboardCalibFilterBase::*getType_function_type )(  ) ;
            
            CheckerboardCalibFilterBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::CheckerboardCalibFilterBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CheckerboardCalibFilterBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::CheckerboardCalibFilterBase::*getType_function_type )(  ) const;
            
            CheckerboardCalibFilterBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::CheckerboardCalibFilterBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CheckerboardCalibFilterBase::setCenter
        
            typedef void ( ::OSG::CheckerboardCalibFilterBase::*setCenter_function_type )( bool const ) ;
            
            CheckerboardCalibFilterBase_exposer.def( 
                "setCenter"
                , setCenter_function_type( &::OSG::CheckerboardCalibFilterBase::setCenter )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CheckerboardCalibFilterBase::setColorBlack
        
            typedef void ( ::OSG::CheckerboardCalibFilterBase::*setColorBlack_function_type )( ::OSG::Color3f const & ) ;
            
            CheckerboardCalibFilterBase_exposer.def( 
                "setColorBlack"
                , setColorBlack_function_type( &::OSG::CheckerboardCalibFilterBase::setColorBlack )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CheckerboardCalibFilterBase::setColorWhite
        
            typedef void ( ::OSG::CheckerboardCalibFilterBase::*setColorWhite_function_type )( ::OSG::Color3f const & ) ;
            
            CheckerboardCalibFilterBase_exposer.def( 
                "setColorWhite"
                , setColorWhite_function_type( &::OSG::CheckerboardCalibFilterBase::setColorWhite )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CheckerboardCalibFilterBase::setResolution
        
            typedef void ( ::OSG::CheckerboardCalibFilterBase::*setResolution_function_type )( ::OSG::UInt32 const ) ;
            
            CheckerboardCalibFilterBase_exposer.def( 
                "setResolution"
                , setResolution_function_type( &::OSG::CheckerboardCalibFilterBase::setResolution )
                , ( bp::arg("value") ) );
        
        }
        CheckerboardCalibFilterBase_exposer.staticmethod( "create" );
        CheckerboardCalibFilterBase_exposer.staticmethod( "createDependent" );
        CheckerboardCalibFilterBase_exposer.staticmethod( "createLocal" );
        CheckerboardCalibFilterBase_exposer.staticmethod( "getClassGroupId" );
        CheckerboardCalibFilterBase_exposer.staticmethod( "getClassType" );
        CheckerboardCalibFilterBase_exposer.staticmethod( "getClassTypeId" );
    }

}
