// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGEffectGroups_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "HDRStageDataBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_HDRStageDataBase_class(){

    { //::OSG::HDRStageDataBase
        typedef bp::class_< OSG::HDRStageDataBase, bp::bases< ::OSG::StageData >, boost::noncopyable > HDRStageDataBase_exposer_t;
        HDRStageDataBase_exposer_t HDRStageDataBase_exposer = HDRStageDataBase_exposer_t( "HDRStageDataBase", bp::no_init );
        bp::scope HDRStageDataBase_scope( HDRStageDataBase_exposer );
        bp::scope().attr("ToneMappingMaterialFieldId") = (int)OSG::HDRStageDataBase::ToneMappingMaterialFieldId;
        bp::scope().attr("BlurRenderTargetFieldId") = (int)OSG::HDRStageDataBase::BlurRenderTargetFieldId;
        bp::scope().attr("BlurMaterialFieldId") = (int)OSG::HDRStageDataBase::BlurMaterialFieldId;
        bp::scope().attr("HBlurShaderFieldId") = (int)OSG::HDRStageDataBase::HBlurShaderFieldId;
        bp::scope().attr("VBlurShaderFieldId") = (int)OSG::HDRStageDataBase::VBlurShaderFieldId;
        bp::scope().attr("WidthFieldId") = (int)OSG::HDRStageDataBase::WidthFieldId;
        bp::scope().attr("HeightFieldId") = (int)OSG::HDRStageDataBase::HeightFieldId;
        bp::scope().attr("ShrinkRenderTargetFieldId") = (int)OSG::HDRStageDataBase::ShrinkRenderTargetFieldId;
        bp::scope().attr("ShrinkMaterialFieldId") = (int)OSG::HDRStageDataBase::ShrinkMaterialFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::HDRStageDataBase::NextFieldId;
        { //::OSG::HDRStageDataBase::copyFromBin
        
            typedef void ( ::OSG::HDRStageDataBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            HDRStageDataBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::HDRStageDataBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::HDRStageDataBase::copyToBin
        
            typedef void ( ::OSG::HDRStageDataBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            HDRStageDataBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::HDRStageDataBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::HDRStageDataBase::create
        
            typedef ::OSG::HDRStageDataTransitPtr ( *create_function_type )(  );
            
            HDRStageDataBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::HDRStageDataBase::create ) );
        
        }
        { //::OSG::HDRStageDataBase::createDependent
        
            typedef ::OSG::HDRStageDataTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            HDRStageDataBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::HDRStageDataBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::HDRStageDataBase::createLocal
        
            typedef ::OSG::HDRStageDataTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            HDRStageDataBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::HDRStageDataBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::HDRStageDataBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::HDRStageDataBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            HDRStageDataBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::HDRStageDataBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::HDRStageDataBase::getBlurMaterial
        
            typedef ::OSG::ChunkMaterial * ( ::OSG::HDRStageDataBase::*getBlurMaterial_function_type )(  ) const;
            
            HDRStageDataBase_exposer.def( 
                "getBlurMaterial"
                , getBlurMaterial_function_type( &::OSG::HDRStageDataBase::getBlurMaterial )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDRStageDataBase::getBlurRenderTarget
        
            typedef ::OSG::FrameBufferObject * ( ::OSG::HDRStageDataBase::*getBlurRenderTarget_function_type )(  ) const;
            
            HDRStageDataBase_exposer.def( 
                "getBlurRenderTarget"
                , getBlurRenderTarget_function_type( &::OSG::HDRStageDataBase::getBlurRenderTarget )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDRStageDataBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            HDRStageDataBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::HDRStageDataBase::getClassGroupId ) );
        
        }
        { //::OSG::HDRStageDataBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            HDRStageDataBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::HDRStageDataBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::HDRStageDataBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            HDRStageDataBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::HDRStageDataBase::getClassTypeId ) );
        
        }
        { //::OSG::HDRStageDataBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::HDRStageDataBase::*getContainerSize_function_type )(  ) const;
            
            HDRStageDataBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::HDRStageDataBase::getContainerSize ) );
        
        }
        { //::OSG::HDRStageDataBase::getHBlurShader
        
            typedef ::OSG::SimpleSHLChunk * ( ::OSG::HDRStageDataBase::*getHBlurShader_function_type )(  ) const;
            
            HDRStageDataBase_exposer.def( 
                "getHBlurShader"
                , getHBlurShader_function_type( &::OSG::HDRStageDataBase::getHBlurShader )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDRStageDataBase::getHeight
        
            typedef ::OSG::Int32 ( ::OSG::HDRStageDataBase::*getHeight_function_type )(  ) const;
            
            HDRStageDataBase_exposer.def( 
                "getHeight"
                , getHeight_function_type( &::OSG::HDRStageDataBase::getHeight ) );
        
        }
        { //::OSG::HDRStageDataBase::getSFBlurMaterial
        
            typedef ::OSG::SFUnrecChunkMaterialPtr const * ( ::OSG::HDRStageDataBase::*getSFBlurMaterial_function_type )(  ) const;
            
            HDRStageDataBase_exposer.def( 
                "getSFBlurMaterial"
                , getSFBlurMaterial_function_type( &::OSG::HDRStageDataBase::getSFBlurMaterial )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDRStageDataBase::getSFBlurRenderTarget
        
            typedef ::OSG::SFUnrecFrameBufferObjectPtr const * ( ::OSG::HDRStageDataBase::*getSFBlurRenderTarget_function_type )(  ) const;
            
            HDRStageDataBase_exposer.def( 
                "getSFBlurRenderTarget"
                , getSFBlurRenderTarget_function_type( &::OSG::HDRStageDataBase::getSFBlurRenderTarget )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDRStageDataBase::getSFHBlurShader
        
            typedef ::OSG::SFUnrecSimpleSHLChunkPtr const * ( ::OSG::HDRStageDataBase::*getSFHBlurShader_function_type )(  ) const;
            
            HDRStageDataBase_exposer.def( 
                "getSFHBlurShader"
                , getSFHBlurShader_function_type( &::OSG::HDRStageDataBase::getSFHBlurShader )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDRStageDataBase::getSFHeight
        
            typedef ::OSG::SFInt32 const * ( ::OSG::HDRStageDataBase::*getSFHeight_function_type )(  ) const;
            
            HDRStageDataBase_exposer.def( 
                "getSFHeight"
                , getSFHeight_function_type( &::OSG::HDRStageDataBase::getSFHeight )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDRStageDataBase::getSFShrinkMaterial
        
            typedef ::OSG::SFUnrecChunkMaterialPtr const * ( ::OSG::HDRStageDataBase::*getSFShrinkMaterial_function_type )(  ) const;
            
            HDRStageDataBase_exposer.def( 
                "getSFShrinkMaterial"
                , getSFShrinkMaterial_function_type( &::OSG::HDRStageDataBase::getSFShrinkMaterial )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDRStageDataBase::getSFShrinkRenderTarget
        
            typedef ::OSG::SFUnrecFrameBufferObjectPtr const * ( ::OSG::HDRStageDataBase::*getSFShrinkRenderTarget_function_type )(  ) const;
            
            HDRStageDataBase_exposer.def( 
                "getSFShrinkRenderTarget"
                , getSFShrinkRenderTarget_function_type( &::OSG::HDRStageDataBase::getSFShrinkRenderTarget )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDRStageDataBase::getSFToneMappingMaterial
        
            typedef ::OSG::SFUnrecChunkMaterialPtr const * ( ::OSG::HDRStageDataBase::*getSFToneMappingMaterial_function_type )(  ) const;
            
            HDRStageDataBase_exposer.def( 
                "getSFToneMappingMaterial"
                , getSFToneMappingMaterial_function_type( &::OSG::HDRStageDataBase::getSFToneMappingMaterial )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDRStageDataBase::getSFVBlurShader
        
            typedef ::OSG::SFUnrecSimpleSHLChunkPtr const * ( ::OSG::HDRStageDataBase::*getSFVBlurShader_function_type )(  ) const;
            
            HDRStageDataBase_exposer.def( 
                "getSFVBlurShader"
                , getSFVBlurShader_function_type( &::OSG::HDRStageDataBase::getSFVBlurShader )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDRStageDataBase::getSFWidth
        
            typedef ::OSG::SFInt32 const * ( ::OSG::HDRStageDataBase::*getSFWidth_function_type )(  ) const;
            
            HDRStageDataBase_exposer.def( 
                "getSFWidth"
                , getSFWidth_function_type( &::OSG::HDRStageDataBase::getSFWidth )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDRStageDataBase::getShrinkMaterial
        
            typedef ::OSG::ChunkMaterial * ( ::OSG::HDRStageDataBase::*getShrinkMaterial_function_type )(  ) const;
            
            HDRStageDataBase_exposer.def( 
                "getShrinkMaterial"
                , getShrinkMaterial_function_type( &::OSG::HDRStageDataBase::getShrinkMaterial )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDRStageDataBase::getShrinkRenderTarget
        
            typedef ::OSG::FrameBufferObject * ( ::OSG::HDRStageDataBase::*getShrinkRenderTarget_function_type )(  ) const;
            
            HDRStageDataBase_exposer.def( 
                "getShrinkRenderTarget"
                , getShrinkRenderTarget_function_type( &::OSG::HDRStageDataBase::getShrinkRenderTarget )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDRStageDataBase::getToneMappingMaterial
        
            typedef ::OSG::ChunkMaterial * ( ::OSG::HDRStageDataBase::*getToneMappingMaterial_function_type )(  ) const;
            
            HDRStageDataBase_exposer.def( 
                "getToneMappingMaterial"
                , getToneMappingMaterial_function_type( &::OSG::HDRStageDataBase::getToneMappingMaterial )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDRStageDataBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::HDRStageDataBase::*getType_function_type )(  ) ;
            
            HDRStageDataBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::HDRStageDataBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDRStageDataBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::HDRStageDataBase::*getType_function_type )(  ) const;
            
            HDRStageDataBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::HDRStageDataBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDRStageDataBase::getVBlurShader
        
            typedef ::OSG::SimpleSHLChunk * ( ::OSG::HDRStageDataBase::*getVBlurShader_function_type )(  ) const;
            
            HDRStageDataBase_exposer.def( 
                "getVBlurShader"
                , getVBlurShader_function_type( &::OSG::HDRStageDataBase::getVBlurShader )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDRStageDataBase::getWidth
        
            typedef ::OSG::Int32 ( ::OSG::HDRStageDataBase::*getWidth_function_type )(  ) const;
            
            HDRStageDataBase_exposer.def( 
                "getWidth"
                , getWidth_function_type( &::OSG::HDRStageDataBase::getWidth ) );
        
        }
        { //::OSG::HDRStageDataBase::setBlurMaterial
        
            typedef void ( ::OSG::HDRStageDataBase::*setBlurMaterial_function_type )( ::OSG::ChunkMaterial * const ) ;
            
            HDRStageDataBase_exposer.def( 
                "setBlurMaterial"
                , setBlurMaterial_function_type( &::OSG::HDRStageDataBase::setBlurMaterial )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDRStageDataBase::setBlurRenderTarget
        
            typedef void ( ::OSG::HDRStageDataBase::*setBlurRenderTarget_function_type )( ::OSG::FrameBufferObject * const ) ;
            
            HDRStageDataBase_exposer.def( 
                "setBlurRenderTarget"
                , setBlurRenderTarget_function_type( &::OSG::HDRStageDataBase::setBlurRenderTarget )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDRStageDataBase::setHBlurShader
        
            typedef void ( ::OSG::HDRStageDataBase::*setHBlurShader_function_type )( ::OSG::SimpleSHLChunk * const ) ;
            
            HDRStageDataBase_exposer.def( 
                "setHBlurShader"
                , setHBlurShader_function_type( &::OSG::HDRStageDataBase::setHBlurShader )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDRStageDataBase::setHeight
        
            typedef void ( ::OSG::HDRStageDataBase::*setHeight_function_type )( ::OSG::Int32 const ) ;
            
            HDRStageDataBase_exposer.def( 
                "setHeight"
                , setHeight_function_type( &::OSG::HDRStageDataBase::setHeight )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDRStageDataBase::setShrinkMaterial
        
            typedef void ( ::OSG::HDRStageDataBase::*setShrinkMaterial_function_type )( ::OSG::ChunkMaterial * const ) ;
            
            HDRStageDataBase_exposer.def( 
                "setShrinkMaterial"
                , setShrinkMaterial_function_type( &::OSG::HDRStageDataBase::setShrinkMaterial )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDRStageDataBase::setShrinkRenderTarget
        
            typedef void ( ::OSG::HDRStageDataBase::*setShrinkRenderTarget_function_type )( ::OSG::FrameBufferObject * const ) ;
            
            HDRStageDataBase_exposer.def( 
                "setShrinkRenderTarget"
                , setShrinkRenderTarget_function_type( &::OSG::HDRStageDataBase::setShrinkRenderTarget )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDRStageDataBase::setToneMappingMaterial
        
            typedef void ( ::OSG::HDRStageDataBase::*setToneMappingMaterial_function_type )( ::OSG::ChunkMaterial * const ) ;
            
            HDRStageDataBase_exposer.def( 
                "setToneMappingMaterial"
                , setToneMappingMaterial_function_type( &::OSG::HDRStageDataBase::setToneMappingMaterial )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDRStageDataBase::setVBlurShader
        
            typedef void ( ::OSG::HDRStageDataBase::*setVBlurShader_function_type )( ::OSG::SimpleSHLChunk * const ) ;
            
            HDRStageDataBase_exposer.def( 
                "setVBlurShader"
                , setVBlurShader_function_type( &::OSG::HDRStageDataBase::setVBlurShader )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDRStageDataBase::setWidth
        
            typedef void ( ::OSG::HDRStageDataBase::*setWidth_function_type )( ::OSG::Int32 const ) ;
            
            HDRStageDataBase_exposer.def( 
                "setWidth"
                , setWidth_function_type( &::OSG::HDRStageDataBase::setWidth )
                , ( bp::arg("value") ) );
        
        }
        HDRStageDataBase_exposer.staticmethod( "create" );
        HDRStageDataBase_exposer.staticmethod( "createDependent" );
        HDRStageDataBase_exposer.staticmethod( "createLocal" );
        HDRStageDataBase_exposer.staticmethod( "getClassGroupId" );
        HDRStageDataBase_exposer.staticmethod( "getClassType" );
        HDRStageDataBase_exposer.staticmethod( "getClassTypeId" );
    }

}
