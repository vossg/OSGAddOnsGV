// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGEffectGroups_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "HDR2StageDataBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

boost::python::list HDR2StageDataBase_getMFScaleMaterial(OSG::HDR2StageDataBase *self)
{
   boost::python::list result;
   OSG::MFUnrecChunkMaterialPtr const * mf_data = self->getMFScaleMaterial();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append(OSG::ChunkMaterial::ObjRecPtr((*mf_data)[i]));
   }
   return result;
}

boost::python::list HDR2StageDataBase_getMFAdaptLuminanceRenderTarget(OSG::HDR2StageDataBase *self)
{
   boost::python::list result;
   OSG::MFUnrecFrameBufferObjectPtr const * mf_data = self->getMFAdaptLuminanceRenderTarget();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append(OSG::FrameBufferObject::ObjRecPtr((*mf_data)[i]));
   }
   return result;
}

boost::python::list HDR2StageDataBase_getMFScaleRenderTarget(OSG::HDR2StageDataBase *self)
{
   boost::python::list result;
   OSG::MFUnrecFrameBufferObjectPtr const * mf_data = self->getMFScaleRenderTarget();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append(OSG::FrameBufferObject::ObjRecPtr((*mf_data)[i]));
   }
   return result;
}

void register_HDR2StageDataBase_class(){

    { //::OSG::HDR2StageDataBase
        typedef bp::class_< OSG::HDR2StageDataBase, bp::bases< ::OSG::StageData >, boost::noncopyable > HDR2StageDataBase_exposer_t;
        HDR2StageDataBase_exposer_t HDR2StageDataBase_exposer = HDR2StageDataBase_exposer_t( "HDR2StageDataBase", bp::no_init );
        bp::scope HDR2StageDataBase_scope( HDR2StageDataBase_exposer );
        bp::scope().attr("LuminanceMapShaderFieldId") = (int)OSG::HDR2StageDataBase::LuminanceMapShaderFieldId;
        bp::scope().attr("AdaptLuminanceShaderFieldId") = (int)OSG::HDR2StageDataBase::AdaptLuminanceShaderFieldId;
        bp::scope().attr("ThresholdShaderFieldId") = (int)OSG::HDR2StageDataBase::ThresholdShaderFieldId;
        bp::scope().attr("ScaleShaderFieldId") = (int)OSG::HDR2StageDataBase::ScaleShaderFieldId;
        bp::scope().attr("BlurHorizShaderFieldId") = (int)OSG::HDR2StageDataBase::BlurHorizShaderFieldId;
        bp::scope().attr("BlurVertShaderFieldId") = (int)OSG::HDR2StageDataBase::BlurVertShaderFieldId;
        bp::scope().attr("CompositeShaderFieldId") = (int)OSG::HDR2StageDataBase::CompositeShaderFieldId;
        bp::scope().attr("FinalScreenShaderFieldId") = (int)OSG::HDR2StageDataBase::FinalScreenShaderFieldId;
        bp::scope().attr("SharedTextureEnvChunkFieldId") = (int)OSG::HDR2StageDataBase::SharedTextureEnvChunkFieldId;
        bp::scope().attr("SharedMaterialChunkFieldId") = (int)OSG::HDR2StageDataBase::SharedMaterialChunkFieldId;
        bp::scope().attr("SceneMaterialFieldId") = (int)OSG::HDR2StageDataBase::SceneMaterialFieldId;
        bp::scope().attr("LuminanceMapMaterialFieldId") = (int)OSG::HDR2StageDataBase::LuminanceMapMaterialFieldId;
        bp::scope().attr("AdaptLuminanceMaterialFieldId") = (int)OSG::HDR2StageDataBase::AdaptLuminanceMaterialFieldId;
        bp::scope().attr("ThresholdMaterialFieldId") = (int)OSG::HDR2StageDataBase::ThresholdMaterialFieldId;
        bp::scope().attr("ScaleMaterialFieldId") = (int)OSG::HDR2StageDataBase::ScaleMaterialFieldId;
        bp::scope().attr("BlurHorizMaterialFieldId") = (int)OSG::HDR2StageDataBase::BlurHorizMaterialFieldId;
        bp::scope().attr("BlurVertMaterialFieldId") = (int)OSG::HDR2StageDataBase::BlurVertMaterialFieldId;
        bp::scope().attr("CompositeMaterialFieldId") = (int)OSG::HDR2StageDataBase::CompositeMaterialFieldId;
        bp::scope().attr("FinalScreenMaterialFieldId") = (int)OSG::HDR2StageDataBase::FinalScreenMaterialFieldId;
        bp::scope().attr("CurrentAdaptLuminanceIdxFieldId") = (int)OSG::HDR2StageDataBase::CurrentAdaptLuminanceIdxFieldId;
        bp::scope().attr("WidthFieldId") = (int)OSG::HDR2StageDataBase::WidthFieldId;
        bp::scope().attr("HeightFieldId") = (int)OSG::HDR2StageDataBase::HeightFieldId;
        bp::scope().attr("SceneRenderTargetFieldId") = (int)OSG::HDR2StageDataBase::SceneRenderTargetFieldId;
        bp::scope().attr("LuminanceRenderTargetFieldId") = (int)OSG::HDR2StageDataBase::LuminanceRenderTargetFieldId;
        bp::scope().attr("AdaptLuminanceRenderTargetFieldId") = (int)OSG::HDR2StageDataBase::AdaptLuminanceRenderTargetFieldId;
        bp::scope().attr("ThresholdRenderTargetFieldId") = (int)OSG::HDR2StageDataBase::ThresholdRenderTargetFieldId;
        bp::scope().attr("BlurHorizRenderTargetFieldId") = (int)OSG::HDR2StageDataBase::BlurHorizRenderTargetFieldId;
        bp::scope().attr("BlurVertRenderTargetFieldId") = (int)OSG::HDR2StageDataBase::BlurVertRenderTargetFieldId;
        bp::scope().attr("ScaleRenderTargetFieldId") = (int)OSG::HDR2StageDataBase::ScaleRenderTargetFieldId;
        bp::scope().attr("CompositeRenderTargetFieldId") = (int)OSG::HDR2StageDataBase::CompositeRenderTargetFieldId;
        bp::scope().attr("HdrShaderDataFieldId") = (int)OSG::HDR2StageDataBase::HdrShaderDataFieldId;
        bp::scope().attr("LastTimeFieldId") = (int)OSG::HDR2StageDataBase::LastTimeFieldId;
        bp::scope().attr("CurrentTimeFieldId") = (int)OSG::HDR2StageDataBase::CurrentTimeFieldId;
        bp::scope().attr("ZNearFieldId") = (int)OSG::HDR2StageDataBase::ZNearFieldId;
        bp::scope().attr("ZFarFieldId") = (int)OSG::HDR2StageDataBase::ZFarFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::HDR2StageDataBase::NextFieldId;
        { //::OSG::HDR2StageDataBase::assignAdaptLuminanceRenderTarget
        
            typedef void ( ::OSG::HDR2StageDataBase::*assignAdaptLuminanceRenderTarget_function_type )( ::OSG::MFUnrecFrameBufferObjectPtr const & ) ;
            
            HDR2StageDataBase_exposer.def( 
                "assignAdaptLuminanceRenderTarget"
                , assignAdaptLuminanceRenderTarget_function_type( &::OSG::HDR2StageDataBase::assignAdaptLuminanceRenderTarget )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::assignScaleMaterial
        
            typedef void ( ::OSG::HDR2StageDataBase::*assignScaleMaterial_function_type )( ::OSG::MFUnrecChunkMaterialPtr const & ) ;
            
            HDR2StageDataBase_exposer.def( 
                "assignScaleMaterial"
                , assignScaleMaterial_function_type( &::OSG::HDR2StageDataBase::assignScaleMaterial )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::assignScaleRenderTarget
        
            typedef void ( ::OSG::HDR2StageDataBase::*assignScaleRenderTarget_function_type )( ::OSG::MFUnrecFrameBufferObjectPtr const & ) ;
            
            HDR2StageDataBase_exposer.def( 
                "assignScaleRenderTarget"
                , assignScaleRenderTarget_function_type( &::OSG::HDR2StageDataBase::assignScaleRenderTarget )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::clearAdaptLuminanceRenderTarget
        
            typedef void ( ::OSG::HDR2StageDataBase::*clearAdaptLuminanceRenderTarget_function_type )(  ) ;
            
            HDR2StageDataBase_exposer.def( 
                "clearAdaptLuminanceRenderTarget"
                , clearAdaptLuminanceRenderTarget_function_type( &::OSG::HDR2StageDataBase::clearAdaptLuminanceRenderTarget ) );
        
        }
        { //::OSG::HDR2StageDataBase::clearScaleMaterial
        
            typedef void ( ::OSG::HDR2StageDataBase::*clearScaleMaterial_function_type )(  ) ;
            
            HDR2StageDataBase_exposer.def( 
                "clearScaleMaterial"
                , clearScaleMaterial_function_type( &::OSG::HDR2StageDataBase::clearScaleMaterial ) );
        
        }
        { //::OSG::HDR2StageDataBase::clearScaleRenderTarget
        
            typedef void ( ::OSG::HDR2StageDataBase::*clearScaleRenderTarget_function_type )(  ) ;
            
            HDR2StageDataBase_exposer.def( 
                "clearScaleRenderTarget"
                , clearScaleRenderTarget_function_type( &::OSG::HDR2StageDataBase::clearScaleRenderTarget ) );
        
        }
        { //::OSG::HDR2StageDataBase::copyFromBin
        
            typedef void ( ::OSG::HDR2StageDataBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            HDR2StageDataBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::HDR2StageDataBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::HDR2StageDataBase::copyToBin
        
            typedef void ( ::OSG::HDR2StageDataBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            HDR2StageDataBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::HDR2StageDataBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::HDR2StageDataBase::create
        
            typedef ::OSG::HDR2StageDataTransitPtr ( *create_function_type )(  );
            
            HDR2StageDataBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::HDR2StageDataBase::create ) );
        
        }
        { //::OSG::HDR2StageDataBase::createDependent
        
            typedef ::OSG::HDR2StageDataTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            HDR2StageDataBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::HDR2StageDataBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::HDR2StageDataBase::createLocal
        
            typedef ::OSG::HDR2StageDataTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            HDR2StageDataBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::HDR2StageDataBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::HDR2StageDataBase::getAdaptLuminanceMaterial
        
            typedef ::OSG::ChunkMaterial * ( ::OSG::HDR2StageDataBase::*getAdaptLuminanceMaterial_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getAdaptLuminanceMaterial"
                , getAdaptLuminanceMaterial_function_type( &::OSG::HDR2StageDataBase::getAdaptLuminanceMaterial )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getAdaptLuminanceRenderTarget
        
            typedef ::OSG::FrameBufferObject * ( ::OSG::HDR2StageDataBase::*getAdaptLuminanceRenderTarget_function_type )( ::OSG::UInt32 const ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getAdaptLuminanceRenderTarget"
                , getAdaptLuminanceRenderTarget_function_type( &::OSG::HDR2StageDataBase::getAdaptLuminanceRenderTarget )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getAdaptLuminanceShader
        
            typedef ::OSG::SimpleSHLChunk * ( ::OSG::HDR2StageDataBase::*getAdaptLuminanceShader_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getAdaptLuminanceShader"
                , getAdaptLuminanceShader_function_type( &::OSG::HDR2StageDataBase::getAdaptLuminanceShader )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::HDR2StageDataBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            HDR2StageDataBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::HDR2StageDataBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::HDR2StageDataBase::getBlurHorizMaterial
        
            typedef ::OSG::ChunkMaterial * ( ::OSG::HDR2StageDataBase::*getBlurHorizMaterial_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getBlurHorizMaterial"
                , getBlurHorizMaterial_function_type( &::OSG::HDR2StageDataBase::getBlurHorizMaterial )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getBlurHorizRenderTarget
        
            typedef ::OSG::FrameBufferObject * ( ::OSG::HDR2StageDataBase::*getBlurHorizRenderTarget_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getBlurHorizRenderTarget"
                , getBlurHorizRenderTarget_function_type( &::OSG::HDR2StageDataBase::getBlurHorizRenderTarget )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getBlurHorizShader
        
            typedef ::OSG::SimpleSHLChunk * ( ::OSG::HDR2StageDataBase::*getBlurHorizShader_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getBlurHorizShader"
                , getBlurHorizShader_function_type( &::OSG::HDR2StageDataBase::getBlurHorizShader )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getBlurVertMaterial
        
            typedef ::OSG::ChunkMaterial * ( ::OSG::HDR2StageDataBase::*getBlurVertMaterial_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getBlurVertMaterial"
                , getBlurVertMaterial_function_type( &::OSG::HDR2StageDataBase::getBlurVertMaterial )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getBlurVertRenderTarget
        
            typedef ::OSG::FrameBufferObject * ( ::OSG::HDR2StageDataBase::*getBlurVertRenderTarget_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getBlurVertRenderTarget"
                , getBlurVertRenderTarget_function_type( &::OSG::HDR2StageDataBase::getBlurVertRenderTarget )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getBlurVertShader
        
            typedef ::OSG::SimpleSHLChunk * ( ::OSG::HDR2StageDataBase::*getBlurVertShader_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getBlurVertShader"
                , getBlurVertShader_function_type( &::OSG::HDR2StageDataBase::getBlurVertShader )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            HDR2StageDataBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::HDR2StageDataBase::getClassGroupId ) );
        
        }
        { //::OSG::HDR2StageDataBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            HDR2StageDataBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::HDR2StageDataBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::HDR2StageDataBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            HDR2StageDataBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::HDR2StageDataBase::getClassTypeId ) );
        
        }
        { //::OSG::HDR2StageDataBase::getCompositeMaterial
        
            typedef ::OSG::ChunkMaterial * ( ::OSG::HDR2StageDataBase::*getCompositeMaterial_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getCompositeMaterial"
                , getCompositeMaterial_function_type( &::OSG::HDR2StageDataBase::getCompositeMaterial )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getCompositeRenderTarget
        
            typedef ::OSG::FrameBufferObject * ( ::OSG::HDR2StageDataBase::*getCompositeRenderTarget_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getCompositeRenderTarget"
                , getCompositeRenderTarget_function_type( &::OSG::HDR2StageDataBase::getCompositeRenderTarget )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getCompositeShader
        
            typedef ::OSG::SimpleSHLChunk * ( ::OSG::HDR2StageDataBase::*getCompositeShader_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getCompositeShader"
                , getCompositeShader_function_type( &::OSG::HDR2StageDataBase::getCompositeShader )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::HDR2StageDataBase::*getContainerSize_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::HDR2StageDataBase::getContainerSize ) );
        
        }
        { //::OSG::HDR2StageDataBase::getCurrentAdaptLuminanceIdx
        
            typedef ::OSG::UInt32 ( ::OSG::HDR2StageDataBase::*getCurrentAdaptLuminanceIdx_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getCurrentAdaptLuminanceIdx"
                , getCurrentAdaptLuminanceIdx_function_type( &::OSG::HDR2StageDataBase::getCurrentAdaptLuminanceIdx ) );
        
        }
        { //::OSG::HDR2StageDataBase::getCurrentTime
        
            typedef ::OSG::Real64 ( ::OSG::HDR2StageDataBase::*getCurrentTime_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getCurrentTime"
                , getCurrentTime_function_type( &::OSG::HDR2StageDataBase::getCurrentTime ) );
        
        }
        { //::OSG::HDR2StageDataBase::getFinalScreenMaterial
        
            typedef ::OSG::ChunkMaterial * ( ::OSG::HDR2StageDataBase::*getFinalScreenMaterial_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getFinalScreenMaterial"
                , getFinalScreenMaterial_function_type( &::OSG::HDR2StageDataBase::getFinalScreenMaterial )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getFinalScreenShader
        
            typedef ::OSG::SimpleSHLChunk * ( ::OSG::HDR2StageDataBase::*getFinalScreenShader_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getFinalScreenShader"
                , getFinalScreenShader_function_type( &::OSG::HDR2StageDataBase::getFinalScreenShader )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getHdrShaderData
        
            typedef ::OSG::UniformBufferObjStd140Chunk * ( ::OSG::HDR2StageDataBase::*getHdrShaderData_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getHdrShaderData"
                , getHdrShaderData_function_type( &::OSG::HDR2StageDataBase::getHdrShaderData )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getHeight
        
            typedef ::OSG::Int32 ( ::OSG::HDR2StageDataBase::*getHeight_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getHeight"
                , getHeight_function_type( &::OSG::HDR2StageDataBase::getHeight ) );
        
        }
        { //::OSG::HDR2StageDataBase::getLastTime
        
            typedef ::OSG::Real64 ( ::OSG::HDR2StageDataBase::*getLastTime_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getLastTime"
                , getLastTime_function_type( &::OSG::HDR2StageDataBase::getLastTime ) );
        
        }
        { //::OSG::HDR2StageDataBase::getLuminanceMapMaterial
        
            typedef ::OSG::ChunkMaterial * ( ::OSG::HDR2StageDataBase::*getLuminanceMapMaterial_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getLuminanceMapMaterial"
                , getLuminanceMapMaterial_function_type( &::OSG::HDR2StageDataBase::getLuminanceMapMaterial )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getLuminanceMapShader
        
            typedef ::OSG::SimpleSHLChunk * ( ::OSG::HDR2StageDataBase::*getLuminanceMapShader_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getLuminanceMapShader"
                , getLuminanceMapShader_function_type( &::OSG::HDR2StageDataBase::getLuminanceMapShader )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getLuminanceRenderTarget
        
            typedef ::OSG::FrameBufferObject * ( ::OSG::HDR2StageDataBase::*getLuminanceRenderTarget_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getLuminanceRenderTarget"
                , getLuminanceRenderTarget_function_type( &::OSG::HDR2StageDataBase::getLuminanceRenderTarget )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSFAdaptLuminanceMaterial
        
            typedef ::OSG::SFUnrecChunkMaterialPtr const * ( ::OSG::HDR2StageDataBase::*getSFAdaptLuminanceMaterial_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSFAdaptLuminanceMaterial"
                , getSFAdaptLuminanceMaterial_function_type( &::OSG::HDR2StageDataBase::getSFAdaptLuminanceMaterial )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSFAdaptLuminanceShader
        
            typedef ::OSG::SFUnrecSimpleSHLChunkPtr const * ( ::OSG::HDR2StageDataBase::*getSFAdaptLuminanceShader_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSFAdaptLuminanceShader"
                , getSFAdaptLuminanceShader_function_type( &::OSG::HDR2StageDataBase::getSFAdaptLuminanceShader )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSFBlurHorizMaterial
        
            typedef ::OSG::SFUnrecChunkMaterialPtr const * ( ::OSG::HDR2StageDataBase::*getSFBlurHorizMaterial_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSFBlurHorizMaterial"
                , getSFBlurHorizMaterial_function_type( &::OSG::HDR2StageDataBase::getSFBlurHorizMaterial )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSFBlurHorizRenderTarget
        
            typedef ::OSG::SFUnrecFrameBufferObjectPtr const * ( ::OSG::HDR2StageDataBase::*getSFBlurHorizRenderTarget_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSFBlurHorizRenderTarget"
                , getSFBlurHorizRenderTarget_function_type( &::OSG::HDR2StageDataBase::getSFBlurHorizRenderTarget )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSFBlurHorizShader
        
            typedef ::OSG::SFUnrecSimpleSHLChunkPtr const * ( ::OSG::HDR2StageDataBase::*getSFBlurHorizShader_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSFBlurHorizShader"
                , getSFBlurHorizShader_function_type( &::OSG::HDR2StageDataBase::getSFBlurHorizShader )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSFBlurVertMaterial
        
            typedef ::OSG::SFUnrecChunkMaterialPtr const * ( ::OSG::HDR2StageDataBase::*getSFBlurVertMaterial_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSFBlurVertMaterial"
                , getSFBlurVertMaterial_function_type( &::OSG::HDR2StageDataBase::getSFBlurVertMaterial )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSFBlurVertRenderTarget
        
            typedef ::OSG::SFUnrecFrameBufferObjectPtr const * ( ::OSG::HDR2StageDataBase::*getSFBlurVertRenderTarget_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSFBlurVertRenderTarget"
                , getSFBlurVertRenderTarget_function_type( &::OSG::HDR2StageDataBase::getSFBlurVertRenderTarget )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSFBlurVertShader
        
            typedef ::OSG::SFUnrecSimpleSHLChunkPtr const * ( ::OSG::HDR2StageDataBase::*getSFBlurVertShader_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSFBlurVertShader"
                , getSFBlurVertShader_function_type( &::OSG::HDR2StageDataBase::getSFBlurVertShader )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSFCompositeMaterial
        
            typedef ::OSG::SFUnrecChunkMaterialPtr const * ( ::OSG::HDR2StageDataBase::*getSFCompositeMaterial_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSFCompositeMaterial"
                , getSFCompositeMaterial_function_type( &::OSG::HDR2StageDataBase::getSFCompositeMaterial )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSFCompositeRenderTarget
        
            typedef ::OSG::SFUnrecFrameBufferObjectPtr const * ( ::OSG::HDR2StageDataBase::*getSFCompositeRenderTarget_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSFCompositeRenderTarget"
                , getSFCompositeRenderTarget_function_type( &::OSG::HDR2StageDataBase::getSFCompositeRenderTarget )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSFCompositeShader
        
            typedef ::OSG::SFUnrecSimpleSHLChunkPtr const * ( ::OSG::HDR2StageDataBase::*getSFCompositeShader_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSFCompositeShader"
                , getSFCompositeShader_function_type( &::OSG::HDR2StageDataBase::getSFCompositeShader )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSFCurrentAdaptLuminanceIdx
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::HDR2StageDataBase::*getSFCurrentAdaptLuminanceIdx_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSFCurrentAdaptLuminanceIdx"
                , getSFCurrentAdaptLuminanceIdx_function_type( &::OSG::HDR2StageDataBase::getSFCurrentAdaptLuminanceIdx )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSFCurrentTime
        
            typedef ::OSG::SFReal64 const * ( ::OSG::HDR2StageDataBase::*getSFCurrentTime_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSFCurrentTime"
                , getSFCurrentTime_function_type( &::OSG::HDR2StageDataBase::getSFCurrentTime )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSFFinalScreenMaterial
        
            typedef ::OSG::SFUnrecChunkMaterialPtr const * ( ::OSG::HDR2StageDataBase::*getSFFinalScreenMaterial_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSFFinalScreenMaterial"
                , getSFFinalScreenMaterial_function_type( &::OSG::HDR2StageDataBase::getSFFinalScreenMaterial )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSFFinalScreenShader
        
            typedef ::OSG::SFUnrecSimpleSHLChunkPtr const * ( ::OSG::HDR2StageDataBase::*getSFFinalScreenShader_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSFFinalScreenShader"
                , getSFFinalScreenShader_function_type( &::OSG::HDR2StageDataBase::getSFFinalScreenShader )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSFHdrShaderData
        
            typedef ::OSG::SFUnrecUniformBufferObjStd140ChunkPtr const * ( ::OSG::HDR2StageDataBase::*getSFHdrShaderData_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSFHdrShaderData"
                , getSFHdrShaderData_function_type( &::OSG::HDR2StageDataBase::getSFHdrShaderData )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSFHeight
        
            typedef ::OSG::SFInt32 const * ( ::OSG::HDR2StageDataBase::*getSFHeight_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSFHeight"
                , getSFHeight_function_type( &::OSG::HDR2StageDataBase::getSFHeight )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSFLastTime
        
            typedef ::OSG::SFReal64 const * ( ::OSG::HDR2StageDataBase::*getSFLastTime_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSFLastTime"
                , getSFLastTime_function_type( &::OSG::HDR2StageDataBase::getSFLastTime )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSFLuminanceMapMaterial
        
            typedef ::OSG::SFUnrecChunkMaterialPtr const * ( ::OSG::HDR2StageDataBase::*getSFLuminanceMapMaterial_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSFLuminanceMapMaterial"
                , getSFLuminanceMapMaterial_function_type( &::OSG::HDR2StageDataBase::getSFLuminanceMapMaterial )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSFLuminanceMapShader
        
            typedef ::OSG::SFUnrecSimpleSHLChunkPtr const * ( ::OSG::HDR2StageDataBase::*getSFLuminanceMapShader_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSFLuminanceMapShader"
                , getSFLuminanceMapShader_function_type( &::OSG::HDR2StageDataBase::getSFLuminanceMapShader )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSFLuminanceRenderTarget
        
            typedef ::OSG::SFUnrecFrameBufferObjectPtr const * ( ::OSG::HDR2StageDataBase::*getSFLuminanceRenderTarget_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSFLuminanceRenderTarget"
                , getSFLuminanceRenderTarget_function_type( &::OSG::HDR2StageDataBase::getSFLuminanceRenderTarget )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSFScaleShader
        
            typedef ::OSG::SFUnrecSimpleSHLChunkPtr const * ( ::OSG::HDR2StageDataBase::*getSFScaleShader_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSFScaleShader"
                , getSFScaleShader_function_type( &::OSG::HDR2StageDataBase::getSFScaleShader )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSFSceneMaterial
        
            typedef ::OSG::SFUnrecChunkMaterialPtr const * ( ::OSG::HDR2StageDataBase::*getSFSceneMaterial_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSFSceneMaterial"
                , getSFSceneMaterial_function_type( &::OSG::HDR2StageDataBase::getSFSceneMaterial )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSFSceneRenderTarget
        
            typedef ::OSG::SFUnrecFrameBufferObjectPtr const * ( ::OSG::HDR2StageDataBase::*getSFSceneRenderTarget_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSFSceneRenderTarget"
                , getSFSceneRenderTarget_function_type( &::OSG::HDR2StageDataBase::getSFSceneRenderTarget )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSFSharedMaterialChunk
        
            typedef ::OSG::SFUnrecMaterialChunkPtr const * ( ::OSG::HDR2StageDataBase::*getSFSharedMaterialChunk_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSFSharedMaterialChunk"
                , getSFSharedMaterialChunk_function_type( &::OSG::HDR2StageDataBase::getSFSharedMaterialChunk )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSFSharedTextureEnvChunk
        
            typedef ::OSG::SFUnrecTextureEnvChunkPtr const * ( ::OSG::HDR2StageDataBase::*getSFSharedTextureEnvChunk_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSFSharedTextureEnvChunk"
                , getSFSharedTextureEnvChunk_function_type( &::OSG::HDR2StageDataBase::getSFSharedTextureEnvChunk )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSFThresholdMaterial
        
            typedef ::OSG::SFUnrecChunkMaterialPtr const * ( ::OSG::HDR2StageDataBase::*getSFThresholdMaterial_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSFThresholdMaterial"
                , getSFThresholdMaterial_function_type( &::OSG::HDR2StageDataBase::getSFThresholdMaterial )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSFThresholdRenderTarget
        
            typedef ::OSG::SFUnrecFrameBufferObjectPtr const * ( ::OSG::HDR2StageDataBase::*getSFThresholdRenderTarget_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSFThresholdRenderTarget"
                , getSFThresholdRenderTarget_function_type( &::OSG::HDR2StageDataBase::getSFThresholdRenderTarget )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSFThresholdShader
        
            typedef ::OSG::SFUnrecSimpleSHLChunkPtr const * ( ::OSG::HDR2StageDataBase::*getSFThresholdShader_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSFThresholdShader"
                , getSFThresholdShader_function_type( &::OSG::HDR2StageDataBase::getSFThresholdShader )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSFWidth
        
            typedef ::OSG::SFInt32 const * ( ::OSG::HDR2StageDataBase::*getSFWidth_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSFWidth"
                , getSFWidth_function_type( &::OSG::HDR2StageDataBase::getSFWidth )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSFZFar
        
            typedef ::OSG::SFReal32 const * ( ::OSG::HDR2StageDataBase::*getSFZFar_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSFZFar"
                , getSFZFar_function_type( &::OSG::HDR2StageDataBase::getSFZFar )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSFZNear
        
            typedef ::OSG::SFReal32 const * ( ::OSG::HDR2StageDataBase::*getSFZNear_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSFZNear"
                , getSFZNear_function_type( &::OSG::HDR2StageDataBase::getSFZNear )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getScaleMaterial
        
            typedef ::OSG::ChunkMaterial * ( ::OSG::HDR2StageDataBase::*getScaleMaterial_function_type )( ::OSG::UInt32 const ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getScaleMaterial"
                , getScaleMaterial_function_type( &::OSG::HDR2StageDataBase::getScaleMaterial )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getScaleRenderTarget
        
            typedef ::OSG::FrameBufferObject * ( ::OSG::HDR2StageDataBase::*getScaleRenderTarget_function_type )( ::OSG::UInt32 const ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getScaleRenderTarget"
                , getScaleRenderTarget_function_type( &::OSG::HDR2StageDataBase::getScaleRenderTarget )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getScaleShader
        
            typedef ::OSG::SimpleSHLChunk * ( ::OSG::HDR2StageDataBase::*getScaleShader_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getScaleShader"
                , getScaleShader_function_type( &::OSG::HDR2StageDataBase::getScaleShader )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSceneMaterial
        
            typedef ::OSG::ChunkMaterial * ( ::OSG::HDR2StageDataBase::*getSceneMaterial_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSceneMaterial"
                , getSceneMaterial_function_type( &::OSG::HDR2StageDataBase::getSceneMaterial )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSceneRenderTarget
        
            typedef ::OSG::FrameBufferObject * ( ::OSG::HDR2StageDataBase::*getSceneRenderTarget_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSceneRenderTarget"
                , getSceneRenderTarget_function_type( &::OSG::HDR2StageDataBase::getSceneRenderTarget )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSharedMaterialChunk
        
            typedef ::OSG::MaterialChunk * ( ::OSG::HDR2StageDataBase::*getSharedMaterialChunk_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSharedMaterialChunk"
                , getSharedMaterialChunk_function_type( &::OSG::HDR2StageDataBase::getSharedMaterialChunk )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getSharedTextureEnvChunk
        
            typedef ::OSG::TextureEnvChunk * ( ::OSG::HDR2StageDataBase::*getSharedTextureEnvChunk_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getSharedTextureEnvChunk"
                , getSharedTextureEnvChunk_function_type( &::OSG::HDR2StageDataBase::getSharedTextureEnvChunk )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getThresholdMaterial
        
            typedef ::OSG::ChunkMaterial * ( ::OSG::HDR2StageDataBase::*getThresholdMaterial_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getThresholdMaterial"
                , getThresholdMaterial_function_type( &::OSG::HDR2StageDataBase::getThresholdMaterial )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getThresholdRenderTarget
        
            typedef ::OSG::FrameBufferObject * ( ::OSG::HDR2StageDataBase::*getThresholdRenderTarget_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getThresholdRenderTarget"
                , getThresholdRenderTarget_function_type( &::OSG::HDR2StageDataBase::getThresholdRenderTarget )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getThresholdShader
        
            typedef ::OSG::SimpleSHLChunk * ( ::OSG::HDR2StageDataBase::*getThresholdShader_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getThresholdShader"
                , getThresholdShader_function_type( &::OSG::HDR2StageDataBase::getThresholdShader )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::HDR2StageDataBase::*getType_function_type )(  ) ;
            
            HDR2StageDataBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::HDR2StageDataBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::HDR2StageDataBase::*getType_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::HDR2StageDataBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HDR2StageDataBase::getWidth
        
            typedef ::OSG::Int32 ( ::OSG::HDR2StageDataBase::*getWidth_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getWidth"
                , getWidth_function_type( &::OSG::HDR2StageDataBase::getWidth ) );
        
        }
        { //::OSG::HDR2StageDataBase::getZFar
        
            typedef ::OSG::Real32 ( ::OSG::HDR2StageDataBase::*getZFar_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getZFar"
                , getZFar_function_type( &::OSG::HDR2StageDataBase::getZFar ) );
        
        }
        { //::OSG::HDR2StageDataBase::getZNear
        
            typedef ::OSG::Real32 ( ::OSG::HDR2StageDataBase::*getZNear_function_type )(  ) const;
            
            HDR2StageDataBase_exposer.def( 
                "getZNear"
                , getZNear_function_type( &::OSG::HDR2StageDataBase::getZNear ) );
        
        }
        { //::OSG::HDR2StageDataBase::pushToAdaptLuminanceRenderTarget
        
            typedef void ( ::OSG::HDR2StageDataBase::*pushToAdaptLuminanceRenderTarget_function_type )( ::OSG::FrameBufferObject * const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "pushToAdaptLuminanceRenderTarget"
                , pushToAdaptLuminanceRenderTarget_function_type( &::OSG::HDR2StageDataBase::pushToAdaptLuminanceRenderTarget )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::pushToScaleMaterial
        
            typedef void ( ::OSG::HDR2StageDataBase::*pushToScaleMaterial_function_type )( ::OSG::ChunkMaterial * const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "pushToScaleMaterial"
                , pushToScaleMaterial_function_type( &::OSG::HDR2StageDataBase::pushToScaleMaterial )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::pushToScaleRenderTarget
        
            typedef void ( ::OSG::HDR2StageDataBase::*pushToScaleRenderTarget_function_type )( ::OSG::FrameBufferObject * const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "pushToScaleRenderTarget"
                , pushToScaleRenderTarget_function_type( &::OSG::HDR2StageDataBase::pushToScaleRenderTarget )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::removeFromAdaptLuminanceRenderTarget
        
            typedef void ( ::OSG::HDR2StageDataBase::*removeFromAdaptLuminanceRenderTarget_function_type )( ::OSG::UInt32 ) ;
            
            HDR2StageDataBase_exposer.def( 
                "removeFromAdaptLuminanceRenderTarget"
                , removeFromAdaptLuminanceRenderTarget_function_type( &::OSG::HDR2StageDataBase::removeFromAdaptLuminanceRenderTarget )
                , ( bp::arg("uiIndex") ) );
        
        }
        { //::OSG::HDR2StageDataBase::removeFromScaleMaterial
        
            typedef void ( ::OSG::HDR2StageDataBase::*removeFromScaleMaterial_function_type )( ::OSG::UInt32 ) ;
            
            HDR2StageDataBase_exposer.def( 
                "removeFromScaleMaterial"
                , removeFromScaleMaterial_function_type( &::OSG::HDR2StageDataBase::removeFromScaleMaterial )
                , ( bp::arg("uiIndex") ) );
        
        }
        { //::OSG::HDR2StageDataBase::removeFromScaleRenderTarget
        
            typedef void ( ::OSG::HDR2StageDataBase::*removeFromScaleRenderTarget_function_type )( ::OSG::UInt32 ) ;
            
            HDR2StageDataBase_exposer.def( 
                "removeFromScaleRenderTarget"
                , removeFromScaleRenderTarget_function_type( &::OSG::HDR2StageDataBase::removeFromScaleRenderTarget )
                , ( bp::arg("uiIndex") ) );
        
        }
        { //::OSG::HDR2StageDataBase::removeObjFromAdaptLuminanceRenderTarget
        
            typedef void ( ::OSG::HDR2StageDataBase::*removeObjFromAdaptLuminanceRenderTarget_function_type )( ::OSG::FrameBufferObject * const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "removeObjFromAdaptLuminanceRenderTarget"
                , removeObjFromAdaptLuminanceRenderTarget_function_type( &::OSG::HDR2StageDataBase::removeObjFromAdaptLuminanceRenderTarget )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::removeObjFromScaleMaterial
        
            typedef void ( ::OSG::HDR2StageDataBase::*removeObjFromScaleMaterial_function_type )( ::OSG::ChunkMaterial * const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "removeObjFromScaleMaterial"
                , removeObjFromScaleMaterial_function_type( &::OSG::HDR2StageDataBase::removeObjFromScaleMaterial )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::removeObjFromScaleRenderTarget
        
            typedef void ( ::OSG::HDR2StageDataBase::*removeObjFromScaleRenderTarget_function_type )( ::OSG::FrameBufferObject * const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "removeObjFromScaleRenderTarget"
                , removeObjFromScaleRenderTarget_function_type( &::OSG::HDR2StageDataBase::removeObjFromScaleRenderTarget )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::setAdaptLuminanceMaterial
        
            typedef void ( ::OSG::HDR2StageDataBase::*setAdaptLuminanceMaterial_function_type )( ::OSG::ChunkMaterial * const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "setAdaptLuminanceMaterial"
                , setAdaptLuminanceMaterial_function_type( &::OSG::HDR2StageDataBase::setAdaptLuminanceMaterial )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::setAdaptLuminanceShader
        
            typedef void ( ::OSG::HDR2StageDataBase::*setAdaptLuminanceShader_function_type )( ::OSG::SimpleSHLChunk * const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "setAdaptLuminanceShader"
                , setAdaptLuminanceShader_function_type( &::OSG::HDR2StageDataBase::setAdaptLuminanceShader )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::setBlurHorizMaterial
        
            typedef void ( ::OSG::HDR2StageDataBase::*setBlurHorizMaterial_function_type )( ::OSG::ChunkMaterial * const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "setBlurHorizMaterial"
                , setBlurHorizMaterial_function_type( &::OSG::HDR2StageDataBase::setBlurHorizMaterial )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::setBlurHorizRenderTarget
        
            typedef void ( ::OSG::HDR2StageDataBase::*setBlurHorizRenderTarget_function_type )( ::OSG::FrameBufferObject * const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "setBlurHorizRenderTarget"
                , setBlurHorizRenderTarget_function_type( &::OSG::HDR2StageDataBase::setBlurHorizRenderTarget )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::setBlurHorizShader
        
            typedef void ( ::OSG::HDR2StageDataBase::*setBlurHorizShader_function_type )( ::OSG::SimpleSHLChunk * const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "setBlurHorizShader"
                , setBlurHorizShader_function_type( &::OSG::HDR2StageDataBase::setBlurHorizShader )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::setBlurVertMaterial
        
            typedef void ( ::OSG::HDR2StageDataBase::*setBlurVertMaterial_function_type )( ::OSG::ChunkMaterial * const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "setBlurVertMaterial"
                , setBlurVertMaterial_function_type( &::OSG::HDR2StageDataBase::setBlurVertMaterial )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::setBlurVertRenderTarget
        
            typedef void ( ::OSG::HDR2StageDataBase::*setBlurVertRenderTarget_function_type )( ::OSG::FrameBufferObject * const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "setBlurVertRenderTarget"
                , setBlurVertRenderTarget_function_type( &::OSG::HDR2StageDataBase::setBlurVertRenderTarget )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::setBlurVertShader
        
            typedef void ( ::OSG::HDR2StageDataBase::*setBlurVertShader_function_type )( ::OSG::SimpleSHLChunk * const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "setBlurVertShader"
                , setBlurVertShader_function_type( &::OSG::HDR2StageDataBase::setBlurVertShader )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::setCompositeMaterial
        
            typedef void ( ::OSG::HDR2StageDataBase::*setCompositeMaterial_function_type )( ::OSG::ChunkMaterial * const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "setCompositeMaterial"
                , setCompositeMaterial_function_type( &::OSG::HDR2StageDataBase::setCompositeMaterial )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::setCompositeRenderTarget
        
            typedef void ( ::OSG::HDR2StageDataBase::*setCompositeRenderTarget_function_type )( ::OSG::FrameBufferObject * const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "setCompositeRenderTarget"
                , setCompositeRenderTarget_function_type( &::OSG::HDR2StageDataBase::setCompositeRenderTarget )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::setCompositeShader
        
            typedef void ( ::OSG::HDR2StageDataBase::*setCompositeShader_function_type )( ::OSG::SimpleSHLChunk * const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "setCompositeShader"
                , setCompositeShader_function_type( &::OSG::HDR2StageDataBase::setCompositeShader )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::setCurrentAdaptLuminanceIdx
        
            typedef void ( ::OSG::HDR2StageDataBase::*setCurrentAdaptLuminanceIdx_function_type )( ::OSG::UInt32 const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "setCurrentAdaptLuminanceIdx"
                , setCurrentAdaptLuminanceIdx_function_type( &::OSG::HDR2StageDataBase::setCurrentAdaptLuminanceIdx )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::setCurrentTime
        
            typedef void ( ::OSG::HDR2StageDataBase::*setCurrentTime_function_type )( ::OSG::Real64 const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "setCurrentTime"
                , setCurrentTime_function_type( &::OSG::HDR2StageDataBase::setCurrentTime )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::setFinalScreenMaterial
        
            typedef void ( ::OSG::HDR2StageDataBase::*setFinalScreenMaterial_function_type )( ::OSG::ChunkMaterial * const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "setFinalScreenMaterial"
                , setFinalScreenMaterial_function_type( &::OSG::HDR2StageDataBase::setFinalScreenMaterial )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::setFinalScreenShader
        
            typedef void ( ::OSG::HDR2StageDataBase::*setFinalScreenShader_function_type )( ::OSG::SimpleSHLChunk * const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "setFinalScreenShader"
                , setFinalScreenShader_function_type( &::OSG::HDR2StageDataBase::setFinalScreenShader )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::setHdrShaderData
        
            typedef void ( ::OSG::HDR2StageDataBase::*setHdrShaderData_function_type )( ::OSG::UniformBufferObjStd140Chunk * const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "setHdrShaderData"
                , setHdrShaderData_function_type( &::OSG::HDR2StageDataBase::setHdrShaderData )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::setHeight
        
            typedef void ( ::OSG::HDR2StageDataBase::*setHeight_function_type )( ::OSG::Int32 const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "setHeight"
                , setHeight_function_type( &::OSG::HDR2StageDataBase::setHeight )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::setLastTime
        
            typedef void ( ::OSG::HDR2StageDataBase::*setLastTime_function_type )( ::OSG::Real64 const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "setLastTime"
                , setLastTime_function_type( &::OSG::HDR2StageDataBase::setLastTime )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::setLuminanceMapMaterial
        
            typedef void ( ::OSG::HDR2StageDataBase::*setLuminanceMapMaterial_function_type )( ::OSG::ChunkMaterial * const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "setLuminanceMapMaterial"
                , setLuminanceMapMaterial_function_type( &::OSG::HDR2StageDataBase::setLuminanceMapMaterial )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::setLuminanceMapShader
        
            typedef void ( ::OSG::HDR2StageDataBase::*setLuminanceMapShader_function_type )( ::OSG::SimpleSHLChunk * const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "setLuminanceMapShader"
                , setLuminanceMapShader_function_type( &::OSG::HDR2StageDataBase::setLuminanceMapShader )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::setLuminanceRenderTarget
        
            typedef void ( ::OSG::HDR2StageDataBase::*setLuminanceRenderTarget_function_type )( ::OSG::FrameBufferObject * const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "setLuminanceRenderTarget"
                , setLuminanceRenderTarget_function_type( &::OSG::HDR2StageDataBase::setLuminanceRenderTarget )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::setScaleShader
        
            typedef void ( ::OSG::HDR2StageDataBase::*setScaleShader_function_type )( ::OSG::SimpleSHLChunk * const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "setScaleShader"
                , setScaleShader_function_type( &::OSG::HDR2StageDataBase::setScaleShader )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::setSceneMaterial
        
            typedef void ( ::OSG::HDR2StageDataBase::*setSceneMaterial_function_type )( ::OSG::ChunkMaterial * const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "setSceneMaterial"
                , setSceneMaterial_function_type( &::OSG::HDR2StageDataBase::setSceneMaterial )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::setSceneRenderTarget
        
            typedef void ( ::OSG::HDR2StageDataBase::*setSceneRenderTarget_function_type )( ::OSG::FrameBufferObject * const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "setSceneRenderTarget"
                , setSceneRenderTarget_function_type( &::OSG::HDR2StageDataBase::setSceneRenderTarget )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::setSharedMaterialChunk
        
            typedef void ( ::OSG::HDR2StageDataBase::*setSharedMaterialChunk_function_type )( ::OSG::MaterialChunk * const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "setSharedMaterialChunk"
                , setSharedMaterialChunk_function_type( &::OSG::HDR2StageDataBase::setSharedMaterialChunk )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::setSharedTextureEnvChunk
        
            typedef void ( ::OSG::HDR2StageDataBase::*setSharedTextureEnvChunk_function_type )( ::OSG::TextureEnvChunk * const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "setSharedTextureEnvChunk"
                , setSharedTextureEnvChunk_function_type( &::OSG::HDR2StageDataBase::setSharedTextureEnvChunk )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::setThresholdMaterial
        
            typedef void ( ::OSG::HDR2StageDataBase::*setThresholdMaterial_function_type )( ::OSG::ChunkMaterial * const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "setThresholdMaterial"
                , setThresholdMaterial_function_type( &::OSG::HDR2StageDataBase::setThresholdMaterial )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::setThresholdRenderTarget
        
            typedef void ( ::OSG::HDR2StageDataBase::*setThresholdRenderTarget_function_type )( ::OSG::FrameBufferObject * const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "setThresholdRenderTarget"
                , setThresholdRenderTarget_function_type( &::OSG::HDR2StageDataBase::setThresholdRenderTarget )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::setThresholdShader
        
            typedef void ( ::OSG::HDR2StageDataBase::*setThresholdShader_function_type )( ::OSG::SimpleSHLChunk * const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "setThresholdShader"
                , setThresholdShader_function_type( &::OSG::HDR2StageDataBase::setThresholdShader )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::setWidth
        
            typedef void ( ::OSG::HDR2StageDataBase::*setWidth_function_type )( ::OSG::Int32 const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "setWidth"
                , setWidth_function_type( &::OSG::HDR2StageDataBase::setWidth )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::setZFar
        
            typedef void ( ::OSG::HDR2StageDataBase::*setZFar_function_type )( ::OSG::Real32 const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "setZFar"
                , setZFar_function_type( &::OSG::HDR2StageDataBase::setZFar )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::HDR2StageDataBase::setZNear
        
            typedef void ( ::OSG::HDR2StageDataBase::*setZNear_function_type )( ::OSG::Real32 const ) ;
            
            HDR2StageDataBase_exposer.def( 
                "setZNear"
                , setZNear_function_type( &::OSG::HDR2StageDataBase::setZNear )
                , ( bp::arg("value") ) );
        
        }
        HDR2StageDataBase_exposer.staticmethod( "create" );
        HDR2StageDataBase_exposer.staticmethod( "createDependent" );
        HDR2StageDataBase_exposer.staticmethod( "createLocal" );
        HDR2StageDataBase_exposer.staticmethod( "getClassGroupId" );
        HDR2StageDataBase_exposer.staticmethod( "getClassType" );
        HDR2StageDataBase_exposer.staticmethod( "getClassTypeId" );
        HDR2StageDataBase_exposer.def("getMFScaleMaterial",HDR2StageDataBase_getMFScaleMaterial);
        HDR2StageDataBase_exposer.def("getMFAdaptLuminanceRenderTarget",HDR2StageDataBase_getMFAdaptLuminanceRenderTarget);
        HDR2StageDataBase_exposer.def("getMFScaleRenderTarget",HDR2StageDataBase_getMFScaleRenderTarget);
    }

}
