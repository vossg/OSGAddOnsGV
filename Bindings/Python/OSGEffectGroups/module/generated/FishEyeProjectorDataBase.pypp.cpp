// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGEffectGroups_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "FishEyeProjectorDataBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

boost::python::list FishEyeProjectorDataBase_getMFTextures(OSG::FishEyeProjectorDataBase *self)
{
   boost::python::list result;
   OSG::MFUnrecTextureObjChunkPtr const * mf_data = self->getMFTextures();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append(OSG::TextureObjChunk::ObjRecPtr((*mf_data)[i]));
   }
   return result;
}

void register_FishEyeProjectorDataBase_class(){

    { //::OSG::FishEyeProjectorDataBase
        typedef bp::class_< OSG::FishEyeProjectorDataBase, bp::bases< ::OSG::StageData >, boost::noncopyable > FishEyeProjectorDataBase_exposer_t;
        FishEyeProjectorDataBase_exposer_t FishEyeProjectorDataBase_exposer = FishEyeProjectorDataBase_exposer_t( "FishEyeProjectorDataBase", bp::no_init );
        bp::scope FishEyeProjectorDataBase_scope( FishEyeProjectorDataBase_exposer );
        bp::scope().attr("RenderTargetFieldId") = (int)OSG::FishEyeProjectorDataBase::RenderTargetFieldId;
        bp::scope().attr("TexturesFieldId") = (int)OSG::FishEyeProjectorDataBase::TexturesFieldId;
        bp::scope().attr("TextureResFieldId") = (int)OSG::FishEyeProjectorDataBase::TextureResFieldId;
        bp::scope().attr("TextureFormatFieldId") = (int)OSG::FishEyeProjectorDataBase::TextureFormatFieldId;
        bp::scope().attr("CameraFieldId") = (int)OSG::FishEyeProjectorDataBase::CameraFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::FishEyeProjectorDataBase::NextFieldId;
        { //::OSG::FishEyeProjectorDataBase::assignTextures
        
            typedef void ( ::OSG::FishEyeProjectorDataBase::*assignTextures_function_type )( ::OSG::MFUnrecTextureObjChunkPtr const & ) ;
            
            FishEyeProjectorDataBase_exposer.def( 
                "assignTextures"
                , assignTextures_function_type( &::OSG::FishEyeProjectorDataBase::assignTextures )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FishEyeProjectorDataBase::clearTextures
        
            typedef void ( ::OSG::FishEyeProjectorDataBase::*clearTextures_function_type )(  ) ;
            
            FishEyeProjectorDataBase_exposer.def( 
                "clearTextures"
                , clearTextures_function_type( &::OSG::FishEyeProjectorDataBase::clearTextures ) );
        
        }
        { //::OSG::FishEyeProjectorDataBase::copyFromBin
        
            typedef void ( ::OSG::FishEyeProjectorDataBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            FishEyeProjectorDataBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::FishEyeProjectorDataBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::FishEyeProjectorDataBase::copyToBin
        
            typedef void ( ::OSG::FishEyeProjectorDataBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            FishEyeProjectorDataBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::FishEyeProjectorDataBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::FishEyeProjectorDataBase::create
        
            typedef ::OSG::FishEyeProjectorDataTransitPtr ( *create_function_type )(  );
            
            FishEyeProjectorDataBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::FishEyeProjectorDataBase::create ) );
        
        }
        { //::OSG::FishEyeProjectorDataBase::createDependent
        
            typedef ::OSG::FishEyeProjectorDataTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            FishEyeProjectorDataBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::FishEyeProjectorDataBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::FishEyeProjectorDataBase::createLocal
        
            typedef ::OSG::FishEyeProjectorDataTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            FishEyeProjectorDataBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::FishEyeProjectorDataBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::FishEyeProjectorDataBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::FishEyeProjectorDataBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            FishEyeProjectorDataBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::FishEyeProjectorDataBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::FishEyeProjectorDataBase::getCamera
        
            typedef ::OSG::Camera * ( ::OSG::FishEyeProjectorDataBase::*getCamera_function_type )(  ) const;
            
            FishEyeProjectorDataBase_exposer.def( 
                "getCamera"
                , getCamera_function_type( &::OSG::FishEyeProjectorDataBase::getCamera )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FishEyeProjectorDataBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            FishEyeProjectorDataBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::FishEyeProjectorDataBase::getClassGroupId ) );
        
        }
        { //::OSG::FishEyeProjectorDataBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            FishEyeProjectorDataBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::FishEyeProjectorDataBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::FishEyeProjectorDataBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            FishEyeProjectorDataBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::FishEyeProjectorDataBase::getClassTypeId ) );
        
        }
        { //::OSG::FishEyeProjectorDataBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::FishEyeProjectorDataBase::*getContainerSize_function_type )(  ) const;
            
            FishEyeProjectorDataBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::FishEyeProjectorDataBase::getContainerSize ) );
        
        }
        { //::OSG::FishEyeProjectorDataBase::getRenderTarget
        
            typedef ::OSG::FrameBufferObject * ( ::OSG::FishEyeProjectorDataBase::*getRenderTarget_function_type )(  ) const;
            
            FishEyeProjectorDataBase_exposer.def( 
                "getRenderTarget"
                , getRenderTarget_function_type( &::OSG::FishEyeProjectorDataBase::getRenderTarget )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FishEyeProjectorDataBase::getSFCamera
        
            typedef ::OSG::SFUnrecCameraPtr const * ( ::OSG::FishEyeProjectorDataBase::*getSFCamera_function_type )(  ) const;
            
            FishEyeProjectorDataBase_exposer.def( 
                "getSFCamera"
                , getSFCamera_function_type( &::OSG::FishEyeProjectorDataBase::getSFCamera )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FishEyeProjectorDataBase::getSFRenderTarget
        
            typedef ::OSG::SFUnrecFrameBufferObjectPtr const * ( ::OSG::FishEyeProjectorDataBase::*getSFRenderTarget_function_type )(  ) const;
            
            FishEyeProjectorDataBase_exposer.def( 
                "getSFRenderTarget"
                , getSFRenderTarget_function_type( &::OSG::FishEyeProjectorDataBase::getSFRenderTarget )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FishEyeProjectorDataBase::getSFTextureFormat
        
            typedef ::OSG::SFGLenum const * ( ::OSG::FishEyeProjectorDataBase::*getSFTextureFormat_function_type )(  ) const;
            
            FishEyeProjectorDataBase_exposer.def( 
                "getSFTextureFormat"
                , getSFTextureFormat_function_type( &::OSG::FishEyeProjectorDataBase::getSFTextureFormat )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FishEyeProjectorDataBase::getSFTextureRes
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::FishEyeProjectorDataBase::*getSFTextureRes_function_type )(  ) const;
            
            FishEyeProjectorDataBase_exposer.def( 
                "getSFTextureRes"
                , getSFTextureRes_function_type( &::OSG::FishEyeProjectorDataBase::getSFTextureRes )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FishEyeProjectorDataBase::getTextureFormat
        
            typedef ::GLenum const & ( ::OSG::FishEyeProjectorDataBase::*getTextureFormat_function_type )(  ) const;
            
            FishEyeProjectorDataBase_exposer.def( 
                "getTextureFormat"
                , getTextureFormat_function_type( &::OSG::FishEyeProjectorDataBase::getTextureFormat )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::FishEyeProjectorDataBase::getTextureRes
        
            typedef ::OSG::UInt32 ( ::OSG::FishEyeProjectorDataBase::*getTextureRes_function_type )(  ) const;
            
            FishEyeProjectorDataBase_exposer.def( 
                "getTextureRes"
                , getTextureRes_function_type( &::OSG::FishEyeProjectorDataBase::getTextureRes ) );
        
        }
        { //::OSG::FishEyeProjectorDataBase::getTextures
        
            typedef ::OSG::TextureObjChunk * ( ::OSG::FishEyeProjectorDataBase::*getTextures_function_type )( ::OSG::UInt32 const ) const;
            
            FishEyeProjectorDataBase_exposer.def( 
                "getTextures"
                , getTextures_function_type( &::OSG::FishEyeProjectorDataBase::getTextures )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FishEyeProjectorDataBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::FishEyeProjectorDataBase::*getType_function_type )(  ) ;
            
            FishEyeProjectorDataBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::FishEyeProjectorDataBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FishEyeProjectorDataBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::FishEyeProjectorDataBase::*getType_function_type )(  ) const;
            
            FishEyeProjectorDataBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::FishEyeProjectorDataBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FishEyeProjectorDataBase::pushToTextures
        
            typedef void ( ::OSG::FishEyeProjectorDataBase::*pushToTextures_function_type )( ::OSG::TextureObjChunk * const ) ;
            
            FishEyeProjectorDataBase_exposer.def( 
                "pushToTextures"
                , pushToTextures_function_type( &::OSG::FishEyeProjectorDataBase::pushToTextures )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FishEyeProjectorDataBase::removeFromTextures
        
            typedef void ( ::OSG::FishEyeProjectorDataBase::*removeFromTextures_function_type )( ::OSG::UInt32 ) ;
            
            FishEyeProjectorDataBase_exposer.def( 
                "removeFromTextures"
                , removeFromTextures_function_type( &::OSG::FishEyeProjectorDataBase::removeFromTextures )
                , ( bp::arg("uiIndex") ) );
        
        }
        { //::OSG::FishEyeProjectorDataBase::removeObjFromTextures
        
            typedef void ( ::OSG::FishEyeProjectorDataBase::*removeObjFromTextures_function_type )( ::OSG::TextureObjChunk * const ) ;
            
            FishEyeProjectorDataBase_exposer.def( 
                "removeObjFromTextures"
                , removeObjFromTextures_function_type( &::OSG::FishEyeProjectorDataBase::removeObjFromTextures )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FishEyeProjectorDataBase::setCamera
        
            typedef void ( ::OSG::FishEyeProjectorDataBase::*setCamera_function_type )( ::OSG::Camera * const ) ;
            
            FishEyeProjectorDataBase_exposer.def( 
                "setCamera"
                , setCamera_function_type( &::OSG::FishEyeProjectorDataBase::setCamera )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FishEyeProjectorDataBase::setRenderTarget
        
            typedef void ( ::OSG::FishEyeProjectorDataBase::*setRenderTarget_function_type )( ::OSG::FrameBufferObject * const ) ;
            
            FishEyeProjectorDataBase_exposer.def( 
                "setRenderTarget"
                , setRenderTarget_function_type( &::OSG::FishEyeProjectorDataBase::setRenderTarget )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FishEyeProjectorDataBase::setTextureFormat
        
            typedef void ( ::OSG::FishEyeProjectorDataBase::*setTextureFormat_function_type )( ::GLenum const & ) ;
            
            FishEyeProjectorDataBase_exposer.def( 
                "setTextureFormat"
                , setTextureFormat_function_type( &::OSG::FishEyeProjectorDataBase::setTextureFormat )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FishEyeProjectorDataBase::setTextureRes
        
            typedef void ( ::OSG::FishEyeProjectorDataBase::*setTextureRes_function_type )( ::OSG::UInt32 const ) ;
            
            FishEyeProjectorDataBase_exposer.def( 
                "setTextureRes"
                , setTextureRes_function_type( &::OSG::FishEyeProjectorDataBase::setTextureRes )
                , ( bp::arg("value") ) );
        
        }
        FishEyeProjectorDataBase_exposer.staticmethod( "create" );
        FishEyeProjectorDataBase_exposer.staticmethod( "createDependent" );
        FishEyeProjectorDataBase_exposer.staticmethod( "createLocal" );
        FishEyeProjectorDataBase_exposer.staticmethod( "getClassGroupId" );
        FishEyeProjectorDataBase_exposer.staticmethod( "getClassType" );
        FishEyeProjectorDataBase_exposer.staticmethod( "getClassTypeId" );
        FishEyeProjectorDataBase_exposer.def("getMFTextures",FishEyeProjectorDataBase_getMFTextures);
    }

}
