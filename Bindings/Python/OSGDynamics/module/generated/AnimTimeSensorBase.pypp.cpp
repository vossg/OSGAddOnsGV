// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGDynamics_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "AnimTimeSensorBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct AnimTimeSensorBase_wrapper : OSG::AnimTimeSensorBase, bp::wrapper< OSG::AnimTimeSensorBase > {

    virtual void frame( ::OSG::Time oTime, ::OSG::UInt32 uiFrame ){
        bp::override func_frame = this->get_override( "frame" );
        func_frame( oTime, uiFrame );
    }

};

void register_AnimTimeSensorBase_class(){

    { //::OSG::AnimTimeSensorBase
        typedef bp::class_< AnimTimeSensorBase_wrapper, boost::noncopyable > AnimTimeSensorBase_exposer_t;
        AnimTimeSensorBase_exposer_t AnimTimeSensorBase_exposer = AnimTimeSensorBase_exposer_t( "AnimTimeSensorBase", bp::no_init );
        bp::scope AnimTimeSensorBase_scope( AnimTimeSensorBase_exposer );
        bp::scope().attr("EnabledFieldId") = (int)OSG::AnimTimeSensorBase::EnabledFieldId;
        bp::scope().attr("IsActiveFieldId") = (int)OSG::AnimTimeSensorBase::IsActiveFieldId;
        bp::scope().attr("LoopFieldId") = (int)OSG::AnimTimeSensorBase::LoopFieldId;
        bp::scope().attr("ForwardFieldId") = (int)OSG::AnimTimeSensorBase::ForwardFieldId;
        bp::scope().attr("StartTimeFieldId") = (int)OSG::AnimTimeSensorBase::StartTimeFieldId;
        bp::scope().attr("StopTimeFieldId") = (int)OSG::AnimTimeSensorBase::StopTimeFieldId;
        bp::scope().attr("TimeFieldId") = (int)OSG::AnimTimeSensorBase::TimeFieldId;
        bp::scope().attr("CycleLengthFieldId") = (int)OSG::AnimTimeSensorBase::CycleLengthFieldId;
        bp::scope().attr("TimeScaleFieldId") = (int)OSG::AnimTimeSensorBase::TimeScaleFieldId;
        bp::scope().attr("FractionFieldId") = (int)OSG::AnimTimeSensorBase::FractionFieldId;
        bp::scope().attr("AnimTimeFieldId") = (int)OSG::AnimTimeSensorBase::AnimTimeFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::AnimTimeSensorBase::NextFieldId;
        { //::OSG::AnimTimeSensorBase::copyFromBin
        
            typedef void ( ::OSG::AnimTimeSensorBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            AnimTimeSensorBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::AnimTimeSensorBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::AnimTimeSensorBase::copyToBin
        
            typedef void ( ::OSG::AnimTimeSensorBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            AnimTimeSensorBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::AnimTimeSensorBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::AnimTimeSensorBase::create
        
            typedef ::OSG::AnimTimeSensorTransitPtr ( *create_function_type )(  );
            
            AnimTimeSensorBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::AnimTimeSensorBase::create ) );
        
        }
        { //::OSG::AnimTimeSensorBase::createDependent
        
            typedef ::OSG::AnimTimeSensorTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            AnimTimeSensorBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::AnimTimeSensorBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::AnimTimeSensorBase::createLocal
        
            typedef ::OSG::AnimTimeSensorTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            AnimTimeSensorBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::AnimTimeSensorBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::AnimTimeSensorBase::getAnimTime
        
            typedef ::OSG::Real32 ( ::OSG::AnimTimeSensorBase::*getAnimTime_function_type )(  ) const;
            
            AnimTimeSensorBase_exposer.def( 
                "getAnimTime"
                , getAnimTime_function_type( &::OSG::AnimTimeSensorBase::getAnimTime ) );
        
        }
        { //::OSG::AnimTimeSensorBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::AnimTimeSensorBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            AnimTimeSensorBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::AnimTimeSensorBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::AnimTimeSensorBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            AnimTimeSensorBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::AnimTimeSensorBase::getClassGroupId ) );
        
        }
        { //::OSG::AnimTimeSensorBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            AnimTimeSensorBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::AnimTimeSensorBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::AnimTimeSensorBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            AnimTimeSensorBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::AnimTimeSensorBase::getClassTypeId ) );
        
        }
        { //::OSG::AnimTimeSensorBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::AnimTimeSensorBase::*getContainerSize_function_type )(  ) const;
            
            AnimTimeSensorBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::AnimTimeSensorBase::getContainerSize ) );
        
        }
        { //::OSG::AnimTimeSensorBase::getCycleLength
        
            typedef ::OSG::Time const & ( ::OSG::AnimTimeSensorBase::*getCycleLength_function_type )(  ) const;
            
            AnimTimeSensorBase_exposer.def( 
                "getCycleLength"
                , getCycleLength_function_type( &::OSG::AnimTimeSensorBase::getCycleLength )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::AnimTimeSensorBase::getEnabled
        
            typedef bool ( ::OSG::AnimTimeSensorBase::*getEnabled_function_type )(  ) const;
            
            AnimTimeSensorBase_exposer.def( 
                "getEnabled"
                , getEnabled_function_type( &::OSG::AnimTimeSensorBase::getEnabled ) );
        
        }
        { //::OSG::AnimTimeSensorBase::getForward
        
            typedef bool ( ::OSG::AnimTimeSensorBase::*getForward_function_type )(  ) const;
            
            AnimTimeSensorBase_exposer.def( 
                "getForward"
                , getForward_function_type( &::OSG::AnimTimeSensorBase::getForward ) );
        
        }
        { //::OSG::AnimTimeSensorBase::getFraction
        
            typedef ::OSG::Real32 ( ::OSG::AnimTimeSensorBase::*getFraction_function_type )(  ) const;
            
            AnimTimeSensorBase_exposer.def( 
                "getFraction"
                , getFraction_function_type( &::OSG::AnimTimeSensorBase::getFraction ) );
        
        }
        { //::OSG::AnimTimeSensorBase::getIsActive
        
            typedef bool ( ::OSG::AnimTimeSensorBase::*getIsActive_function_type )(  ) const;
            
            AnimTimeSensorBase_exposer.def( 
                "getIsActive"
                , getIsActive_function_type( &::OSG::AnimTimeSensorBase::getIsActive ) );
        
        }
        { //::OSG::AnimTimeSensorBase::getLoop
        
            typedef bool ( ::OSG::AnimTimeSensorBase::*getLoop_function_type )(  ) const;
            
            AnimTimeSensorBase_exposer.def( 
                "getLoop"
                , getLoop_function_type( &::OSG::AnimTimeSensorBase::getLoop ) );
        
        }
        { //::OSG::AnimTimeSensorBase::getSFAnimTime
        
            typedef ::OSG::SFReal32 const * ( ::OSG::AnimTimeSensorBase::*getSFAnimTime_function_type )(  ) const;
            
            AnimTimeSensorBase_exposer.def( 
                "getSFAnimTime"
                , getSFAnimTime_function_type( &::OSG::AnimTimeSensorBase::getSFAnimTime )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::AnimTimeSensorBase::getSFCycleLength
        
            typedef ::OSG::SFTime const * ( ::OSG::AnimTimeSensorBase::*getSFCycleLength_function_type )(  ) const;
            
            AnimTimeSensorBase_exposer.def( 
                "getSFCycleLength"
                , getSFCycleLength_function_type( &::OSG::AnimTimeSensorBase::getSFCycleLength )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::AnimTimeSensorBase::getSFEnabled
        
            typedef ::OSG::SFBool const * ( ::OSG::AnimTimeSensorBase::*getSFEnabled_function_type )(  ) const;
            
            AnimTimeSensorBase_exposer.def( 
                "getSFEnabled"
                , getSFEnabled_function_type( &::OSG::AnimTimeSensorBase::getSFEnabled )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::AnimTimeSensorBase::getSFForward
        
            typedef ::OSG::SFBool const * ( ::OSG::AnimTimeSensorBase::*getSFForward_function_type )(  ) const;
            
            AnimTimeSensorBase_exposer.def( 
                "getSFForward"
                , getSFForward_function_type( &::OSG::AnimTimeSensorBase::getSFForward )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::AnimTimeSensorBase::getSFFraction
        
            typedef ::OSG::SFReal32 const * ( ::OSG::AnimTimeSensorBase::*getSFFraction_function_type )(  ) const;
            
            AnimTimeSensorBase_exposer.def( 
                "getSFFraction"
                , getSFFraction_function_type( &::OSG::AnimTimeSensorBase::getSFFraction )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::AnimTimeSensorBase::getSFIsActive
        
            typedef ::OSG::SFBool const * ( ::OSG::AnimTimeSensorBase::*getSFIsActive_function_type )(  ) const;
            
            AnimTimeSensorBase_exposer.def( 
                "getSFIsActive"
                , getSFIsActive_function_type( &::OSG::AnimTimeSensorBase::getSFIsActive )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::AnimTimeSensorBase::getSFLoop
        
            typedef ::OSG::SFBool const * ( ::OSG::AnimTimeSensorBase::*getSFLoop_function_type )(  ) const;
            
            AnimTimeSensorBase_exposer.def( 
                "getSFLoop"
                , getSFLoop_function_type( &::OSG::AnimTimeSensorBase::getSFLoop )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::AnimTimeSensorBase::getSFStartTime
        
            typedef ::OSG::SFTime const * ( ::OSG::AnimTimeSensorBase::*getSFStartTime_function_type )(  ) const;
            
            AnimTimeSensorBase_exposer.def( 
                "getSFStartTime"
                , getSFStartTime_function_type( &::OSG::AnimTimeSensorBase::getSFStartTime )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::AnimTimeSensorBase::getSFStopTime
        
            typedef ::OSG::SFTime const * ( ::OSG::AnimTimeSensorBase::*getSFStopTime_function_type )(  ) const;
            
            AnimTimeSensorBase_exposer.def( 
                "getSFStopTime"
                , getSFStopTime_function_type( &::OSG::AnimTimeSensorBase::getSFStopTime )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::AnimTimeSensorBase::getSFTime
        
            typedef ::OSG::SFTime const * ( ::OSG::AnimTimeSensorBase::*getSFTime_function_type )(  ) const;
            
            AnimTimeSensorBase_exposer.def( 
                "getSFTime"
                , getSFTime_function_type( &::OSG::AnimTimeSensorBase::getSFTime )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::AnimTimeSensorBase::getSFTimeScale
        
            typedef ::OSG::SFReal32 const * ( ::OSG::AnimTimeSensorBase::*getSFTimeScale_function_type )(  ) const;
            
            AnimTimeSensorBase_exposer.def( 
                "getSFTimeScale"
                , getSFTimeScale_function_type( &::OSG::AnimTimeSensorBase::getSFTimeScale )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::AnimTimeSensorBase::getStartTime
        
            typedef ::OSG::Time const & ( ::OSG::AnimTimeSensorBase::*getStartTime_function_type )(  ) const;
            
            AnimTimeSensorBase_exposer.def( 
                "getStartTime"
                , getStartTime_function_type( &::OSG::AnimTimeSensorBase::getStartTime )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::AnimTimeSensorBase::getStopTime
        
            typedef ::OSG::Time const & ( ::OSG::AnimTimeSensorBase::*getStopTime_function_type )(  ) const;
            
            AnimTimeSensorBase_exposer.def( 
                "getStopTime"
                , getStopTime_function_type( &::OSG::AnimTimeSensorBase::getStopTime )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::AnimTimeSensorBase::getTime
        
            typedef ::OSG::Time const & ( ::OSG::AnimTimeSensorBase::*getTime_function_type )(  ) const;
            
            AnimTimeSensorBase_exposer.def( 
                "getTime"
                , getTime_function_type( &::OSG::AnimTimeSensorBase::getTime )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::AnimTimeSensorBase::getTimeScale
        
            typedef ::OSG::Real32 ( ::OSG::AnimTimeSensorBase::*getTimeScale_function_type )(  ) const;
            
            AnimTimeSensorBase_exposer.def( 
                "getTimeScale"
                , getTimeScale_function_type( &::OSG::AnimTimeSensorBase::getTimeScale ) );
        
        }
        { //::OSG::AnimTimeSensorBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::AnimTimeSensorBase::*getType_function_type )(  ) ;
            
            AnimTimeSensorBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::AnimTimeSensorBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::AnimTimeSensorBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::AnimTimeSensorBase::*getType_function_type )(  ) const;
            
            AnimTimeSensorBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::AnimTimeSensorBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::AnimTimeSensorBase::setAnimTime
        
            typedef void ( ::OSG::AnimTimeSensorBase::*setAnimTime_function_type )( ::OSG::Real32 const ) ;
            
            AnimTimeSensorBase_exposer.def( 
                "setAnimTime"
                , setAnimTime_function_type( &::OSG::AnimTimeSensorBase::setAnimTime )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::AnimTimeSensorBase::setCycleLength
        
            typedef void ( ::OSG::AnimTimeSensorBase::*setCycleLength_function_type )( ::OSG::Time const & ) ;
            
            AnimTimeSensorBase_exposer.def( 
                "setCycleLength"
                , setCycleLength_function_type( &::OSG::AnimTimeSensorBase::setCycleLength )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::AnimTimeSensorBase::setEnabled
        
            typedef void ( ::OSG::AnimTimeSensorBase::*setEnabled_function_type )( bool const ) ;
            
            AnimTimeSensorBase_exposer.def( 
                "setEnabled"
                , setEnabled_function_type( &::OSG::AnimTimeSensorBase::setEnabled )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::AnimTimeSensorBase::setForward
        
            typedef void ( ::OSG::AnimTimeSensorBase::*setForward_function_type )( bool const ) ;
            
            AnimTimeSensorBase_exposer.def( 
                "setForward"
                , setForward_function_type( &::OSG::AnimTimeSensorBase::setForward )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::AnimTimeSensorBase::setFraction
        
            typedef void ( ::OSG::AnimTimeSensorBase::*setFraction_function_type )( ::OSG::Real32 const ) ;
            
            AnimTimeSensorBase_exposer.def( 
                "setFraction"
                , setFraction_function_type( &::OSG::AnimTimeSensorBase::setFraction )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::AnimTimeSensorBase::setIsActive
        
            typedef void ( ::OSG::AnimTimeSensorBase::*setIsActive_function_type )( bool const ) ;
            
            AnimTimeSensorBase_exposer.def( 
                "setIsActive"
                , setIsActive_function_type( &::OSG::AnimTimeSensorBase::setIsActive )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::AnimTimeSensorBase::setLoop
        
            typedef void ( ::OSG::AnimTimeSensorBase::*setLoop_function_type )( bool const ) ;
            
            AnimTimeSensorBase_exposer.def( 
                "setLoop"
                , setLoop_function_type( &::OSG::AnimTimeSensorBase::setLoop )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::AnimTimeSensorBase::setStartTime
        
            typedef void ( ::OSG::AnimTimeSensorBase::*setStartTime_function_type )( ::OSG::Time const & ) ;
            
            AnimTimeSensorBase_exposer.def( 
                "setStartTime"
                , setStartTime_function_type( &::OSG::AnimTimeSensorBase::setStartTime )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::AnimTimeSensorBase::setStopTime
        
            typedef void ( ::OSG::AnimTimeSensorBase::*setStopTime_function_type )( ::OSG::Time const & ) ;
            
            AnimTimeSensorBase_exposer.def( 
                "setStopTime"
                , setStopTime_function_type( &::OSG::AnimTimeSensorBase::setStopTime )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::AnimTimeSensorBase::setTime
        
            typedef void ( ::OSG::AnimTimeSensorBase::*setTime_function_type )( ::OSG::Time const & ) ;
            
            AnimTimeSensorBase_exposer.def( 
                "setTime"
                , setTime_function_type( &::OSG::AnimTimeSensorBase::setTime )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::AnimTimeSensorBase::setTimeScale
        
            typedef void ( ::OSG::AnimTimeSensorBase::*setTimeScale_function_type )( ::OSG::Real32 const ) ;
            
            AnimTimeSensorBase_exposer.def( 
                "setTimeScale"
                , setTimeScale_function_type( &::OSG::AnimTimeSensorBase::setTimeScale )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FrameTaskInterface::frame
        
            typedef void ( ::OSG::FrameTaskInterface::*frame_function_type )( ::OSG::Time,::OSG::UInt32 ) ;
            
            AnimTimeSensorBase_exposer.def( 
                "frame"
                , bp::pure_virtual( frame_function_type(&::OSG::FrameTaskInterface::frame) )
                , ( bp::arg("oTime"), bp::arg("uiFrame") ) );
        
        }
        AnimTimeSensorBase_exposer.staticmethod( "create" );
        AnimTimeSensorBase_exposer.staticmethod( "createDependent" );
        AnimTimeSensorBase_exposer.staticmethod( "createLocal" );
        AnimTimeSensorBase_exposer.staticmethod( "getClassGroupId" );
        AnimTimeSensorBase_exposer.staticmethod( "getClassType" );
        AnimTimeSensorBase_exposer.staticmethod( "getClassTypeId" );
    }

}
