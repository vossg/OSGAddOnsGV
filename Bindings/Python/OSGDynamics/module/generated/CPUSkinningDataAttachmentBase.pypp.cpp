// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGDynamics_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "CPUSkinningDataAttachmentBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

boost::python::list CPUSkinningDataAttachmentBase_getMFProperties(OSG::CPUSkinningDataAttachmentBase *self)
{
   boost::python::list result;
   OSG::MFUnrecChildGeoVectorPropertyPtr const * mf_data = self->getMFProperties();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append(OSG::GeoVectorProperty::ObjRecPtr((*mf_data)[i]));
   }
   return result;
}

boost::python::list CPUSkinningDataAttachmentBase_getMFJointMatrices(OSG::CPUSkinningDataAttachmentBase *self)
{
   boost::python::list result;
   OSG::MFMatrix const * mf_data = self->getMFJointMatrices();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list CPUSkinningDataAttachmentBase_getMFJointNormalMatrices(OSG::CPUSkinningDataAttachmentBase *self)
{
   boost::python::list result;
   OSG::MFMatrix const * mf_data = self->getMFJointNormalMatrices();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

void register_CPUSkinningDataAttachmentBase_class(){

    { //::OSG::CPUSkinningDataAttachmentBase
        typedef bp::class_< OSG::CPUSkinningDataAttachmentBase, bp::bases< ::OSG::Attachment >, boost::noncopyable > CPUSkinningDataAttachmentBase_exposer_t;
        CPUSkinningDataAttachmentBase_exposer_t CPUSkinningDataAttachmentBase_exposer = CPUSkinningDataAttachmentBase_exposer_t( "CPUSkinningDataAttachmentBase", bp::no_init );
        bp::scope CPUSkinningDataAttachmentBase_scope( CPUSkinningDataAttachmentBase_exposer );
        bp::scope().attr("PropertiesFieldId") = (int)OSG::CPUSkinningDataAttachmentBase::PropertiesFieldId;
        bp::scope().attr("JointMatricesFieldId") = (int)OSG::CPUSkinningDataAttachmentBase::JointMatricesFieldId;
        bp::scope().attr("JointNormalMatricesFieldId") = (int)OSG::CPUSkinningDataAttachmentBase::JointNormalMatricesFieldId;
        bp::scope().attr("DataValidFieldId") = (int)OSG::CPUSkinningDataAttachmentBase::DataValidFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::CPUSkinningDataAttachmentBase::NextFieldId;
        { //::OSG::CPUSkinningDataAttachmentBase::assignProperties
        
            typedef void ( ::OSG::CPUSkinningDataAttachmentBase::*assignProperties_function_type )( ::OSG::MFUnrecChildGeoVectorPropertyPtr const & ) ;
            
            CPUSkinningDataAttachmentBase_exposer.def( 
                "assignProperties"
                , assignProperties_function_type( &::OSG::CPUSkinningDataAttachmentBase::assignProperties )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CPUSkinningDataAttachmentBase::clearProperties
        
            typedef void ( ::OSG::CPUSkinningDataAttachmentBase::*clearProperties_function_type )(  ) ;
            
            CPUSkinningDataAttachmentBase_exposer.def( 
                "clearProperties"
                , clearProperties_function_type( &::OSG::CPUSkinningDataAttachmentBase::clearProperties ) );
        
        }
        { //::OSG::CPUSkinningDataAttachmentBase::copyFromBin
        
            typedef void ( ::OSG::CPUSkinningDataAttachmentBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            CPUSkinningDataAttachmentBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::CPUSkinningDataAttachmentBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::CPUSkinningDataAttachmentBase::copyToBin
        
            typedef void ( ::OSG::CPUSkinningDataAttachmentBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            CPUSkinningDataAttachmentBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::CPUSkinningDataAttachmentBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::CPUSkinningDataAttachmentBase::create
        
            typedef ::OSG::CPUSkinningDataAttachmentTransitPtr ( *create_function_type )(  );
            
            CPUSkinningDataAttachmentBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::CPUSkinningDataAttachmentBase::create ) );
        
        }
        { //::OSG::CPUSkinningDataAttachmentBase::createDependent
        
            typedef ::OSG::CPUSkinningDataAttachmentTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            CPUSkinningDataAttachmentBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::CPUSkinningDataAttachmentBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::CPUSkinningDataAttachmentBase::createLocal
        
            typedef ::OSG::CPUSkinningDataAttachmentTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            CPUSkinningDataAttachmentBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::CPUSkinningDataAttachmentBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::CPUSkinningDataAttachmentBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::CPUSkinningDataAttachmentBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            CPUSkinningDataAttachmentBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::CPUSkinningDataAttachmentBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::CPUSkinningDataAttachmentBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            CPUSkinningDataAttachmentBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::CPUSkinningDataAttachmentBase::getClassGroupId ) );
        
        }
        { //::OSG::CPUSkinningDataAttachmentBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            CPUSkinningDataAttachmentBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::CPUSkinningDataAttachmentBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::CPUSkinningDataAttachmentBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            CPUSkinningDataAttachmentBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::CPUSkinningDataAttachmentBase::getClassTypeId ) );
        
        }
        { //::OSG::CPUSkinningDataAttachmentBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::CPUSkinningDataAttachmentBase::*getContainerSize_function_type )(  ) const;
            
            CPUSkinningDataAttachmentBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::CPUSkinningDataAttachmentBase::getContainerSize ) );
        
        }
        { //::OSG::CPUSkinningDataAttachmentBase::getDataValid
        
            typedef bool ( ::OSG::CPUSkinningDataAttachmentBase::*getDataValid_function_type )(  ) const;
            
            CPUSkinningDataAttachmentBase_exposer.def( 
                "getDataValid"
                , getDataValid_function_type( &::OSG::CPUSkinningDataAttachmentBase::getDataValid ) );
        
        }
        { //::OSG::CPUSkinningDataAttachmentBase::getJointMatrices
        
            typedef ::OSG::Matrix const & ( ::OSG::CPUSkinningDataAttachmentBase::*getJointMatrices_function_type )( ::OSG::UInt32 const ) const;
            
            CPUSkinningDataAttachmentBase_exposer.def( 
                "getJointMatrices"
                , getJointMatrices_function_type( &::OSG::CPUSkinningDataAttachmentBase::getJointMatrices )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::CPUSkinningDataAttachmentBase::getJointNormalMatrices
        
            typedef ::OSG::Matrix const & ( ::OSG::CPUSkinningDataAttachmentBase::*getJointNormalMatrices_function_type )( ::OSG::UInt32 const ) const;
            
            CPUSkinningDataAttachmentBase_exposer.def( 
                "getJointNormalMatrices"
                , getJointNormalMatrices_function_type( &::OSG::CPUSkinningDataAttachmentBase::getJointNormalMatrices )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::CPUSkinningDataAttachmentBase::getProperties
        
            typedef ::OSG::GeoVectorProperty * ( ::OSG::CPUSkinningDataAttachmentBase::*getProperties_function_type )( ::OSG::UInt32 const ) const;
            
            CPUSkinningDataAttachmentBase_exposer.def( 
                "getProperties"
                , getProperties_function_type( &::OSG::CPUSkinningDataAttachmentBase::getProperties )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CPUSkinningDataAttachmentBase::getSFDataValid
        
            typedef ::OSG::SFBool const * ( ::OSG::CPUSkinningDataAttachmentBase::*getSFDataValid_function_type )(  ) const;
            
            CPUSkinningDataAttachmentBase_exposer.def( 
                "getSFDataValid"
                , getSFDataValid_function_type( &::OSG::CPUSkinningDataAttachmentBase::getSFDataValid )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CPUSkinningDataAttachmentBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::CPUSkinningDataAttachmentBase::*getType_function_type )(  ) ;
            
            CPUSkinningDataAttachmentBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::CPUSkinningDataAttachmentBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CPUSkinningDataAttachmentBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::CPUSkinningDataAttachmentBase::*getType_function_type )(  ) const;
            
            CPUSkinningDataAttachmentBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::CPUSkinningDataAttachmentBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CPUSkinningDataAttachmentBase::pushToProperties
        
            typedef void ( ::OSG::CPUSkinningDataAttachmentBase::*pushToProperties_function_type )( ::OSG::GeoVectorProperty * const ) ;
            
            CPUSkinningDataAttachmentBase_exposer.def( 
                "pushToProperties"
                , pushToProperties_function_type( &::OSG::CPUSkinningDataAttachmentBase::pushToProperties )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CPUSkinningDataAttachmentBase::removeFromProperties
        
            typedef void ( ::OSG::CPUSkinningDataAttachmentBase::*removeFromProperties_function_type )( ::OSG::UInt32 ) ;
            
            CPUSkinningDataAttachmentBase_exposer.def( 
                "removeFromProperties"
                , removeFromProperties_function_type( &::OSG::CPUSkinningDataAttachmentBase::removeFromProperties )
                , ( bp::arg("uiIndex") ) );
        
        }
        { //::OSG::CPUSkinningDataAttachmentBase::removeObjFromProperties
        
            typedef void ( ::OSG::CPUSkinningDataAttachmentBase::*removeObjFromProperties_function_type )( ::OSG::GeoVectorProperty * const ) ;
            
            CPUSkinningDataAttachmentBase_exposer.def( 
                "removeObjFromProperties"
                , removeObjFromProperties_function_type( &::OSG::CPUSkinningDataAttachmentBase::removeObjFromProperties )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CPUSkinningDataAttachmentBase::setDataValid
        
            typedef void ( ::OSG::CPUSkinningDataAttachmentBase::*setDataValid_function_type )( bool const ) ;
            
            CPUSkinningDataAttachmentBase_exposer.def( 
                "setDataValid"
                , setDataValid_function_type( &::OSG::CPUSkinningDataAttachmentBase::setDataValid )
                , ( bp::arg("value") ) );
        
        }
        CPUSkinningDataAttachmentBase_exposer.staticmethod( "create" );
        CPUSkinningDataAttachmentBase_exposer.staticmethod( "createDependent" );
        CPUSkinningDataAttachmentBase_exposer.staticmethod( "createLocal" );
        CPUSkinningDataAttachmentBase_exposer.staticmethod( "getClassGroupId" );
        CPUSkinningDataAttachmentBase_exposer.staticmethod( "getClassType" );
        CPUSkinningDataAttachmentBase_exposer.staticmethod( "getClassTypeId" );
        CPUSkinningDataAttachmentBase_exposer.def("getMFProperties",CPUSkinningDataAttachmentBase_getMFProperties);
        CPUSkinningDataAttachmentBase_exposer.def("getMFJointMatrices",CPUSkinningDataAttachmentBase_getMFJointMatrices);
        CPUSkinningDataAttachmentBase_exposer.def("getMFJointNormalMatrices",CPUSkinningDataAttachmentBase_getMFJointNormalMatrices);
    }

}
