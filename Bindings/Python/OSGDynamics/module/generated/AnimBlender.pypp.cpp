// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGDynamics_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "AnimBlender.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct AnimBlender_wrapper : OSG::AnimBlender, bp::wrapper< OSG::AnimBlender > {

    virtual void frame( ::OSG::Time oTime, ::OSG::UInt32 uiFrame ){
        bp::override func_frame = this->get_override( "frame" );
        func_frame( oTime, uiFrame );
    }

};

void register_AnimBlender_class(){

    { //::OSG::AnimBlender
        typedef bp::class_< AnimBlender_wrapper, bp::bases< OSG::AnimBlenderBase >, boost::noncopyable > AnimBlender_exposer_t;
        AnimBlender_exposer_t AnimBlender_exposer = AnimBlender_exposer_t( "AnimBlender", bp::no_init );
        bp::scope AnimBlender_scope( AnimBlender_exposer );
        { //::OSG::AnimBlender::addChannel
        
            typedef void ( ::OSG::AnimBlender::*addChannel_function_type )( ::OSG::AnimChannel * ) ;
            
            AnimBlender_exposer.def( 
                "addChannel"
                , addChannel_function_type( &::OSG::AnimBlender::addChannel )
                , ( bp::arg("channel") ) );
        
        }
        { //::OSG::AnimBlender::changed
        
            typedef void ( ::OSG::AnimBlender::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            AnimBlender_exposer.def( 
                "changed"
                , changed_function_type( &::OSG::AnimBlender::changed )
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("details") ) );
        
        }
        { //::OSG::AnimBlender::connectTo
        
            typedef void ( ::OSG::AnimBlender::*connectTo_function_type )( ::OSG::AttachmentContainer *,::std::string const & ) ;
            
            AnimBlender_exposer.def( 
                "connectTo"
                , connectTo_function_type( &::OSG::AnimBlender::connectTo )
                , ( bp::arg("container"), bp::arg("fieldName") ) );
        
        }
        { //::OSG::AnimBlender::dump
        
            typedef void ( ::OSG::AnimBlender::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            AnimBlender_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::AnimBlender::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::AnimBlender::getPriority
        
            typedef ::OSG::Int32 ( ::OSG::AnimBlender::*getPriority_function_type )(  ) const;
            
            AnimBlender_exposer.def( 
                "getPriority"
                , getPriority_function_type( &::OSG::AnimBlender::getPriority ) );
        
        }
        { //::OSG::AnimBlender::subChannel
        
            typedef void ( ::OSG::AnimBlender::*subChannel_function_type )( ::OSG::AnimChannel * ) ;
            
            AnimBlender_exposer.def( 
                "subChannel"
                , subChannel_function_type( &::OSG::AnimBlender::subChannel )
                , ( bp::arg("channel") ) );
        
        }
        { //::OSG::FrameTaskInterface::frame
        
            typedef void ( ::OSG::FrameTaskInterface::*frame_function_type )( ::OSG::Time,::OSG::UInt32 ) ;
            
            AnimBlender_exposer.def( 
                "frame"
                , bp::pure_virtual( frame_function_type(&::OSG::FrameTaskInterface::frame) )
                , ( bp::arg("oTime"), bp::arg("uiFrame") ) );
        
        }
        pyopensg::register_transit< OSG::AnimBlender >::execute();
        bp::register_ptr_to_python< OSG::AnimBlender::ObjRecPtr >();
        bp::implicitly_convertible< OSG::AnimBlender::ObjRecPtr, OSG::AnimBlender* >();
        bp::implicitly_convertible< OSG::AnimBlender::ObjRecPtr, OSG::AnimBlender::ObjCPtr >();
        bp::implicitly_convertible< OSG::AnimBlender::ObjRecPtr, OSG::AttachmentContainer* >();
        bp::implicitly_convertible< OSG::AnimBlender::ObjRecPtr, OSG::AttachmentContainer::ObjRecPtr >();
        bp::implicitly_convertible<OSG::AnimBlender::ObjRecPtr, OSG::AttachmentContainer::ObjCPtr>();
    }

}
