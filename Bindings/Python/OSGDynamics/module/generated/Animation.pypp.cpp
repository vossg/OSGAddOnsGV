// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGDynamics_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "Animation.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_Animation_class(){

    { //::OSG::Animation
        typedef bp::class_< OSG::Animation, bp::bases< OSG::AnimationBase >, OSG::Animation::ObjRecPtr, boost::noncopyable > Animation_exposer_t;
        Animation_exposer_t Animation_exposer = Animation_exposer_t( "Animation", bp::no_init );
        bp::scope Animation_scope( Animation_exposer );
        { //::OSG::Animation::changed
        
            typedef void ( ::OSG::Animation::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            Animation_exposer.def( 
                "changed"
                , changed_function_type( &::OSG::Animation::changed )
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("details") ) );
        
        }
        { //::OSG::Animation::dump
        
            typedef void ( ::OSG::Animation::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            Animation_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::Animation::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::Animation::getLength
        
            typedef ::OSG::Real32 ( ::OSG::Animation::*getLength_function_type )(  ) const;
            
            Animation_exposer.def( 
                "getLength"
                , getLength_function_type( &::OSG::Animation::getLength ) );
        
        }
        { //::OSG::Animation::getName
        
            typedef ::std::string const & ( ::OSG::Animation::*getName_function_type )(  ) const;
            
            Animation_exposer.def( 
                "getName"
                , getName_function_type( &::OSG::Animation::getName )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::Animation::getTimeSensor
        
            typedef ::OSG::AnimTimeSensor * ( ::OSG::Animation::*getTimeSensor_function_type )(  ) const;
            
            Animation_exposer.def( 
                "getTimeSensor"
                , getTimeSensor_function_type( &::OSG::Animation::getTimeSensor )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Animation::isPlaying
        
            typedef bool ( ::OSG::Animation::*isPlaying_function_type )(  ) const;
            
            Animation_exposer.def( 
                "isPlaying"
                , isPlaying_function_type( &::OSG::Animation::isPlaying ) );
        
        }
        { //::OSG::Animation::reset
        
            typedef void ( ::OSG::Animation::*reset_function_type )(  ) ;
            
            Animation_exposer.def( 
                "reset"
                , reset_function_type( &::OSG::Animation::reset ) );
        
        }
        { //::OSG::Animation::setTimeSensor
        
            typedef void ( ::OSG::Animation::*setTimeSensor_function_type )( ::OSG::AnimTimeSensor * ) ;
            
            Animation_exposer.def( 
                "setTimeSensor"
                , setTimeSensor_function_type( &::OSG::Animation::setTimeSensor )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::Animation::start
        
            typedef void ( ::OSG::Animation::*start_function_type )( ::OSG::Time ) ;
            
            Animation_exposer.def( 
                "start"
                , start_function_type( &::OSG::Animation::start )
                , ( bp::arg("startTime") ) );
        
        }
        { //::OSG::Animation::startLoop
        
            typedef void ( ::OSG::Animation::*startLoop_function_type )( ::OSG::Time ) ;
            
            Animation_exposer.def( 
                "startLoop"
                , startLoop_function_type( &::OSG::Animation::startLoop )
                , ( bp::arg("startTime") ) );
        
        }
        { //::OSG::Animation::stop
        
            typedef void ( ::OSG::Animation::*stop_function_type )(  ) ;
            
            Animation_exposer.def( 
                "stop"
                , stop_function_type( &::OSG::Animation::stop ) );
        
        }
        pyopensg::register_transit< OSG::Animation >::execute();
        bp::implicitly_convertible< OSG::Animation::ObjRecPtr, OSG::Animation* >();
        bp::implicitly_convertible< OSG::Animation::ObjRecPtr, OSG::Animation::ObjCPtr >();
        bp::implicitly_convertible< OSG::Animation::ObjRecPtr, OSG::AttachmentContainer* >();
        bp::implicitly_convertible< OSG::Animation::ObjRecPtr, OSG::AttachmentContainer::ObjRecPtr >();
        bp::implicitly_convertible<OSG::Animation::ObjRecPtr, OSG::AttachmentContainer::ObjCPtr>();
    }

}
