// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGDynamics_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "TimeSensorBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct TimeSensorBase_wrapper : OSG::TimeSensorBase, bp::wrapper< OSG::TimeSensorBase > {

    virtual void frame( ::OSG::Time oTime, ::OSG::UInt32 uiFrame ){
        bp::override func_frame = this->get_override( "frame" );
        func_frame( oTime, uiFrame );
    }

};

void register_TimeSensorBase_class(){

    { //::OSG::TimeSensorBase
        typedef bp::class_< TimeSensorBase_wrapper, boost::noncopyable > TimeSensorBase_exposer_t;
        TimeSensorBase_exposer_t TimeSensorBase_exposer = TimeSensorBase_exposer_t( "TimeSensorBase", bp::no_init );
        bp::scope TimeSensorBase_scope( TimeSensorBase_exposer );
        bp::scope().attr("EnabledFieldId") = (int)OSG::TimeSensorBase::EnabledFieldId;
        bp::scope().attr("IsActiveFieldId") = (int)OSG::TimeSensorBase::IsActiveFieldId;
        bp::scope().attr("LoopFieldId") = (int)OSG::TimeSensorBase::LoopFieldId;
        bp::scope().attr("FractionFieldId") = (int)OSG::TimeSensorBase::FractionFieldId;
        bp::scope().attr("StartTimeFieldId") = (int)OSG::TimeSensorBase::StartTimeFieldId;
        bp::scope().attr("StopTimeFieldId") = (int)OSG::TimeSensorBase::StopTimeFieldId;
        bp::scope().attr("CycleTimeFieldId") = (int)OSG::TimeSensorBase::CycleTimeFieldId;
        bp::scope().attr("TimeFieldId") = (int)OSG::TimeSensorBase::TimeFieldId;
        bp::scope().attr("CycleIntervalFieldId") = (int)OSG::TimeSensorBase::CycleIntervalFieldId;
        bp::scope().attr("ChangeFractionByFieldId") = (int)OSG::TimeSensorBase::ChangeFractionByFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::TimeSensorBase::NextFieldId;
        { //::OSG::TimeSensorBase::copyFromBin
        
            typedef void ( ::OSG::TimeSensorBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            TimeSensorBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::TimeSensorBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::TimeSensorBase::copyToBin
        
            typedef void ( ::OSG::TimeSensorBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            TimeSensorBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::TimeSensorBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::TimeSensorBase::create
        
            typedef ::OSG::TimeSensorTransitPtr ( *create_function_type )(  );
            
            TimeSensorBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::TimeSensorBase::create ) );
        
        }
        { //::OSG::TimeSensorBase::createDependent
        
            typedef ::OSG::TimeSensorTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            TimeSensorBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::TimeSensorBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::TimeSensorBase::createLocal
        
            typedef ::OSG::TimeSensorTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            TimeSensorBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::TimeSensorBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::TimeSensorBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::TimeSensorBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            TimeSensorBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::TimeSensorBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::TimeSensorBase::getChangeFractionBy
        
            typedef ::OSG::Time const & ( ::OSG::TimeSensorBase::*getChangeFractionBy_function_type )(  ) const;
            
            TimeSensorBase_exposer.def( 
                "getChangeFractionBy"
                , getChangeFractionBy_function_type( &::OSG::TimeSensorBase::getChangeFractionBy )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TimeSensorBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            TimeSensorBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::TimeSensorBase::getClassGroupId ) );
        
        }
        { //::OSG::TimeSensorBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            TimeSensorBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::TimeSensorBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::TimeSensorBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            TimeSensorBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::TimeSensorBase::getClassTypeId ) );
        
        }
        { //::OSG::TimeSensorBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::TimeSensorBase::*getContainerSize_function_type )(  ) const;
            
            TimeSensorBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::TimeSensorBase::getContainerSize ) );
        
        }
        { //::OSG::TimeSensorBase::getCycleInterval
        
            typedef ::OSG::Time const & ( ::OSG::TimeSensorBase::*getCycleInterval_function_type )(  ) const;
            
            TimeSensorBase_exposer.def( 
                "getCycleInterval"
                , getCycleInterval_function_type( &::OSG::TimeSensorBase::getCycleInterval )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TimeSensorBase::getCycleTime
        
            typedef ::OSG::Time const & ( ::OSG::TimeSensorBase::*getCycleTime_function_type )(  ) const;
            
            TimeSensorBase_exposer.def( 
                "getCycleTime"
                , getCycleTime_function_type( &::OSG::TimeSensorBase::getCycleTime )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TimeSensorBase::getEnabled
        
            typedef bool ( ::OSG::TimeSensorBase::*getEnabled_function_type )(  ) const;
            
            TimeSensorBase_exposer.def( 
                "getEnabled"
                , getEnabled_function_type( &::OSG::TimeSensorBase::getEnabled ) );
        
        }
        { //::OSG::TimeSensorBase::getFraction
        
            typedef ::OSG::Real32 ( ::OSG::TimeSensorBase::*getFraction_function_type )(  ) const;
            
            TimeSensorBase_exposer.def( 
                "getFraction"
                , getFraction_function_type( &::OSG::TimeSensorBase::getFraction ) );
        
        }
        { //::OSG::TimeSensorBase::getIsActive
        
            typedef bool ( ::OSG::TimeSensorBase::*getIsActive_function_type )(  ) const;
            
            TimeSensorBase_exposer.def( 
                "getIsActive"
                , getIsActive_function_type( &::OSG::TimeSensorBase::getIsActive ) );
        
        }
        { //::OSG::TimeSensorBase::getLoop
        
            typedef bool ( ::OSG::TimeSensorBase::*getLoop_function_type )(  ) const;
            
            TimeSensorBase_exposer.def( 
                "getLoop"
                , getLoop_function_type( &::OSG::TimeSensorBase::getLoop ) );
        
        }
        { //::OSG::TimeSensorBase::getSFChangeFractionBy
        
            typedef ::OSG::SFTime const * ( ::OSG::TimeSensorBase::*getSFChangeFractionBy_function_type )(  ) const;
            
            TimeSensorBase_exposer.def( 
                "getSFChangeFractionBy"
                , getSFChangeFractionBy_function_type( &::OSG::TimeSensorBase::getSFChangeFractionBy )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TimeSensorBase::getSFCycleInterval
        
            typedef ::OSG::SFTime const * ( ::OSG::TimeSensorBase::*getSFCycleInterval_function_type )(  ) const;
            
            TimeSensorBase_exposer.def( 
                "getSFCycleInterval"
                , getSFCycleInterval_function_type( &::OSG::TimeSensorBase::getSFCycleInterval )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TimeSensorBase::getSFCycleTime
        
            typedef ::OSG::SFTime const * ( ::OSG::TimeSensorBase::*getSFCycleTime_function_type )(  ) const;
            
            TimeSensorBase_exposer.def( 
                "getSFCycleTime"
                , getSFCycleTime_function_type( &::OSG::TimeSensorBase::getSFCycleTime )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TimeSensorBase::getSFEnabled
        
            typedef ::OSG::SFBool const * ( ::OSG::TimeSensorBase::*getSFEnabled_function_type )(  ) const;
            
            TimeSensorBase_exposer.def( 
                "getSFEnabled"
                , getSFEnabled_function_type( &::OSG::TimeSensorBase::getSFEnabled )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TimeSensorBase::getSFFraction
        
            typedef ::OSG::SFReal32 const * ( ::OSG::TimeSensorBase::*getSFFraction_function_type )(  ) const;
            
            TimeSensorBase_exposer.def( 
                "getSFFraction"
                , getSFFraction_function_type( &::OSG::TimeSensorBase::getSFFraction )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TimeSensorBase::getSFIsActive
        
            typedef ::OSG::SFBool const * ( ::OSG::TimeSensorBase::*getSFIsActive_function_type )(  ) const;
            
            TimeSensorBase_exposer.def( 
                "getSFIsActive"
                , getSFIsActive_function_type( &::OSG::TimeSensorBase::getSFIsActive )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TimeSensorBase::getSFLoop
        
            typedef ::OSG::SFBool const * ( ::OSG::TimeSensorBase::*getSFLoop_function_type )(  ) const;
            
            TimeSensorBase_exposer.def( 
                "getSFLoop"
                , getSFLoop_function_type( &::OSG::TimeSensorBase::getSFLoop )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TimeSensorBase::getSFStartTime
        
            typedef ::OSG::SFTime const * ( ::OSG::TimeSensorBase::*getSFStartTime_function_type )(  ) const;
            
            TimeSensorBase_exposer.def( 
                "getSFStartTime"
                , getSFStartTime_function_type( &::OSG::TimeSensorBase::getSFStartTime )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TimeSensorBase::getSFStopTime
        
            typedef ::OSG::SFTime const * ( ::OSG::TimeSensorBase::*getSFStopTime_function_type )(  ) const;
            
            TimeSensorBase_exposer.def( 
                "getSFStopTime"
                , getSFStopTime_function_type( &::OSG::TimeSensorBase::getSFStopTime )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TimeSensorBase::getSFTime
        
            typedef ::OSG::SFTime const * ( ::OSG::TimeSensorBase::*getSFTime_function_type )(  ) const;
            
            TimeSensorBase_exposer.def( 
                "getSFTime"
                , getSFTime_function_type( &::OSG::TimeSensorBase::getSFTime )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TimeSensorBase::getStartTime
        
            typedef ::OSG::Time const & ( ::OSG::TimeSensorBase::*getStartTime_function_type )(  ) const;
            
            TimeSensorBase_exposer.def( 
                "getStartTime"
                , getStartTime_function_type( &::OSG::TimeSensorBase::getStartTime )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TimeSensorBase::getStopTime
        
            typedef ::OSG::Time const & ( ::OSG::TimeSensorBase::*getStopTime_function_type )(  ) const;
            
            TimeSensorBase_exposer.def( 
                "getStopTime"
                , getStopTime_function_type( &::OSG::TimeSensorBase::getStopTime )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TimeSensorBase::getTime
        
            typedef ::OSG::Time const & ( ::OSG::TimeSensorBase::*getTime_function_type )(  ) const;
            
            TimeSensorBase_exposer.def( 
                "getTime"
                , getTime_function_type( &::OSG::TimeSensorBase::getTime )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TimeSensorBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::TimeSensorBase::*getType_function_type )(  ) ;
            
            TimeSensorBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::TimeSensorBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TimeSensorBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::TimeSensorBase::*getType_function_type )(  ) const;
            
            TimeSensorBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::TimeSensorBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TimeSensorBase::setChangeFractionBy
        
            typedef void ( ::OSG::TimeSensorBase::*setChangeFractionBy_function_type )( ::OSG::Time const & ) ;
            
            TimeSensorBase_exposer.def( 
                "setChangeFractionBy"
                , setChangeFractionBy_function_type( &::OSG::TimeSensorBase::setChangeFractionBy )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TimeSensorBase::setCycleInterval
        
            typedef void ( ::OSG::TimeSensorBase::*setCycleInterval_function_type )( ::OSG::Time const & ) ;
            
            TimeSensorBase_exposer.def( 
                "setCycleInterval"
                , setCycleInterval_function_type( &::OSG::TimeSensorBase::setCycleInterval )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TimeSensorBase::setCycleTime
        
            typedef void ( ::OSG::TimeSensorBase::*setCycleTime_function_type )( ::OSG::Time const & ) ;
            
            TimeSensorBase_exposer.def( 
                "setCycleTime"
                , setCycleTime_function_type( &::OSG::TimeSensorBase::setCycleTime )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TimeSensorBase::setEnabled
        
            typedef void ( ::OSG::TimeSensorBase::*setEnabled_function_type )( bool const ) ;
            
            TimeSensorBase_exposer.def( 
                "setEnabled"
                , setEnabled_function_type( &::OSG::TimeSensorBase::setEnabled )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TimeSensorBase::setFraction
        
            typedef void ( ::OSG::TimeSensorBase::*setFraction_function_type )( ::OSG::Real32 const ) ;
            
            TimeSensorBase_exposer.def( 
                "setFraction"
                , setFraction_function_type( &::OSG::TimeSensorBase::setFraction )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TimeSensorBase::setIsActive
        
            typedef void ( ::OSG::TimeSensorBase::*setIsActive_function_type )( bool const ) ;
            
            TimeSensorBase_exposer.def( 
                "setIsActive"
                , setIsActive_function_type( &::OSG::TimeSensorBase::setIsActive )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TimeSensorBase::setLoop
        
            typedef void ( ::OSG::TimeSensorBase::*setLoop_function_type )( bool const ) ;
            
            TimeSensorBase_exposer.def( 
                "setLoop"
                , setLoop_function_type( &::OSG::TimeSensorBase::setLoop )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TimeSensorBase::setStartTime
        
            typedef void ( ::OSG::TimeSensorBase::*setStartTime_function_type )( ::OSG::Time const & ) ;
            
            TimeSensorBase_exposer.def( 
                "setStartTime"
                , setStartTime_function_type( &::OSG::TimeSensorBase::setStartTime )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TimeSensorBase::setStopTime
        
            typedef void ( ::OSG::TimeSensorBase::*setStopTime_function_type )( ::OSG::Time const & ) ;
            
            TimeSensorBase_exposer.def( 
                "setStopTime"
                , setStopTime_function_type( &::OSG::TimeSensorBase::setStopTime )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TimeSensorBase::setTime
        
            typedef void ( ::OSG::TimeSensorBase::*setTime_function_type )( ::OSG::Time const & ) ;
            
            TimeSensorBase_exposer.def( 
                "setTime"
                , setTime_function_type( &::OSG::TimeSensorBase::setTime )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FrameTaskInterface::frame
        
            typedef void ( ::OSG::FrameTaskInterface::*frame_function_type )( ::OSG::Time,::OSG::UInt32 ) ;
            
            TimeSensorBase_exposer.def( 
                "frame"
                , bp::pure_virtual( frame_function_type(&::OSG::FrameTaskInterface::frame) )
                , ( bp::arg("oTime"), bp::arg("uiFrame") ) );
        
        }
        TimeSensorBase_exposer.staticmethod( "create" );
        TimeSensorBase_exposer.staticmethod( "createDependent" );
        TimeSensorBase_exposer.staticmethod( "createLocal" );
        TimeSensorBase_exposer.staticmethod( "getClassGroupId" );
        TimeSensorBase_exposer.staticmethod( "getClassType" );
        TimeSensorBase_exposer.staticmethod( "getClassTypeId" );
    }

}
