// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGDynamics_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "SkeletonSkinningAlgorithm.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_SkeletonSkinningAlgorithm_class(){

    { //::OSG::SkeletonSkinningAlgorithm
        typedef bp::class_< OSG::SkeletonSkinningAlgorithm, bp::bases< OSG::SkeletonSkinningAlgorithmBase >, OSG::SkeletonSkinningAlgorithm::ObjRecPtr, boost::noncopyable > SkeletonSkinningAlgorithm_exposer_t;
        SkeletonSkinningAlgorithm_exposer_t SkeletonSkinningAlgorithm_exposer = SkeletonSkinningAlgorithm_exposer_t( "SkeletonSkinningAlgorithm", bp::no_init );
        bp::scope SkeletonSkinningAlgorithm_scope( SkeletonSkinningAlgorithm_exposer );
        { //::OSG::SkeletonSkinningAlgorithm::adjustVolume
        
            typedef void ( ::OSG::SkeletonSkinningAlgorithm::*adjustVolume_function_type )( ::OSG::Volume & ) ;
            
            SkeletonSkinningAlgorithm_exposer.def( 
                "adjustVolume"
                , adjustVolume_function_type( &::OSG::SkeletonSkinningAlgorithm::adjustVolume )
                , ( bp::arg("volume") ) );
        
        }
        { //::OSG::SkeletonSkinningAlgorithm::changed
        
            typedef void ( ::OSG::SkeletonSkinningAlgorithm::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            SkeletonSkinningAlgorithm_exposer.def( 
                "changed"
                , changed_function_type( &::OSG::SkeletonSkinningAlgorithm::changed )
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("details") ) );
        
        }
        { //::OSG::SkeletonSkinningAlgorithm::dump
        
            typedef void ( ::OSG::SkeletonSkinningAlgorithm::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            SkeletonSkinningAlgorithm_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::SkeletonSkinningAlgorithm::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::SkeletonSkinningAlgorithm::getRenderMode
        
            typedef ::OSG::SkinnedGeometry::RenderModeE ( ::OSG::SkeletonSkinningAlgorithm::*getRenderMode_function_type )(  ) const;
            
            SkeletonSkinningAlgorithm_exposer.def( 
                "getRenderMode"
                , getRenderMode_function_type( &::OSG::SkeletonSkinningAlgorithm::getRenderMode ) );
        
        }
        { //::OSG::SkeletonSkinningAlgorithm::intersectEnter
        
            typedef ::OSG::ActionBase::ResultE ( ::OSG::SkeletonSkinningAlgorithm::*intersectEnter_function_type )( ::OSG::Action * ) ;
            
            SkeletonSkinningAlgorithm_exposer.def( 
                "intersectEnter"
                , intersectEnter_function_type( &::OSG::SkeletonSkinningAlgorithm::intersectEnter )
                , ( bp::arg("action") ) );
        
        }
        { //::OSG::SkeletonSkinningAlgorithm::renderEnter
        
            typedef ::OSG::ActionBase::ResultE ( ::OSG::SkeletonSkinningAlgorithm::*renderEnter_function_type )( ::OSG::Action * ) ;
            
            SkeletonSkinningAlgorithm_exposer.def( 
                "renderEnter"
                , renderEnter_function_type( &::OSG::SkeletonSkinningAlgorithm::renderEnter )
                , ( bp::arg("action") ) );
        
        }
        { //::OSG::SkeletonSkinningAlgorithm::renderLeave
        
            typedef ::OSG::ActionBase::ResultE ( ::OSG::SkeletonSkinningAlgorithm::*renderLeave_function_type )( ::OSG::Action * ) ;
            
            SkeletonSkinningAlgorithm_exposer.def( 
                "renderLeave"
                , renderLeave_function_type( &::OSG::SkeletonSkinningAlgorithm::renderLeave )
                , ( bp::arg("action") ) );
        
        }
        pyopensg::register_transit< OSG::SkeletonSkinningAlgorithm >::execute();
        bp::implicitly_convertible< OSG::SkeletonSkinningAlgorithm::ObjRecPtr, OSG::SkeletonSkinningAlgorithm* >();
        bp::implicitly_convertible< OSG::SkeletonSkinningAlgorithm::ObjRecPtr, OSG::SkeletonSkinningAlgorithm::ObjCPtr >();
        bp::implicitly_convertible< OSG::SkeletonSkinningAlgorithm::ObjRecPtr, OSG::SkinningAlgorithm* >();
        bp::implicitly_convertible< OSG::SkeletonSkinningAlgorithm::ObjRecPtr, OSG::SkinningAlgorithm::ObjRecPtr >();
        bp::implicitly_convertible<OSG::SkeletonSkinningAlgorithm::ObjRecPtr, OSG::SkinningAlgorithm::ObjCPtr>();
    }

}
