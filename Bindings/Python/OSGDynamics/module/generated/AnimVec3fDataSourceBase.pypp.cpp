// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGDynamics_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "AnimVec3fDataSourceBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct AnimVec3fDataSourceBase_wrapper : OSG::AnimVec3fDataSourceBase, bp::wrapper< OSG::AnimVec3fDataSourceBase > {



};

boost::python::list AnimVec3fDataSourceBase_getMFValues(OSG::AnimVec3fDataSourceBase *self)
{
   boost::python::list result;
   OSG::MFVec3f const * mf_data = self->getMFValues();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list AnimVec3fDataSourceBase_getMFInTangentsX(OSG::AnimVec3fDataSourceBase *self)
{
   boost::python::list result;
   OSG::MFVec2f const * mf_data = self->getMFInTangentsX();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list AnimVec3fDataSourceBase_getMFInTangentsY(OSG::AnimVec3fDataSourceBase *self)
{
   boost::python::list result;
   OSG::MFVec2f const * mf_data = self->getMFInTangentsY();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list AnimVec3fDataSourceBase_getMFInTangentsZ(OSG::AnimVec3fDataSourceBase *self)
{
   boost::python::list result;
   OSG::MFVec2f const * mf_data = self->getMFInTangentsZ();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list AnimVec3fDataSourceBase_getMFOutTangentsX(OSG::AnimVec3fDataSourceBase *self)
{
   boost::python::list result;
   OSG::MFVec2f const * mf_data = self->getMFOutTangentsX();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list AnimVec3fDataSourceBase_getMFOutTangentsY(OSG::AnimVec3fDataSourceBase *self)
{
   boost::python::list result;
   OSG::MFVec2f const * mf_data = self->getMFOutTangentsY();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list AnimVec3fDataSourceBase_getMFOutTangentsZ(OSG::AnimVec3fDataSourceBase *self)
{
   boost::python::list result;
   OSG::MFVec2f const * mf_data = self->getMFOutTangentsZ();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

void register_AnimVec3fDataSourceBase_class(){

    { //::OSG::AnimVec3fDataSourceBase
        typedef bp::class_< AnimVec3fDataSourceBase_wrapper, bp::bases< OSG::AnimKeyFrameDataSource >, boost::noncopyable > AnimVec3fDataSourceBase_exposer_t;
        AnimVec3fDataSourceBase_exposer_t AnimVec3fDataSourceBase_exposer = AnimVec3fDataSourceBase_exposer_t( "AnimVec3fDataSourceBase", bp::no_init );
        bp::scope AnimVec3fDataSourceBase_scope( AnimVec3fDataSourceBase_exposer );
        bp::scope().attr("ValuesFieldId") = (int)OSG::AnimVec3fDataSourceBase::ValuesFieldId;
        bp::scope().attr("InTangentsXFieldId") = (int)OSG::AnimVec3fDataSourceBase::InTangentsXFieldId;
        bp::scope().attr("InTangentsYFieldId") = (int)OSG::AnimVec3fDataSourceBase::InTangentsYFieldId;
        bp::scope().attr("InTangentsZFieldId") = (int)OSG::AnimVec3fDataSourceBase::InTangentsZFieldId;
        bp::scope().attr("OutTangentsXFieldId") = (int)OSG::AnimVec3fDataSourceBase::OutTangentsXFieldId;
        bp::scope().attr("OutTangentsYFieldId") = (int)OSG::AnimVec3fDataSourceBase::OutTangentsYFieldId;
        bp::scope().attr("OutTangentsZFieldId") = (int)OSG::AnimVec3fDataSourceBase::OutTangentsZFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::AnimVec3fDataSourceBase::NextFieldId;
        { //::OSG::AnimVec3fDataSourceBase::copyFromBin
        
            typedef void ( ::OSG::AnimVec3fDataSourceBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            AnimVec3fDataSourceBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::AnimVec3fDataSourceBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::AnimVec3fDataSourceBase::copyToBin
        
            typedef void ( ::OSG::AnimVec3fDataSourceBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            AnimVec3fDataSourceBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::AnimVec3fDataSourceBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::AnimVec3fDataSourceBase::create
        
            typedef ::OSG::AnimVec3fDataSourceTransitPtr ( *create_function_type )(  );
            
            AnimVec3fDataSourceBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::AnimVec3fDataSourceBase::create ) );
        
        }
        { //::OSG::AnimVec3fDataSourceBase::createDependent
        
            typedef ::OSG::AnimVec3fDataSourceTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            AnimVec3fDataSourceBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::AnimVec3fDataSourceBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::AnimVec3fDataSourceBase::createLocal
        
            typedef ::OSG::AnimVec3fDataSourceTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            AnimVec3fDataSourceBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::AnimVec3fDataSourceBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::AnimVec3fDataSourceBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::AnimVec3fDataSourceBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            AnimVec3fDataSourceBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::AnimVec3fDataSourceBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::AnimVec3fDataSourceBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            AnimVec3fDataSourceBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::AnimVec3fDataSourceBase::getClassGroupId ) );
        
        }
        { //::OSG::AnimVec3fDataSourceBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            AnimVec3fDataSourceBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::AnimVec3fDataSourceBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::AnimVec3fDataSourceBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            AnimVec3fDataSourceBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::AnimVec3fDataSourceBase::getClassTypeId ) );
        
        }
        { //::OSG::AnimVec3fDataSourceBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::AnimVec3fDataSourceBase::*getContainerSize_function_type )(  ) const;
            
            AnimVec3fDataSourceBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::AnimVec3fDataSourceBase::getContainerSize ) );
        
        }
        { //::OSG::AnimVec3fDataSourceBase::getInTangentsX
        
            typedef ::OSG::Vec2f const & ( ::OSG::AnimVec3fDataSourceBase::*getInTangentsX_function_type )( ::OSG::UInt32 const ) const;
            
            AnimVec3fDataSourceBase_exposer.def( 
                "getInTangentsX"
                , getInTangentsX_function_type( &::OSG::AnimVec3fDataSourceBase::getInTangentsX )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::AnimVec3fDataSourceBase::getInTangentsY
        
            typedef ::OSG::Vec2f const & ( ::OSG::AnimVec3fDataSourceBase::*getInTangentsY_function_type )( ::OSG::UInt32 const ) const;
            
            AnimVec3fDataSourceBase_exposer.def( 
                "getInTangentsY"
                , getInTangentsY_function_type( &::OSG::AnimVec3fDataSourceBase::getInTangentsY )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::AnimVec3fDataSourceBase::getInTangentsZ
        
            typedef ::OSG::Vec2f const & ( ::OSG::AnimVec3fDataSourceBase::*getInTangentsZ_function_type )( ::OSG::UInt32 const ) const;
            
            AnimVec3fDataSourceBase_exposer.def( 
                "getInTangentsZ"
                , getInTangentsZ_function_type( &::OSG::AnimVec3fDataSourceBase::getInTangentsZ )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::AnimVec3fDataSourceBase::getOutTangentsX
        
            typedef ::OSG::Vec2f const & ( ::OSG::AnimVec3fDataSourceBase::*getOutTangentsX_function_type )( ::OSG::UInt32 const ) const;
            
            AnimVec3fDataSourceBase_exposer.def( 
                "getOutTangentsX"
                , getOutTangentsX_function_type( &::OSG::AnimVec3fDataSourceBase::getOutTangentsX )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::AnimVec3fDataSourceBase::getOutTangentsY
        
            typedef ::OSG::Vec2f const & ( ::OSG::AnimVec3fDataSourceBase::*getOutTangentsY_function_type )( ::OSG::UInt32 const ) const;
            
            AnimVec3fDataSourceBase_exposer.def( 
                "getOutTangentsY"
                , getOutTangentsY_function_type( &::OSG::AnimVec3fDataSourceBase::getOutTangentsY )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::AnimVec3fDataSourceBase::getOutTangentsZ
        
            typedef ::OSG::Vec2f const & ( ::OSG::AnimVec3fDataSourceBase::*getOutTangentsZ_function_type )( ::OSG::UInt32 const ) const;
            
            AnimVec3fDataSourceBase_exposer.def( 
                "getOutTangentsZ"
                , getOutTangentsZ_function_type( &::OSG::AnimVec3fDataSourceBase::getOutTangentsZ )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::AnimVec3fDataSourceBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::AnimVec3fDataSourceBase::*getType_function_type )(  ) ;
            
            AnimVec3fDataSourceBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::AnimVec3fDataSourceBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::AnimVec3fDataSourceBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::AnimVec3fDataSourceBase::*getType_function_type )(  ) const;
            
            AnimVec3fDataSourceBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::AnimVec3fDataSourceBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::AnimVec3fDataSourceBase::getValues
        
            typedef ::OSG::Vec3f const & ( ::OSG::AnimVec3fDataSourceBase::*getValues_function_type )( ::OSG::UInt32 const ) const;
            
            AnimVec3fDataSourceBase_exposer.def( 
                "getValues"
                , getValues_function_type( &::OSG::AnimVec3fDataSourceBase::getValues )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::AnimDataSource::createBlender
        
            typedef ::OSG::AnimBlenderTransitPtr ( ::OSG::AnimDataSource::*createBlender_function_type )(  ) const;
            
            AnimVec3fDataSourceBase_exposer.def( 
                "createBlender"
                , createBlender_function_type( &::OSG::AnimDataSource::createBlender ) );
        
        }
        { //::OSG::AnimDataSource::createChannel
        
            typedef ::OSG::AnimChannelTransitPtr ( ::OSG::AnimDataSource::*createChannel_function_type )(  ) const;
            
            AnimVec3fDataSourceBase_exposer.def( 
                "createChannel"
                , createChannel_function_type( &::OSG::AnimDataSource::createChannel ) );
        
        }
        AnimVec3fDataSourceBase_exposer.staticmethod( "create" );
        AnimVec3fDataSourceBase_exposer.staticmethod( "createDependent" );
        AnimVec3fDataSourceBase_exposer.staticmethod( "createLocal" );
        AnimVec3fDataSourceBase_exposer.staticmethod( "getClassGroupId" );
        AnimVec3fDataSourceBase_exposer.staticmethod( "getClassType" );
        AnimVec3fDataSourceBase_exposer.staticmethod( "getClassTypeId" );
        AnimVec3fDataSourceBase_exposer.def("getMFValues",AnimVec3fDataSourceBase_getMFValues);
        AnimVec3fDataSourceBase_exposer.def("getMFInTangentsX",AnimVec3fDataSourceBase_getMFInTangentsX);
        AnimVec3fDataSourceBase_exposer.def("getMFInTangentsY",AnimVec3fDataSourceBase_getMFInTangentsY);
        AnimVec3fDataSourceBase_exposer.def("getMFInTangentsZ",AnimVec3fDataSourceBase_getMFInTangentsZ);
        AnimVec3fDataSourceBase_exposer.def("getMFOutTangentsX",AnimVec3fDataSourceBase_getMFOutTangentsX);
        AnimVec3fDataSourceBase_exposer.def("getMFOutTangentsY",AnimVec3fDataSourceBase_getMFOutTangentsY);
        AnimVec3fDataSourceBase_exposer.def("getMFOutTangentsZ",AnimVec3fDataSourceBase_getMFOutTangentsZ);
    }

}
