// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGDynamics_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "AnimKeyFrameDataSourceBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct AnimKeyFrameDataSourceBase_wrapper : OSG::AnimKeyFrameDataSourceBase, bp::wrapper< OSG::AnimKeyFrameDataSourceBase > {



};

boost::python::list AnimKeyFrameDataSourceBase_getMFInValues(OSG::AnimKeyFrameDataSourceBase *self)
{
   boost::python::list result;
   OSG::MFReal32 const * mf_data = self->getMFInValues();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list AnimKeyFrameDataSourceBase_getMFInterpolationModes(OSG::AnimKeyFrameDataSourceBase *self)
{
   boost::python::list result;
   OSG::MFUInt32 const * mf_data = self->getMFInterpolationModes();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

void register_AnimKeyFrameDataSourceBase_class(){

    { //::OSG::AnimKeyFrameDataSourceBase
        typedef bp::class_< AnimKeyFrameDataSourceBase_wrapper, bp::bases< OSG::AnimDataSource >, boost::noncopyable > AnimKeyFrameDataSourceBase_exposer_t;
        AnimKeyFrameDataSourceBase_exposer_t AnimKeyFrameDataSourceBase_exposer = AnimKeyFrameDataSourceBase_exposer_t( "AnimKeyFrameDataSourceBase", bp::no_init );
        bp::scope AnimKeyFrameDataSourceBase_scope( AnimKeyFrameDataSourceBase_exposer );
        bp::scope().attr("InValuesFieldId") = (int)OSG::AnimKeyFrameDataSourceBase::InValuesFieldId;
        bp::scope().attr("InterpolationModesFieldId") = (int)OSG::AnimKeyFrameDataSourceBase::InterpolationModesFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::AnimKeyFrameDataSourceBase::NextFieldId;
        { //::OSG::AnimKeyFrameDataSourceBase::copyFromBin
        
            typedef void ( ::OSG::AnimKeyFrameDataSourceBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            AnimKeyFrameDataSourceBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::AnimKeyFrameDataSourceBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::AnimKeyFrameDataSourceBase::copyToBin
        
            typedef void ( ::OSG::AnimKeyFrameDataSourceBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            AnimKeyFrameDataSourceBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::AnimKeyFrameDataSourceBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::AnimKeyFrameDataSourceBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::AnimKeyFrameDataSourceBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            AnimKeyFrameDataSourceBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::AnimKeyFrameDataSourceBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::AnimKeyFrameDataSourceBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            AnimKeyFrameDataSourceBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::AnimKeyFrameDataSourceBase::getClassGroupId ) );
        
        }
        { //::OSG::AnimKeyFrameDataSourceBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            AnimKeyFrameDataSourceBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::AnimKeyFrameDataSourceBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::AnimKeyFrameDataSourceBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            AnimKeyFrameDataSourceBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::AnimKeyFrameDataSourceBase::getClassTypeId ) );
        
        }
        { //::OSG::AnimKeyFrameDataSourceBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::AnimKeyFrameDataSourceBase::*getContainerSize_function_type )(  ) const;
            
            AnimKeyFrameDataSourceBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::AnimKeyFrameDataSourceBase::getContainerSize ) );
        
        }
        { //::OSG::AnimKeyFrameDataSourceBase::getInValues
        
            typedef ::OSG::Real32 ( ::OSG::AnimKeyFrameDataSourceBase::*getInValues_function_type )( ::OSG::UInt32 const ) const;
            
            AnimKeyFrameDataSourceBase_exposer.def( 
                "getInValues"
                , getInValues_function_type( &::OSG::AnimKeyFrameDataSourceBase::getInValues )
                , ( bp::arg("index") ) );
        
        }
        { //::OSG::AnimKeyFrameDataSourceBase::getInterpolationModes
        
            typedef ::OSG::UInt32 ( ::OSG::AnimKeyFrameDataSourceBase::*getInterpolationModes_function_type )( ::OSG::UInt32 const ) const;
            
            AnimKeyFrameDataSourceBase_exposer.def( 
                "getInterpolationModes"
                , getInterpolationModes_function_type( &::OSG::AnimKeyFrameDataSourceBase::getInterpolationModes )
                , ( bp::arg("index") ) );
        
        }
        { //::OSG::AnimKeyFrameDataSourceBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::AnimKeyFrameDataSourceBase::*getType_function_type )(  ) ;
            
            AnimKeyFrameDataSourceBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::AnimKeyFrameDataSourceBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::AnimKeyFrameDataSourceBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::AnimKeyFrameDataSourceBase::*getType_function_type )(  ) const;
            
            AnimKeyFrameDataSourceBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::AnimKeyFrameDataSourceBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::AnimDataSource::createBlender
        
            typedef ::OSG::AnimBlenderTransitPtr ( ::OSG::AnimDataSource::*createBlender_function_type )(  ) const;
            
            AnimKeyFrameDataSourceBase_exposer.def( 
                "createBlender"
                , createBlender_function_type( &::OSG::AnimDataSource::createBlender ) );
        
        }
        { //::OSG::AnimDataSource::createChannel
        
            typedef ::OSG::AnimChannelTransitPtr ( ::OSG::AnimDataSource::*createChannel_function_type )(  ) const;
            
            AnimKeyFrameDataSourceBase_exposer.def( 
                "createChannel"
                , createChannel_function_type( &::OSG::AnimDataSource::createChannel ) );
        
        }
        { //::OSG::AnimDataSource::getLength
        
            typedef ::OSG::Real32 ( ::OSG::AnimDataSource::*getLength_function_type )(  ) const;
            
            AnimKeyFrameDataSourceBase_exposer.def( 
                "getLength"
                , getLength_function_type( &::OSG::AnimDataSource::getLength ) );
        
        }
        AnimKeyFrameDataSourceBase_exposer.staticmethod( "getClassGroupId" );
        AnimKeyFrameDataSourceBase_exposer.staticmethod( "getClassType" );
        AnimKeyFrameDataSourceBase_exposer.staticmethod( "getClassTypeId" );
        AnimKeyFrameDataSourceBase_exposer.def("getMFInValues",AnimKeyFrameDataSourceBase_getMFInValues);
        AnimKeyFrameDataSourceBase_exposer.def("getMFInterpolationModes",AnimKeyFrameDataSourceBase_getMFInterpolationModes);
    }

}
