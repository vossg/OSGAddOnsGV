// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGDynamics_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "FrameHandlerBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_FrameHandlerBase_class(){

    { //::OSG::FrameHandlerBase
        typedef bp::class_< OSG::FrameHandlerBase, bp::bases< ::OSG::AttachmentContainer >, boost::noncopyable > FrameHandlerBase_exposer_t;
        FrameHandlerBase_exposer_t FrameHandlerBase_exposer = FrameHandlerBase_exposer_t( "FrameHandlerBase", bp::no_init );
        bp::scope FrameHandlerBase_scope( FrameHandlerBase_exposer );
        bp::scope().attr("FrameCountFieldId") = (int)OSG::FrameHandlerBase::FrameCountFieldId;
        bp::scope().attr("StartTimeFieldId") = (int)OSG::FrameHandlerBase::StartTimeFieldId;
        bp::scope().attr("LastTimeFieldId") = (int)OSG::FrameHandlerBase::LastTimeFieldId;
        bp::scope().attr("CurrTimeFieldId") = (int)OSG::FrameHandlerBase::CurrTimeFieldId;
        bp::scope().attr("TimeStampFieldId") = (int)OSG::FrameHandlerBase::TimeStampFieldId;
        bp::scope().attr("TimeScaleFieldId") = (int)OSG::FrameHandlerBase::TimeScaleFieldId;
        bp::scope().attr("ConstantTimeStepFieldId") = (int)OSG::FrameHandlerBase::ConstantTimeStepFieldId;
        bp::scope().attr("ConstantTimeFieldId") = (int)OSG::FrameHandlerBase::ConstantTimeFieldId;
        bp::scope().attr("PausedFieldId") = (int)OSG::FrameHandlerBase::PausedFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::FrameHandlerBase::NextFieldId;
        { //::OSG::FrameHandlerBase::copyFromBin
        
            typedef void ( ::OSG::FrameHandlerBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            FrameHandlerBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::FrameHandlerBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::FrameHandlerBase::copyToBin
        
            typedef void ( ::OSG::FrameHandlerBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            FrameHandlerBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::FrameHandlerBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::FrameHandlerBase::create
        
            typedef ::OSG::FrameHandlerTransitPtr ( *create_function_type )(  );
            
            FrameHandlerBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::FrameHandlerBase::create ) );
        
        }
        { //::OSG::FrameHandlerBase::createDependent
        
            typedef ::OSG::FrameHandlerTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            FrameHandlerBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::FrameHandlerBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::FrameHandlerBase::createLocal
        
            typedef ::OSG::FrameHandlerTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            FrameHandlerBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::FrameHandlerBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::FrameHandlerBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::FrameHandlerBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            FrameHandlerBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::FrameHandlerBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::FrameHandlerBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            FrameHandlerBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::FrameHandlerBase::getClassGroupId ) );
        
        }
        { //::OSG::FrameHandlerBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            FrameHandlerBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::FrameHandlerBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::FrameHandlerBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            FrameHandlerBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::FrameHandlerBase::getClassTypeId ) );
        
        }
        { //::OSG::FrameHandlerBase::getConstantTime
        
            typedef bool ( ::OSG::FrameHandlerBase::*getConstantTime_function_type )(  ) const;
            
            FrameHandlerBase_exposer.def( 
                "getConstantTime"
                , getConstantTime_function_type( &::OSG::FrameHandlerBase::getConstantTime ) );
        
        }
        { //::OSG::FrameHandlerBase::getConstantTimeStep
        
            typedef ::OSG::Time const & ( ::OSG::FrameHandlerBase::*getConstantTimeStep_function_type )(  ) const;
            
            FrameHandlerBase_exposer.def( 
                "getConstantTimeStep"
                , getConstantTimeStep_function_type( &::OSG::FrameHandlerBase::getConstantTimeStep )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::FrameHandlerBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::FrameHandlerBase::*getContainerSize_function_type )(  ) const;
            
            FrameHandlerBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::FrameHandlerBase::getContainerSize ) );
        
        }
        { //::OSG::FrameHandlerBase::getCurrTime
        
            typedef ::OSG::Time const & ( ::OSG::FrameHandlerBase::*getCurrTime_function_type )(  ) const;
            
            FrameHandlerBase_exposer.def( 
                "getCurrTime"
                , getCurrTime_function_type( &::OSG::FrameHandlerBase::getCurrTime )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::FrameHandlerBase::getFrameCount
        
            typedef ::OSG::UInt64 ( ::OSG::FrameHandlerBase::*getFrameCount_function_type )(  ) const;
            
            FrameHandlerBase_exposer.def( 
                "getFrameCount"
                , getFrameCount_function_type( &::OSG::FrameHandlerBase::getFrameCount ) );
        
        }
        { //::OSG::FrameHandlerBase::getLastTime
        
            typedef ::OSG::Time const & ( ::OSG::FrameHandlerBase::*getLastTime_function_type )(  ) const;
            
            FrameHandlerBase_exposer.def( 
                "getLastTime"
                , getLastTime_function_type( &::OSG::FrameHandlerBase::getLastTime )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::FrameHandlerBase::getPaused
        
            typedef bool ( ::OSG::FrameHandlerBase::*getPaused_function_type )(  ) const;
            
            FrameHandlerBase_exposer.def( 
                "getPaused"
                , getPaused_function_type( &::OSG::FrameHandlerBase::getPaused ) );
        
        }
        { //::OSG::FrameHandlerBase::getSFConstantTime
        
            typedef ::OSG::SFBool const * ( ::OSG::FrameHandlerBase::*getSFConstantTime_function_type )(  ) const;
            
            FrameHandlerBase_exposer.def( 
                "getSFConstantTime"
                , getSFConstantTime_function_type( &::OSG::FrameHandlerBase::getSFConstantTime )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FrameHandlerBase::getSFConstantTimeStep
        
            typedef ::OSG::SFTime const * ( ::OSG::FrameHandlerBase::*getSFConstantTimeStep_function_type )(  ) const;
            
            FrameHandlerBase_exposer.def( 
                "getSFConstantTimeStep"
                , getSFConstantTimeStep_function_type( &::OSG::FrameHandlerBase::getSFConstantTimeStep )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FrameHandlerBase::getSFCurrTime
        
            typedef ::OSG::SFTime const * ( ::OSG::FrameHandlerBase::*getSFCurrTime_function_type )(  ) const;
            
            FrameHandlerBase_exposer.def( 
                "getSFCurrTime"
                , getSFCurrTime_function_type( &::OSG::FrameHandlerBase::getSFCurrTime )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FrameHandlerBase::getSFFrameCount
        
            typedef ::OSG::SFUInt64 const * ( ::OSG::FrameHandlerBase::*getSFFrameCount_function_type )(  ) const;
            
            FrameHandlerBase_exposer.def( 
                "getSFFrameCount"
                , getSFFrameCount_function_type( &::OSG::FrameHandlerBase::getSFFrameCount )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FrameHandlerBase::getSFLastTime
        
            typedef ::OSG::SFTime const * ( ::OSG::FrameHandlerBase::*getSFLastTime_function_type )(  ) const;
            
            FrameHandlerBase_exposer.def( 
                "getSFLastTime"
                , getSFLastTime_function_type( &::OSG::FrameHandlerBase::getSFLastTime )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FrameHandlerBase::getSFPaused
        
            typedef ::OSG::SFBool const * ( ::OSG::FrameHandlerBase::*getSFPaused_function_type )(  ) const;
            
            FrameHandlerBase_exposer.def( 
                "getSFPaused"
                , getSFPaused_function_type( &::OSG::FrameHandlerBase::getSFPaused )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FrameHandlerBase::getSFStartTime
        
            typedef ::OSG::SFTime const * ( ::OSG::FrameHandlerBase::*getSFStartTime_function_type )(  ) const;
            
            FrameHandlerBase_exposer.def( 
                "getSFStartTime"
                , getSFStartTime_function_type( &::OSG::FrameHandlerBase::getSFStartTime )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FrameHandlerBase::getSFTimeScale
        
            typedef ::OSG::SFTime const * ( ::OSG::FrameHandlerBase::*getSFTimeScale_function_type )(  ) const;
            
            FrameHandlerBase_exposer.def( 
                "getSFTimeScale"
                , getSFTimeScale_function_type( &::OSG::FrameHandlerBase::getSFTimeScale )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FrameHandlerBase::getSFTimeStamp
        
            typedef ::OSG::SFTime const * ( ::OSG::FrameHandlerBase::*getSFTimeStamp_function_type )(  ) const;
            
            FrameHandlerBase_exposer.def( 
                "getSFTimeStamp"
                , getSFTimeStamp_function_type( &::OSG::FrameHandlerBase::getSFTimeStamp )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FrameHandlerBase::getStartTime
        
            typedef ::OSG::Time const & ( ::OSG::FrameHandlerBase::*getStartTime_function_type )(  ) const;
            
            FrameHandlerBase_exposer.def( 
                "getStartTime"
                , getStartTime_function_type( &::OSG::FrameHandlerBase::getStartTime )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::FrameHandlerBase::getTimeScale
        
            typedef ::OSG::Time const & ( ::OSG::FrameHandlerBase::*getTimeScale_function_type )(  ) const;
            
            FrameHandlerBase_exposer.def( 
                "getTimeScale"
                , getTimeScale_function_type( &::OSG::FrameHandlerBase::getTimeScale )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::FrameHandlerBase::getTimeStamp
        
            typedef ::OSG::Time const & ( ::OSG::FrameHandlerBase::*getTimeStamp_function_type )(  ) const;
            
            FrameHandlerBase_exposer.def( 
                "getTimeStamp"
                , getTimeStamp_function_type( &::OSG::FrameHandlerBase::getTimeStamp )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::FrameHandlerBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::FrameHandlerBase::*getType_function_type )(  ) ;
            
            FrameHandlerBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::FrameHandlerBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FrameHandlerBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::FrameHandlerBase::*getType_function_type )(  ) const;
            
            FrameHandlerBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::FrameHandlerBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FrameHandlerBase::setConstantTime
        
            typedef void ( ::OSG::FrameHandlerBase::*setConstantTime_function_type )( bool const ) ;
            
            FrameHandlerBase_exposer.def( 
                "setConstantTime"
                , setConstantTime_function_type( &::OSG::FrameHandlerBase::setConstantTime )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FrameHandlerBase::setConstantTimeStep
        
            typedef void ( ::OSG::FrameHandlerBase::*setConstantTimeStep_function_type )( ::OSG::Time const & ) ;
            
            FrameHandlerBase_exposer.def( 
                "setConstantTimeStep"
                , setConstantTimeStep_function_type( &::OSG::FrameHandlerBase::setConstantTimeStep )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FrameHandlerBase::setCurrTime
        
            typedef void ( ::OSG::FrameHandlerBase::*setCurrTime_function_type )( ::OSG::Time const & ) ;
            
            FrameHandlerBase_exposer.def( 
                "setCurrTime"
                , setCurrTime_function_type( &::OSG::FrameHandlerBase::setCurrTime )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FrameHandlerBase::setFrameCount
        
            typedef void ( ::OSG::FrameHandlerBase::*setFrameCount_function_type )( ::OSG::UInt64 const ) ;
            
            FrameHandlerBase_exposer.def( 
                "setFrameCount"
                , setFrameCount_function_type( &::OSG::FrameHandlerBase::setFrameCount )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FrameHandlerBase::setLastTime
        
            typedef void ( ::OSG::FrameHandlerBase::*setLastTime_function_type )( ::OSG::Time const & ) ;
            
            FrameHandlerBase_exposer.def( 
                "setLastTime"
                , setLastTime_function_type( &::OSG::FrameHandlerBase::setLastTime )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FrameHandlerBase::setPaused
        
            typedef void ( ::OSG::FrameHandlerBase::*setPaused_function_type )( bool const ) ;
            
            FrameHandlerBase_exposer.def( 
                "setPaused"
                , setPaused_function_type( &::OSG::FrameHandlerBase::setPaused )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FrameHandlerBase::setStartTime
        
            typedef void ( ::OSG::FrameHandlerBase::*setStartTime_function_type )( ::OSG::Time const & ) ;
            
            FrameHandlerBase_exposer.def( 
                "setStartTime"
                , setStartTime_function_type( &::OSG::FrameHandlerBase::setStartTime )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FrameHandlerBase::setTimeScale
        
            typedef void ( ::OSG::FrameHandlerBase::*setTimeScale_function_type )( ::OSG::Time const & ) ;
            
            FrameHandlerBase_exposer.def( 
                "setTimeScale"
                , setTimeScale_function_type( &::OSG::FrameHandlerBase::setTimeScale )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FrameHandlerBase::setTimeStamp
        
            typedef void ( ::OSG::FrameHandlerBase::*setTimeStamp_function_type )( ::OSG::Time const & ) ;
            
            FrameHandlerBase_exposer.def( 
                "setTimeStamp"
                , setTimeStamp_function_type( &::OSG::FrameHandlerBase::setTimeStamp )
                , ( bp::arg("value") ) );
        
        }
        FrameHandlerBase_exposer.staticmethod( "create" );
        FrameHandlerBase_exposer.staticmethod( "createDependent" );
        FrameHandlerBase_exposer.staticmethod( "createLocal" );
        FrameHandlerBase_exposer.staticmethod( "getClassGroupId" );
        FrameHandlerBase_exposer.staticmethod( "getClassType" );
        FrameHandlerBase_exposer.staticmethod( "getClassTypeId" );
    }

}
