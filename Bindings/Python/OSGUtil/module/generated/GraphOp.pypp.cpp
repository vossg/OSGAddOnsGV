// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGUtil_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "GraphOp.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct GraphOp_wrapper : OSG::GraphOp, bp::wrapper< OSG::GraphOp > {

    GraphOp_wrapper(char const * name="" )
    : OSG::GraphOp( name )
      , bp::wrapper< OSG::GraphOp >(){
        // constructor
    
    }

    virtual ::OSG::TransitPtr< OSG::GraphOp > clone(  ){
        bp::override func_clone = this->get_override( "clone" );
        return func_clone(  );
    }

    virtual void setParams( ::std::string const params ){
        bp::override func_setParams = this->get_override( "setParams" );
        func_setParams( params );
    }

    virtual bool traverse( ::OSG::Node * root ) {
        if( bp::override func_traverse = this->get_override( "traverse" ) )
            return func_traverse( boost::python::ptr(root) );
        else{
            return this->OSG::GraphOp::traverse( boost::python::ptr(root) );
        }
    }
    
    bool default_traverse( ::OSG::Node * root ) {
        return OSG::GraphOp::traverse( boost::python::ptr(root) );
    }

    virtual ::OSG::ActionBase::ResultE traverseEnter( ::OSG::Node * const node ){
        bp::override func_traverseEnter = this->get_override( "traverseEnter" );
        return func_traverseEnter( node );
    }

    virtual ::OSG::ActionBase::ResultE traverseLeave( ::OSG::Node * const node, ::OSG::ActionBase::ResultE res ){
        bp::override func_traverseLeave = this->get_override( "traverseLeave" );
        return func_traverseLeave( node, res );
    }

    virtual std::string usage() 
        {
            bp::override func_usage = this->get_override( "usage" );
            return func_usage().as<std::string>();
        }

};

void register_GraphOp_class(){

    { //::OSG::GraphOp
        typedef bp::class_< GraphOp_wrapper, bp::bases< ::OSG::MemoryObject >, boost::noncopyable > GraphOp_exposer_t;
        GraphOp_exposer_t GraphOp_exposer = GraphOp_exposer_t( "GraphOp", bp::no_init );
        bp::scope GraphOp_scope( GraphOp_exposer );
        GraphOp_exposer.def( bp::init< bp::optional< char const * > >(( bp::arg("name")="" )) );
        { //::OSG::GraphOp::addToExcludeList
        
            typedef void ( ::OSG::GraphOp::*addToExcludeList_function_type )( ::OSG::Node * const ) ;
            
            GraphOp_exposer.def( 
                "addToExcludeList"
                , addToExcludeList_function_type( &::OSG::GraphOp::addToExcludeList )
                , ( bp::arg("node") ) );
        
        }
        { //::OSG::GraphOp::addToExcludeList
        
            typedef void ( ::OSG::GraphOp::*addToExcludeList_function_type )( ::std::string const & ) ;
            
            GraphOp_exposer.def( 
                "addToExcludeList"
                , addToExcludeList_function_type( &::OSG::GraphOp::addToExcludeList )
                , ( bp::arg("name") ) );
        
        }
        { //::OSG::GraphOp::addToPreserveList
        
            typedef void ( ::OSG::GraphOp::*addToPreserveList_function_type )( ::OSG::Node * const ) ;
            
            GraphOp_exposer.def( 
                "addToPreserveList"
                , addToPreserveList_function_type( &::OSG::GraphOp::addToPreserveList )
                , ( bp::arg("node") ) );
        
        }
        { //::OSG::GraphOp::addToPreserveList
        
            typedef void ( ::OSG::GraphOp::*addToPreserveList_function_type )( ::std::string const & ) ;
            
            GraphOp_exposer.def( 
                "addToPreserveList"
                , addToPreserveList_function_type( &::OSG::GraphOp::addToPreserveList )
                , ( bp::arg("name") ) );
        
        }
        { //::OSG::GraphOp::clearExcludeList
        
            typedef void ( ::OSG::GraphOp::*clearExcludeList_function_type )(  ) ;
            
            GraphOp_exposer.def( 
                "clearExcludeList"
                , clearExcludeList_function_type( &::OSG::GraphOp::clearExcludeList ) );
        
        }
        { //::OSG::GraphOp::clearPreserveList
        
            typedef void ( ::OSG::GraphOp::*clearPreserveList_function_type )(  ) ;
            
            GraphOp_exposer.def( 
                "clearPreserveList"
                , clearPreserveList_function_type( &::OSG::GraphOp::clearPreserveList ) );
        
        }
        { //::OSG::GraphOp::clone
        
            typedef ::OSG::TransitPtr<OSG::GraphOp> ( ::OSG::GraphOp::*clone_function_type )(  ) ;
            
            GraphOp_exposer.def( 
                "clone"
                , bp::pure_virtual( clone_function_type(&::OSG::GraphOp::clone) ) );
        
        }
        { //::OSG::GraphOp::getClassname
        
            typedef char const * ( *getClassname_function_type )(  );
            
            GraphOp_exposer.def( 
                "getClassname"
                , getClassname_function_type( &::OSG::GraphOp::getClassname ) );
        
        }
        { //::OSG::GraphOp::getName
        
            typedef ::std::string const & ( ::OSG::GraphOp::*getName_function_type )(  ) ;
            
            GraphOp_exposer.def( 
                "getName"
                , getName_function_type( &::OSG::GraphOp::getName )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::GraphOp::isInExcludeList
        
            typedef bool ( ::OSG::GraphOp::*isInExcludeList_function_type )( ::OSG::Node * const ) const;
            
            GraphOp_exposer.def( 
                "isInExcludeList"
                , isInExcludeList_function_type( &::OSG::GraphOp::isInExcludeList )
                , ( bp::arg("node") ) );
        
        }
        { //::OSG::GraphOp::isInExcludeListNames
        
            typedef bool ( ::OSG::GraphOp::*isInExcludeListNames_function_type )( ::std::string const & ) const;
            
            GraphOp_exposer.def( 
                "isInExcludeListNames"
                , isInExcludeListNames_function_type( &::OSG::GraphOp::isInExcludeListNames )
                , ( bp::arg("name") ) );
        
        }
        { //::OSG::GraphOp::isInExcludeListNodes
        
            typedef bool ( ::OSG::GraphOp::*isInExcludeListNodes_function_type )( ::OSG::Node * const ) const;
            
            GraphOp_exposer.def( 
                "isInExcludeListNodes"
                , isInExcludeListNodes_function_type( &::OSG::GraphOp::isInExcludeListNodes )
                , ( bp::arg("node") ) );
        
        }
        { //::OSG::GraphOp::isInPreserveList
        
            typedef bool ( ::OSG::GraphOp::*isInPreserveList_function_type )( ::OSG::Node * const ) const;
            
            GraphOp_exposer.def( 
                "isInPreserveList"
                , isInPreserveList_function_type( &::OSG::GraphOp::isInPreserveList )
                , ( bp::arg("node") ) );
        
        }
        { //::OSG::GraphOp::isInPreserveListNames
        
            typedef bool ( ::OSG::GraphOp::*isInPreserveListNames_function_type )( ::std::string const & ) const;
            
            GraphOp_exposer.def( 
                "isInPreserveListNames"
                , isInPreserveListNames_function_type( &::OSG::GraphOp::isInPreserveListNames )
                , ( bp::arg("name") ) );
        
        }
        { //::OSG::GraphOp::isInPreserveListNodes
        
            typedef bool ( ::OSG::GraphOp::*isInPreserveListNodes_function_type )( ::OSG::Node * const ) const;
            
            GraphOp_exposer.def( 
                "isInPreserveListNodes"
                , isInPreserveListNodes_function_type( &::OSG::GraphOp::isInPreserveListNodes )
                , ( bp::arg("node") ) );
        
        }
        { //::OSG::GraphOp::removeFromExcludeList
        
            typedef void ( ::OSG::GraphOp::*removeFromExcludeList_function_type )( ::OSG::Node * const ) ;
            
            GraphOp_exposer.def( 
                "removeFromExcludeList"
                , removeFromExcludeList_function_type( &::OSG::GraphOp::removeFromExcludeList )
                , ( bp::arg("node") ) );
        
        }
        { //::OSG::GraphOp::removeFromExcludeList
        
            typedef void ( ::OSG::GraphOp::*removeFromExcludeList_function_type )( ::std::string const & ) ;
            
            GraphOp_exposer.def( 
                "removeFromExcludeList"
                , removeFromExcludeList_function_type( &::OSG::GraphOp::removeFromExcludeList )
                , ( bp::arg("name") ) );
        
        }
        { //::OSG::GraphOp::removeFromPreserveList
        
            typedef void ( ::OSG::GraphOp::*removeFromPreserveList_function_type )( ::OSG::Node * const ) ;
            
            GraphOp_exposer.def( 
                "removeFromPreserveList"
                , removeFromPreserveList_function_type( &::OSG::GraphOp::removeFromPreserveList )
                , ( bp::arg("node") ) );
        
        }
        { //::OSG::GraphOp::removeFromPreserveList
        
            typedef void ( ::OSG::GraphOp::*removeFromPreserveList_function_type )( ::std::string const & ) ;
            
            GraphOp_exposer.def( 
                "removeFromPreserveList"
                , removeFromPreserveList_function_type( &::OSG::GraphOp::removeFromPreserveList )
                , ( bp::arg("name") ) );
        
        }
        { //::OSG::GraphOp::setName
        
            typedef void ( ::OSG::GraphOp::*setName_function_type )( char const * ) ;
            
            GraphOp_exposer.def( 
                "setName"
                , setName_function_type( &::OSG::GraphOp::setName )
                , ( bp::arg("name") ) );
        
        }
        { //::OSG::GraphOp::setParams
        
            typedef void ( ::OSG::GraphOp::*setParams_function_type )( ::std::string const ) ;
            
            GraphOp_exposer.def( 
                "setParams"
                , bp::pure_virtual( setParams_function_type(&::OSG::GraphOp::setParams) )
                , ( bp::arg("params") ) );
        
        }
        { //::OSG::GraphOp::traverse
        
            typedef bool ( ::OSG::GraphOp::*traverse_function_type )( ::OSG::Node * ) ;
            typedef bool ( GraphOp_wrapper::*default_traverse_function_type )( ::OSG::Node * ) ;
            
            GraphOp_exposer.def( 
                "traverse"
                , traverse_function_type(&::OSG::GraphOp::traverse)
                , default_traverse_function_type(&GraphOp_wrapper::default_traverse)
                , ( bp::arg("root") ) );
        
        }
        { //::OSG::GraphOp::traverseEnter
        
            typedef ::OSG::ActionBase::ResultE ( GraphOp_wrapper::*traverseEnter_function_type )( ::OSG::Node * const ) ;
            
            GraphOp_exposer.def( 
                "traverseEnter"
                , traverseEnter_function_type( &GraphOp_wrapper::traverseEnter )
                , ( bp::arg("node") ) );
        
        }
        { //::OSG::GraphOp::traverseLeave
        
            typedef ::OSG::ActionBase::ResultE ( GraphOp_wrapper::*traverseLeave_function_type )( ::OSG::Node * const,::OSG::ActionBase::ResultE ) ;
            
            GraphOp_exposer.def( 
                "traverseLeave"
                , traverseLeave_function_type( &GraphOp_wrapper::traverseLeave )
                , ( bp::arg("node"), bp::arg("res") ) );
        
        }
        GraphOp_exposer.staticmethod( "getClassname" );
        bp::implicitly_convertible<OSG::GraphOp::ObjTransitPtr, OSG::GraphOp::ObjRefPtr>();
        GraphOp_exposer.def("usage",
                bp::pure_virtual( &::OSG::GraphOp::usage ) );;
    }

}
