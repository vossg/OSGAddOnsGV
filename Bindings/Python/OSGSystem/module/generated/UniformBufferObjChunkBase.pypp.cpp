// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "UniformBufferObjChunkBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_UniformBufferObjChunkBase_class(){

    { //::OSG::UniformBufferObjChunkBase
        typedef bp::class_< OSG::UniformBufferObjChunkBase, bp::bases< OSG::StateChunk >, boost::noncopyable > UniformBufferObjChunkBase_exposer_t;
        UniformBufferObjChunkBase_exposer_t UniformBufferObjChunkBase_exposer = UniformBufferObjChunkBase_exposer_t( "UniformBufferObjChunkBase", bp::no_init );
        bp::scope UniformBufferObjChunkBase_scope( UniformBufferObjChunkBase_exposer );
        bp::scope().attr("GLIdFieldId") = (int)OSG::UniformBufferObjChunkBase::GLIdFieldId;
        bp::scope().attr("UsageFieldId") = (int)OSG::UniformBufferObjChunkBase::UsageFieldId;
        bp::scope().attr("BlockNameFieldId") = (int)OSG::UniformBufferObjChunkBase::BlockNameFieldId;
        bp::scope().attr("FundamentalTypesFieldId") = (int)OSG::UniformBufferObjChunkBase::FundamentalTypesFieldId;
        bp::scope().attr("MainTypesFieldId") = (int)OSG::UniformBufferObjChunkBase::MainTypesFieldId;
        bp::scope().attr("CardinalityFieldId") = (int)OSG::UniformBufferObjChunkBase::CardinalityFieldId;
        bp::scope().attr("IndexFieldId") = (int)OSG::UniformBufferObjChunkBase::IndexFieldId;
        bp::scope().attr("NamesFieldId") = (int)OSG::UniformBufferObjChunkBase::NamesFieldId;
        bp::scope().attr("NameToIndexFieldId") = (int)OSG::UniformBufferObjChunkBase::NameToIndexFieldId;
        bp::scope().attr("FloatValuesFieldId") = (int)OSG::UniformBufferObjChunkBase::FloatValuesFieldId;
        bp::scope().attr("DoubleValuesFieldId") = (int)OSG::UniformBufferObjChunkBase::DoubleValuesFieldId;
        bp::scope().attr("IntValuesFieldId") = (int)OSG::UniformBufferObjChunkBase::IntValuesFieldId;
        bp::scope().attr("UIntValuesFieldId") = (int)OSG::UniformBufferObjChunkBase::UIntValuesFieldId;
        bp::scope().attr("BoolValuesFieldId") = (int)OSG::UniformBufferObjChunkBase::BoolValuesFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::UniformBufferObjChunkBase::NextFieldId;
        { //::OSG::UniformBufferObjChunkBase::copyFromBin
        
            typedef void ( ::OSG::UniformBufferObjChunkBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            UniformBufferObjChunkBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::UniformBufferObjChunkBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::UniformBufferObjChunkBase::copyToBin
        
            typedef void ( ::OSG::UniformBufferObjChunkBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            UniformBufferObjChunkBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::UniformBufferObjChunkBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::UniformBufferObjChunkBase::create
        
            typedef ::OSG::UniformBufferObjChunkTransitPtr ( *create_function_type )(  );
            
            UniformBufferObjChunkBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::UniformBufferObjChunkBase::create ) );
        
        }
        { //::OSG::UniformBufferObjChunkBase::createDependent
        
            typedef ::OSG::UniformBufferObjChunkTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            UniformBufferObjChunkBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::UniformBufferObjChunkBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::UniformBufferObjChunkBase::createLocal
        
            typedef ::OSG::UniformBufferObjChunkTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            UniformBufferObjChunkBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::UniformBufferObjChunkBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::UniformBufferObjChunkBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::UniformBufferObjChunkBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            UniformBufferObjChunkBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::UniformBufferObjChunkBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::UniformBufferObjChunkBase::getBlockName
        
            typedef ::std::string const & ( ::OSG::UniformBufferObjChunkBase::*getBlockName_function_type )(  ) const;
            
            UniformBufferObjChunkBase_exposer.def( 
                "getBlockName"
                , getBlockName_function_type( &::OSG::UniformBufferObjChunkBase::getBlockName )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::UniformBufferObjChunkBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            UniformBufferObjChunkBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::UniformBufferObjChunkBase::getClassGroupId ) );
        
        }
        { //::OSG::UniformBufferObjChunkBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            UniformBufferObjChunkBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::UniformBufferObjChunkBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::UniformBufferObjChunkBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            UniformBufferObjChunkBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::UniformBufferObjChunkBase::getClassTypeId ) );
        
        }
        { //::OSG::UniformBufferObjChunkBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::UniformBufferObjChunkBase::*getContainerSize_function_type )(  ) const;
            
            UniformBufferObjChunkBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::UniformBufferObjChunkBase::getContainerSize ) );
        
        }
        { //::OSG::UniformBufferObjChunkBase::getGLId
        
            typedef ::GLenum const & ( ::OSG::UniformBufferObjChunkBase::*getGLId_function_type )(  ) const;
            
            UniformBufferObjChunkBase_exposer.def( 
                "getGLId"
                , getGLId_function_type( &::OSG::UniformBufferObjChunkBase::getGLId )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::UniformBufferObjChunkBase::getSFBlockName
        
            typedef ::OSG::SFString const * ( ::OSG::UniformBufferObjChunkBase::*getSFBlockName_function_type )(  ) const;
            
            UniformBufferObjChunkBase_exposer.def( 
                "getSFBlockName"
                , getSFBlockName_function_type( &::OSG::UniformBufferObjChunkBase::getSFBlockName )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::UniformBufferObjChunkBase::getSFGLId
        
            typedef ::OSG::SFGLenum const * ( ::OSG::UniformBufferObjChunkBase::*getSFGLId_function_type )(  ) const;
            
            UniformBufferObjChunkBase_exposer.def( 
                "getSFGLId"
                , getSFGLId_function_type( &::OSG::UniformBufferObjChunkBase::getSFGLId )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::UniformBufferObjChunkBase::getSFUsage
        
            typedef ::OSG::SFGLenum const * ( ::OSG::UniformBufferObjChunkBase::*getSFUsage_function_type )(  ) const;
            
            UniformBufferObjChunkBase_exposer.def( 
                "getSFUsage"
                , getSFUsage_function_type( &::OSG::UniformBufferObjChunkBase::getSFUsage )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::UniformBufferObjChunkBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::UniformBufferObjChunkBase::*getType_function_type )(  ) ;
            
            UniformBufferObjChunkBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::UniformBufferObjChunkBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::UniformBufferObjChunkBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::UniformBufferObjChunkBase::*getType_function_type )(  ) const;
            
            UniformBufferObjChunkBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::UniformBufferObjChunkBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::UniformBufferObjChunkBase::getUsage
        
            typedef ::GLenum const & ( ::OSG::UniformBufferObjChunkBase::*getUsage_function_type )(  ) const;
            
            UniformBufferObjChunkBase_exposer.def( 
                "getUsage"
                , getUsage_function_type( &::OSG::UniformBufferObjChunkBase::getUsage )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::UniformBufferObjChunkBase::setBlockName
        
            typedef void ( ::OSG::UniformBufferObjChunkBase::*setBlockName_function_type )( ::std::string const & ) ;
            
            UniformBufferObjChunkBase_exposer.def( 
                "setBlockName"
                , setBlockName_function_type( &::OSG::UniformBufferObjChunkBase::setBlockName )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::UniformBufferObjChunkBase::setGLId
        
            typedef void ( ::OSG::UniformBufferObjChunkBase::*setGLId_function_type )( ::GLenum const & ) ;
            
            UniformBufferObjChunkBase_exposer.def( 
                "setGLId"
                , setGLId_function_type( &::OSG::UniformBufferObjChunkBase::setGLId )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::UniformBufferObjChunkBase::setUsage
        
            typedef void ( ::OSG::UniformBufferObjChunkBase::*setUsage_function_type )( ::GLenum const & ) ;
            
            UniformBufferObjChunkBase_exposer.def( 
                "setUsage"
                , setUsage_function_type( &::OSG::UniformBufferObjChunkBase::setUsage )
                , ( bp::arg("value") ) );
        
        }
        UniformBufferObjChunkBase_exposer.staticmethod( "create" );
        UniformBufferObjChunkBase_exposer.staticmethod( "createDependent" );
        UniformBufferObjChunkBase_exposer.staticmethod( "createLocal" );
        UniformBufferObjChunkBase_exposer.staticmethod( "getClassGroupId" );
        UniformBufferObjChunkBase_exposer.staticmethod( "getClassType" );
        UniformBufferObjChunkBase_exposer.staticmethod( "getClassTypeId" );
    }

}
