// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "GeoPropertyBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_GeoPropertyBase_class(){

    { //::OSG::GeoPropertyBase
        typedef bp::class_< OSG::GeoPropertyBase, bp::bases< OSG::StateChunk >, boost::noncopyable > GeoPropertyBase_exposer_t;
        GeoPropertyBase_exposer_t GeoPropertyBase_exposer = GeoPropertyBase_exposer_t( "GeoPropertyBase", bp::no_init );
        bp::scope GeoPropertyBase_scope( GeoPropertyBase_exposer );
        bp::scope().attr("UseVBOFieldId") = (int)OSG::GeoPropertyBase::UseVBOFieldId;
        bp::scope().attr("UsageFieldId") = (int)OSG::GeoPropertyBase::UsageFieldId;
        bp::scope().attr("GLIdFieldId") = (int)OSG::GeoPropertyBase::GLIdFieldId;
        bp::scope().attr("VboUsageFieldId") = (int)OSG::GeoPropertyBase::VboUsageFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::GeoPropertyBase::NextFieldId;
        { //::OSG::GeoPropertyBase::copyFromBin
        
            typedef void ( ::OSG::GeoPropertyBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            GeoPropertyBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::GeoPropertyBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::GeoPropertyBase::copyToBin
        
            typedef void ( ::OSG::GeoPropertyBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            GeoPropertyBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::GeoPropertyBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::GeoPropertyBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::GeoPropertyBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            GeoPropertyBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::GeoPropertyBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::GeoPropertyBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            GeoPropertyBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::GeoPropertyBase::getClassGroupId ) );
        
        }
        { //::OSG::GeoPropertyBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            GeoPropertyBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::GeoPropertyBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::GeoPropertyBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            GeoPropertyBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::GeoPropertyBase::getClassTypeId ) );
        
        }
        { //::OSG::GeoPropertyBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::GeoPropertyBase::*getContainerSize_function_type )(  ) const;
            
            GeoPropertyBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::GeoPropertyBase::getContainerSize ) );
        
        }
        { //::OSG::GeoPropertyBase::getSFUsage
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::GeoPropertyBase::*getSFUsage_function_type )(  ) const;
            
            GeoPropertyBase_exposer.def( 
                "getSFUsage"
                , getSFUsage_function_type( &::OSG::GeoPropertyBase::getSFUsage )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::GeoPropertyBase::getSFUseVBO
        
            typedef ::OSG::SFBool const * ( ::OSG::GeoPropertyBase::*getSFUseVBO_function_type )(  ) const;
            
            GeoPropertyBase_exposer.def( 
                "getSFUseVBO"
                , getSFUseVBO_function_type( &::OSG::GeoPropertyBase::getSFUseVBO )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::GeoPropertyBase::getSFVboUsage
        
            typedef ::OSG::SFInt32 const * ( ::OSG::GeoPropertyBase::*getSFVboUsage_function_type )(  ) const;
            
            GeoPropertyBase_exposer.def( 
                "getSFVboUsage"
                , getSFVboUsage_function_type( &::OSG::GeoPropertyBase::getSFVboUsage )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::GeoPropertyBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::GeoPropertyBase::*getType_function_type )(  ) ;
            
            GeoPropertyBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::GeoPropertyBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::GeoPropertyBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::GeoPropertyBase::*getType_function_type )(  ) const;
            
            GeoPropertyBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::GeoPropertyBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::GeoPropertyBase::getUsage
        
            typedef ::OSG::UInt32 ( ::OSG::GeoPropertyBase::*getUsage_function_type )(  ) const;
            
            GeoPropertyBase_exposer.def( 
                "getUsage"
                , getUsage_function_type( &::OSG::GeoPropertyBase::getUsage ) );
        
        }
        { //::OSG::GeoPropertyBase::getUseVBO
        
            typedef bool ( ::OSG::GeoPropertyBase::*getUseVBO_function_type )(  ) const;
            
            GeoPropertyBase_exposer.def( 
                "getUseVBO"
                , getUseVBO_function_type( &::OSG::GeoPropertyBase::getUseVBO ) );
        
        }
        { //::OSG::GeoPropertyBase::getVboUsage
        
            typedef ::OSG::Int32 ( ::OSG::GeoPropertyBase::*getVboUsage_function_type )(  ) const;
            
            GeoPropertyBase_exposer.def( 
                "getVboUsage"
                , getVboUsage_function_type( &::OSG::GeoPropertyBase::getVboUsage ) );
        
        }
        { //::OSG::GeoPropertyBase::setUsage
        
            typedef void ( ::OSG::GeoPropertyBase::*setUsage_function_type )( ::OSG::UInt32 const ) ;
            
            GeoPropertyBase_exposer.def( 
                "setUsage"
                , setUsage_function_type( &::OSG::GeoPropertyBase::setUsage )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::GeoPropertyBase::setUseVBO
        
            typedef void ( ::OSG::GeoPropertyBase::*setUseVBO_function_type )( bool const ) ;
            
            GeoPropertyBase_exposer.def( 
                "setUseVBO"
                , setUseVBO_function_type( &::OSG::GeoPropertyBase::setUseVBO )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::GeoPropertyBase::setVboUsage
        
            typedef void ( ::OSG::GeoPropertyBase::*setVboUsage_function_type )( ::OSG::Int32 const ) ;
            
            GeoPropertyBase_exposer.def( 
                "setVboUsage"
                , setVboUsage_function_type( &::OSG::GeoPropertyBase::setVboUsage )
                , ( bp::arg("value") ) );
        
        }
        GeoPropertyBase_exposer.staticmethod( "getClassGroupId" );
        GeoPropertyBase_exposer.staticmethod( "getClassType" );
        GeoPropertyBase_exposer.staticmethod( "getClassTypeId" );
    }

}
