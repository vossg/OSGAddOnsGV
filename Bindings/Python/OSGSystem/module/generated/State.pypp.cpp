// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "State.pypp.hpp"

using namespace std;
namespace bp = boost::python;

namespace
{

OSG::StateChunkRecPtr wrapGetChunk(OSG::State* state, OSG::UInt32 chunkId)
{
   return OSG::StateChunkRecPtr(
             OSG::StateChunk::ObjTransitPtr(state->getChunk(chunkId))
          );
}

}

void register_State_class(){

    { //::OSG::State
        typedef bp::class_< OSG::State, bp::bases< OSG::StateBase >, OSG::State::ObjRecPtr, boost::noncopyable > State_exposer_t;
        State_exposer_t State_exposer = State_exposer_t( "State", bp::no_init );
        bp::scope State_scope( State_exposer );
        bp::scope().attr("AutoSlot") = (int)OSG::State::AutoSlot;
        bp::scope().attr("AutoSlotReplace") = (int)OSG::State::AutoSlotReplace;
        { //::OSG::State::addChunk
        
            typedef bool ( ::OSG::State::*addChunk_function_type )( ::OSG::StateChunk *,::OSG::Int32 ) ;
            
            State_exposer.def( 
                "addChunk"
                , addChunk_function_type( &::OSG::State::addChunk )
                , ( bp::arg("chunk"), bp::arg("index")=(::OSG::Int32)(::OSG::Int32(::OSG::State::AutoSlotReplace)) ) );
        
        }
        { //::OSG::State::changed
        
            typedef void ( ::OSG::State::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            State_exposer.def( 
                "changed"
                , changed_function_type( &::OSG::State::changed )
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("details") ) );
        
        }
        { //::OSG::State::chunkPresent
        
            typedef bool ( ::OSG::State::*chunkPresent_function_type )( ::OSG::UInt32 ) const;
            
            State_exposer.def( 
                "chunkPresent"
                , chunkPresent_function_type( &::OSG::State::chunkPresent )
                , ( bp::arg("chunkId") ) );
        
        }
        { //::OSG::State::chunkPresent
        
            typedef bool ( ::OSG::State::*chunkPresent_function_type )( ::OSG::StateChunk * ) const;
            
            State_exposer.def( 
                "chunkPresent"
                , chunkPresent_function_type( &::OSG::State::chunkPresent )
                , ( bp::arg("chunk") ) );
        
        }
        { //::OSG::State::clearChunks
        
            typedef void ( ::OSG::State::*clearChunks_function_type )(  ) ;
            
            State_exposer.def( 
                "clearChunks"
                , clearChunks_function_type( &::OSG::State::clearChunks ) );
        
        }
        { //::OSG::State::dump
        
            typedef void ( ::OSG::State::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            State_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::State::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::State::getCoreGLChunkLimit
        
            typedef ::OSG::UInt32 ( ::OSG::State::*getCoreGLChunkLimit_function_type )(  ) ;
            
            State_exposer.def( 
                "getCoreGLChunkLimit"
                , getCoreGLChunkLimit_function_type( &::OSG::State::getCoreGLChunkLimit ) );
        
        }
        { //::OSG::State::getSortKey
        
            typedef ::OSG::UInt32 ( ::OSG::State::*getSortKey_function_type )( ::OSG::UInt32 ) ;
            
            State_exposer.def( 
                "getSortKey"
                , getSortKey_function_type( &::OSG::State::getSortKey )
                , ( bp::arg("uiKeyGen")=(::OSG::UInt32)(OSG::State::SkipRebuild) ) );
        
        }
        { //::OSG::State::isTransparent
        
            typedef bool ( ::OSG::State::*isTransparent_function_type )(  ) const;
            
            State_exposer.def( 
                "isTransparent"
                , isTransparent_function_type( &::OSG::State::isTransparent ) );
        
        }
        { //::OSG::State::setCoreGLChunkLimit
        
            typedef void ( ::OSG::State::*setCoreGLChunkLimit_function_type )( ::OSG::UInt32 ) ;
            
            State_exposer.def( 
                "setCoreGLChunkLimit"
                , setCoreGLChunkLimit_function_type( &::OSG::State::setCoreGLChunkLimit )
                , ( bp::arg("uiCoreGLChunkLimit") ) );
        
        }
        { //::OSG::State::setDefaultSortKey
        
            typedef void ( ::OSG::State::*setDefaultSortKey_function_type )( ::OSG::UInt32 ) ;
            
            State_exposer.def( 
                "setDefaultSortKey"
                , setDefaultSortKey_function_type( &::OSG::State::setDefaultSortKey )
                , ( bp::arg("uiSortKey") ) );
        
        }
        { //::OSG::State::subChunk
        
            typedef bool ( ::OSG::State::*subChunk_function_type )( ::OSG::StateChunk * ) ;
            
            State_exposer.def( 
                "subChunk"
                , subChunk_function_type( &::OSG::State::subChunk )
                , ( bp::arg("chunk") ) );
        
        }
        { //::OSG::State::subChunk
        
            typedef bool ( ::OSG::State::*subChunk_function_type )( ::OSG::UInt32,::OSG::Int32 ) ;
            
            State_exposer.def( 
                "subChunk"
                , subChunk_function_type( &::OSG::State::subChunk )
                , ( bp::arg("classid"), bp::arg("index") ) );
        
        }
        { //::OSG::State::switchCost
        
            typedef ::OSG::Real32 ( ::OSG::State::*switchCost_function_type )( ::OSG::State * ) ;
            
            State_exposer.def( 
                "switchCost"
                , switchCost_function_type( &::OSG::State::switchCost )
                , ( bp::arg("state") ) );
        
        }
        pyopensg::register_transit< OSG::State >::execute();
        bp::implicitly_convertible< OSG::State::ObjRecPtr, OSG::State* >();
        bp::implicitly_convertible< OSG::State::ObjRecPtr, OSG::State::ObjCPtr >();
        bp::implicitly_convertible< OSG::State::ObjRecPtr, OSG::FieldContainer* >();
        bp::implicitly_convertible< OSG::State::ObjRecPtr, OSG::FieldContainer::ObjRecPtr >();
        bp::implicitly_convertible<OSG::State::ObjRecPtr, OSG::FieldContainer::ObjCPtr>();
        State_exposer.def("getChunk", wrapGetChunk, (bp::arg("chunkId")));
    }

}
