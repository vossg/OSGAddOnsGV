// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "StateOverride.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_StateOverride_class(){

    { //::OSG::StateOverride
        typedef bp::class_< OSG::StateOverride, boost::noncopyable > StateOverride_exposer_t;
        StateOverride_exposer_t StateOverride_exposer = StateOverride_exposer_t( "StateOverride", bp::init< >() );
        bp::scope StateOverride_scope( StateOverride_exposer );
        { //::OSG::StateOverride::addOverride
        
            typedef void ( ::OSG::StateOverride::*addOverride_function_type )( ::OSG::UInt32,::OSG::StateChunk * ) ;
            
            StateOverride_exposer.def( 
                "addOverride"
                , addOverride_function_type( &::OSG::StateOverride::addOverride )
                , ( bp::arg("uiSlot"), bp::arg("pChunk") ) );
        
        }
        { //::OSG::StateOverride::addOverride
        
            typedef void ( ::OSG::StateOverride::*addOverride_function_type )( ::OSG::UInt32,::OSG::SimpleSHLChunk * ) ;
            
            StateOverride_exposer.def( 
                "addOverride"
                , addOverride_function_type( &::OSG::StateOverride::addOverride )
                , ( bp::arg("uiSlot"), bp::arg("pChunk") ) );
        
        }
        { //::OSG::StateOverride::addOverride
        
            typedef void ( ::OSG::StateOverride::*addOverride_function_type )( ::OSG::UInt32,::OSG::ShaderProgramChunk * ) ;
            
            StateOverride_exposer.def( 
                "addOverride"
                , addOverride_function_type( &::OSG::StateOverride::addOverride )
                , ( bp::arg("uiSlot"), bp::arg("pChunk") ) );
        
        }
        { //::OSG::StateOverride::addOverride
        
            typedef void ( ::OSG::StateOverride::*addOverride_function_type )( ::OSG::UInt32,::OSG::ShaderProgramVariableChunk * ) ;
            
            StateOverride_exposer.def( 
                "addOverride"
                , addOverride_function_type( &::OSG::StateOverride::addOverride )
                , ( bp::arg("uiSlot"), bp::arg("pChunk") ) );
        
        }
        { //::OSG::StateOverride::empty
        
            typedef bool ( ::OSG::StateOverride::*empty_function_type )(  ) ;
            
            StateOverride_exposer.def( 
                "empty"
                , empty_function_type( &::OSG::StateOverride::empty ) );
        
        }
        { //::OSG::StateOverride::fillFrom
        
            typedef void ( ::OSG::StateOverride::*fillFrom_function_type )( ::OSG::StateOverride * ) ;
            
            StateOverride_exposer.def( 
                "fillFrom"
                , fillFrom_function_type( &::OSG::StateOverride::fillFrom )
                , ( bp::arg("pState") ) );
        
        }
        { //::OSG::StateOverride::getProgIds
        
            typedef ::std::vector< unsigned short > const & ( ::OSG::StateOverride::*getProgIds_function_type )(  ) ;
            
            StateOverride_exposer.def( 
                "getProgIds"
                , getProgIds_function_type( &::OSG::StateOverride::getProgIds )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::StateOverride::getPrograms
        
            typedef ::std::vector< OSG::ShaderProgramChunk* > const & ( ::OSG::StateOverride::*getPrograms_function_type )(  ) ;
            
            StateOverride_exposer.def( 
                "getPrograms"
                , getPrograms_function_type( &::OSG::StateOverride::getPrograms )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::StateOverride::getShader
        
            typedef ::OSG::ShaderExecutableChunk * ( ::OSG::StateOverride::*getShader_function_type )(  ) ;
            
            StateOverride_exposer.def( 
                "getShader"
                , getShader_function_type( &::OSG::StateOverride::getShader )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::StateOverride::getShaderVar
        
            typedef ::OSG::ShaderExecutableVarChunk * ( ::OSG::StateOverride::*getShaderVar_function_type )(  ) ;
            
            StateOverride_exposer.def( 
                "getShaderVar"
                , getShaderVar_function_type( &::OSG::StateOverride::getShaderVar )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::StateOverride::getVarIds
        
            typedef ::std::vector< unsigned short > const & ( ::OSG::StateOverride::*getVarIds_function_type )(  ) ;
            
            StateOverride_exposer.def( 
                "getVarIds"
                , getVarIds_function_type( &::OSG::StateOverride::getVarIds )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::StateOverride::getVariables
        
            typedef ::std::vector< OSG::ShaderProgramVariableChunk* > const & ( ::OSG::StateOverride::*getVariables_function_type )(  ) ;
            
            StateOverride_exposer.def( 
                "getVariables"
                , getVariables_function_type( &::OSG::StateOverride::getVariables )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::StateOverride::isTransparent
        
            typedef bool ( ::OSG::StateOverride::*isTransparent_function_type )(  ) ;
            
            StateOverride_exposer.def( 
                "isTransparent"
                , isTransparent_function_type( &::OSG::StateOverride::isTransparent ) );
        
        }
        { //::OSG::StateOverride::reset
        
            typedef void ( ::OSG::StateOverride::*reset_function_type )(  ) ;
            
            StateOverride_exposer.def( 
                "reset"
                , reset_function_type( &::OSG::StateOverride::reset ) );
        
        }
        { //::OSG::StateOverride::setKeyGen
        
            typedef void ( ::OSG::StateOverride::*setKeyGen_function_type )( ::OSG::UInt32 ) ;
            
            StateOverride_exposer.def( 
                "setKeyGen"
                , setKeyGen_function_type( &::OSG::StateOverride::setKeyGen )
                , ( bp::arg("uiKeyGen") ) );
        
        }
        { //::OSG::StateOverride::setShader
        
            typedef void ( ::OSG::StateOverride::*setShader_function_type )( ::OSG::ShaderExecutableChunk * ) ;
            
            StateOverride_exposer.def( 
                "setShader"
                , setShader_function_type( &::OSG::StateOverride::setShader )
                , ( bp::arg("pShader") ) );
        
        }
        { //::OSG::StateOverride::setShaderVar
        
            typedef void ( ::OSG::StateOverride::*setShaderVar_function_type )( ::OSG::ShaderExecutableVarChunk * ) ;
            
            StateOverride_exposer.def( 
                "setShaderVar"
                , setShaderVar_function_type( &::OSG::StateOverride::setShaderVar )
                , ( bp::arg("pVar") ) );
        
        }
        { //::OSG::StateOverride::size
        
            typedef ::OSG::SizeT ( ::OSG::StateOverride::*size_function_type )(  ) const;
            
            StateOverride_exposer.def( 
                "size"
                , size_function_type( &::OSG::StateOverride::size ) );
        
        }
        { //::OSG::StateOverride::size32
        
            typedef ::OSG::UInt32 ( ::OSG::StateOverride::*size32_function_type )(  ) const;
            
            StateOverride_exposer.def( 
                "size32"
                , size32_function_type( &::OSG::StateOverride::size32 ) );
        
        }
        { //::OSG::StateOverride::updateSortKey
        
            typedef void ( ::OSG::StateOverride::*updateSortKey_function_type )( ::OSG::UInt32 &,::OSG::UInt32 ) ;
            
            StateOverride_exposer.def( 
                "updateSortKey"
                , updateSortKey_function_type( &::OSG::StateOverride::updateSortKey )
                , ( bp::arg("uiSortKey"), bp::arg("uiKeyGen")=(::OSG::UInt32)(OSG::StateOverride::SkipRebuild) ) );
        
        }
    }

}
