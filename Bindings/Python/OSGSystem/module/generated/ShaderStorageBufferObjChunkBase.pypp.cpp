// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "ShaderStorageBufferObjChunkBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_ShaderStorageBufferObjChunkBase_class(){

    { //::OSG::ShaderStorageBufferObjChunkBase
        typedef bp::class_< OSG::ShaderStorageBufferObjChunkBase, bp::bases< OSG::StateChunk >, boost::noncopyable > ShaderStorageBufferObjChunkBase_exposer_t;
        ShaderStorageBufferObjChunkBase_exposer_t ShaderStorageBufferObjChunkBase_exposer = ShaderStorageBufferObjChunkBase_exposer_t( "ShaderStorageBufferObjChunkBase", bp::no_init );
        bp::scope ShaderStorageBufferObjChunkBase_scope( ShaderStorageBufferObjChunkBase_exposer );
        bp::scope().attr("GLIdFieldId") = (int)OSG::ShaderStorageBufferObjChunkBase::GLIdFieldId;
        bp::scope().attr("UsageFieldId") = (int)OSG::ShaderStorageBufferObjChunkBase::UsageFieldId;
        bp::scope().attr("BlockNameFieldId") = (int)OSG::ShaderStorageBufferObjChunkBase::BlockNameFieldId;
        bp::scope().attr("FundamentalTypesFieldId") = (int)OSG::ShaderStorageBufferObjChunkBase::FundamentalTypesFieldId;
        bp::scope().attr("MainTypesFieldId") = (int)OSG::ShaderStorageBufferObjChunkBase::MainTypesFieldId;
        bp::scope().attr("CardinalityFieldId") = (int)OSG::ShaderStorageBufferObjChunkBase::CardinalityFieldId;
        bp::scope().attr("IndexFieldId") = (int)OSG::ShaderStorageBufferObjChunkBase::IndexFieldId;
        bp::scope().attr("NamesFieldId") = (int)OSG::ShaderStorageBufferObjChunkBase::NamesFieldId;
        bp::scope().attr("NameToIndexFieldId") = (int)OSG::ShaderStorageBufferObjChunkBase::NameToIndexFieldId;
        bp::scope().attr("FloatValuesFieldId") = (int)OSG::ShaderStorageBufferObjChunkBase::FloatValuesFieldId;
        bp::scope().attr("DoubleValuesFieldId") = (int)OSG::ShaderStorageBufferObjChunkBase::DoubleValuesFieldId;
        bp::scope().attr("IntValuesFieldId") = (int)OSG::ShaderStorageBufferObjChunkBase::IntValuesFieldId;
        bp::scope().attr("UIntValuesFieldId") = (int)OSG::ShaderStorageBufferObjChunkBase::UIntValuesFieldId;
        bp::scope().attr("BoolValuesFieldId") = (int)OSG::ShaderStorageBufferObjChunkBase::BoolValuesFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::ShaderStorageBufferObjChunkBase::NextFieldId;
        { //::OSG::ShaderStorageBufferObjChunkBase::copyFromBin
        
            typedef void ( ::OSG::ShaderStorageBufferObjChunkBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            ShaderStorageBufferObjChunkBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::ShaderStorageBufferObjChunkBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::ShaderStorageBufferObjChunkBase::copyToBin
        
            typedef void ( ::OSG::ShaderStorageBufferObjChunkBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            ShaderStorageBufferObjChunkBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::ShaderStorageBufferObjChunkBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::ShaderStorageBufferObjChunkBase::create
        
            typedef ::OSG::ShaderStorageBufferObjChunkTransitPtr ( *create_function_type )(  );
            
            ShaderStorageBufferObjChunkBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::ShaderStorageBufferObjChunkBase::create ) );
        
        }
        { //::OSG::ShaderStorageBufferObjChunkBase::createDependent
        
            typedef ::OSG::ShaderStorageBufferObjChunkTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            ShaderStorageBufferObjChunkBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::ShaderStorageBufferObjChunkBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::ShaderStorageBufferObjChunkBase::createLocal
        
            typedef ::OSG::ShaderStorageBufferObjChunkTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            ShaderStorageBufferObjChunkBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::ShaderStorageBufferObjChunkBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::ShaderStorageBufferObjChunkBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::ShaderStorageBufferObjChunkBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            ShaderStorageBufferObjChunkBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::ShaderStorageBufferObjChunkBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::ShaderStorageBufferObjChunkBase::getBlockName
        
            typedef ::std::string const & ( ::OSG::ShaderStorageBufferObjChunkBase::*getBlockName_function_type )(  ) const;
            
            ShaderStorageBufferObjChunkBase_exposer.def( 
                "getBlockName"
                , getBlockName_function_type( &::OSG::ShaderStorageBufferObjChunkBase::getBlockName )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::ShaderStorageBufferObjChunkBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            ShaderStorageBufferObjChunkBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::ShaderStorageBufferObjChunkBase::getClassGroupId ) );
        
        }
        { //::OSG::ShaderStorageBufferObjChunkBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            ShaderStorageBufferObjChunkBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::ShaderStorageBufferObjChunkBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::ShaderStorageBufferObjChunkBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            ShaderStorageBufferObjChunkBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::ShaderStorageBufferObjChunkBase::getClassTypeId ) );
        
        }
        { //::OSG::ShaderStorageBufferObjChunkBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::ShaderStorageBufferObjChunkBase::*getContainerSize_function_type )(  ) const;
            
            ShaderStorageBufferObjChunkBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::ShaderStorageBufferObjChunkBase::getContainerSize ) );
        
        }
        { //::OSG::ShaderStorageBufferObjChunkBase::getGLId
        
            typedef ::GLenum const & ( ::OSG::ShaderStorageBufferObjChunkBase::*getGLId_function_type )(  ) const;
            
            ShaderStorageBufferObjChunkBase_exposer.def( 
                "getGLId"
                , getGLId_function_type( &::OSG::ShaderStorageBufferObjChunkBase::getGLId )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::ShaderStorageBufferObjChunkBase::getSFBlockName
        
            typedef ::OSG::SFString const * ( ::OSG::ShaderStorageBufferObjChunkBase::*getSFBlockName_function_type )(  ) const;
            
            ShaderStorageBufferObjChunkBase_exposer.def( 
                "getSFBlockName"
                , getSFBlockName_function_type( &::OSG::ShaderStorageBufferObjChunkBase::getSFBlockName )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ShaderStorageBufferObjChunkBase::getSFGLId
        
            typedef ::OSG::SFGLenum const * ( ::OSG::ShaderStorageBufferObjChunkBase::*getSFGLId_function_type )(  ) const;
            
            ShaderStorageBufferObjChunkBase_exposer.def( 
                "getSFGLId"
                , getSFGLId_function_type( &::OSG::ShaderStorageBufferObjChunkBase::getSFGLId )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ShaderStorageBufferObjChunkBase::getSFUsage
        
            typedef ::OSG::SFGLenum const * ( ::OSG::ShaderStorageBufferObjChunkBase::*getSFUsage_function_type )(  ) const;
            
            ShaderStorageBufferObjChunkBase_exposer.def( 
                "getSFUsage"
                , getSFUsage_function_type( &::OSG::ShaderStorageBufferObjChunkBase::getSFUsage )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ShaderStorageBufferObjChunkBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::ShaderStorageBufferObjChunkBase::*getType_function_type )(  ) ;
            
            ShaderStorageBufferObjChunkBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::ShaderStorageBufferObjChunkBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ShaderStorageBufferObjChunkBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::ShaderStorageBufferObjChunkBase::*getType_function_type )(  ) const;
            
            ShaderStorageBufferObjChunkBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::ShaderStorageBufferObjChunkBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ShaderStorageBufferObjChunkBase::getUsage
        
            typedef ::GLenum const & ( ::OSG::ShaderStorageBufferObjChunkBase::*getUsage_function_type )(  ) const;
            
            ShaderStorageBufferObjChunkBase_exposer.def( 
                "getUsage"
                , getUsage_function_type( &::OSG::ShaderStorageBufferObjChunkBase::getUsage )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::ShaderStorageBufferObjChunkBase::setBlockName
        
            typedef void ( ::OSG::ShaderStorageBufferObjChunkBase::*setBlockName_function_type )( ::std::string const & ) ;
            
            ShaderStorageBufferObjChunkBase_exposer.def( 
                "setBlockName"
                , setBlockName_function_type( &::OSG::ShaderStorageBufferObjChunkBase::setBlockName )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ShaderStorageBufferObjChunkBase::setGLId
        
            typedef void ( ::OSG::ShaderStorageBufferObjChunkBase::*setGLId_function_type )( ::GLenum const & ) ;
            
            ShaderStorageBufferObjChunkBase_exposer.def( 
                "setGLId"
                , setGLId_function_type( &::OSG::ShaderStorageBufferObjChunkBase::setGLId )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ShaderStorageBufferObjChunkBase::setUsage
        
            typedef void ( ::OSG::ShaderStorageBufferObjChunkBase::*setUsage_function_type )( ::GLenum const & ) ;
            
            ShaderStorageBufferObjChunkBase_exposer.def( 
                "setUsage"
                , setUsage_function_type( &::OSG::ShaderStorageBufferObjChunkBase::setUsage )
                , ( bp::arg("value") ) );
        
        }
        ShaderStorageBufferObjChunkBase_exposer.staticmethod( "create" );
        ShaderStorageBufferObjChunkBase_exposer.staticmethod( "createDependent" );
        ShaderStorageBufferObjChunkBase_exposer.staticmethod( "createLocal" );
        ShaderStorageBufferObjChunkBase_exposer.staticmethod( "getClassGroupId" );
        ShaderStorageBufferObjChunkBase_exposer.staticmethod( "getClassType" );
        ShaderStorageBufferObjChunkBase_exposer.staticmethod( "getClassTypeId" );
    }

}
