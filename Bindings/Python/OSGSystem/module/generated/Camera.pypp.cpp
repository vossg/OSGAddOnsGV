// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "Camera.pypp.hpp"

using namespace std;
namespace bp = boost::python;

static void calcFrustum_const_ref_wrapper(::OSG::Camera& self_arg, OSG::FrustumVolume & result,OSG::Viewport & port)
         { return self_arg.calcFrustum(result,port); }

static void calcWorldToScreen_const_ref_wrapper(::OSG::Camera& self_arg, OSG::Matrix & result,OSG::Viewport & port)
         { return self_arg.calcWorldToScreen(result,port); }

static OSG::FrustumVolume calcFrustumVal_const_ref_wrapper(::OSG::Camera& self_arg, OSG::Viewport & port)
         { return self_arg.calcFrustumVal(port); }

static OSG::Matrix calcWorldToScreenVal_const_ref_wrapper(::OSG::Camera& self_arg, OSG::Viewport & port)
         { return self_arg.calcWorldToScreenVal(port); }

static bool calcViewRay_const_ref_wrapper(::OSG::Camera& self_arg, OSG::Line & line,OSG::Int32 x,OSG::Int32 y,OSG::Viewport & port,OSG::Real32 * t=0l)
         { return self_arg.calcViewRay(line,x,y,port,t); }

void register_Camera_class(){

    { //::OSG::Camera
        typedef bp::class_< OSG::Camera, bp::bases< OSG::CameraBase >, boost::noncopyable > Camera_exposer_t;
        Camera_exposer_t Camera_exposer = Camera_exposer_t( "Camera", bp::no_init );
        bp::scope Camera_scope( Camera_exposer );
        { //::OSG::Camera::changed
        
            typedef void ( ::OSG::Camera::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            Camera_exposer.def( 
                "changed"
                , changed_function_type( &::OSG::Camera::changed )
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("detail") ) );
        
        }
        { //::OSG::Camera::dump
        
            typedef void ( ::OSG::Camera::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            Camera_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::Camera::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::Camera::getDecoration
        
            typedef void ( ::OSG::Camera::*getDecoration_function_type )( ::OSG::Matrix &,::OSG::UInt32,::OSG::UInt32 ) ;
            
            Camera_exposer.def( 
                "getDecoration"
                , getDecoration_function_type( &::OSG::Camera::getDecoration )
                , ( bp::arg("result"), bp::arg("width"), bp::arg("height") ) );
        
        }
        { //::OSG::Camera::getDecorationVal
        
            typedef ::OSG::Matrix ( ::OSG::Camera::*getDecorationVal_function_type )( ::OSG::UInt32,::OSG::UInt32 ) ;
            
            Camera_exposer.def( 
                "getDecorationVal"
                , getDecorationVal_function_type( &::OSG::Camera::getDecorationVal )
                , ( bp::arg("width"), bp::arg("height") ) );
        
        }
        { //::OSG::Camera::getFrustum
        
            typedef void ( ::OSG::Camera::*getFrustum_function_type )( ::OSG::FrustumVolume &,::OSG::UInt32,::OSG::UInt32 ) ;
            
            Camera_exposer.def( 
                "getFrustum"
                , getFrustum_function_type( &::OSG::Camera::getFrustum )
                , ( bp::arg("result"), bp::arg("width"), bp::arg("height") ) );
        
        }
        { //::OSG::Camera::getProjection
        
            typedef void ( ::OSG::Camera::*getProjection_function_type )( ::OSG::Matrix &,::OSG::UInt32,::OSG::UInt32 ) ;
            
            Camera_exposer.def( 
                "getProjection"
                , getProjection_function_type( &::OSG::Camera::getProjection )
                , ( bp::arg("result"), bp::arg("width"), bp::arg("height") ) );
        
        }
        { //::OSG::Camera::getProjectionTranslation
        
            typedef void ( ::OSG::Camera::*getProjectionTranslation_function_type )( ::OSG::Matrix &,::OSG::UInt32,::OSG::UInt32 ) ;
            
            Camera_exposer.def( 
                "getProjectionTranslation"
                , getProjectionTranslation_function_type( &::OSG::Camera::getProjectionTranslation )
                , ( bp::arg("result"), bp::arg("width"), bp::arg("height") ) );
        
        }
        { //::OSG::Camera::getProjectionTranslationVal
        
            typedef ::OSG::Matrix ( ::OSG::Camera::*getProjectionTranslationVal_function_type )( ::OSG::UInt32,::OSG::UInt32 ) ;
            
            Camera_exposer.def( 
                "getProjectionTranslationVal"
                , getProjectionTranslationVal_function_type( &::OSG::Camera::getProjectionTranslationVal )
                , ( bp::arg("width"), bp::arg("height") ) );
        
        }
        { //::OSG::Camera::getProjectionVal
        
            typedef ::OSG::Matrix ( ::OSG::Camera::*getProjectionVal_function_type )( ::OSG::UInt32,::OSG::UInt32 ) ;
            
            Camera_exposer.def( 
                "getProjectionVal"
                , getProjectionVal_function_type( &::OSG::Camera::getProjectionVal )
                , ( bp::arg("width"), bp::arg("height") ) );
        
        }
        { //::OSG::Camera::getViewing
        
            typedef void ( ::OSG::Camera::*getViewing_function_type )( ::OSG::Matrix &,::OSG::UInt32,::OSG::UInt32 ) ;
            
            Camera_exposer.def( 
                "getViewing"
                , getViewing_function_type( &::OSG::Camera::getViewing )
                , ( bp::arg("result"), bp::arg("width"), bp::arg("height") ) );
        
        }
        { //::OSG::Camera::getViewingVal
        
            typedef ::OSG::Matrix ( ::OSG::Camera::*getViewingVal_function_type )( ::OSG::UInt32,::OSG::UInt32 ) ;
            
            Camera_exposer.def( 
                "getViewingVal"
                , getViewingVal_function_type( &::OSG::Camera::getViewingVal )
                , ( bp::arg("width"), bp::arg("height") ) );
        
        }
        { //::OSG::Camera::tileGetFullSize
        
            typedef ::OSG::Vec2u ( ::OSG::Camera::*tileGetFullSize_function_type )(  ) const;
            
            Camera_exposer.def( 
                "tileGetFullSize"
                , tileGetFullSize_function_type( &::OSG::Camera::tileGetFullSize ) );
        
        }
        { //::OSG::Camera::tileGetRegion
        
            typedef ::OSG::Vec4f ( ::OSG::Camera::*tileGetRegion_function_type )(  ) const;
            
            Camera_exposer.def( 
                "tileGetRegion"
                , tileGetRegion_function_type( &::OSG::Camera::tileGetRegion ) );
        
        }
        Camera_exposer.def("calcFrustum", &calcFrustum_const_ref_wrapper);
        Camera_exposer.def("calcWorldToScreen", &calcWorldToScreen_const_ref_wrapper);
        Camera_exposer.def("calcFrustumVal", &calcFrustumVal_const_ref_wrapper);
        Camera_exposer.def("calcWorldToScreenVal", &calcWorldToScreenVal_const_ref_wrapper);
        Camera_exposer.def("calcViewRay", &calcViewRay_const_ref_wrapper);
        pyopensg::register_transit< OSG::Camera >::execute();
        bp::register_ptr_to_python< OSG::Camera::ObjRecPtr >();
        bp::implicitly_convertible< OSG::Camera::ObjRecPtr, OSG::Camera* >();
        bp::implicitly_convertible< OSG::Camera::ObjRecPtr, OSG::Camera::ObjCPtr >();
        bp::implicitly_convertible< OSG::Camera::ObjRecPtr, OSG::AttachmentContainer* >();
        bp::implicitly_convertible< OSG::Camera::ObjRecPtr, OSG::AttachmentContainer::ObjRecPtr >();
        bp::implicitly_convertible<OSG::Camera::ObjRecPtr, OSG::AttachmentContainer::ObjCPtr>();
        Camera_exposer.def("calcViewRay",osgwrap::calcViewRay);
    }

}
