// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "StringAttributeMap.pypp.hpp"

using namespace std;
namespace bp = boost::python;

boost::python::list StringAttributeMap_getKeys(OSG::StringAttributeMap *self)
{
   boost::python::list result;
   OSG::MFString const & mf_data = self->getKeys();
   const OSG::UInt32 size(mf_data.size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append(mf_data[i]);
   }
   return result;
}

void register_StringAttributeMap_class(){

    { //::OSG::StringAttributeMap
        typedef bp::class_< OSG::StringAttributeMap, bp::bases< OSG::StringAttributeMapBase >, OSG::StringAttributeMap::ObjRecPtr, boost::noncopyable > StringAttributeMap_exposer_t;
        StringAttributeMap_exposer_t StringAttributeMap_exposer = StringAttributeMap_exposer_t( "StringAttributeMap", bp::no_init );
        bp::scope StringAttributeMap_scope( StringAttributeMap_exposer );
        { //::OSG::StringAttributeMap::changed
        
            typedef void ( ::OSG::StringAttributeMap::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            StringAttributeMap_exposer.def( 
                "changed"
                , changed_function_type( &::OSG::StringAttributeMap::changed )
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("details") ) );
        
        }
        { //::OSG::StringAttributeMap::dump
        
            typedef void ( ::OSG::StringAttributeMap::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            StringAttributeMap_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::StringAttributeMap::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::StringAttributeMap::getAttribute
        
            typedef bool ( ::OSG::StringAttributeMap::*getAttribute_function_type )( ::std::string const &,::std::string & ) const;
            
            StringAttributeMap_exposer.def( 
                "getAttribute"
                , getAttribute_function_type( &::OSG::StringAttributeMap::getAttribute )
                , ( bp::arg("key"), bp::arg("value") ) );
        
        }
        { //::OSG::StringAttributeMap::getAttribute
        
            typedef ::std::string const ( ::OSG::StringAttributeMap::*getAttribute_function_type )( ::std::string const & ) const;
            
            StringAttributeMap_exposer.def( 
                "getAttribute"
                , getAttribute_function_type( &::OSG::StringAttributeMap::getAttribute )
                , ( bp::arg("key") ) );
        
        }
        { //::OSG::StringAttributeMap::hasAttribute
        
            typedef bool ( ::OSG::StringAttributeMap::*hasAttribute_function_type )( ::std::string const & ) const;
            
            StringAttributeMap_exposer.def( 
                "hasAttribute"
                , hasAttribute_function_type( &::OSG::StringAttributeMap::hasAttribute )
                , ( bp::arg("key") ) );
        
        }
        { //::OSG::StringAttributeMap::operator[]
        
            typedef ::std::string & ( ::OSG::StringAttributeMap::*__getitem___function_type )( ::std::string const & ) ;
            
            StringAttributeMap_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::OSG::StringAttributeMap::operator[] )
                , ( bp::arg("key") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::StringAttributeMap::setAttribute
        
            typedef void ( ::OSG::StringAttributeMap::*setAttribute_function_type )( ::std::string const &,::std::string const & ) ;
            
            StringAttributeMap_exposer.def( 
                "setAttribute"
                , setAttribute_function_type( &::OSG::StringAttributeMap::setAttribute )
                , ( bp::arg("key"), bp::arg("value") ) );
        
        }
        StringAttributeMap_exposer.def("getKeys",StringAttributeMap_getKeys);
        pyopensg::register_transit< OSG::StringAttributeMap >::execute();
        bp::implicitly_convertible< OSG::StringAttributeMap::ObjRecPtr, OSG::StringAttributeMap* >();
        bp::implicitly_convertible< OSG::StringAttributeMap::ObjRecPtr, OSG::StringAttributeMap::ObjCPtr >();
        bp::implicitly_convertible< OSG::StringAttributeMap::ObjRecPtr, OSG::Attachment* >();
        bp::implicitly_convertible< OSG::StringAttributeMap::ObjRecPtr, OSG::Attachment::ObjRecPtr >();
        bp::implicitly_convertible<OSG::StringAttributeMap::ObjRecPtr, OSG::Attachment::ObjCPtr>();
    }

}
