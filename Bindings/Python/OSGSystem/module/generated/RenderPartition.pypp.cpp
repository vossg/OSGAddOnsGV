// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "RenderPartition.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_RenderPartition_class(){

    { //::OSG::RenderPartition
        typedef bp::class_< OSG::RenderPartition, bp::bases< OSG::RenderPartitionBase >, boost::noncopyable > RenderPartition_exposer_t;
        RenderPartition_exposer_t RenderPartition_exposer = RenderPartition_exposer_t( "RenderPartition", bp::no_init );
        bp::scope RenderPartition_scope( RenderPartition_exposer );
        { //::OSG::RenderPartition::addOverride
        
            typedef void ( ::OSG::RenderPartition::*addOverride_function_type )( ::OSG::UInt32,::OSG::StateChunk * ) ;
            
            RenderPartition_exposer.def( 
                "addOverride"
                , addOverride_function_type( &::OSG::RenderPartition::addOverride )
                , ( bp::arg("uiSlot"), bp::arg("pChunk") ) );
        
        }
        { //::OSG::RenderPartition::addPartition
        
            typedef void ( ::OSG::RenderPartition::*addPartition_function_type )( ::OSG::RenderPartition * ) ;
            
            RenderPartition_exposer.def( 
                "addPartition"
                , addPartition_function_type( &::OSG::RenderPartition::addPartition )
                , ( bp::arg("pPart") ) );
        
        }
        { //::OSG::RenderPartition::addPostRenderCallback
        
            typedef void ( ::OSG::RenderPartition::*addPostRenderCallback_function_type )( ::OSG::RenderFunctor const & ) ;
            
            RenderPartition_exposer.def( 
                "addPostRenderCallback"
                , addPostRenderCallback_function_type( &::OSG::RenderPartition::addPostRenderCallback )
                , ( bp::arg("oCallback") ) );
        
        }
        { //::OSG::RenderPartition::addPreRenderCallback
        
            typedef void ( ::OSG::RenderPartition::*addPreRenderCallback_function_type )( ::OSG::RenderFunctor const & ) ;
            
            RenderPartition_exposer.def( 
                "addPreRenderCallback"
                , addPreRenderCallback_function_type( &::OSG::RenderPartition::addPreRenderCallback )
                , ( bp::arg("oCallback") ) );
        
        }
        { //::OSG::RenderPartition::addSetupModeBit
        
            typedef void ( ::OSG::RenderPartition::*addSetupModeBit_function_type )( ::OSG::UInt32 ) ;
            
            RenderPartition_exposer.def( 
                "addSetupModeBit"
                , addSetupModeBit_function_type( &::OSG::RenderPartition::addSetupModeBit )
                , ( bp::arg("uiSetupModeBit") ) );
        
        }
        { //::OSG::RenderPartition::allocateLightIndex
        
            typedef ::OSG::Int32 ( ::OSG::RenderPartition::*allocateLightIndex_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "allocateLightIndex"
                , allocateLightIndex_function_type( &::OSG::RenderPartition::allocateLightIndex ) );
        
        }
        { //::OSG::RenderPartition::calcFrustum
        
            typedef void ( ::OSG::RenderPartition::*calcFrustum_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "calcFrustum"
                , calcFrustum_function_type( &::OSG::RenderPartition::calcFrustum ) );
        
        }
        { //::OSG::RenderPartition::calcViewportDimension
        
            typedef void ( ::OSG::RenderPartition::*calcViewportDimension_function_type )( ::OSG::Real32,::OSG::Real32,::OSG::Real32,::OSG::Real32,::OSG::UInt16,::OSG::UInt16 ) ;
            
            RenderPartition_exposer.def( 
                "calcViewportDimension"
                , calcViewportDimension_function_type( &::OSG::RenderPartition::calcViewportDimension )
                , ( bp::arg("rLeft"), bp::arg("rBottom"), bp::arg("rRight"), bp::arg("rTop"), bp::arg("iTargetWidth"), bp::arg("iTargetHeight") ) );
        
        }
        { //::OSG::RenderPartition::clearForegrounds
        
            typedef void ( ::OSG::RenderPartition::*clearForegrounds_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "clearForegrounds"
                , clearForegrounds_function_type( &::OSG::RenderPartition::clearForegrounds ) );
        
        }
        { //::OSG::RenderPartition::disable
        
            typedef void ( ::OSG::RenderPartition::*disable_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "disable"
                , disable_function_type( &::OSG::RenderPartition::disable ) );
        
        }
        { //::OSG::RenderPartition::execute
        
            typedef void ( ::OSG::RenderPartition::*execute_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "execute"
                , execute_function_type( &::OSG::RenderPartition::execute ) );
        
        }
        { //::OSG::RenderPartition::exit
        
            typedef void ( ::OSG::RenderPartition::*exit_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "exit"
                , exit_function_type( &::OSG::RenderPartition::exit ) );
        
        }
        { //::OSG::RenderPartition::getCameraToWorld
        
            typedef ::OSG::Matrix4f const & ( ::OSG::RenderPartition::*getCameraToWorld_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "getCameraToWorld"
                , getCameraToWorld_function_type( &::OSG::RenderPartition::getCameraToWorld )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::RenderPartition::getCurrentOverrides
        
            typedef ::OSG::StateOverride const * ( ::OSG::RenderPartition::*getCurrentOverrides_function_type )(  ) const;
            
            RenderPartition_exposer.def( 
                "getCurrentOverrides"
                , getCurrentOverrides_function_type( &::OSG::RenderPartition::getCurrentOverrides )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::RenderPartition::getDrawEnv
        
            typedef ::OSG::DrawEnv & ( ::OSG::RenderPartition::*getDrawEnv_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "getDrawEnv"
                , getDrawEnv_function_type( &::OSG::RenderPartition::getDrawEnv )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::RenderPartition::getFar
        
            typedef ::OSG::Real32 ( ::OSG::RenderPartition::*getFar_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "getFar"
                , getFar_function_type( &::OSG::RenderPartition::getFar ) );
        
        }
        { //::OSG::RenderPartition::getFrustum
        
            typedef ::OSG::FrustumVolume const & ( ::OSG::RenderPartition::*getFrustum_function_type )(  ) const;
            
            RenderPartition_exposer.def( 
                "getFrustum"
                , getFrustum_function_type( &::OSG::RenderPartition::getFrustum )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::RenderPartition::getFrustumCulling
        
            typedef bool ( ::OSG::RenderPartition::*getFrustumCulling_function_type )(  ) const;
            
            RenderPartition_exposer.def( 
                "getFrustumCulling"
                , getFrustumCulling_function_type( &::OSG::RenderPartition::getFrustumCulling ) );
        
        }
        { //::OSG::RenderPartition::getFullProjection
        
            typedef ::OSG::Matrix4f const & ( ::OSG::RenderPartition::*getFullProjection_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "getFullProjection"
                , getFullProjection_function_type( &::OSG::RenderPartition::getFullProjection )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::RenderPartition::getKeyGen
        
            typedef ::OSG::UInt32 ( ::OSG::RenderPartition::*getKeyGen_function_type )(  ) const;
            
            RenderPartition_exposer.def( 
                "getKeyGen"
                , getKeyGen_function_type( &::OSG::RenderPartition::getKeyGen ) );
        
        }
        { //::OSG::RenderPartition::getLightState
        
            typedef ::OSG::UInt32 ( ::OSG::RenderPartition::*getLightState_function_type )(  ) const;
            
            RenderPartition_exposer.def( 
                "getLightState"
                , getLightState_function_type( &::OSG::RenderPartition::getLightState ) );
        
        }
        { //::OSG::RenderPartition::getMaterial
        
            typedef ::OSG::Material * ( ::OSG::RenderPartition::*getMaterial_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "getMaterial"
                , getMaterial_function_type( &::OSG::RenderPartition::getMaterial )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::RenderPartition::getMatrixStackTop
        
            typedef ::std::pair< unsigned int, OSG::TransformationMatrix< float > > const & ( ::OSG::RenderPartition::*getMatrixStackTop_function_type )(  ) const;
            
            RenderPartition_exposer.def( 
                "getMatrixStackTop"
                , getMatrixStackTop_function_type( &::OSG::RenderPartition::getMatrixStackTop )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::RenderPartition::getModelMatrix
        
            typedef ::OSG::Matrix const & ( ::OSG::RenderPartition::*getModelMatrix_function_type )(  ) const;
            
            RenderPartition_exposer.def( 
                "getModelMatrix"
                , getModelMatrix_function_type( &::OSG::RenderPartition::getModelMatrix )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::RenderPartition::getModelViewMatrix
        
            typedef ::OSG::Matrix const & ( ::OSG::RenderPartition::*getModelViewMatrix_function_type )(  ) const;
            
            RenderPartition_exposer.def( 
                "getModelViewMatrix"
                , getModelViewMatrix_function_type( &::OSG::RenderPartition::getModelViewMatrix )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::RenderPartition::getNear
        
            typedef ::OSG::Real32 ( ::OSG::RenderPartition::*getNear_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "getNear"
                , getNear_function_type( &::OSG::RenderPartition::getNear ) );
        
        }
        { //::OSG::RenderPartition::getProjection
        
            typedef ::OSG::Matrix4f const & ( ::OSG::RenderPartition::*getProjection_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "getProjection"
                , getProjection_function_type( &::OSG::RenderPartition::getProjection )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::RenderPartition::getProjectionTrans
        
            typedef ::OSG::Matrix4f const & ( ::OSG::RenderPartition::*getProjectionTrans_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "getProjectionTrans"
                , getProjectionTrans_function_type( &::OSG::RenderPartition::getProjectionTrans )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::RenderPartition::getRenderTarget
        
            typedef ::OSG::FrameBufferObject * ( ::OSG::RenderPartition::*getRenderTarget_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "getRenderTarget"
                , getRenderTarget_function_type( &::OSG::RenderPartition::getRenderTarget )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::RenderPartition::getStatCollector
        
            typedef ::OSG::StatCollectorP ( ::OSG::RenderPartition::*getStatCollector_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "getStatCollector"
                , getStatCollector_function_type( &::OSG::RenderPartition::getStatCollector )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::RenderPartition::getVPCameraToWorld
        
            typedef ::OSG::Matrix4f const & ( ::OSG::RenderPartition::*getVPCameraToWorld_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "getVPCameraToWorld"
                , getVPCameraToWorld_function_type( &::OSG::RenderPartition::getVPCameraToWorld )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::RenderPartition::getVPFullProjection
        
            typedef ::OSG::Matrix4f const & ( ::OSG::RenderPartition::*getVPFullProjection_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "getVPFullProjection"
                , getVPFullProjection_function_type( &::OSG::RenderPartition::getVPFullProjection )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::RenderPartition::getVPProjection
        
            typedef ::OSG::Matrix4f const & ( ::OSG::RenderPartition::*getVPProjection_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "getVPProjection"
                , getVPProjection_function_type( &::OSG::RenderPartition::getVPProjection )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::RenderPartition::getVPProjectionTrans
        
            typedef ::OSG::Matrix4f const & ( ::OSG::RenderPartition::*getVPProjectionTrans_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "getVPProjectionTrans"
                , getVPProjectionTrans_function_type( &::OSG::RenderPartition::getVPProjectionTrans )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::RenderPartition::getVPViewing
        
            typedef ::OSG::Matrix4f const & ( ::OSG::RenderPartition::*getVPViewing_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "getVPViewing"
                , getVPViewing_function_type( &::OSG::RenderPartition::getVPViewing )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::RenderPartition::getViewing
        
            typedef ::OSG::Matrix4f const & ( ::OSG::RenderPartition::*getViewing_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "getViewing"
                , getViewing_function_type( &::OSG::RenderPartition::getViewing )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::RenderPartition::getViewportHeight
        
            typedef ::OSG::Int32 ( ::OSG::RenderPartition::*getViewportHeight_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "getViewportHeight"
                , getViewportHeight_function_type( &::OSG::RenderPartition::getViewportHeight ) );
        
        }
        { //::OSG::RenderPartition::getViewportWidth
        
            typedef ::OSG::Int32 ( ::OSG::RenderPartition::*getViewportWidth_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "getViewportWidth"
                , getViewportWidth_function_type( &::OSG::RenderPartition::getViewportWidth ) );
        
        }
        { //::OSG::RenderPartition::getVolumeDrawing
        
            typedef bool ( ::OSG::RenderPartition::*getVolumeDrawing_function_type )(  ) const;
            
            RenderPartition_exposer.def( 
                "getVolumeDrawing"
                , getVolumeDrawing_function_type( &::OSG::RenderPartition::getVolumeDrawing ) );
        
        }
        { //::OSG::RenderPartition::getWindow
        
            typedef ::OSG::Window * ( ::OSG::RenderPartition::*getWindow_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "getWindow"
                , getWindow_function_type( &::OSG::RenderPartition::getWindow )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::RenderPartition::init
        
            typedef void ( ::OSG::RenderPartition::*init_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "init"
                , init_function_type( &::OSG::RenderPartition::init ) );
        
        }
        { //::OSG::RenderPartition::initFrom
        
            typedef void ( ::OSG::RenderPartition::*initFrom_function_type )( ::OSG::RenderPartition *,::OSG::RenderPartition *,::OSG::Int32 ) ;
            
            RenderPartition_exposer.def( 
                "initFrom"
                , initFrom_function_type( &::OSG::RenderPartition::initFrom )
                , ( bp::arg("pSource"), bp::arg("pInitial"), bp::arg("uiCopyOnPush") ) );
        
        }
        { //::OSG::RenderPartition::initVPMatricesFromCamera
        
            typedef void ( ::OSG::RenderPartition::*initVPMatricesFromCamera_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "initVPMatricesFromCamera"
                , initVPMatricesFromCamera_function_type( &::OSG::RenderPartition::initVPMatricesFromCamera ) );
        
        }
        { //::OSG::RenderPartition::isVisible
        
            typedef bool ( ::OSG::RenderPartition::*isVisible_function_type )( ::OSG::Node * ) ;
            
            RenderPartition_exposer.def( 
                "isVisible"
                , isVisible_function_type( &::OSG::RenderPartition::isVisible )
                , ( bp::arg("pNode") ) );
        
        }
        { //::OSG::RenderPartition::overrideMaterial
        
            typedef void ( ::OSG::RenderPartition::*overrideMaterial_function_type )( ::OSG::Material *,::OSG::Node * const ) ;
            
            RenderPartition_exposer.def( 
                "overrideMaterial"
                , overrideMaterial_function_type( &::OSG::RenderPartition::overrideMaterial )
                , ( bp::arg("pMaterial"), bp::arg("pNode") ) );
        
        }
        { //::OSG::RenderPartition::popMatrix
        
            typedef void ( ::OSG::RenderPartition::*popMatrix_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "popMatrix"
                , popMatrix_function_type( &::OSG::RenderPartition::popMatrix ) );
        
        }
        { //::OSG::RenderPartition::popState
        
            typedef void ( ::OSG::RenderPartition::*popState_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "popState"
                , popState_function_type( &::OSG::RenderPartition::popState ) );
        
        }
        { //::OSG::RenderPartition::popVisibility
        
            typedef void ( ::OSG::RenderPartition::*popVisibility_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "popVisibility"
                , popVisibility_function_type( &::OSG::RenderPartition::popVisibility ) );
        
        }
        { //::OSG::RenderPartition::pushState
        
            typedef void ( ::OSG::RenderPartition::*pushState_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "pushState"
                , pushState_function_type( &::OSG::RenderPartition::pushState ) );
        
        }
        { //::OSG::RenderPartition::pushToForegrounds
        
            typedef void ( ::OSG::RenderPartition::*pushToForegrounds_function_type )( ::OSG::Foreground * ) ;
            
            RenderPartition_exposer.def( 
                "pushToForegrounds"
                , pushToForegrounds_function_type( &::OSG::RenderPartition::pushToForegrounds )
                , ( bp::arg("pForeground") ) );
        
        }
        { //::OSG::RenderPartition::pushVisibility
        
            typedef bool ( ::OSG::RenderPartition::*pushVisibility_function_type )( ::OSG::Node * const ) ;
            
            RenderPartition_exposer.def( 
                "pushVisibility"
                , pushVisibility_function_type( &::OSG::RenderPartition::pushVisibility )
                , ( bp::arg("pNode") ) );
        
        }
        { //::OSG::RenderPartition::releaseLightIndex
        
            typedef void ( ::OSG::RenderPartition::*releaseLightIndex_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "releaseLightIndex"
                , releaseLightIndex_function_type( &::OSG::RenderPartition::releaseLightIndex ) );
        
        }
        { //::OSG::RenderPartition::setAction
        
            typedef void ( ::OSG::RenderPartition::*setAction_function_type )( ::OSG::RenderAction * ) ;
            
            RenderPartition_exposer.def( 
                "setAction"
                , setAction_function_type( &::OSG::RenderPartition::setAction )
                , ( bp::arg("pAction") ) );
        
        }
        { //::OSG::RenderPartition::setBackground
        
            typedef void ( ::OSG::RenderPartition::*setBackground_function_type )( ::OSG::Background * ) ;
            
            RenderPartition_exposer.def( 
                "setBackground"
                , setBackground_function_type( &::OSG::RenderPartition::setBackground )
                , ( bp::arg("pBackground") ) );
        
        }
        { //::OSG::RenderPartition::setDrawBuffer
        
            typedef void ( ::OSG::RenderPartition::*setDrawBuffer_function_type )( ::GLenum ) ;
            
            RenderPartition_exposer.def( 
                "setDrawBuffer"
                , setDrawBuffer_function_type( &::OSG::RenderPartition::setDrawBuffer )
                , ( bp::arg("eBuffer") ) );
        
        }
        { //::OSG::RenderPartition::setFar
        
            typedef void ( ::OSG::RenderPartition::*setFar_function_type )( ::OSG::Real32 ) ;
            
            RenderPartition_exposer.def( 
                "setFar"
                , setFar_function_type( &::OSG::RenderPartition::setFar )
                , ( bp::arg("camFar") ) );
        
        }
        { //::OSG::RenderPartition::setFrustum
        
            typedef void ( ::OSG::RenderPartition::*setFrustum_function_type )( ::OSG::FrustumVolume & ) ;
            
            RenderPartition_exposer.def( 
                "setFrustum"
                , setFrustum_function_type( &::OSG::RenderPartition::setFrustum )
                , ( bp::arg("frust") ) );
        
        }
        { //::OSG::RenderPartition::setFrustumCulling
        
            typedef void ( ::OSG::RenderPartition::*setFrustumCulling_function_type )( bool ) ;
            
            RenderPartition_exposer.def( 
                "setFrustumCulling"
                , setFrustumCulling_function_type( &::OSG::RenderPartition::setFrustumCulling )
                , ( bp::arg("val")=(bool)(true) ) );
        
        }
        { //::OSG::RenderPartition::setKeyGen
        
            typedef void ( ::OSG::RenderPartition::*setKeyGen_function_type )( ::OSG::UInt32 ) ;
            
            RenderPartition_exposer.def( 
                "setKeyGen"
                , setKeyGen_function_type( &::OSG::RenderPartition::setKeyGen )
                , ( bp::arg("uiKeyGen") ) );
        
        }
        { //::OSG::RenderPartition::setNear
        
            typedef void ( ::OSG::RenderPartition::*setNear_function_type )( ::OSG::Real32 ) ;
            
            RenderPartition_exposer.def( 
                "setNear"
                , setNear_function_type( &::OSG::RenderPartition::setNear )
                , ( bp::arg("camNear") ) );
        
        }
        { //::OSG::RenderPartition::setNodePool
        
            typedef void ( ::OSG::RenderPartition::*setNodePool_function_type )( ::OSG::RenderTreeNodePool * ) ;
            
            RenderPartition_exposer.def( 
                "setNodePool"
                , setNodePool_function_type( &::OSG::RenderPartition::setNodePool )
                , ( bp::arg("pNodePool") ) );
        
        }
        { //::OSG::RenderPartition::setRenderTarget
        
            typedef void ( ::OSG::RenderPartition::*setRenderTarget_function_type )( ::OSG::FrameBufferObject * ) ;
            
            RenderPartition_exposer.def( 
                "setRenderTarget"
                , setRenderTarget_function_type( &::OSG::RenderPartition::setRenderTarget )
                , ( bp::arg("pTarget") ) );
        
        }
        { //::OSG::RenderPartition::setSetupMode
        
            typedef void ( ::OSG::RenderPartition::*setSetupMode_function_type )( ::OSG::UInt32 ) ;
            
            RenderPartition_exposer.def( 
                "setSetupMode"
                , setSetupMode_function_type( &::OSG::RenderPartition::setSetupMode )
                , ( bp::arg("uiSetupMode") ) );
        
        }
        { //::OSG::RenderPartition::setStatCollector
        
            typedef void ( ::OSG::RenderPartition::*setStatCollector_function_type )( ::OSG::StatCollectorP ) ;
            
            RenderPartition_exposer.def( 
                "setStatCollector"
                , setStatCollector_function_type( &::OSG::RenderPartition::setStatCollector )
                , ( bp::arg("pStatCollector") ) );
        
        }
        { //::OSG::RenderPartition::setStatePool
        
            typedef void ( ::OSG::RenderPartition::*setStatePool_function_type )( ::OSG::StateOverridePool * ) ;
            
            RenderPartition_exposer.def( 
                "setStatePool"
                , setStatePool_function_type( &::OSG::RenderPartition::setStatePool )
                , ( bp::arg("pStatePool") ) );
        
        }
        { //::OSG::RenderPartition::setTreeBuilderPool
        
            typedef void ( ::OSG::RenderPartition::*setTreeBuilderPool_function_type )( ::OSG::TreeBuilderPool * ) ;
            
            RenderPartition_exposer.def( 
                "setTreeBuilderPool"
                , setTreeBuilderPool_function_type( &::OSG::RenderPartition::setTreeBuilderPool )
                , ( bp::arg("pTreeBuilderPool") ) );
        
        }
        { //::OSG::RenderPartition::setVPCameraMatrices
        
            typedef void ( ::OSG::RenderPartition::*setVPCameraMatrices_function_type )( ::OSG::Matrix const &,::OSG::Matrix const &,::OSG::Matrix const &,::OSG::Matrix const &,::OSG::Matrix const &,::OSG::Matrix const & ) ;
            
            RenderPartition_exposer.def( 
                "setVPCameraMatrices"
                , setVPCameraMatrices_function_type( &::OSG::RenderPartition::setVPCameraMatrices )
                , ( bp::arg("mFullprojection"), bp::arg("mProjection"), bp::arg("mProjectionTrans"), bp::arg("mViewing"), bp::arg("mToWorld"), bp::arg("mWorldToScreen") ) );
        
        }
        { //::OSG::RenderPartition::setViewportDimension
        
            typedef void ( ::OSG::RenderPartition::*setViewportDimension_function_type )( ::OSG::Int32,::OSG::Int32,::OSG::Int32,::OSG::Int32,bool ) ;
            
            RenderPartition_exposer.def( 
                "setViewportDimension"
                , setViewportDimension_function_type( &::OSG::RenderPartition::setViewportDimension )
                , ( bp::arg("iPixelLeft"), bp::arg("iPixelBottom"), bp::arg("iPixelRight"), bp::arg("iPixelTop"), bp::arg("bFull") ) );
        
        }
        { //::OSG::RenderPartition::setVolumeDrawing
        
            typedef void ( ::OSG::RenderPartition::*setVolumeDrawing_function_type )( bool ) ;
            
            RenderPartition_exposer.def( 
                "setVolumeDrawing"
                , setVolumeDrawing_function_type( &::OSG::RenderPartition::setVolumeDrawing )
                , ( bp::arg("val")=(bool)(false) ) );
        
        }
        { //::OSG::RenderPartition::setWindow
        
            typedef void ( ::OSG::RenderPartition::*setWindow_function_type )( ::OSG::Window * ) ;
            
            RenderPartition_exposer.def( 
                "setWindow"
                , setWindow_function_type( &::OSG::RenderPartition::setWindow )
                , ( bp::arg("pWindow") ) );
        
        }
        { //::OSG::RenderPartition::setupProjection
        
            typedef void ( ::OSG::RenderPartition::*setupProjection_function_type )( ::OSG::Matrix4f const &,::OSG::Matrix4f const & ) ;
            
            RenderPartition_exposer.def( 
                "setupProjection"
                , setupProjection_function_type( &::OSG::RenderPartition::setupProjection )
                , ( bp::arg("projection"), bp::arg("translation") ) );
        
        }
        { //::OSG::RenderPartition::setupViewing
        
            typedef void ( ::OSG::RenderPartition::*setupViewing_function_type )( ::OSG::Matrix4f const & ) ;
            
            RenderPartition_exposer.def( 
                "setupViewing"
                , setupViewing_function_type( &::OSG::RenderPartition::setupViewing )
                , ( bp::arg("matrix") ) );
        
        }
        { //::OSG::RenderPartition::subSetupMode
        
            typedef void ( ::OSG::RenderPartition::*subSetupMode_function_type )( ::OSG::UInt32 ) ;
            
            RenderPartition_exposer.def( 
                "subSetupMode"
                , subSetupMode_function_type( &::OSG::RenderPartition::subSetupMode )
                , ( bp::arg("uiSetupModeBit") ) );
        
        }
        { //::OSG::RenderPartition::topMatrix
        
            typedef ::OSG::Matrix const & ( ::OSG::RenderPartition::*topMatrix_function_type )(  ) ;
            
            RenderPartition_exposer.def( 
                "topMatrix"
                , topMatrix_function_type( &::OSG::RenderPartition::topMatrix )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        RenderPartition_exposer.def_readonly( "statCullTestedNodes", OSG::RenderPartition::statCullTestedNodes );
        RenderPartition_exposer.def_readonly( "statCulledNodes", OSG::RenderPartition::statCulledNodes );
    }

}
