// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "ShaderProgramChunkBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

boost::python::list ShaderProgramChunkBase_getMFVertexShader(OSG::ShaderProgramChunkBase *self)
{
   boost::python::list result;
   OSG::MFUnrecShaderProgramPtr const * mf_data = self->getMFVertexShader();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append(OSG::ShaderProgram::ObjRecPtr((*mf_data)[i]));
   }
   return result;
}

boost::python::list ShaderProgramChunkBase_getMFTessControlShader(OSG::ShaderProgramChunkBase *self)
{
   boost::python::list result;
   OSG::MFUnrecShaderProgramPtr const * mf_data = self->getMFTessControlShader();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append(OSG::ShaderProgram::ObjRecPtr((*mf_data)[i]));
   }
   return result;
}

boost::python::list ShaderProgramChunkBase_getMFTessEvaluationShader(OSG::ShaderProgramChunkBase *self)
{
   boost::python::list result;
   OSG::MFUnrecShaderProgramPtr const * mf_data = self->getMFTessEvaluationShader();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append(OSG::ShaderProgram::ObjRecPtr((*mf_data)[i]));
   }
   return result;
}

boost::python::list ShaderProgramChunkBase_getMFGeometryShader(OSG::ShaderProgramChunkBase *self)
{
   boost::python::list result;
   OSG::MFUnrecShaderProgramPtr const * mf_data = self->getMFGeometryShader();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append(OSG::ShaderProgram::ObjRecPtr((*mf_data)[i]));
   }
   return result;
}

boost::python::list ShaderProgramChunkBase_getMFFragmentShader(OSG::ShaderProgramChunkBase *self)
{
   boost::python::list result;
   OSG::MFUnrecShaderProgramPtr const * mf_data = self->getMFFragmentShader();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append(OSG::ShaderProgram::ObjRecPtr((*mf_data)[i]));
   }
   return result;
}

void register_ShaderProgramChunkBase_class(){

    { //::OSG::ShaderProgramChunkBase
        typedef bp::class_< OSG::ShaderProgramChunkBase, bp::bases< OSG::StateChunk >, boost::noncopyable > ShaderProgramChunkBase_exposer_t;
        ShaderProgramChunkBase_exposer_t ShaderProgramChunkBase_exposer = ShaderProgramChunkBase_exposer_t( "ShaderProgramChunkBase", bp::no_init );
        bp::scope ShaderProgramChunkBase_scope( ShaderProgramChunkBase_exposer );
        bp::scope().attr("VertexShaderFieldId") = (int)OSG::ShaderProgramChunkBase::VertexShaderFieldId;
        bp::scope().attr("TessControlShaderFieldId") = (int)OSG::ShaderProgramChunkBase::TessControlShaderFieldId;
        bp::scope().attr("TessEvaluationShaderFieldId") = (int)OSG::ShaderProgramChunkBase::TessEvaluationShaderFieldId;
        bp::scope().attr("GeometryShaderFieldId") = (int)OSG::ShaderProgramChunkBase::GeometryShaderFieldId;
        bp::scope().attr("FragmentShaderFieldId") = (int)OSG::ShaderProgramChunkBase::FragmentShaderFieldId;
        bp::scope().attr("GeometryVerticesOutFieldId") = (int)OSG::ShaderProgramChunkBase::GeometryVerticesOutFieldId;
        bp::scope().attr("GeometryInputTypeFieldId") = (int)OSG::ShaderProgramChunkBase::GeometryInputTypeFieldId;
        bp::scope().attr("GeometryOutputTypeFieldId") = (int)OSG::ShaderProgramChunkBase::GeometryOutputTypeFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::ShaderProgramChunkBase::NextFieldId;
        { //::OSG::ShaderProgramChunkBase::addFragmentShader
        
            typedef void ( ::OSG::ShaderProgramChunkBase::*addFragmentShader_function_type )( ::OSG::ShaderProgram * const ) ;
            
            ShaderProgramChunkBase_exposer.def( 
                "addFragmentShader"
                , addFragmentShader_function_type( &::OSG::ShaderProgramChunkBase::addFragmentShader )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::addGeometryShader
        
            typedef void ( ::OSG::ShaderProgramChunkBase::*addGeometryShader_function_type )( ::OSG::ShaderProgram * const ) ;
            
            ShaderProgramChunkBase_exposer.def( 
                "addGeometryShader"
                , addGeometryShader_function_type( &::OSG::ShaderProgramChunkBase::addGeometryShader )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::addTessControlShader
        
            typedef void ( ::OSG::ShaderProgramChunkBase::*addTessControlShader_function_type )( ::OSG::ShaderProgram * const ) ;
            
            ShaderProgramChunkBase_exposer.def( 
                "addTessControlShader"
                , addTessControlShader_function_type( &::OSG::ShaderProgramChunkBase::addTessControlShader )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::addTessEvaluationShader
        
            typedef void ( ::OSG::ShaderProgramChunkBase::*addTessEvaluationShader_function_type )( ::OSG::ShaderProgram * const ) ;
            
            ShaderProgramChunkBase_exposer.def( 
                "addTessEvaluationShader"
                , addTessEvaluationShader_function_type( &::OSG::ShaderProgramChunkBase::addTessEvaluationShader )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::addVertexShader
        
            typedef void ( ::OSG::ShaderProgramChunkBase::*addVertexShader_function_type )( ::OSG::ShaderProgram * const ) ;
            
            ShaderProgramChunkBase_exposer.def( 
                "addVertexShader"
                , addVertexShader_function_type( &::OSG::ShaderProgramChunkBase::addVertexShader )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::assignFragmentShader
        
            typedef void ( ::OSG::ShaderProgramChunkBase::*assignFragmentShader_function_type )( ::OSG::MFUnrecShaderProgramPtr const & ) ;
            
            ShaderProgramChunkBase_exposer.def( 
                "assignFragmentShader"
                , assignFragmentShader_function_type( &::OSG::ShaderProgramChunkBase::assignFragmentShader )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::assignGeometryShader
        
            typedef void ( ::OSG::ShaderProgramChunkBase::*assignGeometryShader_function_type )( ::OSG::MFUnrecShaderProgramPtr const & ) ;
            
            ShaderProgramChunkBase_exposer.def( 
                "assignGeometryShader"
                , assignGeometryShader_function_type( &::OSG::ShaderProgramChunkBase::assignGeometryShader )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::assignTessControlShader
        
            typedef void ( ::OSG::ShaderProgramChunkBase::*assignTessControlShader_function_type )( ::OSG::MFUnrecShaderProgramPtr const & ) ;
            
            ShaderProgramChunkBase_exposer.def( 
                "assignTessControlShader"
                , assignTessControlShader_function_type( &::OSG::ShaderProgramChunkBase::assignTessControlShader )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::assignTessEvaluationShader
        
            typedef void ( ::OSG::ShaderProgramChunkBase::*assignTessEvaluationShader_function_type )( ::OSG::MFUnrecShaderProgramPtr const & ) ;
            
            ShaderProgramChunkBase_exposer.def( 
                "assignTessEvaluationShader"
                , assignTessEvaluationShader_function_type( &::OSG::ShaderProgramChunkBase::assignTessEvaluationShader )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::assignVertexShader
        
            typedef void ( ::OSG::ShaderProgramChunkBase::*assignVertexShader_function_type )( ::OSG::MFUnrecShaderProgramPtr const & ) ;
            
            ShaderProgramChunkBase_exposer.def( 
                "assignVertexShader"
                , assignVertexShader_function_type( &::OSG::ShaderProgramChunkBase::assignVertexShader )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::clearFragmentShaders
        
            typedef void ( ::OSG::ShaderProgramChunkBase::*clearFragmentShaders_function_type )(  ) ;
            
            ShaderProgramChunkBase_exposer.def( 
                "clearFragmentShaders"
                , clearFragmentShaders_function_type( &::OSG::ShaderProgramChunkBase::clearFragmentShaders ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::clearGeometryShaders
        
            typedef void ( ::OSG::ShaderProgramChunkBase::*clearGeometryShaders_function_type )(  ) ;
            
            ShaderProgramChunkBase_exposer.def( 
                "clearGeometryShaders"
                , clearGeometryShaders_function_type( &::OSG::ShaderProgramChunkBase::clearGeometryShaders ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::clearTessControlShaders
        
            typedef void ( ::OSG::ShaderProgramChunkBase::*clearTessControlShaders_function_type )(  ) ;
            
            ShaderProgramChunkBase_exposer.def( 
                "clearTessControlShaders"
                , clearTessControlShaders_function_type( &::OSG::ShaderProgramChunkBase::clearTessControlShaders ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::clearTessEvaluationShaders
        
            typedef void ( ::OSG::ShaderProgramChunkBase::*clearTessEvaluationShaders_function_type )(  ) ;
            
            ShaderProgramChunkBase_exposer.def( 
                "clearTessEvaluationShaders"
                , clearTessEvaluationShaders_function_type( &::OSG::ShaderProgramChunkBase::clearTessEvaluationShaders ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::clearVertexShaders
        
            typedef void ( ::OSG::ShaderProgramChunkBase::*clearVertexShaders_function_type )(  ) ;
            
            ShaderProgramChunkBase_exposer.def( 
                "clearVertexShaders"
                , clearVertexShaders_function_type( &::OSG::ShaderProgramChunkBase::clearVertexShaders ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::copyFromBin
        
            typedef void ( ::OSG::ShaderProgramChunkBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            ShaderProgramChunkBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::ShaderProgramChunkBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::copyToBin
        
            typedef void ( ::OSG::ShaderProgramChunkBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            ShaderProgramChunkBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::ShaderProgramChunkBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::create
        
            typedef ::OSG::ShaderProgramChunkTransitPtr ( *create_function_type )(  );
            
            ShaderProgramChunkBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::ShaderProgramChunkBase::create ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::createDependent
        
            typedef ::OSG::ShaderProgramChunkTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            ShaderProgramChunkBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::ShaderProgramChunkBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::createLocal
        
            typedef ::OSG::ShaderProgramChunkTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            ShaderProgramChunkBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::ShaderProgramChunkBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::ShaderProgramChunkBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            ShaderProgramChunkBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::ShaderProgramChunkBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            ShaderProgramChunkBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::ShaderProgramChunkBase::getClassGroupId ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            ShaderProgramChunkBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::ShaderProgramChunkBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::ShaderProgramChunkBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            ShaderProgramChunkBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::ShaderProgramChunkBase::getClassTypeId ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::ShaderProgramChunkBase::*getContainerSize_function_type )(  ) const;
            
            ShaderProgramChunkBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::ShaderProgramChunkBase::getContainerSize ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::getFragmentShader
        
            typedef ::OSG::ShaderProgram * ( ::OSG::ShaderProgramChunkBase::*getFragmentShader_function_type )( ::OSG::UInt32 const ) const;
            
            ShaderProgramChunkBase_exposer.def( 
                "getFragmentShader"
                , getFragmentShader_function_type( &::OSG::ShaderProgramChunkBase::getFragmentShader )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ShaderProgramChunkBase::getGeometryInputType
        
            typedef ::GLenum const & ( ::OSG::ShaderProgramChunkBase::*getGeometryInputType_function_type )(  ) const;
            
            ShaderProgramChunkBase_exposer.def( 
                "getGeometryInputType"
                , getGeometryInputType_function_type( &::OSG::ShaderProgramChunkBase::getGeometryInputType )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::ShaderProgramChunkBase::getGeometryOutputType
        
            typedef ::GLenum const & ( ::OSG::ShaderProgramChunkBase::*getGeometryOutputType_function_type )(  ) const;
            
            ShaderProgramChunkBase_exposer.def( 
                "getGeometryOutputType"
                , getGeometryOutputType_function_type( &::OSG::ShaderProgramChunkBase::getGeometryOutputType )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::ShaderProgramChunkBase::getGeometryShader
        
            typedef ::OSG::ShaderProgram * ( ::OSG::ShaderProgramChunkBase::*getGeometryShader_function_type )( ::OSG::UInt32 const ) const;
            
            ShaderProgramChunkBase_exposer.def( 
                "getGeometryShader"
                , getGeometryShader_function_type( &::OSG::ShaderProgramChunkBase::getGeometryShader )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ShaderProgramChunkBase::getGeometryVerticesOut
        
            typedef ::OSG::UInt32 ( ::OSG::ShaderProgramChunkBase::*getGeometryVerticesOut_function_type )(  ) const;
            
            ShaderProgramChunkBase_exposer.def( 
                "getGeometryVerticesOut"
                , getGeometryVerticesOut_function_type( &::OSG::ShaderProgramChunkBase::getGeometryVerticesOut ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::getSFGeometryInputType
        
            typedef ::OSG::SFGLenum const * ( ::OSG::ShaderProgramChunkBase::*getSFGeometryInputType_function_type )(  ) const;
            
            ShaderProgramChunkBase_exposer.def( 
                "getSFGeometryInputType"
                , getSFGeometryInputType_function_type( &::OSG::ShaderProgramChunkBase::getSFGeometryInputType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ShaderProgramChunkBase::getSFGeometryOutputType
        
            typedef ::OSG::SFGLenum const * ( ::OSG::ShaderProgramChunkBase::*getSFGeometryOutputType_function_type )(  ) const;
            
            ShaderProgramChunkBase_exposer.def( 
                "getSFGeometryOutputType"
                , getSFGeometryOutputType_function_type( &::OSG::ShaderProgramChunkBase::getSFGeometryOutputType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ShaderProgramChunkBase::getSFGeometryVerticesOut
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::ShaderProgramChunkBase::*getSFGeometryVerticesOut_function_type )(  ) const;
            
            ShaderProgramChunkBase_exposer.def( 
                "getSFGeometryVerticesOut"
                , getSFGeometryVerticesOut_function_type( &::OSG::ShaderProgramChunkBase::getSFGeometryVerticesOut )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ShaderProgramChunkBase::getTessControlShader
        
            typedef ::OSG::ShaderProgram * ( ::OSG::ShaderProgramChunkBase::*getTessControlShader_function_type )( ::OSG::UInt32 const ) const;
            
            ShaderProgramChunkBase_exposer.def( 
                "getTessControlShader"
                , getTessControlShader_function_type( &::OSG::ShaderProgramChunkBase::getTessControlShader )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ShaderProgramChunkBase::getTessEvaluationShader
        
            typedef ::OSG::ShaderProgram * ( ::OSG::ShaderProgramChunkBase::*getTessEvaluationShader_function_type )( ::OSG::UInt32 const ) const;
            
            ShaderProgramChunkBase_exposer.def( 
                "getTessEvaluationShader"
                , getTessEvaluationShader_function_type( &::OSG::ShaderProgramChunkBase::getTessEvaluationShader )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ShaderProgramChunkBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::ShaderProgramChunkBase::*getType_function_type )(  ) ;
            
            ShaderProgramChunkBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::ShaderProgramChunkBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ShaderProgramChunkBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::ShaderProgramChunkBase::*getType_function_type )(  ) const;
            
            ShaderProgramChunkBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::ShaderProgramChunkBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ShaderProgramChunkBase::getVertexShader
        
            typedef ::OSG::ShaderProgram * ( ::OSG::ShaderProgramChunkBase::*getVertexShader_function_type )( ::OSG::UInt32 const ) const;
            
            ShaderProgramChunkBase_exposer.def( 
                "getVertexShader"
                , getVertexShader_function_type( &::OSG::ShaderProgramChunkBase::getVertexShader )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ShaderProgramChunkBase::removeObjFromFragmentShader
        
            typedef void ( ::OSG::ShaderProgramChunkBase::*removeObjFromFragmentShader_function_type )( ::OSG::ShaderProgram * const ) ;
            
            ShaderProgramChunkBase_exposer.def( 
                "removeObjFromFragmentShader"
                , removeObjFromFragmentShader_function_type( &::OSG::ShaderProgramChunkBase::removeObjFromFragmentShader )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::removeObjFromGeometryShader
        
            typedef void ( ::OSG::ShaderProgramChunkBase::*removeObjFromGeometryShader_function_type )( ::OSG::ShaderProgram * const ) ;
            
            ShaderProgramChunkBase_exposer.def( 
                "removeObjFromGeometryShader"
                , removeObjFromGeometryShader_function_type( &::OSG::ShaderProgramChunkBase::removeObjFromGeometryShader )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::removeObjFromTessControlShader
        
            typedef void ( ::OSG::ShaderProgramChunkBase::*removeObjFromTessControlShader_function_type )( ::OSG::ShaderProgram * const ) ;
            
            ShaderProgramChunkBase_exposer.def( 
                "removeObjFromTessControlShader"
                , removeObjFromTessControlShader_function_type( &::OSG::ShaderProgramChunkBase::removeObjFromTessControlShader )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::removeObjFromTessEvaluationShader
        
            typedef void ( ::OSG::ShaderProgramChunkBase::*removeObjFromTessEvaluationShader_function_type )( ::OSG::ShaderProgram * const ) ;
            
            ShaderProgramChunkBase_exposer.def( 
                "removeObjFromTessEvaluationShader"
                , removeObjFromTessEvaluationShader_function_type( &::OSG::ShaderProgramChunkBase::removeObjFromTessEvaluationShader )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::removeObjFromVertexShader
        
            typedef void ( ::OSG::ShaderProgramChunkBase::*removeObjFromVertexShader_function_type )( ::OSG::ShaderProgram * const ) ;
            
            ShaderProgramChunkBase_exposer.def( 
                "removeObjFromVertexShader"
                , removeObjFromVertexShader_function_type( &::OSG::ShaderProgramChunkBase::removeObjFromVertexShader )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::setGeometryInputType
        
            typedef void ( ::OSG::ShaderProgramChunkBase::*setGeometryInputType_function_type )( ::GLenum const & ) ;
            
            ShaderProgramChunkBase_exposer.def( 
                "setGeometryInputType"
                , setGeometryInputType_function_type( &::OSG::ShaderProgramChunkBase::setGeometryInputType )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::setGeometryOutputType
        
            typedef void ( ::OSG::ShaderProgramChunkBase::*setGeometryOutputType_function_type )( ::GLenum const & ) ;
            
            ShaderProgramChunkBase_exposer.def( 
                "setGeometryOutputType"
                , setGeometryOutputType_function_type( &::OSG::ShaderProgramChunkBase::setGeometryOutputType )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::setGeometryVerticesOut
        
            typedef void ( ::OSG::ShaderProgramChunkBase::*setGeometryVerticesOut_function_type )( ::OSG::UInt32 const ) ;
            
            ShaderProgramChunkBase_exposer.def( 
                "setGeometryVerticesOut"
                , setGeometryVerticesOut_function_type( &::OSG::ShaderProgramChunkBase::setGeometryVerticesOut )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::subFragmentShader
        
            typedef void ( ::OSG::ShaderProgramChunkBase::*subFragmentShader_function_type )( ::OSG::UInt32 ) ;
            
            ShaderProgramChunkBase_exposer.def( 
                "subFragmentShader"
                , subFragmentShader_function_type( &::OSG::ShaderProgramChunkBase::subFragmentShader )
                , ( bp::arg("uiIndex") ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::subGeometryShader
        
            typedef void ( ::OSG::ShaderProgramChunkBase::*subGeometryShader_function_type )( ::OSG::UInt32 ) ;
            
            ShaderProgramChunkBase_exposer.def( 
                "subGeometryShader"
                , subGeometryShader_function_type( &::OSG::ShaderProgramChunkBase::subGeometryShader )
                , ( bp::arg("uiIndex") ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::subTessControlShader
        
            typedef void ( ::OSG::ShaderProgramChunkBase::*subTessControlShader_function_type )( ::OSG::UInt32 ) ;
            
            ShaderProgramChunkBase_exposer.def( 
                "subTessControlShader"
                , subTessControlShader_function_type( &::OSG::ShaderProgramChunkBase::subTessControlShader )
                , ( bp::arg("uiIndex") ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::subTessEvaluationShader
        
            typedef void ( ::OSG::ShaderProgramChunkBase::*subTessEvaluationShader_function_type )( ::OSG::UInt32 ) ;
            
            ShaderProgramChunkBase_exposer.def( 
                "subTessEvaluationShader"
                , subTessEvaluationShader_function_type( &::OSG::ShaderProgramChunkBase::subTessEvaluationShader )
                , ( bp::arg("uiIndex") ) );
        
        }
        { //::OSG::ShaderProgramChunkBase::subVertexShader
        
            typedef void ( ::OSG::ShaderProgramChunkBase::*subVertexShader_function_type )( ::OSG::UInt32 ) ;
            
            ShaderProgramChunkBase_exposer.def( 
                "subVertexShader"
                , subVertexShader_function_type( &::OSG::ShaderProgramChunkBase::subVertexShader )
                , ( bp::arg("uiIndex") ) );
        
        }
        ShaderProgramChunkBase_exposer.staticmethod( "create" );
        ShaderProgramChunkBase_exposer.staticmethod( "createDependent" );
        ShaderProgramChunkBase_exposer.staticmethod( "createLocal" );
        ShaderProgramChunkBase_exposer.staticmethod( "getClassGroupId" );
        ShaderProgramChunkBase_exposer.staticmethod( "getClassType" );
        ShaderProgramChunkBase_exposer.staticmethod( "getClassTypeId" );
        ShaderProgramChunkBase_exposer.def("getMFVertexShader",ShaderProgramChunkBase_getMFVertexShader);
        ShaderProgramChunkBase_exposer.def("getMFTessControlShader",ShaderProgramChunkBase_getMFTessControlShader);
        ShaderProgramChunkBase_exposer.def("getMFTessEvaluationShader",ShaderProgramChunkBase_getMFTessEvaluationShader);
        ShaderProgramChunkBase_exposer.def("getMFGeometryShader",ShaderProgramChunkBase_getMFGeometryShader);
        ShaderProgramChunkBase_exposer.def("getMFFragmentShader",ShaderProgramChunkBase_getMFFragmentShader);
    }

}
