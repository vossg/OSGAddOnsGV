// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "SimpleSHLChunkBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_SimpleSHLChunkBase_class(){

    { //::OSG::SimpleSHLChunkBase
        typedef bp::class_< OSG::SimpleSHLChunkBase, bp::bases< OSG::ShaderProgramChunk >, boost::noncopyable > SimpleSHLChunkBase_exposer_t;
        SimpleSHLChunkBase_exposer_t SimpleSHLChunkBase_exposer = SimpleSHLChunkBase_exposer_t( "SimpleSHLChunkBase", bp::no_init );
        bp::scope SimpleSHLChunkBase_scope( SimpleSHLChunkBase_exposer );
        bp::scope().attr("VertexProgramFieldId") = (int)OSG::SimpleSHLChunkBase::VertexProgramFieldId;
        bp::scope().attr("TessControlProgramFieldId") = (int)OSG::SimpleSHLChunkBase::TessControlProgramFieldId;
        bp::scope().attr("TessEvaluationProgramFieldId") = (int)OSG::SimpleSHLChunkBase::TessEvaluationProgramFieldId;
        bp::scope().attr("GeometryProgramFieldId") = (int)OSG::SimpleSHLChunkBase::GeometryProgramFieldId;
        bp::scope().attr("FragmentProgramFieldId") = (int)OSG::SimpleSHLChunkBase::FragmentProgramFieldId;
        bp::scope().attr("CgFrontEndFieldId") = (int)OSG::SimpleSHLChunkBase::CgFrontEndFieldId;
        bp::scope().attr("VariablesFieldId") = (int)OSG::SimpleSHLChunkBase::VariablesFieldId;
        bp::scope().attr("VariableLocationsFieldId") = (int)OSG::SimpleSHLChunkBase::VariableLocationsFieldId;
        bp::scope().attr("ProceduralVariableLocationsFieldId") = (int)OSG::SimpleSHLChunkBase::ProceduralVariableLocationsFieldId;
        bp::scope().attr("GLIdFieldId") = (int)OSG::SimpleSHLChunkBase::GLIdFieldId;
        bp::scope().attr("PointSizeFieldId") = (int)OSG::SimpleSHLChunkBase::PointSizeFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::SimpleSHLChunkBase::NextFieldId;
        { //::OSG::SimpleSHLChunkBase::copyFromBin
        
            typedef void ( ::OSG::SimpleSHLChunkBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            SimpleSHLChunkBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::SimpleSHLChunkBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::SimpleSHLChunkBase::copyToBin
        
            typedef void ( ::OSG::SimpleSHLChunkBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            SimpleSHLChunkBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::SimpleSHLChunkBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::SimpleSHLChunkBase::create
        
            typedef ::OSG::SimpleSHLChunkTransitPtr ( *create_function_type )(  );
            
            SimpleSHLChunkBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::SimpleSHLChunkBase::create ) );
        
        }
        { //::OSG::SimpleSHLChunkBase::createDependent
        
            typedef ::OSG::SimpleSHLChunkTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            SimpleSHLChunkBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::SimpleSHLChunkBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::SimpleSHLChunkBase::createLocal
        
            typedef ::OSG::SimpleSHLChunkTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            SimpleSHLChunkBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::SimpleSHLChunkBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::SimpleSHLChunkBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::SimpleSHLChunkBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            SimpleSHLChunkBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::SimpleSHLChunkBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::SimpleSHLChunkBase::getCgFrontEnd
        
            typedef bool ( ::OSG::SimpleSHLChunkBase::*getCgFrontEnd_function_type )(  ) const;
            
            SimpleSHLChunkBase_exposer.def( 
                "getCgFrontEnd"
                , getCgFrontEnd_function_type( &::OSG::SimpleSHLChunkBase::getCgFrontEnd ) );
        
        }
        { //::OSG::SimpleSHLChunkBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            SimpleSHLChunkBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::SimpleSHLChunkBase::getClassGroupId ) );
        
        }
        { //::OSG::SimpleSHLChunkBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            SimpleSHLChunkBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::SimpleSHLChunkBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::SimpleSHLChunkBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            SimpleSHLChunkBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::SimpleSHLChunkBase::getClassTypeId ) );
        
        }
        { //::OSG::SimpleSHLChunkBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::SimpleSHLChunkBase::*getContainerSize_function_type )(  ) const;
            
            SimpleSHLChunkBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::SimpleSHLChunkBase::getContainerSize ) );
        
        }
        { //::OSG::SimpleSHLChunkBase::getFragmentProgram
        
            typedef ::std::string const & ( ::OSG::SimpleSHLChunkBase::*getFragmentProgram_function_type )(  ) const;
            
            SimpleSHLChunkBase_exposer.def( 
                "getFragmentProgram"
                , getFragmentProgram_function_type( &::OSG::SimpleSHLChunkBase::getFragmentProgram )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::SimpleSHLChunkBase::getGLId
        
            typedef ::OSG::UInt32 ( ::OSG::SimpleSHLChunkBase::*getGLId_function_type )(  ) const;
            
            SimpleSHLChunkBase_exposer.def( 
                "getGLId"
                , getGLId_function_type( &::OSG::SimpleSHLChunkBase::getGLId ) );
        
        }
        { //::OSG::SimpleSHLChunkBase::getGeometryProgram
        
            typedef ::std::string const & ( ::OSG::SimpleSHLChunkBase::*getGeometryProgram_function_type )(  ) const;
            
            SimpleSHLChunkBase_exposer.def( 
                "getGeometryProgram"
                , getGeometryProgram_function_type( &::OSG::SimpleSHLChunkBase::getGeometryProgram )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::SimpleSHLChunkBase::getPointSize
        
            typedef bool ( ::OSG::SimpleSHLChunkBase::*getPointSize_function_type )(  ) const;
            
            SimpleSHLChunkBase_exposer.def( 
                "getPointSize"
                , getPointSize_function_type( &::OSG::SimpleSHLChunkBase::getPointSize ) );
        
        }
        { //::OSG::SimpleSHLChunkBase::getSFCgFrontEnd
        
            typedef ::OSG::SFBool const * ( ::OSG::SimpleSHLChunkBase::*getSFCgFrontEnd_function_type )(  ) const;
            
            SimpleSHLChunkBase_exposer.def( 
                "getSFCgFrontEnd"
                , getSFCgFrontEnd_function_type( &::OSG::SimpleSHLChunkBase::getSFCgFrontEnd )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::SimpleSHLChunkBase::getSFFragmentProgram
        
            typedef ::OSG::SFString const * ( ::OSG::SimpleSHLChunkBase::*getSFFragmentProgram_function_type )(  ) const;
            
            SimpleSHLChunkBase_exposer.def( 
                "getSFFragmentProgram"
                , getSFFragmentProgram_function_type( &::OSG::SimpleSHLChunkBase::getSFFragmentProgram )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::SimpleSHLChunkBase::getSFGLId
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::SimpleSHLChunkBase::*getSFGLId_function_type )(  ) const;
            
            SimpleSHLChunkBase_exposer.def( 
                "getSFGLId"
                , getSFGLId_function_type( &::OSG::SimpleSHLChunkBase::getSFGLId )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::SimpleSHLChunkBase::getSFGeometryProgram
        
            typedef ::OSG::SFString const * ( ::OSG::SimpleSHLChunkBase::*getSFGeometryProgram_function_type )(  ) const;
            
            SimpleSHLChunkBase_exposer.def( 
                "getSFGeometryProgram"
                , getSFGeometryProgram_function_type( &::OSG::SimpleSHLChunkBase::getSFGeometryProgram )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::SimpleSHLChunkBase::getSFPointSize
        
            typedef ::OSG::SFBool const * ( ::OSG::SimpleSHLChunkBase::*getSFPointSize_function_type )(  ) const;
            
            SimpleSHLChunkBase_exposer.def( 
                "getSFPointSize"
                , getSFPointSize_function_type( &::OSG::SimpleSHLChunkBase::getSFPointSize )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::SimpleSHLChunkBase::getSFTessControlProgram
        
            typedef ::OSG::SFString const * ( ::OSG::SimpleSHLChunkBase::*getSFTessControlProgram_function_type )(  ) const;
            
            SimpleSHLChunkBase_exposer.def( 
                "getSFTessControlProgram"
                , getSFTessControlProgram_function_type( &::OSG::SimpleSHLChunkBase::getSFTessControlProgram )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::SimpleSHLChunkBase::getSFTessEvaluationProgram
        
            typedef ::OSG::SFString const * ( ::OSG::SimpleSHLChunkBase::*getSFTessEvaluationProgram_function_type )(  ) const;
            
            SimpleSHLChunkBase_exposer.def( 
                "getSFTessEvaluationProgram"
                , getSFTessEvaluationProgram_function_type( &::OSG::SimpleSHLChunkBase::getSFTessEvaluationProgram )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::SimpleSHLChunkBase::getSFVariables
        
            typedef ::OSG::SFUnrecChildShaderProgramVariablesPtr const * ( ::OSG::SimpleSHLChunkBase::*getSFVariables_function_type )(  ) const;
            
            SimpleSHLChunkBase_exposer.def( 
                "getSFVariables"
                , getSFVariables_function_type( &::OSG::SimpleSHLChunkBase::getSFVariables )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::SimpleSHLChunkBase::getSFVertexProgram
        
            typedef ::OSG::SFString const * ( ::OSG::SimpleSHLChunkBase::*getSFVertexProgram_function_type )(  ) const;
            
            SimpleSHLChunkBase_exposer.def( 
                "getSFVertexProgram"
                , getSFVertexProgram_function_type( &::OSG::SimpleSHLChunkBase::getSFVertexProgram )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::SimpleSHLChunkBase::getTessControlProgram
        
            typedef ::std::string const & ( ::OSG::SimpleSHLChunkBase::*getTessControlProgram_function_type )(  ) const;
            
            SimpleSHLChunkBase_exposer.def( 
                "getTessControlProgram"
                , getTessControlProgram_function_type( &::OSG::SimpleSHLChunkBase::getTessControlProgram )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::SimpleSHLChunkBase::getTessEvaluationProgram
        
            typedef ::std::string const & ( ::OSG::SimpleSHLChunkBase::*getTessEvaluationProgram_function_type )(  ) const;
            
            SimpleSHLChunkBase_exposer.def( 
                "getTessEvaluationProgram"
                , getTessEvaluationProgram_function_type( &::OSG::SimpleSHLChunkBase::getTessEvaluationProgram )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::SimpleSHLChunkBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::SimpleSHLChunkBase::*getType_function_type )(  ) ;
            
            SimpleSHLChunkBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::SimpleSHLChunkBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::SimpleSHLChunkBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::SimpleSHLChunkBase::*getType_function_type )(  ) const;
            
            SimpleSHLChunkBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::SimpleSHLChunkBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::SimpleSHLChunkBase::getVariables
        
            typedef ::OSG::ShaderProgramVariables * ( ::OSG::SimpleSHLChunkBase::*getVariables_function_type )(  ) const;
            
            SimpleSHLChunkBase_exposer.def( 
                "getVariables"
                , getVariables_function_type( &::OSG::SimpleSHLChunkBase::getVariables )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::SimpleSHLChunkBase::getVertexProgram
        
            typedef ::std::string const & ( ::OSG::SimpleSHLChunkBase::*getVertexProgram_function_type )(  ) const;
            
            SimpleSHLChunkBase_exposer.def( 
                "getVertexProgram"
                , getVertexProgram_function_type( &::OSG::SimpleSHLChunkBase::getVertexProgram )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::SimpleSHLChunkBase::setCgFrontEnd
        
            typedef void ( ::OSG::SimpleSHLChunkBase::*setCgFrontEnd_function_type )( bool const ) ;
            
            SimpleSHLChunkBase_exposer.def( 
                "setCgFrontEnd"
                , setCgFrontEnd_function_type( &::OSG::SimpleSHLChunkBase::setCgFrontEnd )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::SimpleSHLChunkBase::setFragmentProgram
        
            typedef void ( ::OSG::SimpleSHLChunkBase::*setFragmentProgram_function_type )( ::std::string const & ) ;
            
            SimpleSHLChunkBase_exposer.def( 
                "setFragmentProgram"
                , setFragmentProgram_function_type( &::OSG::SimpleSHLChunkBase::setFragmentProgram )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::SimpleSHLChunkBase::setGLId
        
            typedef void ( ::OSG::SimpleSHLChunkBase::*setGLId_function_type )( ::OSG::UInt32 const ) ;
            
            SimpleSHLChunkBase_exposer.def( 
                "setGLId"
                , setGLId_function_type( &::OSG::SimpleSHLChunkBase::setGLId )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::SimpleSHLChunkBase::setGeometryProgram
        
            typedef void ( ::OSG::SimpleSHLChunkBase::*setGeometryProgram_function_type )( ::std::string const & ) ;
            
            SimpleSHLChunkBase_exposer.def( 
                "setGeometryProgram"
                , setGeometryProgram_function_type( &::OSG::SimpleSHLChunkBase::setGeometryProgram )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::SimpleSHLChunkBase::setPointSize
        
            typedef void ( ::OSG::SimpleSHLChunkBase::*setPointSize_function_type )( bool const ) ;
            
            SimpleSHLChunkBase_exposer.def( 
                "setPointSize"
                , setPointSize_function_type( &::OSG::SimpleSHLChunkBase::setPointSize )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::SimpleSHLChunkBase::setTessControlProgram
        
            typedef void ( ::OSG::SimpleSHLChunkBase::*setTessControlProgram_function_type )( ::std::string const & ) ;
            
            SimpleSHLChunkBase_exposer.def( 
                "setTessControlProgram"
                , setTessControlProgram_function_type( &::OSG::SimpleSHLChunkBase::setTessControlProgram )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::SimpleSHLChunkBase::setTessEvaluationProgram
        
            typedef void ( ::OSG::SimpleSHLChunkBase::*setTessEvaluationProgram_function_type )( ::std::string const & ) ;
            
            SimpleSHLChunkBase_exposer.def( 
                "setTessEvaluationProgram"
                , setTessEvaluationProgram_function_type( &::OSG::SimpleSHLChunkBase::setTessEvaluationProgram )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::SimpleSHLChunkBase::setVariables
        
            typedef void ( ::OSG::SimpleSHLChunkBase::*setVariables_function_type )( ::OSG::ShaderProgramVariables * const ) ;
            
            SimpleSHLChunkBase_exposer.def( 
                "setVariables"
                , setVariables_function_type( &::OSG::SimpleSHLChunkBase::setVariables )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::SimpleSHLChunkBase::setVertexProgram
        
            typedef void ( ::OSG::SimpleSHLChunkBase::*setVertexProgram_function_type )( ::std::string const & ) ;
            
            SimpleSHLChunkBase_exposer.def( 
                "setVertexProgram"
                , setVertexProgram_function_type( &::OSG::SimpleSHLChunkBase::setVertexProgram )
                , ( bp::arg("value") ) );
        
        }
        SimpleSHLChunkBase_exposer.staticmethod( "create" );
        SimpleSHLChunkBase_exposer.staticmethod( "createDependent" );
        SimpleSHLChunkBase_exposer.staticmethod( "createLocal" );
        SimpleSHLChunkBase_exposer.staticmethod( "getClassGroupId" );
        SimpleSHLChunkBase_exposer.staticmethod( "getClassType" );
        SimpleSHLChunkBase_exposer.staticmethod( "getClassTypeId" );
    }

}
