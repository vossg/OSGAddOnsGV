// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "TextureObjChunk.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_TextureObjChunk_class(){

    { //::OSG::TextureObjChunk
        typedef bp::class_< OSG::TextureObjChunk, bp::bases< OSG::TextureObjChunkBase >, OSG::TextureObjChunk::ObjRecPtr, boost::noncopyable > TextureObjChunk_exposer_t;
        TextureObjChunk_exposer_t TextureObjChunk_exposer = TextureObjChunk_exposer_t( "TextureObjChunk", bp::no_init );
        bp::scope TextureObjChunk_scope( TextureObjChunk_exposer );
        bp::enum_< OSG::TextureObjChunk::NPOTMatrixScaleE>("NPOTMatrixScaleE")
            .value("None_TT", OSG::TextureObjChunk::None_TT)
            .value("NPotTexScale_TT", OSG::TextureObjChunk::NPotTexScale_TT)
            .value("XFlip_TT", OSG::TextureObjChunk::XFlip_TT)
            .value("YFlip_TT", OSG::TextureObjChunk::YFlip_TT)
            .value("ZFlip_TT", OSG::TextureObjChunk::ZFlip_TT)
            .export_values()
            ;
        { //::OSG::TextureObjChunk::changed
        
            typedef void ( ::OSG::TextureObjChunk::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            TextureObjChunk_exposer.def( 
                "changed"
                , changed_function_type( &::OSG::TextureObjChunk::changed )
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("details") ) );
        
        }
        { //::OSG::TextureObjChunk::determineFormats
        
            typedef void ( ::OSG::TextureObjChunk::*determineFormats_function_type )( ::GLenum &,::GLenum & ) const;
            
            TextureObjChunk_exposer.def( 
                "determineFormats"
                , determineFormats_function_type( &::OSG::TextureObjChunk::determineFormats )
                , ( bp::arg("internalFormat"), bp::arg("externalFormat") ) );
        
        }
        { //::OSG::TextureObjChunk::determineInternalFormat
        
            typedef ::GLenum ( ::OSG::TextureObjChunk::*determineInternalFormat_function_type )(  ) ;
            
            TextureObjChunk_exposer.def( 
                "determineInternalFormat"
                , determineInternalFormat_function_type( &::OSG::TextureObjChunk::determineInternalFormat ) );
        
        }
        { //::OSG::TextureObjChunk::determineTextureTarget
        
            typedef ::GLenum ( ::OSG::TextureObjChunk::*determineTextureTarget_function_type )( ::OSG::Window * ) const;
            
            TextureObjChunk_exposer.def( 
                "determineTextureTarget"
                , determineTextureTarget_function_type( &::OSG::TextureObjChunk::determineTextureTarget )
                , ( bp::arg("pWindow") ) );
        
        }
        { //::OSG::TextureObjChunk::dump
        
            typedef void ( ::OSG::TextureObjChunk::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            TextureObjChunk_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::TextureObjChunk::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::TextureObjChunk::getOpenGLId
        
            typedef ::OSG::Int32 ( ::OSG::TextureObjChunk::*getOpenGLId_function_type )( ::OSG::DrawEnv * ) ;
            
            TextureObjChunk_exposer.def( 
                "getOpenGLId"
                , getOpenGLId_function_type( &::OSG::TextureObjChunk::getOpenGLId )
                , ( bp::arg("pEnv") ) );
        
        }
        { //::OSG::TextureObjChunk::imageContentChanged
        
            typedef void ( ::OSG::TextureObjChunk::*imageContentChanged_function_type )( ::OSG::Int32,::OSG::Int32,::OSG::Int32,::OSG::Int32,::OSG::Int32,::OSG::Int32 ) ;
            
            TextureObjChunk_exposer.def( 
                "imageContentChanged"
                , imageContentChanged_function_type( &::OSG::TextureObjChunk::imageContentChanged )
                , ( bp::arg("minx")=(::OSG::Int32)(-0x00000000000000001), bp::arg("maxx")=(::OSG::Int32)(-0x00000000000000001), bp::arg("miny")=(::OSG::Int32)(-0x00000000000000001), bp::arg("maxy")=(::OSG::Int32)(-0x00000000000000001), bp::arg("minz")=(::OSG::Int32)(-0x00000000000000001), bp::arg("maxz")=(::OSG::Int32)(-0x00000000000000001) ) );
        
        }
        { //::OSG::TextureObjChunk::isCubeTexture
        
            typedef bool ( ::OSG::TextureObjChunk::*isCubeTexture_function_type )(  ) ;
            
            TextureObjChunk_exposer.def( 
                "isCubeTexture"
                , isCubeTexture_function_type( &::OSG::TextureObjChunk::isCubeTexture ) );
        
        }
        { //::OSG::TextureObjChunk::isTransparent
        
            typedef bool ( ::OSG::TextureObjChunk::*isTransparent_function_type )(  ) const;
            
            TextureObjChunk_exposer.def( 
                "isTransparent"
                , isTransparent_function_type( &::OSG::TextureObjChunk::isTransparent ) );
        
        }
        { //::OSG::TextureObjChunk::switchCost
        
            typedef ::OSG::Real32 ( ::OSG::TextureObjChunk::*switchCost_function_type )( ::OSG::StateChunk * ) ;
            
            TextureObjChunk_exposer.def( 
                "switchCost"
                , switchCost_function_type( &::OSG::TextureObjChunk::switchCost )
                , ( bp::arg("chunk") ) );
        
        }
        { //::OSG::TextureObjChunk::validate
        
            typedef void ( ::OSG::TextureObjChunk::*validate_function_type )( ::OSG::DrawEnv * ) ;
            
            TextureObjChunk_exposer.def( 
                "validate"
                , validate_function_type( &::OSG::TextureObjChunk::validate )
                , ( bp::arg("pEnv") ) );
        
        }
        TextureObjChunk_exposer.def_readonly( "statNTexBytes", OSG::TextureObjChunk::statNTexBytes );
        TextureObjChunk_exposer.def_readonly( "statNTextures", OSG::TextureObjChunk::statNTextures );
        pyopensg::register_transit< OSG::TextureObjChunk >::execute();
        bp::implicitly_convertible< OSG::TextureObjChunk::ObjRecPtr, OSG::TextureObjChunk* >();
        bp::implicitly_convertible< OSG::TextureObjChunk::ObjRecPtr, OSG::TextureObjChunk::ObjCPtr >();
        bp::implicitly_convertible< OSG::TextureObjChunk::ObjRecPtr, OSG::TextureBaseChunk* >();
        bp::implicitly_convertible< OSG::TextureObjChunk::ObjRecPtr, OSG::TextureBaseChunk::ObjRecPtr >();
        bp::implicitly_convertible<OSG::TextureObjChunk::ObjRecPtr, OSG::TextureBaseChunk::ObjCPtr>();
    }

}
