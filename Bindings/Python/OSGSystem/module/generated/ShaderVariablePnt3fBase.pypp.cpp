// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "ShaderVariablePnt3fBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_ShaderVariablePnt3fBase_class(){

    { //::OSG::ShaderVariablePnt3fBase
        typedef bp::class_< OSG::ShaderVariablePnt3fBase, bp::bases< OSG::ShaderValueVariable >, boost::noncopyable > ShaderVariablePnt3fBase_exposer_t;
        ShaderVariablePnt3fBase_exposer_t ShaderVariablePnt3fBase_exposer = ShaderVariablePnt3fBase_exposer_t( "ShaderVariablePnt3fBase", bp::no_init );
        bp::scope ShaderVariablePnt3fBase_scope( ShaderVariablePnt3fBase_exposer );
        bp::scope().attr("ValueFieldId") = (int)OSG::ShaderVariablePnt3fBase::ValueFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::ShaderVariablePnt3fBase::NextFieldId;
        { //::OSG::ShaderVariablePnt3fBase::copyFromBin
        
            typedef void ( ::OSG::ShaderVariablePnt3fBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            ShaderVariablePnt3fBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::ShaderVariablePnt3fBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::ShaderVariablePnt3fBase::copyToBin
        
            typedef void ( ::OSG::ShaderVariablePnt3fBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            ShaderVariablePnt3fBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::ShaderVariablePnt3fBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::ShaderVariablePnt3fBase::create
        
            typedef ::OSG::ShaderVariablePnt3fTransitPtr ( *create_function_type )(  );
            
            ShaderVariablePnt3fBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::ShaderVariablePnt3fBase::create ) );
        
        }
        { //::OSG::ShaderVariablePnt3fBase::createDependent
        
            typedef ::OSG::ShaderVariablePnt3fTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            ShaderVariablePnt3fBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::ShaderVariablePnt3fBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::ShaderVariablePnt3fBase::createLocal
        
            typedef ::OSG::ShaderVariablePnt3fTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            ShaderVariablePnt3fBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::ShaderVariablePnt3fBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::ShaderVariablePnt3fBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::ShaderVariablePnt3fBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            ShaderVariablePnt3fBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::ShaderVariablePnt3fBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::ShaderVariablePnt3fBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            ShaderVariablePnt3fBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::ShaderVariablePnt3fBase::getClassGroupId ) );
        
        }
        { //::OSG::ShaderVariablePnt3fBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            ShaderVariablePnt3fBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::ShaderVariablePnt3fBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::ShaderVariablePnt3fBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            ShaderVariablePnt3fBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::ShaderVariablePnt3fBase::getClassTypeId ) );
        
        }
        { //::OSG::ShaderVariablePnt3fBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::ShaderVariablePnt3fBase::*getContainerSize_function_type )(  ) const;
            
            ShaderVariablePnt3fBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::ShaderVariablePnt3fBase::getContainerSize ) );
        
        }
        { //::OSG::ShaderVariablePnt3fBase::getSFValue
        
            typedef ::OSG::SFPnt3f const * ( ::OSG::ShaderVariablePnt3fBase::*getSFValue_function_type )(  ) const;
            
            ShaderVariablePnt3fBase_exposer.def( 
                "getSFValue"
                , getSFValue_function_type( &::OSG::ShaderVariablePnt3fBase::getSFValue )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ShaderVariablePnt3fBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::ShaderVariablePnt3fBase::*getType_function_type )(  ) ;
            
            ShaderVariablePnt3fBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::ShaderVariablePnt3fBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ShaderVariablePnt3fBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::ShaderVariablePnt3fBase::*getType_function_type )(  ) const;
            
            ShaderVariablePnt3fBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::ShaderVariablePnt3fBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ShaderVariablePnt3fBase::getValue
        
            typedef ::OSG::Pnt3f const & ( ::OSG::ShaderVariablePnt3fBase::*getValue_function_type )(  ) const;
            
            ShaderVariablePnt3fBase_exposer.def( 
                "getValue"
                , getValue_function_type( &::OSG::ShaderVariablePnt3fBase::getValue )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::ShaderVariablePnt3fBase::setValue
        
            typedef void ( ::OSG::ShaderVariablePnt3fBase::*setValue_function_type )( ::OSG::Pnt3f const & ) ;
            
            ShaderVariablePnt3fBase_exposer.def( 
                "setValue"
                , setValue_function_type( &::OSG::ShaderVariablePnt3fBase::setValue )
                , ( bp::arg("value") ) );
        
        }
        ShaderVariablePnt3fBase_exposer.staticmethod( "create" );
        ShaderVariablePnt3fBase_exposer.staticmethod( "createDependent" );
        ShaderVariablePnt3fBase_exposer.staticmethod( "createLocal" );
        ShaderVariablePnt3fBase_exposer.staticmethod( "getClassGroupId" );
        ShaderVariablePnt3fBase_exposer.staticmethod( "getClassType" );
        ShaderVariablePnt3fBase_exposer.staticmethod( "getClassTypeId" );
    }

}
