// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "SolidBackgroundBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct SolidBackgroundBase_wrapper : OSG::SolidBackgroundBase, bp::wrapper< OSG::SolidBackgroundBase > {



};

void register_SolidBackgroundBase_class(){

    { //::OSG::SolidBackgroundBase
        typedef bp::class_< SolidBackgroundBase_wrapper, bp::bases< OSG::Background >, boost::noncopyable > SolidBackgroundBase_exposer_t;
        SolidBackgroundBase_exposer_t SolidBackgroundBase_exposer = SolidBackgroundBase_exposer_t( "SolidBackgroundBase", bp::no_init );
        bp::scope SolidBackgroundBase_scope( SolidBackgroundBase_exposer );
        bp::scope().attr("ColorFieldId") = (int)OSG::SolidBackgroundBase::ColorFieldId;
        bp::scope().attr("AlphaFieldId") = (int)OSG::SolidBackgroundBase::AlphaFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::SolidBackgroundBase::NextFieldId;
        { //::OSG::SolidBackgroundBase::copyFromBin
        
            typedef void ( ::OSG::SolidBackgroundBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            SolidBackgroundBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::SolidBackgroundBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::SolidBackgroundBase::copyToBin
        
            typedef void ( ::OSG::SolidBackgroundBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            SolidBackgroundBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::SolidBackgroundBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::SolidBackgroundBase::create
        
            typedef ::OSG::SolidBackgroundTransitPtr ( *create_function_type )(  );
            
            SolidBackgroundBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::SolidBackgroundBase::create ) );
        
        }
        { //::OSG::SolidBackgroundBase::createDependent
        
            typedef ::OSG::SolidBackgroundTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            SolidBackgroundBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::SolidBackgroundBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::SolidBackgroundBase::createLocal
        
            typedef ::OSG::SolidBackgroundTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            SolidBackgroundBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::SolidBackgroundBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::SolidBackgroundBase::getAlpha
        
            typedef ::OSG::Real32 ( ::OSG::SolidBackgroundBase::*getAlpha_function_type )(  ) const;
            
            SolidBackgroundBase_exposer.def( 
                "getAlpha"
                , getAlpha_function_type( &::OSG::SolidBackgroundBase::getAlpha ) );
        
        }
        { //::OSG::SolidBackgroundBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::SolidBackgroundBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            SolidBackgroundBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::SolidBackgroundBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::SolidBackgroundBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            SolidBackgroundBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::SolidBackgroundBase::getClassGroupId ) );
        
        }
        { //::OSG::SolidBackgroundBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            SolidBackgroundBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::SolidBackgroundBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::SolidBackgroundBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            SolidBackgroundBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::SolidBackgroundBase::getClassTypeId ) );
        
        }
        { //::OSG::SolidBackgroundBase::getColor
        
            typedef ::OSG::Color3f const & ( ::OSG::SolidBackgroundBase::*getColor_function_type )(  ) const;
            
            SolidBackgroundBase_exposer.def( 
                "getColor"
                , getColor_function_type( &::OSG::SolidBackgroundBase::getColor )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::SolidBackgroundBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::SolidBackgroundBase::*getContainerSize_function_type )(  ) const;
            
            SolidBackgroundBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::SolidBackgroundBase::getContainerSize ) );
        
        }
        { //::OSG::SolidBackgroundBase::getSFAlpha
        
            typedef ::OSG::SFReal32 const * ( ::OSG::SolidBackgroundBase::*getSFAlpha_function_type )(  ) const;
            
            SolidBackgroundBase_exposer.def( 
                "getSFAlpha"
                , getSFAlpha_function_type( &::OSG::SolidBackgroundBase::getSFAlpha )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::SolidBackgroundBase::getSFColor
        
            typedef ::OSG::SFColor3f const * ( ::OSG::SolidBackgroundBase::*getSFColor_function_type )(  ) const;
            
            SolidBackgroundBase_exposer.def( 
                "getSFColor"
                , getSFColor_function_type( &::OSG::SolidBackgroundBase::getSFColor )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::SolidBackgroundBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::SolidBackgroundBase::*getType_function_type )(  ) ;
            
            SolidBackgroundBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::SolidBackgroundBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::SolidBackgroundBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::SolidBackgroundBase::*getType_function_type )(  ) const;
            
            SolidBackgroundBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::SolidBackgroundBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::SolidBackgroundBase::setAlpha
        
            typedef void ( ::OSG::SolidBackgroundBase::*setAlpha_function_type )( ::OSG::Real32 const ) ;
            
            SolidBackgroundBase_exposer.def( 
                "setAlpha"
                , setAlpha_function_type( &::OSG::SolidBackgroundBase::setAlpha )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::SolidBackgroundBase::setColor
        
            typedef void ( ::OSG::SolidBackgroundBase::*setColor_function_type )( ::OSG::Color3f const & ) ;
            
            SolidBackgroundBase_exposer.def( 
                "setColor"
                , setColor_function_type( &::OSG::SolidBackgroundBase::setColor )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::Background::clear
        
            typedef void ( ::OSG::Background::*clear_function_type )( ::OSG::DrawEnv * ) ;
            
            SolidBackgroundBase_exposer.def( 
                "clear"
                , clear_function_type( &::OSG::Background::clear )
                , ( bp::arg("pEnv") ) );
        
        }
        SolidBackgroundBase_exposer.staticmethod( "create" );
        SolidBackgroundBase_exposer.staticmethod( "createDependent" );
        SolidBackgroundBase_exposer.staticmethod( "createLocal" );
        SolidBackgroundBase_exposer.staticmethod( "getClassGroupId" );
        SolidBackgroundBase_exposer.staticmethod( "getClassType" );
        SolidBackgroundBase_exposer.staticmethod( "getClassTypeId" );
    }

}
