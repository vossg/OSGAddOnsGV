// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "CameraBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_CameraBase_class(){

    { //::OSG::CameraBase
        typedef bp::class_< OSG::CameraBase, bp::bases< ::OSG::AttachmentContainer >, boost::noncopyable > CameraBase_exposer_t;
        CameraBase_exposer_t CameraBase_exposer = CameraBase_exposer_t( "CameraBase", bp::no_init );
        bp::scope CameraBase_scope( CameraBase_exposer );
        bp::scope().attr("BeaconFieldId") = (int)OSG::CameraBase::BeaconFieldId;
        bp::scope().attr("NearFieldId") = (int)OSG::CameraBase::NearFieldId;
        bp::scope().attr("FarFieldId") = (int)OSG::CameraBase::FarFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::CameraBase::NextFieldId;
        { //::OSG::CameraBase::copyFromBin
        
            typedef void ( ::OSG::CameraBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            CameraBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::CameraBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::CameraBase::copyToBin
        
            typedef void ( ::OSG::CameraBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            CameraBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::CameraBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::CameraBase::getBeacon
        
            typedef ::OSG::Node * ( ::OSG::CameraBase::*getBeacon_function_type )(  ) const;
            
            CameraBase_exposer.def( 
                "getBeacon"
                , getBeacon_function_type( &::OSG::CameraBase::getBeacon )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CameraBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::CameraBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            CameraBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::CameraBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::CameraBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            CameraBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::CameraBase::getClassGroupId ) );
        
        }
        { //::OSG::CameraBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            CameraBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::CameraBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::CameraBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            CameraBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::CameraBase::getClassTypeId ) );
        
        }
        { //::OSG::CameraBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::CameraBase::*getContainerSize_function_type )(  ) const;
            
            CameraBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::CameraBase::getContainerSize ) );
        
        }
        { //::OSG::CameraBase::getFar
        
            typedef ::OSG::Real32 ( ::OSG::CameraBase::*getFar_function_type )(  ) const;
            
            CameraBase_exposer.def( 
                "getFar"
                , getFar_function_type( &::OSG::CameraBase::getFar ) );
        
        }
        { //::OSG::CameraBase::getNear
        
            typedef ::OSG::Real32 ( ::OSG::CameraBase::*getNear_function_type )(  ) const;
            
            CameraBase_exposer.def( 
                "getNear"
                , getNear_function_type( &::OSG::CameraBase::getNear ) );
        
        }
        { //::OSG::CameraBase::getSFBeacon
        
            typedef ::OSG::SFWeakNodePtr const * ( ::OSG::CameraBase::*getSFBeacon_function_type )(  ) const;
            
            CameraBase_exposer.def( 
                "getSFBeacon"
                , getSFBeacon_function_type( &::OSG::CameraBase::getSFBeacon )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CameraBase::getSFFar
        
            typedef ::OSG::SFReal32 const * ( ::OSG::CameraBase::*getSFFar_function_type )(  ) const;
            
            CameraBase_exposer.def( 
                "getSFFar"
                , getSFFar_function_type( &::OSG::CameraBase::getSFFar )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CameraBase::getSFNear
        
            typedef ::OSG::SFReal32 const * ( ::OSG::CameraBase::*getSFNear_function_type )(  ) const;
            
            CameraBase_exposer.def( 
                "getSFNear"
                , getSFNear_function_type( &::OSG::CameraBase::getSFNear )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CameraBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::CameraBase::*getType_function_type )(  ) ;
            
            CameraBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::CameraBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CameraBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::CameraBase::*getType_function_type )(  ) const;
            
            CameraBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::CameraBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CameraBase::setBeacon
        
            typedef void ( ::OSG::CameraBase::*setBeacon_function_type )( ::OSG::Node * const ) ;
            
            CameraBase_exposer.def( 
                "setBeacon"
                , setBeacon_function_type( &::OSG::CameraBase::setBeacon )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CameraBase::setFar
        
            typedef void ( ::OSG::CameraBase::*setFar_function_type )( ::OSG::Real32 const ) ;
            
            CameraBase_exposer.def( 
                "setFar"
                , setFar_function_type( &::OSG::CameraBase::setFar )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CameraBase::setNear
        
            typedef void ( ::OSG::CameraBase::*setNear_function_type )( ::OSG::Real32 const ) ;
            
            CameraBase_exposer.def( 
                "setNear"
                , setNear_function_type( &::OSG::CameraBase::setNear )
                , ( bp::arg("value") ) );
        
        }
        CameraBase_exposer.staticmethod( "getClassGroupId" );
        CameraBase_exposer.staticmethod( "getClassType" );
        CameraBase_exposer.staticmethod( "getClassTypeId" );
    }

}
