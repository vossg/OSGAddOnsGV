// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "MultiPassMaterialBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct MultiPassMaterialBase_wrapper : OSG::MultiPassMaterialBase, bp::wrapper< OSG::MultiPassMaterialBase > {



};

boost::python::list MultiPassMaterialBase_getMFMaterials(OSG::MultiPassMaterialBase *self)
{
   boost::python::list result;
   OSG::MFUnrecPrimeMaterialPtr const * mf_data = self->getMFMaterials();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append(OSG::PrimeMaterial::ObjRecPtr((*mf_data)[i]));
   }
   return result;
}

void register_MultiPassMaterialBase_class(){

    { //::OSG::MultiPassMaterialBase
        typedef bp::class_< MultiPassMaterialBase_wrapper, bp::bases< OSG::PrimeMaterial >, boost::noncopyable > MultiPassMaterialBase_exposer_t;
        MultiPassMaterialBase_exposer_t MultiPassMaterialBase_exposer = MultiPassMaterialBase_exposer_t( "MultiPassMaterialBase", bp::no_init );
        bp::scope MultiPassMaterialBase_scope( MultiPassMaterialBase_exposer );
        bp::scope().attr("MaterialsFieldId") = (int)OSG::MultiPassMaterialBase::MaterialsFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::MultiPassMaterialBase::NextFieldId;
        { //::OSG::MultiPassMaterialBase::addMaterial
        
            typedef void ( ::OSG::MultiPassMaterialBase::*addMaterial_function_type )( ::OSG::PrimeMaterial * const ) ;
            
            MultiPassMaterialBase_exposer.def( 
                "addMaterial"
                , addMaterial_function_type( &::OSG::MultiPassMaterialBase::addMaterial )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::MultiPassMaterialBase::assignMaterialsFrom
        
            typedef void ( ::OSG::MultiPassMaterialBase::*assignMaterialsFrom_function_type )( ::OSG::MFUnrecPrimeMaterialPtr const & ) ;
            
            MultiPassMaterialBase_exposer.def( 
                "assignMaterialsFrom"
                , assignMaterialsFrom_function_type( &::OSG::MultiPassMaterialBase::assignMaterialsFrom )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::MultiPassMaterialBase::clearMaterials
        
            typedef void ( ::OSG::MultiPassMaterialBase::*clearMaterials_function_type )(  ) ;
            
            MultiPassMaterialBase_exposer.def( 
                "clearMaterials"
                , clearMaterials_function_type( &::OSG::MultiPassMaterialBase::clearMaterials ) );
        
        }
        { //::OSG::MultiPassMaterialBase::copyFromBin
        
            typedef void ( ::OSG::MultiPassMaterialBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            MultiPassMaterialBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::MultiPassMaterialBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::MultiPassMaterialBase::copyToBin
        
            typedef void ( ::OSG::MultiPassMaterialBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            MultiPassMaterialBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::MultiPassMaterialBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::MultiPassMaterialBase::create
        
            typedef ::OSG::MultiPassMaterialTransitPtr ( *create_function_type )(  );
            
            MultiPassMaterialBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::MultiPassMaterialBase::create ) );
        
        }
        { //::OSG::MultiPassMaterialBase::createDependent
        
            typedef ::OSG::MultiPassMaterialTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            MultiPassMaterialBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::MultiPassMaterialBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::MultiPassMaterialBase::createLocal
        
            typedef ::OSG::MultiPassMaterialTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            MultiPassMaterialBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::MultiPassMaterialBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::MultiPassMaterialBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::MultiPassMaterialBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            MultiPassMaterialBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::MultiPassMaterialBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::MultiPassMaterialBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            MultiPassMaterialBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::MultiPassMaterialBase::getClassGroupId ) );
        
        }
        { //::OSG::MultiPassMaterialBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            MultiPassMaterialBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::MultiPassMaterialBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::MultiPassMaterialBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            MultiPassMaterialBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::MultiPassMaterialBase::getClassTypeId ) );
        
        }
        { //::OSG::MultiPassMaterialBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::MultiPassMaterialBase::*getContainerSize_function_type )(  ) const;
            
            MultiPassMaterialBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::MultiPassMaterialBase::getContainerSize ) );
        
        }
        { //::OSG::MultiPassMaterialBase::getMaterials
        
            typedef ::OSG::PrimeMaterial * ( ::OSG::MultiPassMaterialBase::*getMaterials_function_type )( ::OSG::UInt32 const ) const;
            
            MultiPassMaterialBase_exposer.def( 
                "getMaterials"
                , getMaterials_function_type( &::OSG::MultiPassMaterialBase::getMaterials )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::MultiPassMaterialBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::MultiPassMaterialBase::*getType_function_type )(  ) ;
            
            MultiPassMaterialBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::MultiPassMaterialBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::MultiPassMaterialBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::MultiPassMaterialBase::*getType_function_type )(  ) const;
            
            MultiPassMaterialBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::MultiPassMaterialBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::MultiPassMaterialBase::subMaterial
        
            typedef void ( ::OSG::MultiPassMaterialBase::*subMaterial_function_type )( ::OSG::UInt32 ) ;
            
            MultiPassMaterialBase_exposer.def( 
                "subMaterial"
                , subMaterial_function_type( &::OSG::MultiPassMaterialBase::subMaterial )
                , ( bp::arg("uiIndex") ) );
        
        }
        { //::OSG::MultiPassMaterialBase::subMaterialByObj
        
            typedef void ( ::OSG::MultiPassMaterialBase::*subMaterialByObj_function_type )( ::OSG::PrimeMaterial * const ) ;
            
            MultiPassMaterialBase_exposer.def( 
                "subMaterialByObj"
                , subMaterialByObj_function_type( &::OSG::MultiPassMaterialBase::subMaterialByObj )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::PrimeMaterial::rebuildState
        
            typedef void ( ::OSG::PrimeMaterial::*rebuildState_function_type )(  ) ;
            
            MultiPassMaterialBase_exposer.def( 
                "rebuildState"
                , rebuildState_function_type( &::OSG::PrimeMaterial::rebuildState ) );
        
        }
        MultiPassMaterialBase_exposer.staticmethod( "create" );
        MultiPassMaterialBase_exposer.staticmethod( "createDependent" );
        MultiPassMaterialBase_exposer.staticmethod( "createLocal" );
        MultiPassMaterialBase_exposer.staticmethod( "getClassGroupId" );
        MultiPassMaterialBase_exposer.staticmethod( "getClassType" );
        MultiPassMaterialBase_exposer.staticmethod( "getClassTypeId" );
        MultiPassMaterialBase_exposer.def("getMFMaterials",MultiPassMaterialBase_getMFMaterials);
    }

}
