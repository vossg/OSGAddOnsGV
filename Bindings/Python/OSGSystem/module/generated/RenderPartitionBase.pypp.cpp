// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "RenderPartitionBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct RenderPartitionBase_wrapper : OSG::RenderPartitionBase, bp::wrapper< OSG::RenderPartitionBase > {

    virtual void dump( ::OSG::UInt32 uiIndent ){
        bp::override func_dump = this->get_override( "dump" );
        func_dump( uiIndent );
    }

    virtual void execute( ::OSG::HardwareContext * pContext, ::OSG::DrawEnv * pEnv ){
        bp::override func_execute = this->get_override( "execute" );
        func_execute( boost::python::ptr(pContext), boost::python::ptr(pEnv) );
    }

};

void register_RenderPartitionBase_class(){

    { //::OSG::RenderPartitionBase
        typedef bp::class_< RenderPartitionBase_wrapper, boost::noncopyable > RenderPartitionBase_exposer_t;
        RenderPartitionBase_exposer_t RenderPartitionBase_exposer = RenderPartitionBase_exposer_t( "RenderPartitionBase", bp::no_init );
        bp::scope RenderPartitionBase_scope( RenderPartitionBase_exposer );
        bp::enum_< OSG::RenderPartitionBase::CopyOnPush>("CopyOnPush")
            .value("CopyNothing", OSG::RenderPartitionBase::CopyNothing)
            .value("CopyStateOverride", OSG::RenderPartitionBase::CopyStateOverride)
            .value("CopyViewing", OSG::RenderPartitionBase::CopyViewing)
            .value("CopyProjection", OSG::RenderPartitionBase::CopyProjection)
            .value("CopyVisibility", OSG::RenderPartitionBase::CopyVisibility)
            .value("CopyTarget", OSG::RenderPartitionBase::CopyTarget)
            .value("CopyWindow", OSG::RenderPartitionBase::CopyWindow)
            .value("CopyViewportSize", OSG::RenderPartitionBase::CopyViewportSize)
            .value("CopyFrustum", OSG::RenderPartitionBase::CopyFrustum)
            .value("CopyNearFar", OSG::RenderPartitionBase::CopyNearFar)
            .value("CopyVPCamera", OSG::RenderPartitionBase::CopyVPCamera)
            .value("CopyMatrix", OSG::RenderPartitionBase::CopyMatrix)
            .value("CopyAll", OSG::RenderPartitionBase::CopyAll)
            .export_values()
            ;
        bp::enum_< OSG::RenderPartitionBase::Mode>("Mode")
            .value("StateSorting", OSG::RenderPartitionBase::StateSorting)
            .value("TransformSorting", OSG::RenderPartitionBase::TransformSorting)
            .value("SimpleCallback", OSG::RenderPartitionBase::SimpleCallback)
            .export_values()
            ;
        bp::enum_< OSG::RenderPartitionBase::SetupBit>("SetupBit")
            .value("PassiveBit", OSG::RenderPartitionBase::PassiveBit)
            .export_values()
            ;
        bp::enum_< OSG::RenderPartitionBase::SetupMode>("SetupMode")
            .value("EmptySetup", OSG::RenderPartitionBase::EmptySetup)
            .value("ProjectionSetup", OSG::RenderPartitionBase::ProjectionSetup)
            .value("ViewportSetup", OSG::RenderPartitionBase::ViewportSetup)
            .value("BackgroundSetup", OSG::RenderPartitionBase::BackgroundSetup)
            .value("FullSetup", OSG::RenderPartitionBase::FullSetup)
            .export_values()
            ;
        { //::OSG::RenderPartitionBase::getCorrectNegScale
        
            typedef bool ( ::OSG::RenderPartitionBase::*getCorrectNegScale_function_type )(  ) const;
            
            RenderPartitionBase_exposer.def( 
                "getCorrectNegScale"
                , getCorrectNegScale_function_type( &::OSG::RenderPartitionBase::getCorrectNegScale ) );
        
        }
        { //::OSG::RenderPartitionBase::getZWriteTrans
        
            typedef bool ( ::OSG::RenderPartitionBase::*getZWriteTrans_function_type )(  ) const;
            
            RenderPartitionBase_exposer.def( 
                "getZWriteTrans"
                , getZWriteTrans_function_type( &::OSG::RenderPartitionBase::getZWriteTrans ) );
        
        }
        { //::OSG::RenderPartitionBase::setCorrectNegScale
        
            typedef void ( ::OSG::RenderPartitionBase::*setCorrectNegScale_function_type )( bool ) ;
            
            RenderPartitionBase_exposer.def( 
                "setCorrectNegScale"
                , setCorrectNegScale_function_type( &::OSG::RenderPartitionBase::setCorrectNegScale )
                , ( bp::arg("bVal") ) );
        
        }
        { //::OSG::RenderPartitionBase::setTaskType
        
            typedef void ( ::OSG::RenderPartitionBase::*setTaskType_function_type )( ::OSG::UInt32 ) ;
            
            RenderPartitionBase_exposer.def( 
                "setTaskType"
                , setTaskType_function_type( &::OSG::RenderPartitionBase::setTaskType )
                , ( bp::arg("uiTaskType") ) );
        
        }
        { //::OSG::RenderPartitionBase::setZWriteTrans
        
            typedef void ( ::OSG::RenderPartitionBase::*setZWriteTrans_function_type )( bool ) ;
            
            RenderPartitionBase_exposer.def( 
                "setZWriteTrans"
                , setZWriteTrans_function_type( &::OSG::RenderPartitionBase::setZWriteTrans )
                , ( bp::arg("bVal") ) );
        
        }
        { //::OSG::DrawTask::dump
        
            typedef void ( ::OSG::DrawTask::*dump_function_type )( ::OSG::UInt32 ) ;
            
            RenderPartitionBase_exposer.def( 
                "dump"
                , bp::pure_virtual( dump_function_type(&::OSG::DrawTask::dump) )
                , ( bp::arg("uiIndent") ) );
        
        }
        { //::OSG::HardwareContextTask::execute
        
            typedef void ( ::OSG::HardwareContextTask::*execute_function_type )( ::OSG::HardwareContext *,::OSG::DrawEnv * ) ;
            
            RenderPartitionBase_exposer.def( 
                "execute"
                , bp::pure_virtual( execute_function_type(&::OSG::HardwareContextTask::execute) )
                , ( bp::arg("pContext"), bp::arg("pEnv") ) );
        
        }
    }

}
