// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "SceneFileType.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct SceneFileType_wrapper : OSG::SceneFileType, bp::wrapper< OSG::SceneFileType > {

    virtual ::OSG::Char8 const * getName(  ) const {
        bp::override func_getName = this->get_override( "getName" );
        return func_getName(  );
    }

};

void register_SceneFileType_class(){

    { //::OSG::SceneFileType
        typedef bp::class_< SceneFileType_wrapper, boost::noncopyable > SceneFileType_exposer_t;
        SceneFileType_exposer_t SceneFileType_exposer = SceneFileType_exposer_t( "SceneFileType", bp::no_init );
        bp::scope SceneFileType_scope( SceneFileType_exposer );
        { //::OSG::SceneFileType::doOverride
        
            typedef bool ( ::OSG::SceneFileType::*doOverride_function_type )(  ) ;
            
            SceneFileType_exposer.def( 
                "doOverride"
                , doOverride_function_type( &::OSG::SceneFileType::doOverride ) );
        
        }
        { //::OSG::SceneFileType::getName
        
            typedef ::OSG::Char8 const * ( ::OSG::SceneFileType::*getName_function_type )(  ) const;
            
            SceneFileType_exposer.def( 
                "getName"
                , bp::pure_virtual( getName_function_type(&::OSG::SceneFileType::getName) ) );
        
        }
        { //::OSG::SceneFileType::getOverridePriority
        
            typedef ::OSG::UInt32 ( ::OSG::SceneFileType::*getOverridePriority_function_type )(  ) ;
            
            SceneFileType_exposer.def( 
                "getOverridePriority"
                , getOverridePriority_function_type( &::OSG::SceneFileType::getOverridePriority ) );
        
        }
        { //::OSG::SceneFileType::print
        
            typedef void ( ::OSG::SceneFileType::*print_function_type )(  ) ;
            
            SceneFileType_exposer.def( 
                "print"
                , print_function_type( &::OSG::SceneFileType::print ) );
        
        }
    }

}
