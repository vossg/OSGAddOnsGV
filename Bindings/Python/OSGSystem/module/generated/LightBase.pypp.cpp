// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "LightBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_LightBase_class(){

    { //::OSG::LightBase
        typedef bp::class_< OSG::LightBase, bp::bases< OSG::Group >, boost::noncopyable > LightBase_exposer_t;
        LightBase_exposer_t LightBase_exposer = LightBase_exposer_t( "LightBase", bp::no_init );
        bp::scope LightBase_scope( LightBase_exposer );
        bp::scope().attr("AmbientFieldId") = (int)OSG::LightBase::AmbientFieldId;
        bp::scope().attr("DiffuseFieldId") = (int)OSG::LightBase::DiffuseFieldId;
        bp::scope().attr("SpecularFieldId") = (int)OSG::LightBase::SpecularFieldId;
        bp::scope().attr("BeaconFieldId") = (int)OSG::LightBase::BeaconFieldId;
        bp::scope().attr("OnFieldId") = (int)OSG::LightBase::OnFieldId;
        bp::scope().attr("ConstantAttenuationFieldId") = (int)OSG::LightBase::ConstantAttenuationFieldId;
        bp::scope().attr("LinearAttenuationFieldId") = (int)OSG::LightBase::LinearAttenuationFieldId;
        bp::scope().attr("QuadraticAttenuationFieldId") = (int)OSG::LightBase::QuadraticAttenuationFieldId;
        bp::scope().attr("LightEngineFieldId") = (int)OSG::LightBase::LightEngineFieldId;
        bp::scope().attr("ShadowIntensityFieldId") = (int)OSG::LightBase::ShadowIntensityFieldId;
        bp::scope().attr("ShadowModeFieldId") = (int)OSG::LightBase::ShadowModeFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::LightBase::NextFieldId;
        { //::OSG::LightBase::copyFromBin
        
            typedef void ( ::OSG::LightBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            LightBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::LightBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::LightBase::copyToBin
        
            typedef void ( ::OSG::LightBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            LightBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::LightBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::LightBase::getAmbient
        
            typedef ::OSG::Color4f const & ( ::OSG::LightBase::*getAmbient_function_type )(  ) const;
            
            LightBase_exposer.def( 
                "getAmbient"
                , getAmbient_function_type( &::OSG::LightBase::getAmbient )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::LightBase::getBeacon
        
            typedef ::OSG::Node * ( ::OSG::LightBase::*getBeacon_function_type )(  ) const;
            
            LightBase_exposer.def( 
                "getBeacon"
                , getBeacon_function_type( &::OSG::LightBase::getBeacon )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::LightBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::LightBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            LightBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::LightBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::LightBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            LightBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::LightBase::getClassGroupId ) );
        
        }
        { //::OSG::LightBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            LightBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::LightBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::LightBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            LightBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::LightBase::getClassTypeId ) );
        
        }
        { //::OSG::LightBase::getConstantAttenuation
        
            typedef ::OSG::Real32 ( ::OSG::LightBase::*getConstantAttenuation_function_type )(  ) const;
            
            LightBase_exposer.def( 
                "getConstantAttenuation"
                , getConstantAttenuation_function_type( &::OSG::LightBase::getConstantAttenuation ) );
        
        }
        { //::OSG::LightBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::LightBase::*getContainerSize_function_type )(  ) const;
            
            LightBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::LightBase::getContainerSize ) );
        
        }
        { //::OSG::LightBase::getDiffuse
        
            typedef ::OSG::Color4f const & ( ::OSG::LightBase::*getDiffuse_function_type )(  ) const;
            
            LightBase_exposer.def( 
                "getDiffuse"
                , getDiffuse_function_type( &::OSG::LightBase::getDiffuse )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::LightBase::getLightEngine
        
            typedef ::OSG::LightEngine * ( ::OSG::LightBase::*getLightEngine_function_type )(  ) const;
            
            LightBase_exposer.def( 
                "getLightEngine"
                , getLightEngine_function_type( &::OSG::LightBase::getLightEngine )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::LightBase::getLinearAttenuation
        
            typedef ::OSG::Real32 ( ::OSG::LightBase::*getLinearAttenuation_function_type )(  ) const;
            
            LightBase_exposer.def( 
                "getLinearAttenuation"
                , getLinearAttenuation_function_type( &::OSG::LightBase::getLinearAttenuation ) );
        
        }
        { //::OSG::LightBase::getOn
        
            typedef bool ( ::OSG::LightBase::*getOn_function_type )(  ) const;
            
            LightBase_exposer.def( 
                "getOn"
                , getOn_function_type( &::OSG::LightBase::getOn ) );
        
        }
        { //::OSG::LightBase::getQuadraticAttenuation
        
            typedef ::OSG::Real32 ( ::OSG::LightBase::*getQuadraticAttenuation_function_type )(  ) const;
            
            LightBase_exposer.def( 
                "getQuadraticAttenuation"
                , getQuadraticAttenuation_function_type( &::OSG::LightBase::getQuadraticAttenuation ) );
        
        }
        { //::OSG::LightBase::getSFAmbient
        
            typedef ::OSG::SFColor4f const * ( ::OSG::LightBase::*getSFAmbient_function_type )(  ) const;
            
            LightBase_exposer.def( 
                "getSFAmbient"
                , getSFAmbient_function_type( &::OSG::LightBase::getSFAmbient )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::LightBase::getSFBeacon
        
            typedef ::OSG::SFWeakNodePtr const * ( ::OSG::LightBase::*getSFBeacon_function_type )(  ) const;
            
            LightBase_exposer.def( 
                "getSFBeacon"
                , getSFBeacon_function_type( &::OSG::LightBase::getSFBeacon )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::LightBase::getSFConstantAttenuation
        
            typedef ::OSG::SFReal32 const * ( ::OSG::LightBase::*getSFConstantAttenuation_function_type )(  ) const;
            
            LightBase_exposer.def( 
                "getSFConstantAttenuation"
                , getSFConstantAttenuation_function_type( &::OSG::LightBase::getSFConstantAttenuation )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::LightBase::getSFDiffuse
        
            typedef ::OSG::SFColor4f const * ( ::OSG::LightBase::*getSFDiffuse_function_type )(  ) const;
            
            LightBase_exposer.def( 
                "getSFDiffuse"
                , getSFDiffuse_function_type( &::OSG::LightBase::getSFDiffuse )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::LightBase::getSFLightEngine
        
            typedef ::OSG::SFUnrecLightEnginePtr const * ( ::OSG::LightBase::*getSFLightEngine_function_type )(  ) const;
            
            LightBase_exposer.def( 
                "getSFLightEngine"
                , getSFLightEngine_function_type( &::OSG::LightBase::getSFLightEngine )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::LightBase::getSFLinearAttenuation
        
            typedef ::OSG::SFReal32 const * ( ::OSG::LightBase::*getSFLinearAttenuation_function_type )(  ) const;
            
            LightBase_exposer.def( 
                "getSFLinearAttenuation"
                , getSFLinearAttenuation_function_type( &::OSG::LightBase::getSFLinearAttenuation )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::LightBase::getSFOn
        
            typedef ::OSG::SFBool const * ( ::OSG::LightBase::*getSFOn_function_type )(  ) const;
            
            LightBase_exposer.def( 
                "getSFOn"
                , getSFOn_function_type( &::OSG::LightBase::getSFOn )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::LightBase::getSFQuadraticAttenuation
        
            typedef ::OSG::SFReal32 const * ( ::OSG::LightBase::*getSFQuadraticAttenuation_function_type )(  ) const;
            
            LightBase_exposer.def( 
                "getSFQuadraticAttenuation"
                , getSFQuadraticAttenuation_function_type( &::OSG::LightBase::getSFQuadraticAttenuation )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::LightBase::getSFShadowIntensity
        
            typedef ::OSG::SFReal32 const * ( ::OSG::LightBase::*getSFShadowIntensity_function_type )(  ) const;
            
            LightBase_exposer.def( 
                "getSFShadowIntensity"
                , getSFShadowIntensity_function_type( &::OSG::LightBase::getSFShadowIntensity )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::LightBase::getSFShadowMode
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::LightBase::*getSFShadowMode_function_type )(  ) const;
            
            LightBase_exposer.def( 
                "getSFShadowMode"
                , getSFShadowMode_function_type( &::OSG::LightBase::getSFShadowMode )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::LightBase::getSFSpecular
        
            typedef ::OSG::SFColor4f const * ( ::OSG::LightBase::*getSFSpecular_function_type )(  ) const;
            
            LightBase_exposer.def( 
                "getSFSpecular"
                , getSFSpecular_function_type( &::OSG::LightBase::getSFSpecular )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::LightBase::getShadowIntensity
        
            typedef ::OSG::Real32 ( ::OSG::LightBase::*getShadowIntensity_function_type )(  ) const;
            
            LightBase_exposer.def( 
                "getShadowIntensity"
                , getShadowIntensity_function_type( &::OSG::LightBase::getShadowIntensity ) );
        
        }
        { //::OSG::LightBase::getShadowMode
        
            typedef ::OSG::UInt32 ( ::OSG::LightBase::*getShadowMode_function_type )(  ) const;
            
            LightBase_exposer.def( 
                "getShadowMode"
                , getShadowMode_function_type( &::OSG::LightBase::getShadowMode ) );
        
        }
        { //::OSG::LightBase::getSpecular
        
            typedef ::OSG::Color4f const & ( ::OSG::LightBase::*getSpecular_function_type )(  ) const;
            
            LightBase_exposer.def( 
                "getSpecular"
                , getSpecular_function_type( &::OSG::LightBase::getSpecular )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::LightBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::LightBase::*getType_function_type )(  ) ;
            
            LightBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::LightBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::LightBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::LightBase::*getType_function_type )(  ) const;
            
            LightBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::LightBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::LightBase::setAmbient
        
            typedef void ( ::OSG::LightBase::*setAmbient_function_type )( ::OSG::Color4f const & ) ;
            
            LightBase_exposer.def( 
                "setAmbient"
                , setAmbient_function_type( &::OSG::LightBase::setAmbient )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::LightBase::setBeacon
        
            typedef void ( ::OSG::LightBase::*setBeacon_function_type )( ::OSG::Node * const ) ;
            
            LightBase_exposer.def( 
                "setBeacon"
                , setBeacon_function_type( &::OSG::LightBase::setBeacon )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::LightBase::setConstantAttenuation
        
            typedef void ( ::OSG::LightBase::*setConstantAttenuation_function_type )( ::OSG::Real32 const ) ;
            
            LightBase_exposer.def( 
                "setConstantAttenuation"
                , setConstantAttenuation_function_type( &::OSG::LightBase::setConstantAttenuation )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::LightBase::setDiffuse
        
            typedef void ( ::OSG::LightBase::*setDiffuse_function_type )( ::OSG::Color4f const & ) ;
            
            LightBase_exposer.def( 
                "setDiffuse"
                , setDiffuse_function_type( &::OSG::LightBase::setDiffuse )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::LightBase::setLightEngine
        
            typedef void ( ::OSG::LightBase::*setLightEngine_function_type )( ::OSG::LightEngine * const ) ;
            
            LightBase_exposer.def( 
                "setLightEngine"
                , setLightEngine_function_type( &::OSG::LightBase::setLightEngine )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::LightBase::setLinearAttenuation
        
            typedef void ( ::OSG::LightBase::*setLinearAttenuation_function_type )( ::OSG::Real32 const ) ;
            
            LightBase_exposer.def( 
                "setLinearAttenuation"
                , setLinearAttenuation_function_type( &::OSG::LightBase::setLinearAttenuation )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::LightBase::setOn
        
            typedef void ( ::OSG::LightBase::*setOn_function_type )( bool const ) ;
            
            LightBase_exposer.def( 
                "setOn"
                , setOn_function_type( &::OSG::LightBase::setOn )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::LightBase::setQuadraticAttenuation
        
            typedef void ( ::OSG::LightBase::*setQuadraticAttenuation_function_type )( ::OSG::Real32 const ) ;
            
            LightBase_exposer.def( 
                "setQuadraticAttenuation"
                , setQuadraticAttenuation_function_type( &::OSG::LightBase::setQuadraticAttenuation )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::LightBase::setShadowIntensity
        
            typedef void ( ::OSG::LightBase::*setShadowIntensity_function_type )( ::OSG::Real32 const ) ;
            
            LightBase_exposer.def( 
                "setShadowIntensity"
                , setShadowIntensity_function_type( &::OSG::LightBase::setShadowIntensity )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::LightBase::setShadowMode
        
            typedef void ( ::OSG::LightBase::*setShadowMode_function_type )( ::OSG::UInt32 const ) ;
            
            LightBase_exposer.def( 
                "setShadowMode"
                , setShadowMode_function_type( &::OSG::LightBase::setShadowMode )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::LightBase::setSpecular
        
            typedef void ( ::OSG::LightBase::*setSpecular_function_type )( ::OSG::Color4f const & ) ;
            
            LightBase_exposer.def( 
                "setSpecular"
                , setSpecular_function_type( &::OSG::LightBase::setSpecular )
                , ( bp::arg("value") ) );
        
        }
        LightBase_exposer.staticmethod( "getClassGroupId" );
        LightBase_exposer.staticmethod( "getClassType" );
        LightBase_exposer.staticmethod( "getClassTypeId" );
    }

}
