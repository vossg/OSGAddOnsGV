// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "Light.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_Light_class(){

    { //::OSG::Light
        typedef bp::class_< OSG::Light, bp::bases< OSG::LightBase >, boost::noncopyable > Light_exposer_t;
        Light_exposer_t Light_exposer = Light_exposer_t( "Light", bp::no_init );
        bp::scope Light_scope( Light_exposer );
        bp::scope().attr("CAST_SHADOW_AUTO") = (int)OSG::Light::CAST_SHADOW_AUTO;
        bp::scope().attr("CAST_SHADOW_ON") = (int)OSG::Light::CAST_SHADOW_ON;
        bp::scope().attr("CAST_SHADOW_OFF") = (int)OSG::Light::CAST_SHADOW_OFF;
        { //::OSG::Light::callLightEngineEnter
        
            typedef void ( ::OSG::Light::*callLightEngineEnter_function_type )( ::OSG::RenderAction * ) ;
            
            Light_exposer.def( 
                "callLightEngineEnter"
                , callLightEngineEnter_function_type( &::OSG::Light::callLightEngineEnter )
                , ( bp::arg("ract") ) );
        
        }
        { //::OSG::Light::callLightEngineLeave
        
            typedef void ( ::OSG::Light::*callLightEngineLeave_function_type )( ::OSG::RenderAction * ) ;
            
            Light_exposer.def( 
                "callLightEngineLeave"
                , callLightEngineLeave_function_type( &::OSG::Light::callLightEngineLeave )
                , ( bp::arg("ract") ) );
        
        }
        { //::OSG::Light::changed
        
            typedef void ( ::OSG::Light::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            Light_exposer.def( 
                "changed"
                , changed_function_type( &::OSG::Light::changed )
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("detail") ) );
        
        }
        { //::OSG::Light::dump
        
            typedef void ( ::OSG::Light::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            Light_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::Light::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::Light::getChunk
        
            typedef ::OSG::LightChunk * ( ::OSG::Light::*getChunk_function_type )(  ) const;
            
            Light_exposer.def( 
                "getChunk"
                , getChunk_function_type( &::OSG::Light::getChunk )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Light::makeChunk
        
            typedef void ( ::OSG::Light::*makeChunk_function_type )(  ) ;
            
            Light_exposer.def( 
                "makeChunk"
                , makeChunk_function_type( &::OSG::Light::makeChunk ) );
        
        }
        { //::OSG::Light::setAmbient
        
            typedef void ( ::OSG::Light::*setAmbient_function_type )( ::OSG::Real32,::OSG::Real32,::OSG::Real32,::OSG::Real32 ) ;
            
            Light_exposer.def( 
                "setAmbient"
                , setAmbient_function_type( &::OSG::Light::setAmbient )
                , ( bp::arg("rRed"), bp::arg("rGreen"), bp::arg("rBlue"), bp::arg("rAlpha") ) );
        
        }
        { //::OSG::Light::setAmbient
        
            typedef void ( ::OSG::Light::*setAmbient_function_type )( ::OSG::Color4f const & ) ;
            
            Light_exposer.def( 
                "setAmbient"
                , setAmbient_function_type( &::OSG::Light::setAmbient )
                , ( bp::arg("col") ) );
        
        }
        { //::OSG::Light::setDiffuse
        
            typedef void ( ::OSG::Light::*setDiffuse_function_type )( ::OSG::Real32,::OSG::Real32,::OSG::Real32,::OSG::Real32 ) ;
            
            Light_exposer.def( 
                "setDiffuse"
                , setDiffuse_function_type( &::OSG::Light::setDiffuse )
                , ( bp::arg("rRed"), bp::arg("rGreen"), bp::arg("rBlue"), bp::arg("rAlpha") ) );
        
        }
        { //::OSG::Light::setDiffuse
        
            typedef void ( ::OSG::Light::*setDiffuse_function_type )( ::OSG::Color4f const & ) ;
            
            Light_exposer.def( 
                "setDiffuse"
                , setDiffuse_function_type( &::OSG::Light::setDiffuse )
                , ( bp::arg("col") ) );
        
        }
        { //::OSG::Light::setSpecular
        
            typedef void ( ::OSG::Light::*setSpecular_function_type )( ::OSG::Real32,::OSG::Real32,::OSG::Real32,::OSG::Real32 ) ;
            
            Light_exposer.def( 
                "setSpecular"
                , setSpecular_function_type( &::OSG::Light::setSpecular )
                , ( bp::arg("rRed"), bp::arg("rGreen"), bp::arg("rBlue"), bp::arg("rAlpha") ) );
        
        }
        { //::OSG::Light::setSpecular
        
            typedef void ( ::OSG::Light::*setSpecular_function_type )( ::OSG::Color4f const & ) ;
            
            Light_exposer.def( 
                "setSpecular"
                , setSpecular_function_type( &::OSG::Light::setSpecular )
                , ( bp::arg("col") ) );
        
        }
        pyopensg::register_transit< OSG::Light >::execute();
        bp::register_ptr_to_python< OSG::Light::ObjRecPtr >();
        bp::implicitly_convertible< OSG::Light::ObjRecPtr, OSG::Light* >();
        bp::implicitly_convertible< OSG::Light::ObjRecPtr, OSG::Light::ObjCPtr >();
        bp::implicitly_convertible< OSG::Light::ObjRecPtr, OSG::Group* >();
        bp::implicitly_convertible< OSG::Light::ObjRecPtr, OSG::Group::ObjRecPtr >();
        bp::implicitly_convertible<OSG::Light::ObjRecPtr, OSG::Group::ObjCPtr>();
    }

}
