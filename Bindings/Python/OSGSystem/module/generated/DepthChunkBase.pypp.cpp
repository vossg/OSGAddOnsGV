// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "DepthChunkBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_DepthChunkBase_class(){

    { //::OSG::DepthChunkBase
        typedef bp::class_< OSG::DepthChunkBase, bp::bases< OSG::StateChunk >, boost::noncopyable > DepthChunkBase_exposer_t;
        DepthChunkBase_exposer_t DepthChunkBase_exposer = DepthChunkBase_exposer_t( "DepthChunkBase", bp::no_init );
        bp::scope DepthChunkBase_scope( DepthChunkBase_exposer );
        bp::scope().attr("EnableFieldId") = (int)OSG::DepthChunkBase::EnableFieldId;
        bp::scope().attr("FuncFieldId") = (int)OSG::DepthChunkBase::FuncFieldId;
        bp::scope().attr("NearFieldId") = (int)OSG::DepthChunkBase::NearFieldId;
        bp::scope().attr("FarFieldId") = (int)OSG::DepthChunkBase::FarFieldId;
        bp::scope().attr("ReadOnlyFieldId") = (int)OSG::DepthChunkBase::ReadOnlyFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::DepthChunkBase::NextFieldId;
        { //::OSG::DepthChunkBase::copyFromBin
        
            typedef void ( ::OSG::DepthChunkBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            DepthChunkBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::DepthChunkBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::DepthChunkBase::copyToBin
        
            typedef void ( ::OSG::DepthChunkBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            DepthChunkBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::DepthChunkBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::DepthChunkBase::create
        
            typedef ::OSG::DepthChunkTransitPtr ( *create_function_type )(  );
            
            DepthChunkBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::DepthChunkBase::create ) );
        
        }
        { //::OSG::DepthChunkBase::createDependent
        
            typedef ::OSG::DepthChunkTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            DepthChunkBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::DepthChunkBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::DepthChunkBase::createLocal
        
            typedef ::OSG::DepthChunkTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            DepthChunkBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::DepthChunkBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::DepthChunkBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::DepthChunkBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            DepthChunkBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::DepthChunkBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::DepthChunkBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            DepthChunkBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::DepthChunkBase::getClassGroupId ) );
        
        }
        { //::OSG::DepthChunkBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            DepthChunkBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::DepthChunkBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::DepthChunkBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            DepthChunkBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::DepthChunkBase::getClassTypeId ) );
        
        }
        { //::OSG::DepthChunkBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::DepthChunkBase::*getContainerSize_function_type )(  ) const;
            
            DepthChunkBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::DepthChunkBase::getContainerSize ) );
        
        }
        { //::OSG::DepthChunkBase::getEnable
        
            typedef bool ( ::OSG::DepthChunkBase::*getEnable_function_type )(  ) const;
            
            DepthChunkBase_exposer.def( 
                "getEnable"
                , getEnable_function_type( &::OSG::DepthChunkBase::getEnable ) );
        
        }
        { //::OSG::DepthChunkBase::getFar
        
            typedef ::OSG::Real32 ( ::OSG::DepthChunkBase::*getFar_function_type )(  ) const;
            
            DepthChunkBase_exposer.def( 
                "getFar"
                , getFar_function_type( &::OSG::DepthChunkBase::getFar ) );
        
        }
        { //::OSG::DepthChunkBase::getFunc
        
            typedef ::GLenum const & ( ::OSG::DepthChunkBase::*getFunc_function_type )(  ) const;
            
            DepthChunkBase_exposer.def( 
                "getFunc"
                , getFunc_function_type( &::OSG::DepthChunkBase::getFunc )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::DepthChunkBase::getNear
        
            typedef ::OSG::Real32 ( ::OSG::DepthChunkBase::*getNear_function_type )(  ) const;
            
            DepthChunkBase_exposer.def( 
                "getNear"
                , getNear_function_type( &::OSG::DepthChunkBase::getNear ) );
        
        }
        { //::OSG::DepthChunkBase::getReadOnly
        
            typedef bool ( ::OSG::DepthChunkBase::*getReadOnly_function_type )(  ) const;
            
            DepthChunkBase_exposer.def( 
                "getReadOnly"
                , getReadOnly_function_type( &::OSG::DepthChunkBase::getReadOnly ) );
        
        }
        { //::OSG::DepthChunkBase::getSFEnable
        
            typedef ::OSG::SFBool const * ( ::OSG::DepthChunkBase::*getSFEnable_function_type )(  ) const;
            
            DepthChunkBase_exposer.def( 
                "getSFEnable"
                , getSFEnable_function_type( &::OSG::DepthChunkBase::getSFEnable )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DepthChunkBase::getSFFar
        
            typedef ::OSG::SFReal32 const * ( ::OSG::DepthChunkBase::*getSFFar_function_type )(  ) const;
            
            DepthChunkBase_exposer.def( 
                "getSFFar"
                , getSFFar_function_type( &::OSG::DepthChunkBase::getSFFar )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DepthChunkBase::getSFFunc
        
            typedef ::OSG::SFGLenum const * ( ::OSG::DepthChunkBase::*getSFFunc_function_type )(  ) const;
            
            DepthChunkBase_exposer.def( 
                "getSFFunc"
                , getSFFunc_function_type( &::OSG::DepthChunkBase::getSFFunc )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DepthChunkBase::getSFNear
        
            typedef ::OSG::SFReal32 const * ( ::OSG::DepthChunkBase::*getSFNear_function_type )(  ) const;
            
            DepthChunkBase_exposer.def( 
                "getSFNear"
                , getSFNear_function_type( &::OSG::DepthChunkBase::getSFNear )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DepthChunkBase::getSFReadOnly
        
            typedef ::OSG::SFBool const * ( ::OSG::DepthChunkBase::*getSFReadOnly_function_type )(  ) const;
            
            DepthChunkBase_exposer.def( 
                "getSFReadOnly"
                , getSFReadOnly_function_type( &::OSG::DepthChunkBase::getSFReadOnly )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DepthChunkBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::DepthChunkBase::*getType_function_type )(  ) ;
            
            DepthChunkBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::DepthChunkBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DepthChunkBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::DepthChunkBase::*getType_function_type )(  ) const;
            
            DepthChunkBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::DepthChunkBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DepthChunkBase::setEnable
        
            typedef void ( ::OSG::DepthChunkBase::*setEnable_function_type )( bool const ) ;
            
            DepthChunkBase_exposer.def( 
                "setEnable"
                , setEnable_function_type( &::OSG::DepthChunkBase::setEnable )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DepthChunkBase::setFar
        
            typedef void ( ::OSG::DepthChunkBase::*setFar_function_type )( ::OSG::Real32 const ) ;
            
            DepthChunkBase_exposer.def( 
                "setFar"
                , setFar_function_type( &::OSG::DepthChunkBase::setFar )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DepthChunkBase::setFunc
        
            typedef void ( ::OSG::DepthChunkBase::*setFunc_function_type )( ::GLenum const & ) ;
            
            DepthChunkBase_exposer.def( 
                "setFunc"
                , setFunc_function_type( &::OSG::DepthChunkBase::setFunc )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DepthChunkBase::setNear
        
            typedef void ( ::OSG::DepthChunkBase::*setNear_function_type )( ::OSG::Real32 const ) ;
            
            DepthChunkBase_exposer.def( 
                "setNear"
                , setNear_function_type( &::OSG::DepthChunkBase::setNear )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DepthChunkBase::setReadOnly
        
            typedef void ( ::OSG::DepthChunkBase::*setReadOnly_function_type )( bool const ) ;
            
            DepthChunkBase_exposer.def( 
                "setReadOnly"
                , setReadOnly_function_type( &::OSG::DepthChunkBase::setReadOnly )
                , ( bp::arg("value") ) );
        
        }
        DepthChunkBase_exposer.staticmethod( "create" );
        DepthChunkBase_exposer.staticmethod( "createDependent" );
        DepthChunkBase_exposer.staticmethod( "createLocal" );
        DepthChunkBase_exposer.staticmethod( "getClassGroupId" );
        DepthChunkBase_exposer.staticmethod( "getClassType" );
        DepthChunkBase_exposer.staticmethod( "getClassTypeId" );
    }

}
