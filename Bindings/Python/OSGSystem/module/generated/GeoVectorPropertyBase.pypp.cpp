// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "GeoVectorPropertyBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct GeoVectorPropertyBase_wrapper : OSG::GeoVectorPropertyBase, bp::wrapper< OSG::GeoVectorPropertyBase > {

    ::GLenum getBufferType(  ){
        return OSG::GeoProperty::getBufferType(  );
    }

};

void register_GeoVectorPropertyBase_class(){

    { //::OSG::GeoVectorPropertyBase
        typedef bp::class_< GeoVectorPropertyBase_wrapper, bp::bases< OSG::GeoProperty >, boost::noncopyable > GeoVectorPropertyBase_exposer_t;
        GeoVectorPropertyBase_exposer_t GeoVectorPropertyBase_exposer = GeoVectorPropertyBase_exposer_t( "GeoVectorPropertyBase", bp::no_init );
        bp::scope GeoVectorPropertyBase_scope( GeoVectorPropertyBase_exposer );
        bp::scope().attr("DivisorFieldId") = (int)OSG::GeoVectorPropertyBase::DivisorFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::GeoVectorPropertyBase::NextFieldId;
        { //::OSG::GeoVectorPropertyBase::copyFromBin
        
            typedef void ( ::OSG::GeoVectorPropertyBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            GeoVectorPropertyBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::GeoVectorPropertyBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::GeoVectorPropertyBase::copyToBin
        
            typedef void ( ::OSG::GeoVectorPropertyBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            GeoVectorPropertyBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::GeoVectorPropertyBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::GeoVectorPropertyBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::GeoVectorPropertyBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            GeoVectorPropertyBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::GeoVectorPropertyBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::GeoVectorPropertyBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            GeoVectorPropertyBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::GeoVectorPropertyBase::getClassGroupId ) );
        
        }
        { //::OSG::GeoVectorPropertyBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            GeoVectorPropertyBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::GeoVectorPropertyBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::GeoVectorPropertyBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            GeoVectorPropertyBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::GeoVectorPropertyBase::getClassTypeId ) );
        
        }
        { //::OSG::GeoVectorPropertyBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::GeoVectorPropertyBase::*getContainerSize_function_type )(  ) const;
            
            GeoVectorPropertyBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::GeoVectorPropertyBase::getContainerSize ) );
        
        }
        { //::OSG::GeoVectorPropertyBase::getDivisor
        
            typedef ::OSG::UInt32 ( ::OSG::GeoVectorPropertyBase::*getDivisor_function_type )(  ) const;
            
            GeoVectorPropertyBase_exposer.def( 
                "getDivisor"
                , getDivisor_function_type( &::OSG::GeoVectorPropertyBase::getDivisor ) );
        
        }
        { //::OSG::GeoVectorPropertyBase::getSFDivisor
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::GeoVectorPropertyBase::*getSFDivisor_function_type )(  ) const;
            
            GeoVectorPropertyBase_exposer.def( 
                "getSFDivisor"
                , getSFDivisor_function_type( &::OSG::GeoVectorPropertyBase::getSFDivisor )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::GeoVectorPropertyBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::GeoVectorPropertyBase::*getType_function_type )(  ) ;
            
            GeoVectorPropertyBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::GeoVectorPropertyBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::GeoVectorPropertyBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::GeoVectorPropertyBase::*getType_function_type )(  ) const;
            
            GeoVectorPropertyBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::GeoVectorPropertyBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::GeoVectorPropertyBase::setDivisor
        
            typedef void ( ::OSG::GeoVectorPropertyBase::*setDivisor_function_type )( ::OSG::UInt32 const ) ;
            
            GeoVectorPropertyBase_exposer.def( 
                "setDivisor"
                , setDivisor_function_type( &::OSG::GeoVectorPropertyBase::setDivisor )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::GeoProperty::clone
        
            typedef ::OSG::GeoPropertyTransitPtr ( ::OSG::GeoProperty::*clone_function_type )(  ) ;
            
            GeoVectorPropertyBase_exposer.def( 
                "clone"
                , clone_function_type( &::OSG::GeoProperty::clone ) );
        
        }
        { //::OSG::GeoProperty::getBufferType
        
            typedef ::GLenum ( GeoVectorPropertyBase_wrapper::*getBufferType_function_type )(  ) ;
            
            GeoVectorPropertyBase_exposer.def( 
                "getBufferType"
                , getBufferType_function_type( &GeoVectorPropertyBase_wrapper::getBufferType ) );
        
        }
        { //::OSG::GeoProperty::getDimension
        
            typedef ::OSG::UInt32 ( ::OSG::GeoProperty::*getDimension_function_type )(  ) const;
            
            GeoVectorPropertyBase_exposer.def( 
                "getDimension"
                , getDimension_function_type( &::OSG::GeoProperty::getDimension ) );
        
        }
        { //::OSG::GeoProperty::getFormat
        
            typedef ::OSG::UInt32 ( ::OSG::GeoProperty::*getFormat_function_type )(  ) const;
            
            GeoVectorPropertyBase_exposer.def( 
                "getFormat"
                , getFormat_function_type( &::OSG::GeoProperty::getFormat ) );
        
        }
        { //::OSG::GeoProperty::getFormatSize
        
            typedef ::OSG::UInt32 ( ::OSG::GeoProperty::*getFormatSize_function_type )(  ) const;
            
            GeoVectorPropertyBase_exposer.def( 
                "getFormatSize"
                , getFormatSize_function_type( &::OSG::GeoProperty::getFormatSize ) );
        
        }
        { //::OSG::GeoProperty::getStride
        
            typedef ::OSG::UInt32 ( ::OSG::GeoProperty::*getStride_function_type )(  ) const;
            
            GeoVectorPropertyBase_exposer.def( 
                "getStride"
                , getStride_function_type( &::OSG::GeoProperty::getStride ) );
        
        }
        { //::OSG::GeoProperty::getVectorType
        
            typedef ::OSG::UInt32 ( ::OSG::GeoProperty::*getVectorType_function_type )(  ) const;
            
            GeoVectorPropertyBase_exposer.def( 
                "getVectorType"
                , getVectorType_function_type( &::OSG::GeoProperty::getVectorType ) );
        
        }
        { //::OSG::GeoProperty::size
        
            typedef ::OSG::SizeT ( ::OSG::GeoProperty::*size_function_type )(  ) const;
            
            GeoVectorPropertyBase_exposer.def( 
                "size"
                , size_function_type( &::OSG::GeoProperty::size ) );
        
        }
        { //::OSG::GeoProperty::size32
        
            typedef ::OSG::UInt32 ( ::OSG::GeoProperty::*size32_function_type )(  ) const;
            
            GeoVectorPropertyBase_exposer.def( 
                "size32"
                , size32_function_type( &::OSG::GeoProperty::size32 ) );
        
        }
        GeoVectorPropertyBase_exposer.staticmethod( "getClassGroupId" );
        GeoVectorPropertyBase_exposer.staticmethod( "getClassType" );
        GeoVectorPropertyBase_exposer.staticmethod( "getClassTypeId" );
    }

}
