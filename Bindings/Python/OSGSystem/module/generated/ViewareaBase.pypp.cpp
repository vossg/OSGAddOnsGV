// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "ViewareaBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_ViewareaBase_class(){

    { //::OSG::ViewareaBase
        typedef bp::class_< OSG::ViewareaBase, bp::bases< ::OSG::AttachmentContainer >, boost::noncopyable > ViewareaBase_exposer_t;
        ViewareaBase_exposer_t ViewareaBase_exposer = ViewareaBase_exposer_t( "ViewareaBase", bp::no_init );
        bp::scope ViewareaBase_scope( ViewareaBase_exposer );
        bp::scope().attr("LeftFieldId") = (int)OSG::ViewareaBase::LeftFieldId;
        bp::scope().attr("RightFieldId") = (int)OSG::ViewareaBase::RightFieldId;
        bp::scope().attr("BottomFieldId") = (int)OSG::ViewareaBase::BottomFieldId;
        bp::scope().attr("TopFieldId") = (int)OSG::ViewareaBase::TopFieldId;
        bp::scope().attr("TravMaskFieldId") = (int)OSG::ViewareaBase::TravMaskFieldId;
        bp::scope().attr("EnabledFieldId") = (int)OSG::ViewareaBase::EnabledFieldId;
        bp::scope().attr("DrawTimeFieldId") = (int)OSG::ViewareaBase::DrawTimeFieldId;
        bp::scope().attr("DrawableIdFieldId") = (int)OSG::ViewareaBase::DrawableIdFieldId;
        bp::scope().attr("RenderOptionsFieldId") = (int)OSG::ViewareaBase::RenderOptionsFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::ViewareaBase::NextFieldId;
        { //::OSG::ViewareaBase::copyFromBin
        
            typedef void ( ::OSG::ViewareaBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            ViewareaBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::ViewareaBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::ViewareaBase::copyToBin
        
            typedef void ( ::OSG::ViewareaBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            ViewareaBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::ViewareaBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::ViewareaBase::create
        
            typedef ::OSG::ViewareaTransitPtr ( *create_function_type )(  );
            
            ViewareaBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::ViewareaBase::create ) );
        
        }
        { //::OSG::ViewareaBase::createDependent
        
            typedef ::OSG::ViewareaTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            ViewareaBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::ViewareaBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::ViewareaBase::createLocal
        
            typedef ::OSG::ViewareaTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            ViewareaBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::ViewareaBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::ViewareaBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::ViewareaBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            ViewareaBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::ViewareaBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::ViewareaBase::getBottom
        
            typedef ::OSG::Real32 ( ::OSG::ViewareaBase::*getBottom_function_type )(  ) const;
            
            ViewareaBase_exposer.def( 
                "getBottom"
                , getBottom_function_type( &::OSG::ViewareaBase::getBottom ) );
        
        }
        { //::OSG::ViewareaBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            ViewareaBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::ViewareaBase::getClassGroupId ) );
        
        }
        { //::OSG::ViewareaBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            ViewareaBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::ViewareaBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::ViewareaBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            ViewareaBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::ViewareaBase::getClassTypeId ) );
        
        }
        { //::OSG::ViewareaBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::ViewareaBase::*getContainerSize_function_type )(  ) const;
            
            ViewareaBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::ViewareaBase::getContainerSize ) );
        
        }
        { //::OSG::ViewareaBase::getDrawTime
        
            typedef ::OSG::Real32 ( ::OSG::ViewareaBase::*getDrawTime_function_type )(  ) const;
            
            ViewareaBase_exposer.def( 
                "getDrawTime"
                , getDrawTime_function_type( &::OSG::ViewareaBase::getDrawTime ) );
        
        }
        { //::OSG::ViewareaBase::getDrawableId
        
            typedef ::OSG::Int32 ( ::OSG::ViewareaBase::*getDrawableId_function_type )(  ) const;
            
            ViewareaBase_exposer.def( 
                "getDrawableId"
                , getDrawableId_function_type( &::OSG::ViewareaBase::getDrawableId ) );
        
        }
        { //::OSG::ViewareaBase::getEnabled
        
            typedef bool ( ::OSG::ViewareaBase::*getEnabled_function_type )(  ) const;
            
            ViewareaBase_exposer.def( 
                "getEnabled"
                , getEnabled_function_type( &::OSG::ViewareaBase::getEnabled ) );
        
        }
        { //::OSG::ViewareaBase::getLeft
        
            typedef ::OSG::Real32 ( ::OSG::ViewareaBase::*getLeft_function_type )(  ) const;
            
            ViewareaBase_exposer.def( 
                "getLeft"
                , getLeft_function_type( &::OSG::ViewareaBase::getLeft ) );
        
        }
        { //::OSG::ViewareaBase::getRenderOptions
        
            typedef ::OSG::RenderOptions * ( ::OSG::ViewareaBase::*getRenderOptions_function_type )(  ) const;
            
            ViewareaBase_exposer.def( 
                "getRenderOptions"
                , getRenderOptions_function_type( &::OSG::ViewareaBase::getRenderOptions )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ViewareaBase::getRight
        
            typedef ::OSG::Real32 ( ::OSG::ViewareaBase::*getRight_function_type )(  ) const;
            
            ViewareaBase_exposer.def( 
                "getRight"
                , getRight_function_type( &::OSG::ViewareaBase::getRight ) );
        
        }
        { //::OSG::ViewareaBase::getSFBottom
        
            typedef ::OSG::SFReal32 const * ( ::OSG::ViewareaBase::*getSFBottom_function_type )(  ) const;
            
            ViewareaBase_exposer.def( 
                "getSFBottom"
                , getSFBottom_function_type( &::OSG::ViewareaBase::getSFBottom )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ViewareaBase::getSFDrawTime
        
            typedef ::OSG::SFReal32 const * ( ::OSG::ViewareaBase::*getSFDrawTime_function_type )(  ) const;
            
            ViewareaBase_exposer.def( 
                "getSFDrawTime"
                , getSFDrawTime_function_type( &::OSG::ViewareaBase::getSFDrawTime )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ViewareaBase::getSFDrawableId
        
            typedef ::OSG::SFInt32 const * ( ::OSG::ViewareaBase::*getSFDrawableId_function_type )(  ) const;
            
            ViewareaBase_exposer.def( 
                "getSFDrawableId"
                , getSFDrawableId_function_type( &::OSG::ViewareaBase::getSFDrawableId )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ViewareaBase::getSFEnabled
        
            typedef ::OSG::SFBool const * ( ::OSG::ViewareaBase::*getSFEnabled_function_type )(  ) const;
            
            ViewareaBase_exposer.def( 
                "getSFEnabled"
                , getSFEnabled_function_type( &::OSG::ViewareaBase::getSFEnabled )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ViewareaBase::getSFLeft
        
            typedef ::OSG::SFReal32 const * ( ::OSG::ViewareaBase::*getSFLeft_function_type )(  ) const;
            
            ViewareaBase_exposer.def( 
                "getSFLeft"
                , getSFLeft_function_type( &::OSG::ViewareaBase::getSFLeft )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ViewareaBase::getSFRenderOptions
        
            typedef ::OSG::SFUnrecRenderOptionsPtr const * ( ::OSG::ViewareaBase::*getSFRenderOptions_function_type )(  ) const;
            
            ViewareaBase_exposer.def( 
                "getSFRenderOptions"
                , getSFRenderOptions_function_type( &::OSG::ViewareaBase::getSFRenderOptions )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ViewareaBase::getSFRight
        
            typedef ::OSG::SFReal32 const * ( ::OSG::ViewareaBase::*getSFRight_function_type )(  ) const;
            
            ViewareaBase_exposer.def( 
                "getSFRight"
                , getSFRight_function_type( &::OSG::ViewareaBase::getSFRight )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ViewareaBase::getSFTop
        
            typedef ::OSG::SFReal32 const * ( ::OSG::ViewareaBase::*getSFTop_function_type )(  ) const;
            
            ViewareaBase_exposer.def( 
                "getSFTop"
                , getSFTop_function_type( &::OSG::ViewareaBase::getSFTop )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ViewareaBase::getSFTravMask
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::ViewareaBase::*getSFTravMask_function_type )(  ) const;
            
            ViewareaBase_exposer.def( 
                "getSFTravMask"
                , getSFTravMask_function_type( &::OSG::ViewareaBase::getSFTravMask )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ViewareaBase::getTop
        
            typedef ::OSG::Real32 ( ::OSG::ViewareaBase::*getTop_function_type )(  ) const;
            
            ViewareaBase_exposer.def( 
                "getTop"
                , getTop_function_type( &::OSG::ViewareaBase::getTop ) );
        
        }
        { //::OSG::ViewareaBase::getTravMask
        
            typedef ::OSG::UInt32 ( ::OSG::ViewareaBase::*getTravMask_function_type )(  ) const;
            
            ViewareaBase_exposer.def( 
                "getTravMask"
                , getTravMask_function_type( &::OSG::ViewareaBase::getTravMask ) );
        
        }
        { //::OSG::ViewareaBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::ViewareaBase::*getType_function_type )(  ) ;
            
            ViewareaBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::ViewareaBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ViewareaBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::ViewareaBase::*getType_function_type )(  ) const;
            
            ViewareaBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::ViewareaBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ViewareaBase::setBottom
        
            typedef void ( ::OSG::ViewareaBase::*setBottom_function_type )( ::OSG::Real32 const ) ;
            
            ViewareaBase_exposer.def( 
                "setBottom"
                , setBottom_function_type( &::OSG::ViewareaBase::setBottom )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ViewareaBase::setDrawTime
        
            typedef void ( ::OSG::ViewareaBase::*setDrawTime_function_type )( ::OSG::Real32 const ) ;
            
            ViewareaBase_exposer.def( 
                "setDrawTime"
                , setDrawTime_function_type( &::OSG::ViewareaBase::setDrawTime )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ViewareaBase::setDrawableId
        
            typedef void ( ::OSG::ViewareaBase::*setDrawableId_function_type )( ::OSG::Int32 const ) ;
            
            ViewareaBase_exposer.def( 
                "setDrawableId"
                , setDrawableId_function_type( &::OSG::ViewareaBase::setDrawableId )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ViewareaBase::setEnabled
        
            typedef void ( ::OSG::ViewareaBase::*setEnabled_function_type )( bool const ) ;
            
            ViewareaBase_exposer.def( 
                "setEnabled"
                , setEnabled_function_type( &::OSG::ViewareaBase::setEnabled )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ViewareaBase::setLeft
        
            typedef void ( ::OSG::ViewareaBase::*setLeft_function_type )( ::OSG::Real32 const ) ;
            
            ViewareaBase_exposer.def( 
                "setLeft"
                , setLeft_function_type( &::OSG::ViewareaBase::setLeft )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ViewareaBase::setRenderOptions
        
            typedef void ( ::OSG::ViewareaBase::*setRenderOptions_function_type )( ::OSG::RenderOptions * const ) ;
            
            ViewareaBase_exposer.def( 
                "setRenderOptions"
                , setRenderOptions_function_type( &::OSG::ViewareaBase::setRenderOptions )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ViewareaBase::setRight
        
            typedef void ( ::OSG::ViewareaBase::*setRight_function_type )( ::OSG::Real32 const ) ;
            
            ViewareaBase_exposer.def( 
                "setRight"
                , setRight_function_type( &::OSG::ViewareaBase::setRight )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ViewareaBase::setTop
        
            typedef void ( ::OSG::ViewareaBase::*setTop_function_type )( ::OSG::Real32 const ) ;
            
            ViewareaBase_exposer.def( 
                "setTop"
                , setTop_function_type( &::OSG::ViewareaBase::setTop )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ViewareaBase::setTravMask
        
            typedef void ( ::OSG::ViewareaBase::*setTravMask_function_type )( ::OSG::UInt32 const ) ;
            
            ViewareaBase_exposer.def( 
                "setTravMask"
                , setTravMask_function_type( &::OSG::ViewareaBase::setTravMask )
                , ( bp::arg("value") ) );
        
        }
        ViewareaBase_exposer.staticmethod( "create" );
        ViewareaBase_exposer.staticmethod( "createDependent" );
        ViewareaBase_exposer.staticmethod( "createLocal" );
        ViewareaBase_exposer.staticmethod( "getClassGroupId" );
        ViewareaBase_exposer.staticmethod( "getClassType" );
        ViewareaBase_exposer.staticmethod( "getClassTypeId" );
    }

}
