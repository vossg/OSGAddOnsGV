// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "BackgroundBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_BackgroundBase_class(){

    { //::OSG::BackgroundBase
        typedef bp::class_< OSG::BackgroundBase, bp::bases< ::OSG::AttachmentContainer >, boost::noncopyable > BackgroundBase_exposer_t;
        BackgroundBase_exposer_t BackgroundBase_exposer = BackgroundBase_exposer_t( "BackgroundBase", bp::no_init );
        bp::scope BackgroundBase_scope( BackgroundBase_exposer );
        bp::scope().attr("ClearStencilBitFieldId") = (int)OSG::BackgroundBase::ClearStencilBitFieldId;
        bp::scope().attr("DepthFieldId") = (int)OSG::BackgroundBase::DepthFieldId;
        bp::scope().attr("ClearDepthFieldId") = (int)OSG::BackgroundBase::ClearDepthFieldId;
        bp::scope().attr("ClearColorFieldId") = (int)OSG::BackgroundBase::ClearColorFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::BackgroundBase::NextFieldId;
        { //::OSG::BackgroundBase::copyFromBin
        
            typedef void ( ::OSG::BackgroundBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            BackgroundBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::BackgroundBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::BackgroundBase::copyToBin
        
            typedef void ( ::OSG::BackgroundBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            BackgroundBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::BackgroundBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::BackgroundBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::BackgroundBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            BackgroundBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::BackgroundBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::BackgroundBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            BackgroundBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::BackgroundBase::getClassGroupId ) );
        
        }
        { //::OSG::BackgroundBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            BackgroundBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::BackgroundBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::BackgroundBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            BackgroundBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::BackgroundBase::getClassTypeId ) );
        
        }
        { //::OSG::BackgroundBase::getClearColor
        
            typedef bool ( ::OSG::BackgroundBase::*getClearColor_function_type )(  ) const;
            
            BackgroundBase_exposer.def( 
                "getClearColor"
                , getClearColor_function_type( &::OSG::BackgroundBase::getClearColor ) );
        
        }
        { //::OSG::BackgroundBase::getClearDepth
        
            typedef bool ( ::OSG::BackgroundBase::*getClearDepth_function_type )(  ) const;
            
            BackgroundBase_exposer.def( 
                "getClearDepth"
                , getClearDepth_function_type( &::OSG::BackgroundBase::getClearDepth ) );
        
        }
        { //::OSG::BackgroundBase::getClearStencilBit
        
            typedef ::OSG::Int32 ( ::OSG::BackgroundBase::*getClearStencilBit_function_type )(  ) const;
            
            BackgroundBase_exposer.def( 
                "getClearStencilBit"
                , getClearStencilBit_function_type( &::OSG::BackgroundBase::getClearStencilBit ) );
        
        }
        { //::OSG::BackgroundBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::BackgroundBase::*getContainerSize_function_type )(  ) const;
            
            BackgroundBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::BackgroundBase::getContainerSize ) );
        
        }
        { //::OSG::BackgroundBase::getDepth
        
            typedef ::OSG::Real32 ( ::OSG::BackgroundBase::*getDepth_function_type )(  ) const;
            
            BackgroundBase_exposer.def( 
                "getDepth"
                , getDepth_function_type( &::OSG::BackgroundBase::getDepth ) );
        
        }
        { //::OSG::BackgroundBase::getSFClearColor
        
            typedef ::OSG::SFBool const * ( ::OSG::BackgroundBase::*getSFClearColor_function_type )(  ) const;
            
            BackgroundBase_exposer.def( 
                "getSFClearColor"
                , getSFClearColor_function_type( &::OSG::BackgroundBase::getSFClearColor )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::BackgroundBase::getSFClearDepth
        
            typedef ::OSG::SFBool const * ( ::OSG::BackgroundBase::*getSFClearDepth_function_type )(  ) const;
            
            BackgroundBase_exposer.def( 
                "getSFClearDepth"
                , getSFClearDepth_function_type( &::OSG::BackgroundBase::getSFClearDepth )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::BackgroundBase::getSFClearStencilBit
        
            typedef ::OSG::SFInt32 const * ( ::OSG::BackgroundBase::*getSFClearStencilBit_function_type )(  ) const;
            
            BackgroundBase_exposer.def( 
                "getSFClearStencilBit"
                , getSFClearStencilBit_function_type( &::OSG::BackgroundBase::getSFClearStencilBit )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::BackgroundBase::getSFDepth
        
            typedef ::OSG::SFReal32 const * ( ::OSG::BackgroundBase::*getSFDepth_function_type )(  ) const;
            
            BackgroundBase_exposer.def( 
                "getSFDepth"
                , getSFDepth_function_type( &::OSG::BackgroundBase::getSFDepth )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::BackgroundBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::BackgroundBase::*getType_function_type )(  ) ;
            
            BackgroundBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::BackgroundBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::BackgroundBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::BackgroundBase::*getType_function_type )(  ) const;
            
            BackgroundBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::BackgroundBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::BackgroundBase::setClearColor
        
            typedef void ( ::OSG::BackgroundBase::*setClearColor_function_type )( bool const ) ;
            
            BackgroundBase_exposer.def( 
                "setClearColor"
                , setClearColor_function_type( &::OSG::BackgroundBase::setClearColor )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::BackgroundBase::setClearDepth
        
            typedef void ( ::OSG::BackgroundBase::*setClearDepth_function_type )( bool const ) ;
            
            BackgroundBase_exposer.def( 
                "setClearDepth"
                , setClearDepth_function_type( &::OSG::BackgroundBase::setClearDepth )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::BackgroundBase::setClearStencilBit
        
            typedef void ( ::OSG::BackgroundBase::*setClearStencilBit_function_type )( ::OSG::Int32 const ) ;
            
            BackgroundBase_exposer.def( 
                "setClearStencilBit"
                , setClearStencilBit_function_type( &::OSG::BackgroundBase::setClearStencilBit )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::BackgroundBase::setDepth
        
            typedef void ( ::OSG::BackgroundBase::*setDepth_function_type )( ::OSG::Real32 const ) ;
            
            BackgroundBase_exposer.def( 
                "setDepth"
                , setDepth_function_type( &::OSG::BackgroundBase::setDepth )
                , ( bp::arg("value") ) );
        
        }
        BackgroundBase_exposer.staticmethod( "getClassGroupId" );
        BackgroundBase_exposer.staticmethod( "getClassType" );
        BackgroundBase_exposer.staticmethod( "getClassTypeId" );
    }

}
