// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "ImageBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

boost::python::list ImageBase_getMFPixel(OSG::ImageBase *self)
{
   boost::python::list result;
   OSG::MFUInt8 const * mf_data = self->getMFPixel();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

void register_ImageBase_class(){

    { //::OSG::ImageBase
        typedef bp::class_< OSG::ImageBase, bp::bases< ::OSG::AttachmentContainer >, boost::noncopyable > ImageBase_exposer_t;
        ImageBase_exposer_t ImageBase_exposer = ImageBase_exposer_t( "ImageBase", bp::no_init );
        bp::scope ImageBase_scope( ImageBase_exposer );
        bp::scope().attr("ParentsFieldId") = (int)OSG::ImageBase::ParentsFieldId;
        bp::scope().attr("DimensionFieldId") = (int)OSG::ImageBase::DimensionFieldId;
        bp::scope().attr("WidthFieldId") = (int)OSG::ImageBase::WidthFieldId;
        bp::scope().attr("HeightFieldId") = (int)OSG::ImageBase::HeightFieldId;
        bp::scope().attr("DepthFieldId") = (int)OSG::ImageBase::DepthFieldId;
        bp::scope().attr("BppFieldId") = (int)OSG::ImageBase::BppFieldId;
        bp::scope().attr("MipMapCountFieldId") = (int)OSG::ImageBase::MipMapCountFieldId;
        bp::scope().attr("FrameCountFieldId") = (int)OSG::ImageBase::FrameCountFieldId;
        bp::scope().attr("FrameDelayFieldId") = (int)OSG::ImageBase::FrameDelayFieldId;
        bp::scope().attr("PixelFormatFieldId") = (int)OSG::ImageBase::PixelFormatFieldId;
        bp::scope().attr("PixelFieldId") = (int)OSG::ImageBase::PixelFieldId;
        bp::scope().attr("FrameSizeFieldId") = (int)OSG::ImageBase::FrameSizeFieldId;
        bp::scope().attr("NameFieldId") = (int)OSG::ImageBase::NameFieldId;
        bp::scope().attr("DataTypeFieldId") = (int)OSG::ImageBase::DataTypeFieldId;
        bp::scope().attr("ComponentSizeFieldId") = (int)OSG::ImageBase::ComponentSizeFieldId;
        bp::scope().attr("SideCountFieldId") = (int)OSG::ImageBase::SideCountFieldId;
        bp::scope().attr("SideSizeFieldId") = (int)OSG::ImageBase::SideSizeFieldId;
        bp::scope().attr("ForceCompressedDataFieldId") = (int)OSG::ImageBase::ForceCompressedDataFieldId;
        bp::scope().attr("ForceAlphaChannelFieldId") = (int)OSG::ImageBase::ForceAlphaChannelFieldId;
        bp::scope().attr("ForceColorChannelFieldId") = (int)OSG::ImageBase::ForceColorChannelFieldId;
        bp::scope().attr("ForceAlphaBinaryFieldId") = (int)OSG::ImageBase::ForceAlphaBinaryFieldId;
        bp::scope().attr("ResXFieldId") = (int)OSG::ImageBase::ResXFieldId;
        bp::scope().attr("ResYFieldId") = (int)OSG::ImageBase::ResYFieldId;
        bp::scope().attr("ResUnitFieldId") = (int)OSG::ImageBase::ResUnitFieldId;
        bp::scope().attr("ClearOnLoadFieldId") = (int)OSG::ImageBase::ClearOnLoadFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::ImageBase::NextFieldId;
        { //::OSG::ImageBase::copyFromBin
        
            typedef void ( ::OSG::ImageBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            ImageBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::ImageBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::ImageBase::copyToBin
        
            typedef void ( ::OSG::ImageBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            ImageBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::ImageBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::ImageBase::create
        
            typedef ::OSG::ImageTransitPtr ( *create_function_type )(  );
            
            ImageBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::ImageBase::create ) );
        
        }
        { //::OSG::ImageBase::createDependent
        
            typedef ::OSG::ImageTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            ImageBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::ImageBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::ImageBase::createLocal
        
            typedef ::OSG::ImageTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            ImageBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::ImageBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::ImageBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::ImageBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            ImageBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::ImageBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::ImageBase::getBpp
        
            typedef ::OSG::Int32 ( ::OSG::ImageBase::*getBpp_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getBpp"
                , getBpp_function_type( &::OSG::ImageBase::getBpp ) );
        
        }
        { //::OSG::ImageBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            ImageBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::ImageBase::getClassGroupId ) );
        
        }
        { //::OSG::ImageBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            ImageBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::ImageBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::ImageBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            ImageBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::ImageBase::getClassTypeId ) );
        
        }
        { //::OSG::ImageBase::getClearOnLoad
        
            typedef bool ( ::OSG::ImageBase::*getClearOnLoad_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getClearOnLoad"
                , getClearOnLoad_function_type( &::OSG::ImageBase::getClearOnLoad ) );
        
        }
        { //::OSG::ImageBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::ImageBase::*getContainerSize_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::ImageBase::getContainerSize ) );
        
        }
        { //::OSG::ImageBase::getDataType
        
            typedef ::OSG::Int32 ( ::OSG::ImageBase::*getDataType_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getDataType"
                , getDataType_function_type( &::OSG::ImageBase::getDataType ) );
        
        }
        { //::OSG::ImageBase::getDepth
        
            typedef ::OSG::Int32 ( ::OSG::ImageBase::*getDepth_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getDepth"
                , getDepth_function_type( &::OSG::ImageBase::getDepth ) );
        
        }
        { //::OSG::ImageBase::getDimension
        
            typedef ::OSG::Int32 ( ::OSG::ImageBase::*getDimension_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getDimension"
                , getDimension_function_type( &::OSG::ImageBase::getDimension ) );
        
        }
        { //::OSG::ImageBase::getForceAlphaBinary
        
            typedef bool ( ::OSG::ImageBase::*getForceAlphaBinary_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getForceAlphaBinary"
                , getForceAlphaBinary_function_type( &::OSG::ImageBase::getForceAlphaBinary ) );
        
        }
        { //::OSG::ImageBase::getForceAlphaChannel
        
            typedef bool ( ::OSG::ImageBase::*getForceAlphaChannel_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getForceAlphaChannel"
                , getForceAlphaChannel_function_type( &::OSG::ImageBase::getForceAlphaChannel ) );
        
        }
        { //::OSG::ImageBase::getForceColorChannel
        
            typedef bool ( ::OSG::ImageBase::*getForceColorChannel_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getForceColorChannel"
                , getForceColorChannel_function_type( &::OSG::ImageBase::getForceColorChannel ) );
        
        }
        { //::OSG::ImageBase::getForceCompressedData
        
            typedef bool ( ::OSG::ImageBase::*getForceCompressedData_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getForceCompressedData"
                , getForceCompressedData_function_type( &::OSG::ImageBase::getForceCompressedData ) );
        
        }
        { //::OSG::ImageBase::getFrameCount
        
            typedef ::OSG::Int32 ( ::OSG::ImageBase::*getFrameCount_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getFrameCount"
                , getFrameCount_function_type( &::OSG::ImageBase::getFrameCount ) );
        
        }
        { //::OSG::ImageBase::getFrameDelay
        
            typedef ::OSG::Time const & ( ::OSG::ImageBase::*getFrameDelay_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getFrameDelay"
                , getFrameDelay_function_type( &::OSG::ImageBase::getFrameDelay )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::ImageBase::getFrameSize
        
            typedef ::OSG::Int32 ( ::OSG::ImageBase::*getFrameSize_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getFrameSize"
                , getFrameSize_function_type( &::OSG::ImageBase::getFrameSize ) );
        
        }
        { //::OSG::ImageBase::getHeight
        
            typedef ::OSG::Int32 ( ::OSG::ImageBase::*getHeight_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getHeight"
                , getHeight_function_type( &::OSG::ImageBase::getHeight ) );
        
        }
        { //::OSG::ImageBase::getMipMapCount
        
            typedef ::OSG::Int32 ( ::OSG::ImageBase::*getMipMapCount_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getMipMapCount"
                , getMipMapCount_function_type( &::OSG::ImageBase::getMipMapCount ) );
        
        }
        { //::OSG::ImageBase::getName
        
            typedef ::std::string const & ( ::OSG::ImageBase::*getName_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getName"
                , getName_function_type( &::OSG::ImageBase::getName )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::ImageBase::getPixel
        
            typedef ::OSG::UInt8 ( ::OSG::ImageBase::*getPixel_function_type )( ::OSG::UInt32 const ) const;
            
            ImageBase_exposer.def( 
                "getPixel"
                , getPixel_function_type( &::OSG::ImageBase::getPixel )
                , ( bp::arg("index") ) );
        
        }
        { //::OSG::ImageBase::getPixelFormat
        
            typedef ::OSG::UInt32 ( ::OSG::ImageBase::*getPixelFormat_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getPixelFormat"
                , getPixelFormat_function_type( &::OSG::ImageBase::getPixelFormat ) );
        
        }
        { //::OSG::ImageBase::getResUnit
        
            typedef ::OSG::UInt16 ( ::OSG::ImageBase::*getResUnit_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getResUnit"
                , getResUnit_function_type( &::OSG::ImageBase::getResUnit ) );
        
        }
        { //::OSG::ImageBase::getResX
        
            typedef ::OSG::Real32 ( ::OSG::ImageBase::*getResX_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getResX"
                , getResX_function_type( &::OSG::ImageBase::getResX ) );
        
        }
        { //::OSG::ImageBase::getResY
        
            typedef ::OSG::Real32 ( ::OSG::ImageBase::*getResY_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getResY"
                , getResY_function_type( &::OSG::ImageBase::getResY ) );
        
        }
        { //::OSG::ImageBase::getSFBpp
        
            typedef ::OSG::SFInt32 const * ( ::OSG::ImageBase::*getSFBpp_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getSFBpp"
                , getSFBpp_function_type( &::OSG::ImageBase::getSFBpp )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ImageBase::getSFClearOnLoad
        
            typedef ::OSG::SFBool const * ( ::OSG::ImageBase::*getSFClearOnLoad_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getSFClearOnLoad"
                , getSFClearOnLoad_function_type( &::OSG::ImageBase::getSFClearOnLoad )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ImageBase::getSFDataType
        
            typedef ::OSG::SFInt32 const * ( ::OSG::ImageBase::*getSFDataType_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getSFDataType"
                , getSFDataType_function_type( &::OSG::ImageBase::getSFDataType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ImageBase::getSFDepth
        
            typedef ::OSG::SFInt32 const * ( ::OSG::ImageBase::*getSFDepth_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getSFDepth"
                , getSFDepth_function_type( &::OSG::ImageBase::getSFDepth )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ImageBase::getSFDimension
        
            typedef ::OSG::SFInt32 const * ( ::OSG::ImageBase::*getSFDimension_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getSFDimension"
                , getSFDimension_function_type( &::OSG::ImageBase::getSFDimension )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ImageBase::getSFForceAlphaBinary
        
            typedef ::OSG::SFBool const * ( ::OSG::ImageBase::*getSFForceAlphaBinary_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getSFForceAlphaBinary"
                , getSFForceAlphaBinary_function_type( &::OSG::ImageBase::getSFForceAlphaBinary )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ImageBase::getSFForceAlphaChannel
        
            typedef ::OSG::SFBool const * ( ::OSG::ImageBase::*getSFForceAlphaChannel_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getSFForceAlphaChannel"
                , getSFForceAlphaChannel_function_type( &::OSG::ImageBase::getSFForceAlphaChannel )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ImageBase::getSFForceColorChannel
        
            typedef ::OSG::SFBool const * ( ::OSG::ImageBase::*getSFForceColorChannel_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getSFForceColorChannel"
                , getSFForceColorChannel_function_type( &::OSG::ImageBase::getSFForceColorChannel )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ImageBase::getSFForceCompressedData
        
            typedef ::OSG::SFBool const * ( ::OSG::ImageBase::*getSFForceCompressedData_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getSFForceCompressedData"
                , getSFForceCompressedData_function_type( &::OSG::ImageBase::getSFForceCompressedData )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ImageBase::getSFFrameCount
        
            typedef ::OSG::SFInt32 const * ( ::OSG::ImageBase::*getSFFrameCount_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getSFFrameCount"
                , getSFFrameCount_function_type( &::OSG::ImageBase::getSFFrameCount )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ImageBase::getSFFrameDelay
        
            typedef ::OSG::SFTime const * ( ::OSG::ImageBase::*getSFFrameDelay_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getSFFrameDelay"
                , getSFFrameDelay_function_type( &::OSG::ImageBase::getSFFrameDelay )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ImageBase::getSFFrameSize
        
            typedef ::OSG::SFInt32 const * ( ::OSG::ImageBase::*getSFFrameSize_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getSFFrameSize"
                , getSFFrameSize_function_type( &::OSG::ImageBase::getSFFrameSize )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ImageBase::getSFHeight
        
            typedef ::OSG::SFInt32 const * ( ::OSG::ImageBase::*getSFHeight_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getSFHeight"
                , getSFHeight_function_type( &::OSG::ImageBase::getSFHeight )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ImageBase::getSFMipMapCount
        
            typedef ::OSG::SFInt32 const * ( ::OSG::ImageBase::*getSFMipMapCount_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getSFMipMapCount"
                , getSFMipMapCount_function_type( &::OSG::ImageBase::getSFMipMapCount )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ImageBase::getSFName
        
            typedef ::OSG::SFString const * ( ::OSG::ImageBase::*getSFName_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getSFName"
                , getSFName_function_type( &::OSG::ImageBase::getSFName )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ImageBase::getSFPixelFormat
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::ImageBase::*getSFPixelFormat_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getSFPixelFormat"
                , getSFPixelFormat_function_type( &::OSG::ImageBase::getSFPixelFormat )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ImageBase::getSFResUnit
        
            typedef ::OSG::SFUInt16 const * ( ::OSG::ImageBase::*getSFResUnit_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getSFResUnit"
                , getSFResUnit_function_type( &::OSG::ImageBase::getSFResUnit )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ImageBase::getSFResX
        
            typedef ::OSG::SFReal32 const * ( ::OSG::ImageBase::*getSFResX_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getSFResX"
                , getSFResX_function_type( &::OSG::ImageBase::getSFResX )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ImageBase::getSFResY
        
            typedef ::OSG::SFReal32 const * ( ::OSG::ImageBase::*getSFResY_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getSFResY"
                , getSFResY_function_type( &::OSG::ImageBase::getSFResY )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ImageBase::getSFSideCount
        
            typedef ::OSG::SFInt32 const * ( ::OSG::ImageBase::*getSFSideCount_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getSFSideCount"
                , getSFSideCount_function_type( &::OSG::ImageBase::getSFSideCount )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ImageBase::getSFSideSize
        
            typedef ::OSG::SFInt32 const * ( ::OSG::ImageBase::*getSFSideSize_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getSFSideSize"
                , getSFSideSize_function_type( &::OSG::ImageBase::getSFSideSize )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ImageBase::getSFWidth
        
            typedef ::OSG::SFInt32 const * ( ::OSG::ImageBase::*getSFWidth_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getSFWidth"
                , getSFWidth_function_type( &::OSG::ImageBase::getSFWidth )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ImageBase::getSideCount
        
            typedef ::OSG::Int32 ( ::OSG::ImageBase::*getSideCount_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getSideCount"
                , getSideCount_function_type( &::OSG::ImageBase::getSideCount ) );
        
        }
        { //::OSG::ImageBase::getSideSize
        
            typedef ::OSG::Int32 ( ::OSG::ImageBase::*getSideSize_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getSideSize"
                , getSideSize_function_type( &::OSG::ImageBase::getSideSize ) );
        
        }
        { //::OSG::ImageBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::ImageBase::*getType_function_type )(  ) ;
            
            ImageBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::ImageBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ImageBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::ImageBase::*getType_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::ImageBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ImageBase::getWidth
        
            typedef ::OSG::Int32 ( ::OSG::ImageBase::*getWidth_function_type )(  ) const;
            
            ImageBase_exposer.def( 
                "getWidth"
                , getWidth_function_type( &::OSG::ImageBase::getWidth ) );
        
        }
        { //::OSG::ImageBase::setBpp
        
            typedef void ( ::OSG::ImageBase::*setBpp_function_type )( ::OSG::Int32 const ) ;
            
            ImageBase_exposer.def( 
                "setBpp"
                , setBpp_function_type( &::OSG::ImageBase::setBpp )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ImageBase::setClearOnLoad
        
            typedef void ( ::OSG::ImageBase::*setClearOnLoad_function_type )( bool const ) ;
            
            ImageBase_exposer.def( 
                "setClearOnLoad"
                , setClearOnLoad_function_type( &::OSG::ImageBase::setClearOnLoad )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ImageBase::setDataType
        
            typedef void ( ::OSG::ImageBase::*setDataType_function_type )( ::OSG::Int32 const ) ;
            
            ImageBase_exposer.def( 
                "setDataType"
                , setDataType_function_type( &::OSG::ImageBase::setDataType )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ImageBase::setDepth
        
            typedef void ( ::OSG::ImageBase::*setDepth_function_type )( ::OSG::Int32 const ) ;
            
            ImageBase_exposer.def( 
                "setDepth"
                , setDepth_function_type( &::OSG::ImageBase::setDepth )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ImageBase::setDimension
        
            typedef void ( ::OSG::ImageBase::*setDimension_function_type )( ::OSG::Int32 const ) ;
            
            ImageBase_exposer.def( 
                "setDimension"
                , setDimension_function_type( &::OSG::ImageBase::setDimension )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ImageBase::setForceAlphaBinary
        
            typedef void ( ::OSG::ImageBase::*setForceAlphaBinary_function_type )( bool const ) ;
            
            ImageBase_exposer.def( 
                "setForceAlphaBinary"
                , setForceAlphaBinary_function_type( &::OSG::ImageBase::setForceAlphaBinary )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ImageBase::setForceAlphaChannel
        
            typedef void ( ::OSG::ImageBase::*setForceAlphaChannel_function_type )( bool const ) ;
            
            ImageBase_exposer.def( 
                "setForceAlphaChannel"
                , setForceAlphaChannel_function_type( &::OSG::ImageBase::setForceAlphaChannel )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ImageBase::setForceColorChannel
        
            typedef void ( ::OSG::ImageBase::*setForceColorChannel_function_type )( bool const ) ;
            
            ImageBase_exposer.def( 
                "setForceColorChannel"
                , setForceColorChannel_function_type( &::OSG::ImageBase::setForceColorChannel )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ImageBase::setForceCompressedData
        
            typedef void ( ::OSG::ImageBase::*setForceCompressedData_function_type )( bool const ) ;
            
            ImageBase_exposer.def( 
                "setForceCompressedData"
                , setForceCompressedData_function_type( &::OSG::ImageBase::setForceCompressedData )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ImageBase::setFrameCount
        
            typedef void ( ::OSG::ImageBase::*setFrameCount_function_type )( ::OSG::Int32 const ) ;
            
            ImageBase_exposer.def( 
                "setFrameCount"
                , setFrameCount_function_type( &::OSG::ImageBase::setFrameCount )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ImageBase::setFrameDelay
        
            typedef void ( ::OSG::ImageBase::*setFrameDelay_function_type )( ::OSG::Time const & ) ;
            
            ImageBase_exposer.def( 
                "setFrameDelay"
                , setFrameDelay_function_type( &::OSG::ImageBase::setFrameDelay )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ImageBase::setFrameSize
        
            typedef void ( ::OSG::ImageBase::*setFrameSize_function_type )( ::OSG::Int32 const ) ;
            
            ImageBase_exposer.def( 
                "setFrameSize"
                , setFrameSize_function_type( &::OSG::ImageBase::setFrameSize )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ImageBase::setHeight
        
            typedef void ( ::OSG::ImageBase::*setHeight_function_type )( ::OSG::Int32 const ) ;
            
            ImageBase_exposer.def( 
                "setHeight"
                , setHeight_function_type( &::OSG::ImageBase::setHeight )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ImageBase::setMipMapCount
        
            typedef void ( ::OSG::ImageBase::*setMipMapCount_function_type )( ::OSG::Int32 const ) ;
            
            ImageBase_exposer.def( 
                "setMipMapCount"
                , setMipMapCount_function_type( &::OSG::ImageBase::setMipMapCount )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ImageBase::setName
        
            typedef void ( ::OSG::ImageBase::*setName_function_type )( ::std::string const & ) ;
            
            ImageBase_exposer.def( 
                "setName"
                , setName_function_type( &::OSG::ImageBase::setName )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ImageBase::setPixelFormat
        
            typedef void ( ::OSG::ImageBase::*setPixelFormat_function_type )( ::OSG::UInt32 const ) ;
            
            ImageBase_exposer.def( 
                "setPixelFormat"
                , setPixelFormat_function_type( &::OSG::ImageBase::setPixelFormat )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ImageBase::setResUnit
        
            typedef void ( ::OSG::ImageBase::*setResUnit_function_type )( ::OSG::UInt16 const ) ;
            
            ImageBase_exposer.def( 
                "setResUnit"
                , setResUnit_function_type( &::OSG::ImageBase::setResUnit )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ImageBase::setResX
        
            typedef void ( ::OSG::ImageBase::*setResX_function_type )( ::OSG::Real32 const ) ;
            
            ImageBase_exposer.def( 
                "setResX"
                , setResX_function_type( &::OSG::ImageBase::setResX )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ImageBase::setResY
        
            typedef void ( ::OSG::ImageBase::*setResY_function_type )( ::OSG::Real32 const ) ;
            
            ImageBase_exposer.def( 
                "setResY"
                , setResY_function_type( &::OSG::ImageBase::setResY )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ImageBase::setSideCount
        
            typedef void ( ::OSG::ImageBase::*setSideCount_function_type )( ::OSG::Int32 const ) ;
            
            ImageBase_exposer.def( 
                "setSideCount"
                , setSideCount_function_type( &::OSG::ImageBase::setSideCount )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ImageBase::setSideSize
        
            typedef void ( ::OSG::ImageBase::*setSideSize_function_type )( ::OSG::Int32 const ) ;
            
            ImageBase_exposer.def( 
                "setSideSize"
                , setSideSize_function_type( &::OSG::ImageBase::setSideSize )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ImageBase::setWidth
        
            typedef void ( ::OSG::ImageBase::*setWidth_function_type )( ::OSG::Int32 const ) ;
            
            ImageBase_exposer.def( 
                "setWidth"
                , setWidth_function_type( &::OSG::ImageBase::setWidth )
                , ( bp::arg("value") ) );
        
        }
        ImageBase_exposer.staticmethod( "create" );
        ImageBase_exposer.staticmethod( "createDependent" );
        ImageBase_exposer.staticmethod( "createLocal" );
        ImageBase_exposer.staticmethod( "getClassGroupId" );
        ImageBase_exposer.staticmethod( "getClassType" );
        ImageBase_exposer.staticmethod( "getClassTypeId" );
        ImageBase_exposer.def("getMFPixel",ImageBase_getMFPixel);
    }

}
