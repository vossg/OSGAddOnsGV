// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "LightChunkBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_LightChunkBase_class(){

    { //::OSG::LightChunkBase
        typedef bp::class_< OSG::LightChunkBase, bp::bases< OSG::StateChunk >, boost::noncopyable > LightChunkBase_exposer_t;
        LightChunkBase_exposer_t LightChunkBase_exposer = LightChunkBase_exposer_t( "LightChunkBase", bp::no_init );
        bp::scope LightChunkBase_scope( LightChunkBase_exposer );
        bp::scope().attr("DiffuseFieldId") = (int)OSG::LightChunkBase::DiffuseFieldId;
        bp::scope().attr("AmbientFieldId") = (int)OSG::LightChunkBase::AmbientFieldId;
        bp::scope().attr("SpecularFieldId") = (int)OSG::LightChunkBase::SpecularFieldId;
        bp::scope().attr("PositionFieldId") = (int)OSG::LightChunkBase::PositionFieldId;
        bp::scope().attr("DirectionFieldId") = (int)OSG::LightChunkBase::DirectionFieldId;
        bp::scope().attr("ExponentFieldId") = (int)OSG::LightChunkBase::ExponentFieldId;
        bp::scope().attr("CutoffFieldId") = (int)OSG::LightChunkBase::CutoffFieldId;
        bp::scope().attr("ConstantAttenuationFieldId") = (int)OSG::LightChunkBase::ConstantAttenuationFieldId;
        bp::scope().attr("LinearAttenuationFieldId") = (int)OSG::LightChunkBase::LinearAttenuationFieldId;
        bp::scope().attr("QuadraticAttenuationFieldId") = (int)OSG::LightChunkBase::QuadraticAttenuationFieldId;
        bp::scope().attr("BeaconFieldId") = (int)OSG::LightChunkBase::BeaconFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::LightChunkBase::NextFieldId;
        { //::OSG::LightChunkBase::copyFromBin
        
            typedef void ( ::OSG::LightChunkBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            LightChunkBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::LightChunkBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::LightChunkBase::copyToBin
        
            typedef void ( ::OSG::LightChunkBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            LightChunkBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::LightChunkBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::LightChunkBase::create
        
            typedef ::OSG::LightChunkTransitPtr ( *create_function_type )(  );
            
            LightChunkBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::LightChunkBase::create ) );
        
        }
        { //::OSG::LightChunkBase::createDependent
        
            typedef ::OSG::LightChunkTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            LightChunkBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::LightChunkBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::LightChunkBase::createLocal
        
            typedef ::OSG::LightChunkTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            LightChunkBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::LightChunkBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::LightChunkBase::getAmbient
        
            typedef ::OSG::Color4f const & ( ::OSG::LightChunkBase::*getAmbient_function_type )(  ) const;
            
            LightChunkBase_exposer.def( 
                "getAmbient"
                , getAmbient_function_type( &::OSG::LightChunkBase::getAmbient )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::LightChunkBase::getBeacon
        
            typedef ::OSG::Node * ( ::OSG::LightChunkBase::*getBeacon_function_type )(  ) const;
            
            LightChunkBase_exposer.def( 
                "getBeacon"
                , getBeacon_function_type( &::OSG::LightChunkBase::getBeacon )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::LightChunkBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::LightChunkBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            LightChunkBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::LightChunkBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::LightChunkBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            LightChunkBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::LightChunkBase::getClassGroupId ) );
        
        }
        { //::OSG::LightChunkBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            LightChunkBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::LightChunkBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::LightChunkBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            LightChunkBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::LightChunkBase::getClassTypeId ) );
        
        }
        { //::OSG::LightChunkBase::getConstantAttenuation
        
            typedef ::OSG::Real32 ( ::OSG::LightChunkBase::*getConstantAttenuation_function_type )(  ) const;
            
            LightChunkBase_exposer.def( 
                "getConstantAttenuation"
                , getConstantAttenuation_function_type( &::OSG::LightChunkBase::getConstantAttenuation ) );
        
        }
        { //::OSG::LightChunkBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::LightChunkBase::*getContainerSize_function_type )(  ) const;
            
            LightChunkBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::LightChunkBase::getContainerSize ) );
        
        }
        { //::OSG::LightChunkBase::getCutoff
        
            typedef ::OSG::Real32 ( ::OSG::LightChunkBase::*getCutoff_function_type )(  ) const;
            
            LightChunkBase_exposer.def( 
                "getCutoff"
                , getCutoff_function_type( &::OSG::LightChunkBase::getCutoff ) );
        
        }
        { //::OSG::LightChunkBase::getDiffuse
        
            typedef ::OSG::Color4f const & ( ::OSG::LightChunkBase::*getDiffuse_function_type )(  ) const;
            
            LightChunkBase_exposer.def( 
                "getDiffuse"
                , getDiffuse_function_type( &::OSG::LightChunkBase::getDiffuse )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::LightChunkBase::getDirection
        
            typedef ::OSG::Vec3f const & ( ::OSG::LightChunkBase::*getDirection_function_type )(  ) const;
            
            LightChunkBase_exposer.def( 
                "getDirection"
                , getDirection_function_type( &::OSG::LightChunkBase::getDirection )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::LightChunkBase::getExponent
        
            typedef ::OSG::Real32 ( ::OSG::LightChunkBase::*getExponent_function_type )(  ) const;
            
            LightChunkBase_exposer.def( 
                "getExponent"
                , getExponent_function_type( &::OSG::LightChunkBase::getExponent ) );
        
        }
        { //::OSG::LightChunkBase::getLinearAttenuation
        
            typedef ::OSG::Real32 ( ::OSG::LightChunkBase::*getLinearAttenuation_function_type )(  ) const;
            
            LightChunkBase_exposer.def( 
                "getLinearAttenuation"
                , getLinearAttenuation_function_type( &::OSG::LightChunkBase::getLinearAttenuation ) );
        
        }
        { //::OSG::LightChunkBase::getPosition
        
            typedef ::OSG::Vec4f const & ( ::OSG::LightChunkBase::*getPosition_function_type )(  ) const;
            
            LightChunkBase_exposer.def( 
                "getPosition"
                , getPosition_function_type( &::OSG::LightChunkBase::getPosition )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::LightChunkBase::getQuadraticAttenuation
        
            typedef ::OSG::Real32 ( ::OSG::LightChunkBase::*getQuadraticAttenuation_function_type )(  ) const;
            
            LightChunkBase_exposer.def( 
                "getQuadraticAttenuation"
                , getQuadraticAttenuation_function_type( &::OSG::LightChunkBase::getQuadraticAttenuation ) );
        
        }
        { //::OSG::LightChunkBase::getSFAmbient
        
            typedef ::OSG::SFColor4f const * ( ::OSG::LightChunkBase::*getSFAmbient_function_type )(  ) const;
            
            LightChunkBase_exposer.def( 
                "getSFAmbient"
                , getSFAmbient_function_type( &::OSG::LightChunkBase::getSFAmbient )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::LightChunkBase::getSFBeacon
        
            typedef ::OSG::SFWeakNodePtr const * ( ::OSG::LightChunkBase::*getSFBeacon_function_type )(  ) const;
            
            LightChunkBase_exposer.def( 
                "getSFBeacon"
                , getSFBeacon_function_type( &::OSG::LightChunkBase::getSFBeacon )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::LightChunkBase::getSFConstantAttenuation
        
            typedef ::OSG::SFReal32 const * ( ::OSG::LightChunkBase::*getSFConstantAttenuation_function_type )(  ) const;
            
            LightChunkBase_exposer.def( 
                "getSFConstantAttenuation"
                , getSFConstantAttenuation_function_type( &::OSG::LightChunkBase::getSFConstantAttenuation )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::LightChunkBase::getSFCutoff
        
            typedef ::OSG::SFReal32 const * ( ::OSG::LightChunkBase::*getSFCutoff_function_type )(  ) const;
            
            LightChunkBase_exposer.def( 
                "getSFCutoff"
                , getSFCutoff_function_type( &::OSG::LightChunkBase::getSFCutoff )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::LightChunkBase::getSFDiffuse
        
            typedef ::OSG::SFColor4f const * ( ::OSG::LightChunkBase::*getSFDiffuse_function_type )(  ) const;
            
            LightChunkBase_exposer.def( 
                "getSFDiffuse"
                , getSFDiffuse_function_type( &::OSG::LightChunkBase::getSFDiffuse )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::LightChunkBase::getSFDirection
        
            typedef ::OSG::SFVec3f const * ( ::OSG::LightChunkBase::*getSFDirection_function_type )(  ) const;
            
            LightChunkBase_exposer.def( 
                "getSFDirection"
                , getSFDirection_function_type( &::OSG::LightChunkBase::getSFDirection )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::LightChunkBase::getSFExponent
        
            typedef ::OSG::SFReal32 const * ( ::OSG::LightChunkBase::*getSFExponent_function_type )(  ) const;
            
            LightChunkBase_exposer.def( 
                "getSFExponent"
                , getSFExponent_function_type( &::OSG::LightChunkBase::getSFExponent )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::LightChunkBase::getSFLinearAttenuation
        
            typedef ::OSG::SFReal32 const * ( ::OSG::LightChunkBase::*getSFLinearAttenuation_function_type )(  ) const;
            
            LightChunkBase_exposer.def( 
                "getSFLinearAttenuation"
                , getSFLinearAttenuation_function_type( &::OSG::LightChunkBase::getSFLinearAttenuation )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::LightChunkBase::getSFPosition
        
            typedef ::OSG::SFVec4f const * ( ::OSG::LightChunkBase::*getSFPosition_function_type )(  ) const;
            
            LightChunkBase_exposer.def( 
                "getSFPosition"
                , getSFPosition_function_type( &::OSG::LightChunkBase::getSFPosition )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::LightChunkBase::getSFQuadraticAttenuation
        
            typedef ::OSG::SFReal32 const * ( ::OSG::LightChunkBase::*getSFQuadraticAttenuation_function_type )(  ) const;
            
            LightChunkBase_exposer.def( 
                "getSFQuadraticAttenuation"
                , getSFQuadraticAttenuation_function_type( &::OSG::LightChunkBase::getSFQuadraticAttenuation )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::LightChunkBase::getSFSpecular
        
            typedef ::OSG::SFColor4f const * ( ::OSG::LightChunkBase::*getSFSpecular_function_type )(  ) const;
            
            LightChunkBase_exposer.def( 
                "getSFSpecular"
                , getSFSpecular_function_type( &::OSG::LightChunkBase::getSFSpecular )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::LightChunkBase::getSpecular
        
            typedef ::OSG::Color4f const & ( ::OSG::LightChunkBase::*getSpecular_function_type )(  ) const;
            
            LightChunkBase_exposer.def( 
                "getSpecular"
                , getSpecular_function_type( &::OSG::LightChunkBase::getSpecular )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::LightChunkBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::LightChunkBase::*getType_function_type )(  ) ;
            
            LightChunkBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::LightChunkBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::LightChunkBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::LightChunkBase::*getType_function_type )(  ) const;
            
            LightChunkBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::LightChunkBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::LightChunkBase::setAmbient
        
            typedef void ( ::OSG::LightChunkBase::*setAmbient_function_type )( ::OSG::Color4f const & ) ;
            
            LightChunkBase_exposer.def( 
                "setAmbient"
                , setAmbient_function_type( &::OSG::LightChunkBase::setAmbient )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::LightChunkBase::setBeacon
        
            typedef void ( ::OSG::LightChunkBase::*setBeacon_function_type )( ::OSG::Node * const ) ;
            
            LightChunkBase_exposer.def( 
                "setBeacon"
                , setBeacon_function_type( &::OSG::LightChunkBase::setBeacon )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::LightChunkBase::setConstantAttenuation
        
            typedef void ( ::OSG::LightChunkBase::*setConstantAttenuation_function_type )( ::OSG::Real32 const ) ;
            
            LightChunkBase_exposer.def( 
                "setConstantAttenuation"
                , setConstantAttenuation_function_type( &::OSG::LightChunkBase::setConstantAttenuation )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::LightChunkBase::setCutoff
        
            typedef void ( ::OSG::LightChunkBase::*setCutoff_function_type )( ::OSG::Real32 const ) ;
            
            LightChunkBase_exposer.def( 
                "setCutoff"
                , setCutoff_function_type( &::OSG::LightChunkBase::setCutoff )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::LightChunkBase::setDiffuse
        
            typedef void ( ::OSG::LightChunkBase::*setDiffuse_function_type )( ::OSG::Color4f const & ) ;
            
            LightChunkBase_exposer.def( 
                "setDiffuse"
                , setDiffuse_function_type( &::OSG::LightChunkBase::setDiffuse )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::LightChunkBase::setDirection
        
            typedef void ( ::OSG::LightChunkBase::*setDirection_function_type )( ::OSG::Vec3f const & ) ;
            
            LightChunkBase_exposer.def( 
                "setDirection"
                , setDirection_function_type( &::OSG::LightChunkBase::setDirection )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::LightChunkBase::setExponent
        
            typedef void ( ::OSG::LightChunkBase::*setExponent_function_type )( ::OSG::Real32 const ) ;
            
            LightChunkBase_exposer.def( 
                "setExponent"
                , setExponent_function_type( &::OSG::LightChunkBase::setExponent )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::LightChunkBase::setLinearAttenuation
        
            typedef void ( ::OSG::LightChunkBase::*setLinearAttenuation_function_type )( ::OSG::Real32 const ) ;
            
            LightChunkBase_exposer.def( 
                "setLinearAttenuation"
                , setLinearAttenuation_function_type( &::OSG::LightChunkBase::setLinearAttenuation )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::LightChunkBase::setPosition
        
            typedef void ( ::OSG::LightChunkBase::*setPosition_function_type )( ::OSG::Vec4f const & ) ;
            
            LightChunkBase_exposer.def( 
                "setPosition"
                , setPosition_function_type( &::OSG::LightChunkBase::setPosition )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::LightChunkBase::setQuadraticAttenuation
        
            typedef void ( ::OSG::LightChunkBase::*setQuadraticAttenuation_function_type )( ::OSG::Real32 const ) ;
            
            LightChunkBase_exposer.def( 
                "setQuadraticAttenuation"
                , setQuadraticAttenuation_function_type( &::OSG::LightChunkBase::setQuadraticAttenuation )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::LightChunkBase::setSpecular
        
            typedef void ( ::OSG::LightChunkBase::*setSpecular_function_type )( ::OSG::Color4f const & ) ;
            
            LightChunkBase_exposer.def( 
                "setSpecular"
                , setSpecular_function_type( &::OSG::LightChunkBase::setSpecular )
                , ( bp::arg("value") ) );
        
        }
        LightChunkBase_exposer.staticmethod( "create" );
        LightChunkBase_exposer.staticmethod( "createDependent" );
        LightChunkBase_exposer.staticmethod( "createLocal" );
        LightChunkBase_exposer.staticmethod( "getClassGroupId" );
        LightChunkBase_exposer.staticmethod( "getClassType" );
        LightChunkBase_exposer.staticmethod( "getClassTypeId" );
    }

}
