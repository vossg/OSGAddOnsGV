// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "ShaderVariable.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_ShaderVariable_class(){

    { //::OSG::ShaderVariable
        typedef bp::class_< OSG::ShaderVariable, bp::bases< OSG::ShaderVariableBase >, boost::noncopyable > ShaderVariable_exposer_t;
        ShaderVariable_exposer_t ShaderVariable_exposer = ShaderVariable_exposer_t( "ShaderVariable", bp::no_init );
        bp::scope ShaderVariable_scope( ShaderVariable_exposer );
        bp::enum_< OSG::ShaderVariable::SHVFlags>("SHVFlags")
            .value("SHVFlagNone", OSG::ShaderVariable::SHVFlagNone)
            .value("SHVFlagUpdate", OSG::ShaderVariable::SHVFlagUpdate)
            .export_values()
            ;
        bp::enum_< OSG::ShaderVariable::SHVType>("SHVType")
            .value("SHVTypeUnknown", OSG::ShaderVariable::SHVTypeUnknown)
            .value("SHVTypeBool", OSG::ShaderVariable::SHVTypeBool)
            .value("SHVTypeInt", OSG::ShaderVariable::SHVTypeInt)
            .value("SHVTypeUInt", OSG::ShaderVariable::SHVTypeUInt)
            .value("SHVTypeReal", OSG::ShaderVariable::SHVTypeReal)
            .value("SHVTypeVec2s", OSG::ShaderVariable::SHVTypeVec2s)
            .value("SHVTypeVec3s", OSG::ShaderVariable::SHVTypeVec3s)
            .value("SHVTypeVec4s", OSG::ShaderVariable::SHVTypeVec4s)
            .value("SHVTypeVec2f", OSG::ShaderVariable::SHVTypeVec2f)
            .value("SHVTypeVec3f", OSG::ShaderVariable::SHVTypeVec3f)
            .value("SHVTypeVec4f", OSG::ShaderVariable::SHVTypeVec4f)
            .value("SHVTypePnt2f", OSG::ShaderVariable::SHVTypePnt2f)
            .value("SHVTypePnt3f", OSG::ShaderVariable::SHVTypePnt3f)
            .value("SHVTypeMatrix", OSG::ShaderVariable::SHVTypeMatrix)
            .value("SHVTypeString", OSG::ShaderVariable::SHVTypeString)
            .value("SHVTypeMBool", OSG::ShaderVariable::SHVTypeMBool)
            .value("SHVTypeMInt", OSG::ShaderVariable::SHVTypeMInt)
            .value("SHVTypeMUInt", OSG::ShaderVariable::SHVTypeMUInt)
            .value("SHVTypeMReal", OSG::ShaderVariable::SHVTypeMReal)
            .value("SHVTypeMVec2s", OSG::ShaderVariable::SHVTypeMVec2s)
            .value("SHVTypeMVec3s", OSG::ShaderVariable::SHVTypeMVec3s)
            .value("SHVTypeMVec4s", OSG::ShaderVariable::SHVTypeMVec4s)
            .value("SHVTypeMVec2f", OSG::ShaderVariable::SHVTypeMVec2f)
            .value("SHVTypeMVec3f", OSG::ShaderVariable::SHVTypeMVec3f)
            .value("SHVTypeMVec4f", OSG::ShaderVariable::SHVTypeMVec4f)
            .value("SHVTypeMMatrix", OSG::ShaderVariable::SHVTypeMMatrix)
            .value("SHVTypeMString", OSG::ShaderVariable::SHVTypeMString)
            .value("SHVTypeOSG", OSG::ShaderVariable::SHVTypeOSG)
            .value("SHVTypeFunctor", OSG::ShaderVariable::SHVTypeFunctor)
            .value("SHVTypeUniformBlock", OSG::ShaderVariable::SHVTypeUniformBlock)
            .export_values()
            ;
        { //::OSG::ShaderVariable::changed
        
            typedef void ( ::OSG::ShaderVariable::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            ShaderVariable_exposer.def( 
                "changed"
                , changed_function_type( &::OSG::ShaderVariable::changed )
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("details") ) );
        
        }
        { //::OSG::ShaderVariable::dump
        
            typedef void ( ::OSG::ShaderVariable::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            ShaderVariable_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::ShaderVariable::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::ShaderVariable::getName
        
            typedef ::std::string const & ( ::OSG::ShaderVariable::*getName_function_type )(  ) const;
            
            ShaderVariable_exposer.def( 
                "getName"
                , getName_function_type( &::OSG::ShaderVariable::getName )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::ShaderVariable::getTypeId
        
            typedef ::OSG::ShaderVariable::SHVType ( ::OSG::ShaderVariable::*getTypeId_function_type )(  ) ;
            
            ShaderVariable_exposer.def( 
                "getTypeId"
                , getTypeId_function_type( &::OSG::ShaderVariable::getTypeId ) );
        
        }
        { //::OSG::ShaderVariable::isProcedural
        
            typedef bool ( ::OSG::ShaderVariable::*isProcedural_function_type )(  ) const;
            
            ShaderVariable_exposer.def( 
                "isProcedural"
                , isProcedural_function_type( &::OSG::ShaderVariable::isProcedural ) );
        
        }
        pyopensg::register_transit< OSG::ShaderVariable >::execute();
        bp::register_ptr_to_python< OSG::ShaderVariable::ObjRecPtr >();
        bp::implicitly_convertible< OSG::ShaderVariable::ObjRecPtr, OSG::ShaderVariable* >();
        bp::implicitly_convertible< OSG::ShaderVariable::ObjRecPtr, OSG::ShaderVariable::ObjCPtr >();
        bp::implicitly_convertible< OSG::ShaderVariable::ObjRecPtr, OSG::FieldContainer* >();
        bp::implicitly_convertible< OSG::ShaderVariable::ObjRecPtr, OSG::FieldContainer::ObjRecPtr >();
        bp::implicitly_convertible<OSG::ShaderVariable::ObjRecPtr, OSG::FieldContainer::ObjCPtr>();
    }

}
