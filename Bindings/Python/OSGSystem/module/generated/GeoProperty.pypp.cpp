// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "GeoProperty.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_GeoProperty_class(){

    { //::OSG::GeoProperty
        typedef bp::class_< OSG::GeoProperty, bp::bases< OSG::GeoPropertyBase >, boost::noncopyable > GeoProperty_exposer_t;
        GeoProperty_exposer_t GeoProperty_exposer = GeoProperty_exposer_t( "GeoProperty", bp::no_init );
        bp::scope GeoProperty_scope( GeoProperty_exposer );
        { //::OSG::GeoProperty::MapFormatToSize
        
            typedef ::OSG::UInt32 ( *MapFormatToSize_function_type )( ::GLenum );
            
            GeoProperty_exposer.def( 
                "MapFormatToSize"
                , MapFormatToSize_function_type( &::OSG::GeoProperty::MapFormatToSize )
                , ( bp::arg("format") ) );
        
        }
        { //::OSG::GeoProperty::changed
        
            typedef void ( ::OSG::GeoProperty::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            GeoProperty_exposer.def( 
                "changed"
                , changed_function_type( &::OSG::GeoProperty::changed )
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("detail") ) );
        
        }
        { //::OSG::GeoProperty::clone
        
            typedef ::OSG::GeoPropertyTransitPtr ( ::OSG::GeoProperty::*clone_function_type )(  ) ;
            
            GeoProperty_exposer.def( 
                "clone"
                , clone_function_type( &::OSG::GeoProperty::clone ) );
        
        }
        { //::OSG::GeoProperty::dump
        
            typedef void ( ::OSG::GeoProperty::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            GeoProperty_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::GeoProperty::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::GeoProperty::getClass
        
            typedef ::OSG::StateChunkClass const * ( ::OSG::GeoProperty::*getClass_function_type )(  ) const;
            
            GeoProperty_exposer.def( 
                "getClass"
                , getClass_function_type( &::OSG::GeoProperty::getClass )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::GeoProperty::getDimension
        
            typedef ::OSG::UInt32 ( ::OSG::GeoProperty::*getDimension_function_type )(  ) const;
            
            GeoProperty_exposer.def( 
                "getDimension"
                , getDimension_function_type( &::OSG::GeoProperty::getDimension ) );
        
        }
        { //::OSG::GeoProperty::getFormat
        
            typedef ::OSG::UInt32 ( ::OSG::GeoProperty::*getFormat_function_type )(  ) const;
            
            GeoProperty_exposer.def( 
                "getFormat"
                , getFormat_function_type( &::OSG::GeoProperty::getFormat ) );
        
        }
        { //::OSG::GeoProperty::getFormatSize
        
            typedef ::OSG::UInt32 ( ::OSG::GeoProperty::*getFormatSize_function_type )(  ) const;
            
            GeoProperty_exposer.def( 
                "getFormatSize"
                , getFormatSize_function_type( &::OSG::GeoProperty::getFormatSize ) );
        
        }
        { //::OSG::GeoProperty::getGLId
        
            typedef ::OSG::UInt32 ( ::OSG::GeoProperty::*getGLId_function_type )(  ) const;
            
            GeoProperty_exposer.def( 
                "getGLId"
                , getGLId_function_type( &::OSG::GeoProperty::getGLId ) );
        
        }
        { //::OSG::GeoProperty::getStaticClass
        
            typedef ::OSG::StateChunkClass const * ( *getStaticClass_function_type )(  );
            
            GeoProperty_exposer.def( 
                "getStaticClass"
                , getStaticClass_function_type( &::OSG::GeoProperty::getStaticClass )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::GeoProperty::getStaticClassId
        
            typedef ::OSG::UInt32 ( *getStaticClassId_function_type )(  );
            
            GeoProperty_exposer.def( 
                "getStaticClassId"
                , getStaticClassId_function_type( &::OSG::GeoProperty::getStaticClassId ) );
        
        }
        { //::OSG::GeoProperty::getStride
        
            typedef ::OSG::UInt32 ( ::OSG::GeoProperty::*getStride_function_type )(  ) const;
            
            GeoProperty_exposer.def( 
                "getStride"
                , getStride_function_type( &::OSG::GeoProperty::getStride ) );
        
        }
        { //::OSG::GeoProperty::getVectorType
        
            typedef ::OSG::UInt32 ( ::OSG::GeoProperty::*getVectorType_function_type )(  ) const;
            
            GeoProperty_exposer.def( 
                "getVectorType"
                , getVectorType_function_type( &::OSG::GeoProperty::getVectorType ) );
        
        }
        { //::OSG::GeoProperty::isTransparent
        
            typedef bool ( ::OSG::GeoProperty::*isTransparent_function_type )(  ) const;
            
            GeoProperty_exposer.def( 
                "isTransparent"
                , isTransparent_function_type( &::OSG::GeoProperty::isTransparent ) );
        
        }
        { //::OSG::GeoProperty::size
        
            typedef ::OSG::SizeT ( ::OSG::GeoProperty::*size_function_type )(  ) const;
            
            GeoProperty_exposer.def( 
                "size"
                , size_function_type( &::OSG::GeoProperty::size ) );
        
        }
        { //::OSG::GeoProperty::size32
        
            typedef ::OSG::UInt32 ( ::OSG::GeoProperty::*size32_function_type )(  ) const;
            
            GeoProperty_exposer.def( 
                "size32"
                , size32_function_type( &::OSG::GeoProperty::size32 ) );
        
        }
        { //::OSG::GeoProperty::switchCost
        
            typedef ::OSG::Real32 ( ::OSG::GeoProperty::*switchCost_function_type )( ::OSG::StateChunk * ) ;
            
            GeoProperty_exposer.def( 
                "switchCost"
                , switchCost_function_type( &::OSG::GeoProperty::switchCost )
                , ( bp::arg("chunk") ) );
        
        }
        GeoProperty_exposer.staticmethod( "MapFormatToSize" );
        GeoProperty_exposer.staticmethod( "getStaticClass" );
        GeoProperty_exposer.staticmethod( "getStaticClassId" );
        pyopensg::register_transit< OSG::GeoProperty >::execute();
        bp::register_ptr_to_python< OSG::GeoProperty::ObjRecPtr >();
        bp::implicitly_convertible< OSG::GeoProperty::ObjRecPtr, OSG::GeoProperty* >();
        bp::implicitly_convertible< OSG::GeoProperty::ObjRecPtr, OSG::GeoProperty::ObjCPtr >();
        bp::implicitly_convertible< OSG::GeoProperty::ObjRecPtr, OSG::StateChunk* >();
        bp::implicitly_convertible< OSG::GeoProperty::ObjRecPtr, OSG::StateChunk::ObjRecPtr >();
        bp::implicitly_convertible<OSG::GeoProperty::ObjRecPtr, OSG::StateChunk::ObjCPtr>();
    }

}
