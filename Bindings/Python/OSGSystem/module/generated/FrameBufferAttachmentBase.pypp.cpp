// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "FrameBufferAttachmentBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_FrameBufferAttachmentBase_class(){

    { //::OSG::FrameBufferAttachmentBase
        typedef bp::class_< OSG::FrameBufferAttachmentBase, bp::bases< ::OSG::AttachmentContainer >, boost::noncopyable > FrameBufferAttachmentBase_exposer_t;
        FrameBufferAttachmentBase_exposer_t FrameBufferAttachmentBase_exposer = FrameBufferAttachmentBase_exposer_t( "FrameBufferAttachmentBase", bp::no_init );
        bp::scope FrameBufferAttachmentBase_scope( FrameBufferAttachmentBase_exposer );
        bp::scope().attr("WidthFieldId") = (int)OSG::FrameBufferAttachmentBase::WidthFieldId;
        bp::scope().attr("HeightFieldId") = (int)OSG::FrameBufferAttachmentBase::HeightFieldId;
        bp::scope().attr("ReadBackFieldId") = (int)OSG::FrameBufferAttachmentBase::ReadBackFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::FrameBufferAttachmentBase::NextFieldId;
        { //::OSG::FrameBufferAttachmentBase::copyFromBin
        
            typedef void ( ::OSG::FrameBufferAttachmentBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            FrameBufferAttachmentBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::FrameBufferAttachmentBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::FrameBufferAttachmentBase::copyToBin
        
            typedef void ( ::OSG::FrameBufferAttachmentBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            FrameBufferAttachmentBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::FrameBufferAttachmentBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::FrameBufferAttachmentBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::FrameBufferAttachmentBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            FrameBufferAttachmentBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::FrameBufferAttachmentBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::FrameBufferAttachmentBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            FrameBufferAttachmentBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::FrameBufferAttachmentBase::getClassGroupId ) );
        
        }
        { //::OSG::FrameBufferAttachmentBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            FrameBufferAttachmentBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::FrameBufferAttachmentBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::FrameBufferAttachmentBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            FrameBufferAttachmentBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::FrameBufferAttachmentBase::getClassTypeId ) );
        
        }
        { //::OSG::FrameBufferAttachmentBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::FrameBufferAttachmentBase::*getContainerSize_function_type )(  ) const;
            
            FrameBufferAttachmentBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::FrameBufferAttachmentBase::getContainerSize ) );
        
        }
        { //::OSG::FrameBufferAttachmentBase::getReadBack
        
            typedef bool ( ::OSG::FrameBufferAttachmentBase::*getReadBack_function_type )(  ) const;
            
            FrameBufferAttachmentBase_exposer.def( 
                "getReadBack"
                , getReadBack_function_type( &::OSG::FrameBufferAttachmentBase::getReadBack ) );
        
        }
        { //::OSG::FrameBufferAttachmentBase::getSFReadBack
        
            typedef ::OSG::SFBool const * ( ::OSG::FrameBufferAttachmentBase::*getSFReadBack_function_type )(  ) const;
            
            FrameBufferAttachmentBase_exposer.def( 
                "getSFReadBack"
                , getSFReadBack_function_type( &::OSG::FrameBufferAttachmentBase::getSFReadBack )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FrameBufferAttachmentBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::FrameBufferAttachmentBase::*getType_function_type )(  ) ;
            
            FrameBufferAttachmentBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::FrameBufferAttachmentBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FrameBufferAttachmentBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::FrameBufferAttachmentBase::*getType_function_type )(  ) const;
            
            FrameBufferAttachmentBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::FrameBufferAttachmentBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FrameBufferAttachmentBase::setReadBack
        
            typedef void ( ::OSG::FrameBufferAttachmentBase::*setReadBack_function_type )( bool const ) ;
            
            FrameBufferAttachmentBase_exposer.def( 
                "setReadBack"
                , setReadBack_function_type( &::OSG::FrameBufferAttachmentBase::setReadBack )
                , ( bp::arg("value") ) );
        
        }
        FrameBufferAttachmentBase_exposer.staticmethod( "getClassGroupId" );
        FrameBufferAttachmentBase_exposer.staticmethod( "getClassType" );
        FrameBufferAttachmentBase_exposer.staticmethod( "getClassTypeId" );
    }

}
