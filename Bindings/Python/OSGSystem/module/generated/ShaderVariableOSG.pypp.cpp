// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "ShaderVariableOSG.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_ShaderVariableOSG_class(){

    { //::OSG::ShaderVariableOSG
        typedef bp::class_< OSG::ShaderVariableOSG, bp::bases< OSG::ShaderVariableOSGBase >, OSG::ShaderVariableOSG::ObjRecPtr, boost::noncopyable > ShaderVariableOSG_exposer_t;
        ShaderVariableOSG_exposer_t ShaderVariableOSG_exposer = ShaderVariableOSG_exposer_t( "ShaderVariableOSG", bp::no_init );
        bp::scope ShaderVariableOSG_scope( ShaderVariableOSG_exposer );
        bp::enum_< OSG::ShaderVariableOSG::SHVOSGType>("SHVOSGType")
            .value("OSGUnknown", OSG::ShaderVariableOSG::OSGUnknown)
            .value("OSGWorldMatrix", OSG::ShaderVariableOSG::OSGWorldMatrix)
            .value("OSGInvWorldMatrix", OSG::ShaderVariableOSG::OSGInvWorldMatrix)
            .value("OSGTransInvWorldMatrix", OSG::ShaderVariableOSG::OSGTransInvWorldMatrix)
            .value("OSGCameraOrientation", OSG::ShaderVariableOSG::OSGCameraOrientation)
            .value("OSGCameraPosition", OSG::ShaderVariableOSG::OSGCameraPosition)
            .value("OSGViewMatrix", OSG::ShaderVariableOSG::OSGViewMatrix)
            .value("OSGInvViewMatrix", OSG::ShaderVariableOSG::OSGInvViewMatrix)
            .value("OSGProjectionMatrix", OSG::ShaderVariableOSG::OSGProjectionMatrix)
            .value("OSGModelViewMatrix", OSG::ShaderVariableOSG::OSGModelViewMatrix)
            .value("OSGStereoLeftEye", OSG::ShaderVariableOSG::OSGStereoLeftEye)
            .value("OSGDrawerId", OSG::ShaderVariableOSG::OSGDrawerId)
            .value("OSGDrawableId", OSG::ShaderVariableOSG::OSGDrawableId)
            .value("OSGNodeId", OSG::ShaderVariableOSG::OSGNodeId)
            .value("OSGNodeBoxMin", OSG::ShaderVariableOSG::OSGNodeBoxMin)
            .value("OSGNodeBoxMax", OSG::ShaderVariableOSG::OSGNodeBoxMax)
            .value("OSGNodeBoxCenter", OSG::ShaderVariableOSG::OSGNodeBoxCenter)
            .value("OSGNodeWorldBoxMin", OSG::ShaderVariableOSG::OSGNodeWorldBoxMin)
            .value("OSGNodeWorldBoxMax", OSG::ShaderVariableOSG::OSGNodeWorldBoxMax)
            .value("OSGNodeWorldBoxCenter", OSG::ShaderVariableOSG::OSGNodeWorldBoxCenter)
            .value("OSGActiveLightsMask", OSG::ShaderVariableOSG::OSGActiveLightsMask)
            .value("OSGLight0Active", OSG::ShaderVariableOSG::OSGLight0Active)
            .value("OSGLight1Active", OSG::ShaderVariableOSG::OSGLight1Active)
            .value("OSGLight2Active", OSG::ShaderVariableOSG::OSGLight2Active)
            .value("OSGLight3Active", OSG::ShaderVariableOSG::OSGLight3Active)
            .value("OSGLight4Active", OSG::ShaderVariableOSG::OSGLight4Active)
            .value("OSGLight5Active", OSG::ShaderVariableOSG::OSGLight5Active)
            .value("OSGLight6Active", OSG::ShaderVariableOSG::OSGLight6Active)
            .value("OSGLight7Active", OSG::ShaderVariableOSG::OSGLight7Active)
            .export_values()
            ;
        { //::OSG::ShaderVariableOSG::changed
        
            typedef void ( ::OSG::ShaderVariableOSG::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            ShaderVariableOSG_exposer.def( 
                "changed"
                , changed_function_type( &::OSG::ShaderVariableOSG::changed )
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("details") ) );
        
        }
        { //::OSG::ShaderVariableOSG::dump
        
            typedef void ( ::OSG::ShaderVariableOSG::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            ShaderVariableOSG_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::ShaderVariableOSG::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::ShaderVariableOSG::evaluate
        
            typedef void ( ::OSG::ShaderVariableOSG::*evaluate_function_type )( ::OSG::DrawEnv *,::OSG::Int32 & ) ;
            
            ShaderVariableOSG_exposer.def( 
                "evaluate"
                , evaluate_function_type( &::OSG::ShaderVariableOSG::evaluate )
                , ( bp::arg("pEnv"), bp::arg("iLocation") ) );
        
        }
        { //::OSG::ShaderVariableOSG::isProcedural
        
            typedef bool ( ::OSG::ShaderVariableOSG::*isProcedural_function_type )(  ) const;
            
            ShaderVariableOSG_exposer.def( 
                "isProcedural"
                , isProcedural_function_type( &::OSG::ShaderVariableOSG::isProcedural ) );
        
        }
        pyopensg::register_transit< OSG::ShaderVariableOSG >::execute();
        bp::implicitly_convertible< OSG::ShaderVariableOSG::ObjRecPtr, OSG::ShaderVariableOSG* >();
        bp::implicitly_convertible< OSG::ShaderVariableOSG::ObjRecPtr, OSG::ShaderVariableOSG::ObjCPtr >();
        bp::implicitly_convertible< OSG::ShaderVariableOSG::ObjRecPtr, OSG::ShaderProcVariable* >();
        bp::implicitly_convertible< OSG::ShaderVariableOSG::ObjRecPtr, OSG::ShaderProcVariable::ObjRecPtr >();
        bp::implicitly_convertible<OSG::ShaderVariableOSG::ObjRecPtr, OSG::ShaderProcVariable::ObjCPtr>();
    }

}
