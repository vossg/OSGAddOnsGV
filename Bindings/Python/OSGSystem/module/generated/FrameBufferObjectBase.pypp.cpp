// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "FrameBufferObjectBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

boost::python::list FrameBufferObjectBase_getMFColorAttachments(OSG::FrameBufferObjectBase *self)
{
   boost::python::list result;
   OSG::MFUnrecFrameBufferAttachmentPtr const * mf_data = self->getMFColorAttachments();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append(OSG::FrameBufferAttachment::ObjRecPtr((*mf_data)[i]));
   }
   return result;
}

boost::python::list FrameBufferObjectBase_getMFDrawBuffers(OSG::FrameBufferObjectBase *self)
{
   boost::python::list result;
   OSG::MFGLenum const * mf_data = self->getMFDrawBuffers();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

void register_FrameBufferObjectBase_class(){

    { //::OSG::FrameBufferObjectBase
        typedef bp::class_< OSG::FrameBufferObjectBase, bp::bases< ::OSG::AttachmentContainer >, boost::noncopyable > FrameBufferObjectBase_exposer_t;
        FrameBufferObjectBase_exposer_t FrameBufferObjectBase_exposer = FrameBufferObjectBase_exposer_t( "FrameBufferObjectBase", bp::no_init );
        bp::scope FrameBufferObjectBase_scope( FrameBufferObjectBase_exposer );
        bp::scope().attr("GLIdFieldId") = (int)OSG::FrameBufferObjectBase::GLIdFieldId;
        bp::scope().attr("MultiSampleGLIdFieldId") = (int)OSG::FrameBufferObjectBase::MultiSampleGLIdFieldId;
        bp::scope().attr("ColorAttachmentsFieldId") = (int)OSG::FrameBufferObjectBase::ColorAttachmentsFieldId;
        bp::scope().attr("DrawBuffersFieldId") = (int)OSG::FrameBufferObjectBase::DrawBuffersFieldId;
        bp::scope().attr("DepthAttachmentFieldId") = (int)OSG::FrameBufferObjectBase::DepthAttachmentFieldId;
        bp::scope().attr("StencilAttachmentFieldId") = (int)OSG::FrameBufferObjectBase::StencilAttachmentFieldId;
        bp::scope().attr("WidthFieldId") = (int)OSG::FrameBufferObjectBase::WidthFieldId;
        bp::scope().attr("HeightFieldId") = (int)OSG::FrameBufferObjectBase::HeightFieldId;
        bp::scope().attr("PostProcessOnDeactivateFieldId") = (int)OSG::FrameBufferObjectBase::PostProcessOnDeactivateFieldId;
        bp::scope().attr("EnableMultiSampleFieldId") = (int)OSG::FrameBufferObjectBase::EnableMultiSampleFieldId;
        bp::scope().attr("ColorSamplesFieldId") = (int)OSG::FrameBufferObjectBase::ColorSamplesFieldId;
        bp::scope().attr("CoverageSamplesFieldId") = (int)OSG::FrameBufferObjectBase::CoverageSamplesFieldId;
        bp::scope().attr("FixedSampleLocationFieldId") = (int)OSG::FrameBufferObjectBase::FixedSampleLocationFieldId;
        bp::scope().attr("MsaaColorAttachmentsFieldId") = (int)OSG::FrameBufferObjectBase::MsaaColorAttachmentsFieldId;
        bp::scope().attr("MsaaDepthAttachmentFieldId") = (int)OSG::FrameBufferObjectBase::MsaaDepthAttachmentFieldId;
        bp::scope().attr("MsaaStencilAttachmentFieldId") = (int)OSG::FrameBufferObjectBase::MsaaStencilAttachmentFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::FrameBufferObjectBase::NextFieldId;
        { //::OSG::FrameBufferObjectBase::assignColorAttachments
        
            typedef void ( ::OSG::FrameBufferObjectBase::*assignColorAttachments_function_type )( ::OSG::MFUnrecFrameBufferAttachmentPtr const & ) ;
            
            FrameBufferObjectBase_exposer.def( 
                "assignColorAttachments"
                , assignColorAttachments_function_type( &::OSG::FrameBufferObjectBase::assignColorAttachments )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FrameBufferObjectBase::clearColorAttachments
        
            typedef void ( ::OSG::FrameBufferObjectBase::*clearColorAttachments_function_type )(  ) ;
            
            FrameBufferObjectBase_exposer.def( 
                "clearColorAttachments"
                , clearColorAttachments_function_type( &::OSG::FrameBufferObjectBase::clearColorAttachments ) );
        
        }
        { //::OSG::FrameBufferObjectBase::copyFromBin
        
            typedef void ( ::OSG::FrameBufferObjectBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            FrameBufferObjectBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::FrameBufferObjectBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::FrameBufferObjectBase::copyToBin
        
            typedef void ( ::OSG::FrameBufferObjectBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            FrameBufferObjectBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::FrameBufferObjectBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::FrameBufferObjectBase::create
        
            typedef ::OSG::FrameBufferObjectTransitPtr ( *create_function_type )(  );
            
            FrameBufferObjectBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::FrameBufferObjectBase::create ) );
        
        }
        { //::OSG::FrameBufferObjectBase::createDependent
        
            typedef ::OSG::FrameBufferObjectTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            FrameBufferObjectBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::FrameBufferObjectBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::FrameBufferObjectBase::createLocal
        
            typedef ::OSG::FrameBufferObjectTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            FrameBufferObjectBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::FrameBufferObjectBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::FrameBufferObjectBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::FrameBufferObjectBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            FrameBufferObjectBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::FrameBufferObjectBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::FrameBufferObjectBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            FrameBufferObjectBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::FrameBufferObjectBase::getClassGroupId ) );
        
        }
        { //::OSG::FrameBufferObjectBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            FrameBufferObjectBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::FrameBufferObjectBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::FrameBufferObjectBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            FrameBufferObjectBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::FrameBufferObjectBase::getClassTypeId ) );
        
        }
        { //::OSG::FrameBufferObjectBase::getColorAttachments
        
            typedef ::OSG::FrameBufferAttachment * ( ::OSG::FrameBufferObjectBase::*getColorAttachments_function_type )( ::OSG::UInt32 const ) const;
            
            FrameBufferObjectBase_exposer.def( 
                "getColorAttachments"
                , getColorAttachments_function_type( &::OSG::FrameBufferObjectBase::getColorAttachments )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FrameBufferObjectBase::getColorSamples
        
            typedef ::OSG::UInt32 ( ::OSG::FrameBufferObjectBase::*getColorSamples_function_type )(  ) const;
            
            FrameBufferObjectBase_exposer.def( 
                "getColorSamples"
                , getColorSamples_function_type( &::OSG::FrameBufferObjectBase::getColorSamples ) );
        
        }
        { //::OSG::FrameBufferObjectBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::FrameBufferObjectBase::*getContainerSize_function_type )(  ) const;
            
            FrameBufferObjectBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::FrameBufferObjectBase::getContainerSize ) );
        
        }
        { //::OSG::FrameBufferObjectBase::getCoverageSamples
        
            typedef ::OSG::UInt32 ( ::OSG::FrameBufferObjectBase::*getCoverageSamples_function_type )(  ) const;
            
            FrameBufferObjectBase_exposer.def( 
                "getCoverageSamples"
                , getCoverageSamples_function_type( &::OSG::FrameBufferObjectBase::getCoverageSamples ) );
        
        }
        { //::OSG::FrameBufferObjectBase::getDepthAttachment
        
            typedef ::OSG::FrameBufferAttachment * ( ::OSG::FrameBufferObjectBase::*getDepthAttachment_function_type )(  ) const;
            
            FrameBufferObjectBase_exposer.def( 
                "getDepthAttachment"
                , getDepthAttachment_function_type( &::OSG::FrameBufferObjectBase::getDepthAttachment )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FrameBufferObjectBase::getDrawBuffers
        
            typedef ::GLenum const & ( ::OSG::FrameBufferObjectBase::*getDrawBuffers_function_type )( ::OSG::UInt32 const ) const;
            
            FrameBufferObjectBase_exposer.def( 
                "getDrawBuffers"
                , getDrawBuffers_function_type( &::OSG::FrameBufferObjectBase::getDrawBuffers )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::FrameBufferObjectBase::getEnableMultiSample
        
            typedef bool ( ::OSG::FrameBufferObjectBase::*getEnableMultiSample_function_type )(  ) const;
            
            FrameBufferObjectBase_exposer.def( 
                "getEnableMultiSample"
                , getEnableMultiSample_function_type( &::OSG::FrameBufferObjectBase::getEnableMultiSample ) );
        
        }
        { //::OSG::FrameBufferObjectBase::getFixedSampleLocation
        
            typedef bool ( ::OSG::FrameBufferObjectBase::*getFixedSampleLocation_function_type )(  ) const;
            
            FrameBufferObjectBase_exposer.def( 
                "getFixedSampleLocation"
                , getFixedSampleLocation_function_type( &::OSG::FrameBufferObjectBase::getFixedSampleLocation ) );
        
        }
        { //::OSG::FrameBufferObjectBase::getGLId
        
            typedef ::GLenum const & ( ::OSG::FrameBufferObjectBase::*getGLId_function_type )(  ) const;
            
            FrameBufferObjectBase_exposer.def( 
                "getGLId"
                , getGLId_function_type( &::OSG::FrameBufferObjectBase::getGLId )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::FrameBufferObjectBase::getHeight
        
            typedef ::OSG::UInt16 ( ::OSG::FrameBufferObjectBase::*getHeight_function_type )(  ) const;
            
            FrameBufferObjectBase_exposer.def( 
                "getHeight"
                , getHeight_function_type( &::OSG::FrameBufferObjectBase::getHeight ) );
        
        }
        { //::OSG::FrameBufferObjectBase::getMultiSampleGLId
        
            typedef ::GLenum const & ( ::OSG::FrameBufferObjectBase::*getMultiSampleGLId_function_type )(  ) const;
            
            FrameBufferObjectBase_exposer.def( 
                "getMultiSampleGLId"
                , getMultiSampleGLId_function_type( &::OSG::FrameBufferObjectBase::getMultiSampleGLId )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::FrameBufferObjectBase::getPostProcessOnDeactivate
        
            typedef bool ( ::OSG::FrameBufferObjectBase::*getPostProcessOnDeactivate_function_type )(  ) const;
            
            FrameBufferObjectBase_exposer.def( 
                "getPostProcessOnDeactivate"
                , getPostProcessOnDeactivate_function_type( &::OSG::FrameBufferObjectBase::getPostProcessOnDeactivate ) );
        
        }
        { //::OSG::FrameBufferObjectBase::getSFColorSamples
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::FrameBufferObjectBase::*getSFColorSamples_function_type )(  ) const;
            
            FrameBufferObjectBase_exposer.def( 
                "getSFColorSamples"
                , getSFColorSamples_function_type( &::OSG::FrameBufferObjectBase::getSFColorSamples )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FrameBufferObjectBase::getSFCoverageSamples
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::FrameBufferObjectBase::*getSFCoverageSamples_function_type )(  ) const;
            
            FrameBufferObjectBase_exposer.def( 
                "getSFCoverageSamples"
                , getSFCoverageSamples_function_type( &::OSG::FrameBufferObjectBase::getSFCoverageSamples )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FrameBufferObjectBase::getSFDepthAttachment
        
            typedef ::OSG::SFUnrecFrameBufferAttachmentPtr const * ( ::OSG::FrameBufferObjectBase::*getSFDepthAttachment_function_type )(  ) const;
            
            FrameBufferObjectBase_exposer.def( 
                "getSFDepthAttachment"
                , getSFDepthAttachment_function_type( &::OSG::FrameBufferObjectBase::getSFDepthAttachment )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FrameBufferObjectBase::getSFEnableMultiSample
        
            typedef ::OSG::SFBool const * ( ::OSG::FrameBufferObjectBase::*getSFEnableMultiSample_function_type )(  ) const;
            
            FrameBufferObjectBase_exposer.def( 
                "getSFEnableMultiSample"
                , getSFEnableMultiSample_function_type( &::OSG::FrameBufferObjectBase::getSFEnableMultiSample )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FrameBufferObjectBase::getSFFixedSampleLocation
        
            typedef ::OSG::SFBool const * ( ::OSG::FrameBufferObjectBase::*getSFFixedSampleLocation_function_type )(  ) const;
            
            FrameBufferObjectBase_exposer.def( 
                "getSFFixedSampleLocation"
                , getSFFixedSampleLocation_function_type( &::OSG::FrameBufferObjectBase::getSFFixedSampleLocation )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FrameBufferObjectBase::getSFGLId
        
            typedef ::OSG::SFGLenum const * ( ::OSG::FrameBufferObjectBase::*getSFGLId_function_type )(  ) const;
            
            FrameBufferObjectBase_exposer.def( 
                "getSFGLId"
                , getSFGLId_function_type( &::OSG::FrameBufferObjectBase::getSFGLId )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FrameBufferObjectBase::getSFHeight
        
            typedef ::OSG::SFUInt16 const * ( ::OSG::FrameBufferObjectBase::*getSFHeight_function_type )(  ) const;
            
            FrameBufferObjectBase_exposer.def( 
                "getSFHeight"
                , getSFHeight_function_type( &::OSG::FrameBufferObjectBase::getSFHeight )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FrameBufferObjectBase::getSFMultiSampleGLId
        
            typedef ::OSG::SFGLenum const * ( ::OSG::FrameBufferObjectBase::*getSFMultiSampleGLId_function_type )(  ) const;
            
            FrameBufferObjectBase_exposer.def( 
                "getSFMultiSampleGLId"
                , getSFMultiSampleGLId_function_type( &::OSG::FrameBufferObjectBase::getSFMultiSampleGLId )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FrameBufferObjectBase::getSFPostProcessOnDeactivate
        
            typedef ::OSG::SFBool const * ( ::OSG::FrameBufferObjectBase::*getSFPostProcessOnDeactivate_function_type )(  ) const;
            
            FrameBufferObjectBase_exposer.def( 
                "getSFPostProcessOnDeactivate"
                , getSFPostProcessOnDeactivate_function_type( &::OSG::FrameBufferObjectBase::getSFPostProcessOnDeactivate )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FrameBufferObjectBase::getSFStencilAttachment
        
            typedef ::OSG::SFUnrecFrameBufferAttachmentPtr const * ( ::OSG::FrameBufferObjectBase::*getSFStencilAttachment_function_type )(  ) const;
            
            FrameBufferObjectBase_exposer.def( 
                "getSFStencilAttachment"
                , getSFStencilAttachment_function_type( &::OSG::FrameBufferObjectBase::getSFStencilAttachment )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FrameBufferObjectBase::getSFWidth
        
            typedef ::OSG::SFUInt16 const * ( ::OSG::FrameBufferObjectBase::*getSFWidth_function_type )(  ) const;
            
            FrameBufferObjectBase_exposer.def( 
                "getSFWidth"
                , getSFWidth_function_type( &::OSG::FrameBufferObjectBase::getSFWidth )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FrameBufferObjectBase::getStencilAttachment
        
            typedef ::OSG::FrameBufferAttachment * ( ::OSG::FrameBufferObjectBase::*getStencilAttachment_function_type )(  ) const;
            
            FrameBufferObjectBase_exposer.def( 
                "getStencilAttachment"
                , getStencilAttachment_function_type( &::OSG::FrameBufferObjectBase::getStencilAttachment )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FrameBufferObjectBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::FrameBufferObjectBase::*getType_function_type )(  ) ;
            
            FrameBufferObjectBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::FrameBufferObjectBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FrameBufferObjectBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::FrameBufferObjectBase::*getType_function_type )(  ) const;
            
            FrameBufferObjectBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::FrameBufferObjectBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::FrameBufferObjectBase::getWidth
        
            typedef ::OSG::UInt16 ( ::OSG::FrameBufferObjectBase::*getWidth_function_type )(  ) const;
            
            FrameBufferObjectBase_exposer.def( 
                "getWidth"
                , getWidth_function_type( &::OSG::FrameBufferObjectBase::getWidth ) );
        
        }
        { //::OSG::FrameBufferObjectBase::pushToColorAttachments
        
            typedef void ( ::OSG::FrameBufferObjectBase::*pushToColorAttachments_function_type )( ::OSG::FrameBufferAttachment * const ) ;
            
            FrameBufferObjectBase_exposer.def( 
                "pushToColorAttachments"
                , pushToColorAttachments_function_type( &::OSG::FrameBufferObjectBase::pushToColorAttachments )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FrameBufferObjectBase::removeFromColorAttachments
        
            typedef void ( ::OSG::FrameBufferObjectBase::*removeFromColorAttachments_function_type )( ::OSG::UInt32 ) ;
            
            FrameBufferObjectBase_exposer.def( 
                "removeFromColorAttachments"
                , removeFromColorAttachments_function_type( &::OSG::FrameBufferObjectBase::removeFromColorAttachments )
                , ( bp::arg("uiIndex") ) );
        
        }
        { //::OSG::FrameBufferObjectBase::removeObjFromColorAttachments
        
            typedef void ( ::OSG::FrameBufferObjectBase::*removeObjFromColorAttachments_function_type )( ::OSG::FrameBufferAttachment * const ) ;
            
            FrameBufferObjectBase_exposer.def( 
                "removeObjFromColorAttachments"
                , removeObjFromColorAttachments_function_type( &::OSG::FrameBufferObjectBase::removeObjFromColorAttachments )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FrameBufferObjectBase::setColorSamples
        
            typedef void ( ::OSG::FrameBufferObjectBase::*setColorSamples_function_type )( ::OSG::UInt32 const ) ;
            
            FrameBufferObjectBase_exposer.def( 
                "setColorSamples"
                , setColorSamples_function_type( &::OSG::FrameBufferObjectBase::setColorSamples )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FrameBufferObjectBase::setCoverageSamples
        
            typedef void ( ::OSG::FrameBufferObjectBase::*setCoverageSamples_function_type )( ::OSG::UInt32 const ) ;
            
            FrameBufferObjectBase_exposer.def( 
                "setCoverageSamples"
                , setCoverageSamples_function_type( &::OSG::FrameBufferObjectBase::setCoverageSamples )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FrameBufferObjectBase::setDepthAttachment
        
            typedef void ( ::OSG::FrameBufferObjectBase::*setDepthAttachment_function_type )( ::OSG::FrameBufferAttachment * const ) ;
            
            FrameBufferObjectBase_exposer.def( 
                "setDepthAttachment"
                , setDepthAttachment_function_type( &::OSG::FrameBufferObjectBase::setDepthAttachment )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FrameBufferObjectBase::setEnableMultiSample
        
            typedef void ( ::OSG::FrameBufferObjectBase::*setEnableMultiSample_function_type )( bool const ) ;
            
            FrameBufferObjectBase_exposer.def( 
                "setEnableMultiSample"
                , setEnableMultiSample_function_type( &::OSG::FrameBufferObjectBase::setEnableMultiSample )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FrameBufferObjectBase::setFixedSampleLocation
        
            typedef void ( ::OSG::FrameBufferObjectBase::*setFixedSampleLocation_function_type )( bool const ) ;
            
            FrameBufferObjectBase_exposer.def( 
                "setFixedSampleLocation"
                , setFixedSampleLocation_function_type( &::OSG::FrameBufferObjectBase::setFixedSampleLocation )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FrameBufferObjectBase::setGLId
        
            typedef void ( ::OSG::FrameBufferObjectBase::*setGLId_function_type )( ::GLenum const & ) ;
            
            FrameBufferObjectBase_exposer.def( 
                "setGLId"
                , setGLId_function_type( &::OSG::FrameBufferObjectBase::setGLId )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FrameBufferObjectBase::setHeight
        
            typedef void ( ::OSG::FrameBufferObjectBase::*setHeight_function_type )( ::OSG::UInt16 const ) ;
            
            FrameBufferObjectBase_exposer.def( 
                "setHeight"
                , setHeight_function_type( &::OSG::FrameBufferObjectBase::setHeight )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FrameBufferObjectBase::setMultiSampleGLId
        
            typedef void ( ::OSG::FrameBufferObjectBase::*setMultiSampleGLId_function_type )( ::GLenum const & ) ;
            
            FrameBufferObjectBase_exposer.def( 
                "setMultiSampleGLId"
                , setMultiSampleGLId_function_type( &::OSG::FrameBufferObjectBase::setMultiSampleGLId )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FrameBufferObjectBase::setPostProcessOnDeactivate
        
            typedef void ( ::OSG::FrameBufferObjectBase::*setPostProcessOnDeactivate_function_type )( bool const ) ;
            
            FrameBufferObjectBase_exposer.def( 
                "setPostProcessOnDeactivate"
                , setPostProcessOnDeactivate_function_type( &::OSG::FrameBufferObjectBase::setPostProcessOnDeactivate )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FrameBufferObjectBase::setStencilAttachment
        
            typedef void ( ::OSG::FrameBufferObjectBase::*setStencilAttachment_function_type )( ::OSG::FrameBufferAttachment * const ) ;
            
            FrameBufferObjectBase_exposer.def( 
                "setStencilAttachment"
                , setStencilAttachment_function_type( &::OSG::FrameBufferObjectBase::setStencilAttachment )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FrameBufferObjectBase::setWidth
        
            typedef void ( ::OSG::FrameBufferObjectBase::*setWidth_function_type )( ::OSG::UInt16 const ) ;
            
            FrameBufferObjectBase_exposer.def( 
                "setWidth"
                , setWidth_function_type( &::OSG::FrameBufferObjectBase::setWidth )
                , ( bp::arg("value") ) );
        
        }
        FrameBufferObjectBase_exposer.staticmethod( "create" );
        FrameBufferObjectBase_exposer.staticmethod( "createDependent" );
        FrameBufferObjectBase_exposer.staticmethod( "createLocal" );
        FrameBufferObjectBase_exposer.staticmethod( "getClassGroupId" );
        FrameBufferObjectBase_exposer.staticmethod( "getClassType" );
        FrameBufferObjectBase_exposer.staticmethod( "getClassTypeId" );
        FrameBufferObjectBase_exposer.def("getMFColorAttachments",FrameBufferObjectBase_getMFColorAttachments);
        FrameBufferObjectBase_exposer.def("getMFDrawBuffers",FrameBufferObjectBase_getMFDrawBuffers);
    }

}
