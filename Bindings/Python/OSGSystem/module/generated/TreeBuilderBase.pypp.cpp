// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "TreeBuilderBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct TreeBuilderBase_wrapper : OSG::TreeBuilderBase, bp::wrapper< OSG::TreeBuilderBase > {

    virtual void add( ::OSG::RenderActionBase * pAction, ::OSG::RenderPartitionBase * pPart, ::OSG::RenderFunctor & drawFunc, ::OSG::State * pState, ::OSG::StateOverride * pStateOverride ){
        bp::override func_add = this->get_override( "add" );
        func_add( boost::python::ptr(pAction), boost::python::ptr(pPart), boost::ref(drawFunc), boost::python::ptr(pState), boost::python::ptr(pStateOverride) );
    }

    virtual void reset(  ) {
        if( bp::override func_reset = this->get_override( "reset" ) )
            func_reset(  );
        else{
            this->OSG::TreeBuilderBase::reset(  );
        }
    }
    
    void default_reset(  ) {
        OSG::TreeBuilderBase::reset( );
    }

    virtual void setNodePool( ::OSG::RenderTreeNodePool * pNodePool ) {
        if( bp::override func_setNodePool = this->get_override( "setNodePool" ) )
            func_setNodePool( boost::python::ptr(pNodePool) );
        else{
            this->OSG::TreeBuilderBase::setNodePool( boost::python::ptr(pNodePool) );
        }
    }
    
    void default_setNodePool( ::OSG::RenderTreeNodePool * pNodePool ) {
        OSG::TreeBuilderBase::setNodePool( boost::python::ptr(pNodePool) );
    }

};

void register_TreeBuilderBase_class(){

    { //::OSG::TreeBuilderBase
        typedef bp::class_< TreeBuilderBase_wrapper, boost::noncopyable > TreeBuilderBase_exposer_t;
        TreeBuilderBase_exposer_t TreeBuilderBase_exposer = TreeBuilderBase_exposer_t( "TreeBuilderBase", bp::no_init );
        bp::scope TreeBuilderBase_scope( TreeBuilderBase_exposer );
        { //::OSG::TreeBuilderBase::add
        
            typedef void ( ::OSG::TreeBuilderBase::*add_function_type )( ::OSG::RenderActionBase *,::OSG::RenderPartitionBase *,::OSG::RenderFunctor &,::OSG::State *,::OSG::StateOverride * ) ;
            
            TreeBuilderBase_exposer.def( 
                "add"
                , bp::pure_virtual( add_function_type(&::OSG::TreeBuilderBase::add) )
                , ( bp::arg("pAction"), bp::arg("pPart"), bp::arg("drawFunc"), bp::arg("pState"), bp::arg("pStateOverride") ) );
        
        }
        { //::OSG::TreeBuilderBase::getNodePool
        
            typedef ::OSG::RenderTreeNodePool * ( ::OSG::TreeBuilderBase::*getNodePool_function_type )(  ) ;
            
            TreeBuilderBase_exposer.def( 
                "getNodePool"
                , getNodePool_function_type( &::OSG::TreeBuilderBase::getNodePool )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TreeBuilderBase::reset
        
            typedef void ( ::OSG::TreeBuilderBase::*reset_function_type )(  ) ;
            typedef void ( TreeBuilderBase_wrapper::*default_reset_function_type )(  ) ;
            
            TreeBuilderBase_exposer.def( 
                "reset"
                , reset_function_type(&::OSG::TreeBuilderBase::reset)
                , default_reset_function_type(&TreeBuilderBase_wrapper::default_reset) );
        
        }
        { //::OSG::TreeBuilderBase::setNodePool
        
            typedef void ( ::OSG::TreeBuilderBase::*setNodePool_function_type )( ::OSG::RenderTreeNodePool * ) ;
            typedef void ( TreeBuilderBase_wrapper::*default_setNodePool_function_type )( ::OSG::RenderTreeNodePool * ) ;
            
            TreeBuilderBase_exposer.def( 
                "setNodePool"
                , setNodePool_function_type(&::OSG::TreeBuilderBase::setNodePool)
                , default_setNodePool_function_type(&TreeBuilderBase_wrapper::default_setNodePool)
                , ( bp::arg("pNodePool") ) );
        
        }
    }

}
