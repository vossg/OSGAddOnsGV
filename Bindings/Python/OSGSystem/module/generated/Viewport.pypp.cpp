// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "Viewport.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_Viewport_class(){

    { //::OSG::Viewport
        typedef bp::class_< OSG::Viewport, bp::bases< OSG::ViewportBase >, OSG::Viewport::ObjRecPtr, boost::noncopyable > Viewport_exposer_t;
        Viewport_exposer_t Viewport_exposer = Viewport_exposer_t( "Viewport", bp::no_init );
        bp::scope Viewport_scope( Viewport_exposer );
        { //::OSG::Viewport::activateSize
        
            typedef void ( ::OSG::Viewport::*activateSize_function_type )(  ) ;
            
            Viewport_exposer.def( 
                "activateSize"
                , activateSize_function_type( &::OSG::Viewport::activateSize ) );
        
        }
        { //::OSG::Viewport::calcIsFullWindow
        
            typedef bool ( ::OSG::Viewport::*calcIsFullWindow_function_type )(  ) const;
            
            Viewport_exposer.def( 
                "calcIsFullWindow"
                , calcIsFullWindow_function_type( &::OSG::Viewport::calcIsFullWindow ) );
        
        }
        { //::OSG::Viewport::calcPixelBottom
        
            typedef ::OSG::Int32 ( ::OSG::Viewport::*calcPixelBottom_function_type )(  ) const;
            
            Viewport_exposer.def( 
                "calcPixelBottom"
                , calcPixelBottom_function_type( &::OSG::Viewport::calcPixelBottom ) );
        
        }
        { //::OSG::Viewport::calcPixelHeight
        
            typedef ::OSG::Int32 ( ::OSG::Viewport::*calcPixelHeight_function_type )(  ) const;
            
            Viewport_exposer.def( 
                "calcPixelHeight"
                , calcPixelHeight_function_type( &::OSG::Viewport::calcPixelHeight ) );
        
        }
        { //::OSG::Viewport::calcPixelLeft
        
            typedef ::OSG::Int32 ( ::OSG::Viewport::*calcPixelLeft_function_type )(  ) const;
            
            Viewport_exposer.def( 
                "calcPixelLeft"
                , calcPixelLeft_function_type( &::OSG::Viewport::calcPixelLeft ) );
        
        }
        { //::OSG::Viewport::calcPixelRight
        
            typedef ::OSG::Int32 ( ::OSG::Viewport::*calcPixelRight_function_type )(  ) const;
            
            Viewport_exposer.def( 
                "calcPixelRight"
                , calcPixelRight_function_type( &::OSG::Viewport::calcPixelRight ) );
        
        }
        { //::OSG::Viewport::calcPixelTop
        
            typedef ::OSG::Int32 ( ::OSG::Viewport::*calcPixelTop_function_type )(  ) const;
            
            Viewport_exposer.def( 
                "calcPixelTop"
                , calcPixelTop_function_type( &::OSG::Viewport::calcPixelTop ) );
        
        }
        { //::OSG::Viewport::calcPixelWidth
        
            typedef ::OSG::Int32 ( ::OSG::Viewport::*calcPixelWidth_function_type )(  ) const;
            
            Viewport_exposer.def( 
                "calcPixelWidth"
                , calcPixelWidth_function_type( &::OSG::Viewport::calcPixelWidth ) );
        
        }
        { //::OSG::Viewport::changed
        
            typedef void ( ::OSG::Viewport::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            Viewport_exposer.def( 
                "changed"
                , changed_function_type( &::OSG::Viewport::changed )
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("detail") ) );
        
        }
        { //::OSG::Viewport::dump
        
            typedef void ( ::OSG::Viewport::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            Viewport_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::Viewport::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::Viewport::getParent
        
            typedef ::OSG::Window * ( ::OSG::Viewport::*getParent_function_type )(  ) const;
            
            Viewport_exposer.def( 
                "getParent"
                , getParent_function_type( &::OSG::Viewport::getParent )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Viewport::render
        
            typedef void ( ::OSG::Viewport::*render_function_type )( ::OSG::RenderActionBase * ) ;
            
            Viewport_exposer.def( 
                "render"
                , render_function_type( &::OSG::Viewport::render )
                , ( bp::arg("action") ) );
        
        }
        pyopensg::register_transit< OSG::Viewport >::execute();
        bp::implicitly_convertible< OSG::Viewport::ObjRecPtr, OSG::Viewport* >();
        bp::implicitly_convertible< OSG::Viewport::ObjRecPtr, OSG::Viewport::ObjCPtr >();
        bp::implicitly_convertible< OSG::Viewport::ObjRecPtr, OSG::Viewarea* >();
        bp::implicitly_convertible< OSG::Viewport::ObjRecPtr, OSG::Viewarea::ObjRecPtr >();
        bp::implicitly_convertible<OSG::Viewport::ObjRecPtr, OSG::Viewarea::ObjCPtr>();
        Viewport_exposer.def("calcNormalizedCoordinates",osgwrap::calcNormalizedCoordinates);
    }

}
