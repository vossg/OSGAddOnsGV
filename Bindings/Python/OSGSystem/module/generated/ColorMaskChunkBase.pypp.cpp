// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "ColorMaskChunkBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_ColorMaskChunkBase_class(){

    { //::OSG::ColorMaskChunkBase
        typedef bp::class_< OSG::ColorMaskChunkBase, bp::bases< OSG::StateChunk >, boost::noncopyable > ColorMaskChunkBase_exposer_t;
        ColorMaskChunkBase_exposer_t ColorMaskChunkBase_exposer = ColorMaskChunkBase_exposer_t( "ColorMaskChunkBase", bp::no_init );
        bp::scope ColorMaskChunkBase_scope( ColorMaskChunkBase_exposer );
        bp::scope().attr("MaskRFieldId") = (int)OSG::ColorMaskChunkBase::MaskRFieldId;
        bp::scope().attr("MaskGFieldId") = (int)OSG::ColorMaskChunkBase::MaskGFieldId;
        bp::scope().attr("MaskBFieldId") = (int)OSG::ColorMaskChunkBase::MaskBFieldId;
        bp::scope().attr("MaskAFieldId") = (int)OSG::ColorMaskChunkBase::MaskAFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::ColorMaskChunkBase::NextFieldId;
        { //::OSG::ColorMaskChunkBase::copyFromBin
        
            typedef void ( ::OSG::ColorMaskChunkBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            ColorMaskChunkBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::ColorMaskChunkBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::ColorMaskChunkBase::copyToBin
        
            typedef void ( ::OSG::ColorMaskChunkBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            ColorMaskChunkBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::ColorMaskChunkBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::ColorMaskChunkBase::create
        
            typedef ::OSG::ColorMaskChunkTransitPtr ( *create_function_type )(  );
            
            ColorMaskChunkBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::ColorMaskChunkBase::create ) );
        
        }
        { //::OSG::ColorMaskChunkBase::createDependent
        
            typedef ::OSG::ColorMaskChunkTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            ColorMaskChunkBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::ColorMaskChunkBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::ColorMaskChunkBase::createLocal
        
            typedef ::OSG::ColorMaskChunkTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            ColorMaskChunkBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::ColorMaskChunkBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::ColorMaskChunkBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::ColorMaskChunkBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            ColorMaskChunkBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::ColorMaskChunkBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::ColorMaskChunkBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            ColorMaskChunkBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::ColorMaskChunkBase::getClassGroupId ) );
        
        }
        { //::OSG::ColorMaskChunkBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            ColorMaskChunkBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::ColorMaskChunkBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::ColorMaskChunkBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            ColorMaskChunkBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::ColorMaskChunkBase::getClassTypeId ) );
        
        }
        { //::OSG::ColorMaskChunkBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::ColorMaskChunkBase::*getContainerSize_function_type )(  ) const;
            
            ColorMaskChunkBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::ColorMaskChunkBase::getContainerSize ) );
        
        }
        { //::OSG::ColorMaskChunkBase::getMaskA
        
            typedef bool ( ::OSG::ColorMaskChunkBase::*getMaskA_function_type )(  ) const;
            
            ColorMaskChunkBase_exposer.def( 
                "getMaskA"
                , getMaskA_function_type( &::OSG::ColorMaskChunkBase::getMaskA ) );
        
        }
        { //::OSG::ColorMaskChunkBase::getMaskB
        
            typedef bool ( ::OSG::ColorMaskChunkBase::*getMaskB_function_type )(  ) const;
            
            ColorMaskChunkBase_exposer.def( 
                "getMaskB"
                , getMaskB_function_type( &::OSG::ColorMaskChunkBase::getMaskB ) );
        
        }
        { //::OSG::ColorMaskChunkBase::getMaskG
        
            typedef bool ( ::OSG::ColorMaskChunkBase::*getMaskG_function_type )(  ) const;
            
            ColorMaskChunkBase_exposer.def( 
                "getMaskG"
                , getMaskG_function_type( &::OSG::ColorMaskChunkBase::getMaskG ) );
        
        }
        { //::OSG::ColorMaskChunkBase::getMaskR
        
            typedef bool ( ::OSG::ColorMaskChunkBase::*getMaskR_function_type )(  ) const;
            
            ColorMaskChunkBase_exposer.def( 
                "getMaskR"
                , getMaskR_function_type( &::OSG::ColorMaskChunkBase::getMaskR ) );
        
        }
        { //::OSG::ColorMaskChunkBase::getSFMaskA
        
            typedef ::OSG::SFBool const * ( ::OSG::ColorMaskChunkBase::*getSFMaskA_function_type )(  ) const;
            
            ColorMaskChunkBase_exposer.def( 
                "getSFMaskA"
                , getSFMaskA_function_type( &::OSG::ColorMaskChunkBase::getSFMaskA )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ColorMaskChunkBase::getSFMaskB
        
            typedef ::OSG::SFBool const * ( ::OSG::ColorMaskChunkBase::*getSFMaskB_function_type )(  ) const;
            
            ColorMaskChunkBase_exposer.def( 
                "getSFMaskB"
                , getSFMaskB_function_type( &::OSG::ColorMaskChunkBase::getSFMaskB )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ColorMaskChunkBase::getSFMaskG
        
            typedef ::OSG::SFBool const * ( ::OSG::ColorMaskChunkBase::*getSFMaskG_function_type )(  ) const;
            
            ColorMaskChunkBase_exposer.def( 
                "getSFMaskG"
                , getSFMaskG_function_type( &::OSG::ColorMaskChunkBase::getSFMaskG )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ColorMaskChunkBase::getSFMaskR
        
            typedef ::OSG::SFBool const * ( ::OSG::ColorMaskChunkBase::*getSFMaskR_function_type )(  ) const;
            
            ColorMaskChunkBase_exposer.def( 
                "getSFMaskR"
                , getSFMaskR_function_type( &::OSG::ColorMaskChunkBase::getSFMaskR )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ColorMaskChunkBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::ColorMaskChunkBase::*getType_function_type )(  ) ;
            
            ColorMaskChunkBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::ColorMaskChunkBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ColorMaskChunkBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::ColorMaskChunkBase::*getType_function_type )(  ) const;
            
            ColorMaskChunkBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::ColorMaskChunkBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ColorMaskChunkBase::setMaskA
        
            typedef void ( ::OSG::ColorMaskChunkBase::*setMaskA_function_type )( bool const ) ;
            
            ColorMaskChunkBase_exposer.def( 
                "setMaskA"
                , setMaskA_function_type( &::OSG::ColorMaskChunkBase::setMaskA )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ColorMaskChunkBase::setMaskB
        
            typedef void ( ::OSG::ColorMaskChunkBase::*setMaskB_function_type )( bool const ) ;
            
            ColorMaskChunkBase_exposer.def( 
                "setMaskB"
                , setMaskB_function_type( &::OSG::ColorMaskChunkBase::setMaskB )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ColorMaskChunkBase::setMaskG
        
            typedef void ( ::OSG::ColorMaskChunkBase::*setMaskG_function_type )( bool const ) ;
            
            ColorMaskChunkBase_exposer.def( 
                "setMaskG"
                , setMaskG_function_type( &::OSG::ColorMaskChunkBase::setMaskG )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ColorMaskChunkBase::setMaskR
        
            typedef void ( ::OSG::ColorMaskChunkBase::*setMaskR_function_type )( bool const ) ;
            
            ColorMaskChunkBase_exposer.def( 
                "setMaskR"
                , setMaskR_function_type( &::OSG::ColorMaskChunkBase::setMaskR )
                , ( bp::arg("value") ) );
        
        }
        ColorMaskChunkBase_exposer.staticmethod( "create" );
        ColorMaskChunkBase_exposer.staticmethod( "createDependent" );
        ColorMaskChunkBase_exposer.staticmethod( "createLocal" );
        ColorMaskChunkBase_exposer.staticmethod( "getClassGroupId" );
        ColorMaskChunkBase_exposer.staticmethod( "getClassType" );
        ColorMaskChunkBase_exposer.staticmethod( "getClassTypeId" );
    }

}
