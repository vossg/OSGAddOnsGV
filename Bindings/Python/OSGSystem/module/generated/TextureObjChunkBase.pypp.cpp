// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "TextureObjChunkBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct TextureObjChunkBase_wrapper : OSG::TextureObjChunkBase, bp::wrapper< OSG::TextureObjChunkBase > {



};

void register_TextureObjChunkBase_class(){

    { //::OSG::TextureObjChunkBase
        typedef bp::class_< TextureObjChunkBase_wrapper, bp::bases< OSG::TextureBaseChunk >, boost::noncopyable > TextureObjChunkBase_exposer_t;
        TextureObjChunkBase_exposer_t TextureObjChunkBase_exposer = TextureObjChunkBase_exposer_t( "TextureObjChunkBase", bp::no_init );
        bp::scope TextureObjChunkBase_scope( TextureObjChunkBase_exposer );
        bp::scope().attr("ImageFieldId") = (int)OSG::TextureObjChunkBase::ImageFieldId;
        bp::scope().attr("InternalFormatFieldId") = (int)OSG::TextureObjChunkBase::InternalFormatFieldId;
        bp::scope().attr("ExternalFormatFieldId") = (int)OSG::TextureObjChunkBase::ExternalFormatFieldId;
        bp::scope().attr("ScaleFieldId") = (int)OSG::TextureObjChunkBase::ScaleFieldId;
        bp::scope().attr("FrameFieldId") = (int)OSG::TextureObjChunkBase::FrameFieldId;
        bp::scope().attr("MinFilterFieldId") = (int)OSG::TextureObjChunkBase::MinFilterFieldId;
        bp::scope().attr("MagFilterFieldId") = (int)OSG::TextureObjChunkBase::MagFilterFieldId;
        bp::scope().attr("WrapSFieldId") = (int)OSG::TextureObjChunkBase::WrapSFieldId;
        bp::scope().attr("WrapTFieldId") = (int)OSG::TextureObjChunkBase::WrapTFieldId;
        bp::scope().attr("WrapRFieldId") = (int)OSG::TextureObjChunkBase::WrapRFieldId;
        bp::scope().attr("GLIdFieldId") = (int)OSG::TextureObjChunkBase::GLIdFieldId;
        bp::scope().attr("PriorityFieldId") = (int)OSG::TextureObjChunkBase::PriorityFieldId;
        bp::scope().attr("DirtyLeftFieldId") = (int)OSG::TextureObjChunkBase::DirtyLeftFieldId;
        bp::scope().attr("DirtyMinXFieldId") = (int)OSG::TextureObjChunkBase::DirtyMinXFieldId;
        bp::scope().attr("DirtyMaxXFieldId") = (int)OSG::TextureObjChunkBase::DirtyMaxXFieldId;
        bp::scope().attr("DirtyMinYFieldId") = (int)OSG::TextureObjChunkBase::DirtyMinYFieldId;
        bp::scope().attr("DirtyMaxYFieldId") = (int)OSG::TextureObjChunkBase::DirtyMaxYFieldId;
        bp::scope().attr("DirtyMinZFieldId") = (int)OSG::TextureObjChunkBase::DirtyMinZFieldId;
        bp::scope().attr("DirtyMaxZFieldId") = (int)OSG::TextureObjChunkBase::DirtyMaxZFieldId;
        bp::scope().attr("AnisotropyFieldId") = (int)OSG::TextureObjChunkBase::AnisotropyFieldId;
        bp::scope().attr("BorderColorFieldId") = (int)OSG::TextureObjChunkBase::BorderColorFieldId;
        bp::scope().attr("CompareModeFieldId") = (int)OSG::TextureObjChunkBase::CompareModeFieldId;
        bp::scope().attr("CompareFuncFieldId") = (int)OSG::TextureObjChunkBase::CompareFuncFieldId;
        bp::scope().attr("DepthModeFieldId") = (int)OSG::TextureObjChunkBase::DepthModeFieldId;
        bp::scope().attr("BorderWidthFieldId") = (int)OSG::TextureObjChunkBase::BorderWidthFieldId;
        bp::scope().attr("SkipMipMapLevelsFieldId") = (int)OSG::TextureObjChunkBase::SkipMipMapLevelsFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::TextureObjChunkBase::NextFieldId;
        { //::OSG::TextureObjChunkBase::copyFromBin
        
            typedef void ( ::OSG::TextureObjChunkBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            TextureObjChunkBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::TextureObjChunkBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::TextureObjChunkBase::copyToBin
        
            typedef void ( ::OSG::TextureObjChunkBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            TextureObjChunkBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::TextureObjChunkBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::TextureObjChunkBase::create
        
            typedef ::OSG::TextureObjChunkTransitPtr ( *create_function_type )(  );
            
            TextureObjChunkBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::TextureObjChunkBase::create ) );
        
        }
        { //::OSG::TextureObjChunkBase::createDependent
        
            typedef ::OSG::TextureObjChunkTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            TextureObjChunkBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::TextureObjChunkBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::TextureObjChunkBase::createLocal
        
            typedef ::OSG::TextureObjChunkTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            TextureObjChunkBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::TextureObjChunkBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::TextureObjChunkBase::getAnisotropy
        
            typedef ::OSG::Real32 ( ::OSG::TextureObjChunkBase::*getAnisotropy_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getAnisotropy"
                , getAnisotropy_function_type( &::OSG::TextureObjChunkBase::getAnisotropy ) );
        
        }
        { //::OSG::TextureObjChunkBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::TextureObjChunkBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            TextureObjChunkBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::TextureObjChunkBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::TextureObjChunkBase::getBorderColor
        
            typedef ::OSG::Color4f const & ( ::OSG::TextureObjChunkBase::*getBorderColor_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getBorderColor"
                , getBorderColor_function_type( &::OSG::TextureObjChunkBase::getBorderColor )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::TextureObjChunkBase::getBorderWidth
        
            typedef ::OSG::UInt32 ( ::OSG::TextureObjChunkBase::*getBorderWidth_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getBorderWidth"
                , getBorderWidth_function_type( &::OSG::TextureObjChunkBase::getBorderWidth ) );
        
        }
        { //::OSG::TextureObjChunkBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            TextureObjChunkBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::TextureObjChunkBase::getClassGroupId ) );
        
        }
        { //::OSG::TextureObjChunkBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            TextureObjChunkBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::TextureObjChunkBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::TextureObjChunkBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            TextureObjChunkBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::TextureObjChunkBase::getClassTypeId ) );
        
        }
        { //::OSG::TextureObjChunkBase::getCompareFunc
        
            typedef ::GLenum const & ( ::OSG::TextureObjChunkBase::*getCompareFunc_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getCompareFunc"
                , getCompareFunc_function_type( &::OSG::TextureObjChunkBase::getCompareFunc )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureObjChunkBase::getCompareMode
        
            typedef ::GLenum const & ( ::OSG::TextureObjChunkBase::*getCompareMode_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getCompareMode"
                , getCompareMode_function_type( &::OSG::TextureObjChunkBase::getCompareMode )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureObjChunkBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::TextureObjChunkBase::*getContainerSize_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::TextureObjChunkBase::getContainerSize ) );
        
        }
        { //::OSG::TextureObjChunkBase::getDepthMode
        
            typedef ::GLenum const & ( ::OSG::TextureObjChunkBase::*getDepthMode_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getDepthMode"
                , getDepthMode_function_type( &::OSG::TextureObjChunkBase::getDepthMode )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureObjChunkBase::getDirtyLeft
        
            typedef ::OSG::Int32 ( ::OSG::TextureObjChunkBase::*getDirtyLeft_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getDirtyLeft"
                , getDirtyLeft_function_type( &::OSG::TextureObjChunkBase::getDirtyLeft ) );
        
        }
        { //::OSG::TextureObjChunkBase::getDirtyMaxX
        
            typedef ::OSG::Int32 ( ::OSG::TextureObjChunkBase::*getDirtyMaxX_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getDirtyMaxX"
                , getDirtyMaxX_function_type( &::OSG::TextureObjChunkBase::getDirtyMaxX ) );
        
        }
        { //::OSG::TextureObjChunkBase::getDirtyMaxY
        
            typedef ::OSG::Int32 ( ::OSG::TextureObjChunkBase::*getDirtyMaxY_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getDirtyMaxY"
                , getDirtyMaxY_function_type( &::OSG::TextureObjChunkBase::getDirtyMaxY ) );
        
        }
        { //::OSG::TextureObjChunkBase::getDirtyMaxZ
        
            typedef ::OSG::Int32 ( ::OSG::TextureObjChunkBase::*getDirtyMaxZ_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getDirtyMaxZ"
                , getDirtyMaxZ_function_type( &::OSG::TextureObjChunkBase::getDirtyMaxZ ) );
        
        }
        { //::OSG::TextureObjChunkBase::getDirtyMinX
        
            typedef ::OSG::Int32 ( ::OSG::TextureObjChunkBase::*getDirtyMinX_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getDirtyMinX"
                , getDirtyMinX_function_type( &::OSG::TextureObjChunkBase::getDirtyMinX ) );
        
        }
        { //::OSG::TextureObjChunkBase::getDirtyMinY
        
            typedef ::OSG::Int32 ( ::OSG::TextureObjChunkBase::*getDirtyMinY_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getDirtyMinY"
                , getDirtyMinY_function_type( &::OSG::TextureObjChunkBase::getDirtyMinY ) );
        
        }
        { //::OSG::TextureObjChunkBase::getDirtyMinZ
        
            typedef ::OSG::Int32 ( ::OSG::TextureObjChunkBase::*getDirtyMinZ_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getDirtyMinZ"
                , getDirtyMinZ_function_type( &::OSG::TextureObjChunkBase::getDirtyMinZ ) );
        
        }
        { //::OSG::TextureObjChunkBase::getExternalFormat
        
            typedef ::GLenum const & ( ::OSG::TextureObjChunkBase::*getExternalFormat_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getExternalFormat"
                , getExternalFormat_function_type( &::OSG::TextureObjChunkBase::getExternalFormat )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureObjChunkBase::getFrame
        
            typedef ::OSG::UInt32 ( ::OSG::TextureObjChunkBase::*getFrame_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getFrame"
                , getFrame_function_type( &::OSG::TextureObjChunkBase::getFrame ) );
        
        }
        { //::OSG::TextureObjChunkBase::getGLId
        
            typedef ::GLenum const & ( ::OSG::TextureObjChunkBase::*getGLId_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getGLId"
                , getGLId_function_type( &::OSG::TextureObjChunkBase::getGLId )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureObjChunkBase::getImage
        
            typedef ::OSG::Image * ( ::OSG::TextureObjChunkBase::*getImage_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getImage"
                , getImage_function_type( &::OSG::TextureObjChunkBase::getImage )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureObjChunkBase::getInternalFormat
        
            typedef ::GLenum const & ( ::OSG::TextureObjChunkBase::*getInternalFormat_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getInternalFormat"
                , getInternalFormat_function_type( &::OSG::TextureObjChunkBase::getInternalFormat )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureObjChunkBase::getMagFilter
        
            typedef ::GLenum const & ( ::OSG::TextureObjChunkBase::*getMagFilter_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getMagFilter"
                , getMagFilter_function_type( &::OSG::TextureObjChunkBase::getMagFilter )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureObjChunkBase::getMinFilter
        
            typedef ::GLenum const & ( ::OSG::TextureObjChunkBase::*getMinFilter_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getMinFilter"
                , getMinFilter_function_type( &::OSG::TextureObjChunkBase::getMinFilter )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureObjChunkBase::getPriority
        
            typedef ::OSG::Real32 ( ::OSG::TextureObjChunkBase::*getPriority_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getPriority"
                , getPriority_function_type( &::OSG::TextureObjChunkBase::getPriority ) );
        
        }
        { //::OSG::TextureObjChunkBase::getSFAnisotropy
        
            typedef ::OSG::SFReal32 const * ( ::OSG::TextureObjChunkBase::*getSFAnisotropy_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getSFAnisotropy"
                , getSFAnisotropy_function_type( &::OSG::TextureObjChunkBase::getSFAnisotropy )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureObjChunkBase::getSFBorderColor
        
            typedef ::OSG::SFColor4f const * ( ::OSG::TextureObjChunkBase::*getSFBorderColor_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getSFBorderColor"
                , getSFBorderColor_function_type( &::OSG::TextureObjChunkBase::getSFBorderColor )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureObjChunkBase::getSFBorderWidth
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::TextureObjChunkBase::*getSFBorderWidth_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getSFBorderWidth"
                , getSFBorderWidth_function_type( &::OSG::TextureObjChunkBase::getSFBorderWidth )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureObjChunkBase::getSFCompareFunc
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureObjChunkBase::*getSFCompareFunc_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getSFCompareFunc"
                , getSFCompareFunc_function_type( &::OSG::TextureObjChunkBase::getSFCompareFunc )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureObjChunkBase::getSFCompareMode
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureObjChunkBase::*getSFCompareMode_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getSFCompareMode"
                , getSFCompareMode_function_type( &::OSG::TextureObjChunkBase::getSFCompareMode )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureObjChunkBase::getSFDepthMode
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureObjChunkBase::*getSFDepthMode_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getSFDepthMode"
                , getSFDepthMode_function_type( &::OSG::TextureObjChunkBase::getSFDepthMode )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureObjChunkBase::getSFDirtyLeft
        
            typedef ::OSG::SFInt32 const * ( ::OSG::TextureObjChunkBase::*getSFDirtyLeft_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getSFDirtyLeft"
                , getSFDirtyLeft_function_type( &::OSG::TextureObjChunkBase::getSFDirtyLeft )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureObjChunkBase::getSFDirtyMaxX
        
            typedef ::OSG::SFInt32 const * ( ::OSG::TextureObjChunkBase::*getSFDirtyMaxX_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getSFDirtyMaxX"
                , getSFDirtyMaxX_function_type( &::OSG::TextureObjChunkBase::getSFDirtyMaxX )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureObjChunkBase::getSFDirtyMaxY
        
            typedef ::OSG::SFInt32 const * ( ::OSG::TextureObjChunkBase::*getSFDirtyMaxY_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getSFDirtyMaxY"
                , getSFDirtyMaxY_function_type( &::OSG::TextureObjChunkBase::getSFDirtyMaxY )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureObjChunkBase::getSFDirtyMaxZ
        
            typedef ::OSG::SFInt32 const * ( ::OSG::TextureObjChunkBase::*getSFDirtyMaxZ_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getSFDirtyMaxZ"
                , getSFDirtyMaxZ_function_type( &::OSG::TextureObjChunkBase::getSFDirtyMaxZ )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureObjChunkBase::getSFDirtyMinX
        
            typedef ::OSG::SFInt32 const * ( ::OSG::TextureObjChunkBase::*getSFDirtyMinX_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getSFDirtyMinX"
                , getSFDirtyMinX_function_type( &::OSG::TextureObjChunkBase::getSFDirtyMinX )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureObjChunkBase::getSFDirtyMinY
        
            typedef ::OSG::SFInt32 const * ( ::OSG::TextureObjChunkBase::*getSFDirtyMinY_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getSFDirtyMinY"
                , getSFDirtyMinY_function_type( &::OSG::TextureObjChunkBase::getSFDirtyMinY )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureObjChunkBase::getSFDirtyMinZ
        
            typedef ::OSG::SFInt32 const * ( ::OSG::TextureObjChunkBase::*getSFDirtyMinZ_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getSFDirtyMinZ"
                , getSFDirtyMinZ_function_type( &::OSG::TextureObjChunkBase::getSFDirtyMinZ )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureObjChunkBase::getSFExternalFormat
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureObjChunkBase::*getSFExternalFormat_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getSFExternalFormat"
                , getSFExternalFormat_function_type( &::OSG::TextureObjChunkBase::getSFExternalFormat )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureObjChunkBase::getSFFrame
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::TextureObjChunkBase::*getSFFrame_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getSFFrame"
                , getSFFrame_function_type( &::OSG::TextureObjChunkBase::getSFFrame )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureObjChunkBase::getSFGLId
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureObjChunkBase::*getSFGLId_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getSFGLId"
                , getSFGLId_function_type( &::OSG::TextureObjChunkBase::getSFGLId )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureObjChunkBase::getSFImage
        
            typedef ::OSG::SFUnrecChildImagePtr const * ( ::OSG::TextureObjChunkBase::*getSFImage_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getSFImage"
                , getSFImage_function_type( &::OSG::TextureObjChunkBase::getSFImage )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureObjChunkBase::getSFInternalFormat
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureObjChunkBase::*getSFInternalFormat_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getSFInternalFormat"
                , getSFInternalFormat_function_type( &::OSG::TextureObjChunkBase::getSFInternalFormat )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureObjChunkBase::getSFMagFilter
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureObjChunkBase::*getSFMagFilter_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getSFMagFilter"
                , getSFMagFilter_function_type( &::OSG::TextureObjChunkBase::getSFMagFilter )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureObjChunkBase::getSFMinFilter
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureObjChunkBase::*getSFMinFilter_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getSFMinFilter"
                , getSFMinFilter_function_type( &::OSG::TextureObjChunkBase::getSFMinFilter )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureObjChunkBase::getSFPriority
        
            typedef ::OSG::SFReal32 const * ( ::OSG::TextureObjChunkBase::*getSFPriority_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getSFPriority"
                , getSFPriority_function_type( &::OSG::TextureObjChunkBase::getSFPriority )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureObjChunkBase::getSFScale
        
            typedef ::OSG::SFBool const * ( ::OSG::TextureObjChunkBase::*getSFScale_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getSFScale"
                , getSFScale_function_type( &::OSG::TextureObjChunkBase::getSFScale )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureObjChunkBase::getSFSkipMipMapLevels
        
            typedef ::OSG::SFReal32 const * ( ::OSG::TextureObjChunkBase::*getSFSkipMipMapLevels_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getSFSkipMipMapLevels"
                , getSFSkipMipMapLevels_function_type( &::OSG::TextureObjChunkBase::getSFSkipMipMapLevels )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureObjChunkBase::getSFWrapR
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureObjChunkBase::*getSFWrapR_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getSFWrapR"
                , getSFWrapR_function_type( &::OSG::TextureObjChunkBase::getSFWrapR )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureObjChunkBase::getSFWrapS
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureObjChunkBase::*getSFWrapS_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getSFWrapS"
                , getSFWrapS_function_type( &::OSG::TextureObjChunkBase::getSFWrapS )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureObjChunkBase::getSFWrapT
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureObjChunkBase::*getSFWrapT_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getSFWrapT"
                , getSFWrapT_function_type( &::OSG::TextureObjChunkBase::getSFWrapT )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureObjChunkBase::getScale
        
            typedef bool ( ::OSG::TextureObjChunkBase::*getScale_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getScale"
                , getScale_function_type( &::OSG::TextureObjChunkBase::getScale ) );
        
        }
        { //::OSG::TextureObjChunkBase::getSkipMipMapLevels
        
            typedef ::OSG::Real32 ( ::OSG::TextureObjChunkBase::*getSkipMipMapLevels_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getSkipMipMapLevels"
                , getSkipMipMapLevels_function_type( &::OSG::TextureObjChunkBase::getSkipMipMapLevels ) );
        
        }
        { //::OSG::TextureObjChunkBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::TextureObjChunkBase::*getType_function_type )(  ) ;
            
            TextureObjChunkBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::TextureObjChunkBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureObjChunkBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::TextureObjChunkBase::*getType_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::TextureObjChunkBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureObjChunkBase::getWrapR
        
            typedef ::GLenum const & ( ::OSG::TextureObjChunkBase::*getWrapR_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getWrapR"
                , getWrapR_function_type( &::OSG::TextureObjChunkBase::getWrapR )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureObjChunkBase::getWrapS
        
            typedef ::GLenum const & ( ::OSG::TextureObjChunkBase::*getWrapS_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getWrapS"
                , getWrapS_function_type( &::OSG::TextureObjChunkBase::getWrapS )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureObjChunkBase::getWrapT
        
            typedef ::GLenum const & ( ::OSG::TextureObjChunkBase::*getWrapT_function_type )(  ) const;
            
            TextureObjChunkBase_exposer.def( 
                "getWrapT"
                , getWrapT_function_type( &::OSG::TextureObjChunkBase::getWrapT )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureObjChunkBase::setAnisotropy
        
            typedef void ( ::OSG::TextureObjChunkBase::*setAnisotropy_function_type )( ::OSG::Real32 const ) ;
            
            TextureObjChunkBase_exposer.def( 
                "setAnisotropy"
                , setAnisotropy_function_type( &::OSG::TextureObjChunkBase::setAnisotropy )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureObjChunkBase::setBorderColor
        
            typedef void ( ::OSG::TextureObjChunkBase::*setBorderColor_function_type )( ::OSG::Color4f const & ) ;
            
            TextureObjChunkBase_exposer.def( 
                "setBorderColor"
                , setBorderColor_function_type( &::OSG::TextureObjChunkBase::setBorderColor )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureObjChunkBase::setBorderWidth
        
            typedef void ( ::OSG::TextureObjChunkBase::*setBorderWidth_function_type )( ::OSG::UInt32 const ) ;
            
            TextureObjChunkBase_exposer.def( 
                "setBorderWidth"
                , setBorderWidth_function_type( &::OSG::TextureObjChunkBase::setBorderWidth )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureObjChunkBase::setCompareFunc
        
            typedef void ( ::OSG::TextureObjChunkBase::*setCompareFunc_function_type )( ::GLenum const & ) ;
            
            TextureObjChunkBase_exposer.def( 
                "setCompareFunc"
                , setCompareFunc_function_type( &::OSG::TextureObjChunkBase::setCompareFunc )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureObjChunkBase::setCompareMode
        
            typedef void ( ::OSG::TextureObjChunkBase::*setCompareMode_function_type )( ::GLenum const & ) ;
            
            TextureObjChunkBase_exposer.def( 
                "setCompareMode"
                , setCompareMode_function_type( &::OSG::TextureObjChunkBase::setCompareMode )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureObjChunkBase::setDepthMode
        
            typedef void ( ::OSG::TextureObjChunkBase::*setDepthMode_function_type )( ::GLenum const & ) ;
            
            TextureObjChunkBase_exposer.def( 
                "setDepthMode"
                , setDepthMode_function_type( &::OSG::TextureObjChunkBase::setDepthMode )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureObjChunkBase::setDirtyLeft
        
            typedef void ( ::OSG::TextureObjChunkBase::*setDirtyLeft_function_type )( ::OSG::Int32 const ) ;
            
            TextureObjChunkBase_exposer.def( 
                "setDirtyLeft"
                , setDirtyLeft_function_type( &::OSG::TextureObjChunkBase::setDirtyLeft )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureObjChunkBase::setDirtyMaxX
        
            typedef void ( ::OSG::TextureObjChunkBase::*setDirtyMaxX_function_type )( ::OSG::Int32 const ) ;
            
            TextureObjChunkBase_exposer.def( 
                "setDirtyMaxX"
                , setDirtyMaxX_function_type( &::OSG::TextureObjChunkBase::setDirtyMaxX )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureObjChunkBase::setDirtyMaxY
        
            typedef void ( ::OSG::TextureObjChunkBase::*setDirtyMaxY_function_type )( ::OSG::Int32 const ) ;
            
            TextureObjChunkBase_exposer.def( 
                "setDirtyMaxY"
                , setDirtyMaxY_function_type( &::OSG::TextureObjChunkBase::setDirtyMaxY )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureObjChunkBase::setDirtyMaxZ
        
            typedef void ( ::OSG::TextureObjChunkBase::*setDirtyMaxZ_function_type )( ::OSG::Int32 const ) ;
            
            TextureObjChunkBase_exposer.def( 
                "setDirtyMaxZ"
                , setDirtyMaxZ_function_type( &::OSG::TextureObjChunkBase::setDirtyMaxZ )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureObjChunkBase::setDirtyMinX
        
            typedef void ( ::OSG::TextureObjChunkBase::*setDirtyMinX_function_type )( ::OSG::Int32 const ) ;
            
            TextureObjChunkBase_exposer.def( 
                "setDirtyMinX"
                , setDirtyMinX_function_type( &::OSG::TextureObjChunkBase::setDirtyMinX )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureObjChunkBase::setDirtyMinY
        
            typedef void ( ::OSG::TextureObjChunkBase::*setDirtyMinY_function_type )( ::OSG::Int32 const ) ;
            
            TextureObjChunkBase_exposer.def( 
                "setDirtyMinY"
                , setDirtyMinY_function_type( &::OSG::TextureObjChunkBase::setDirtyMinY )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureObjChunkBase::setDirtyMinZ
        
            typedef void ( ::OSG::TextureObjChunkBase::*setDirtyMinZ_function_type )( ::OSG::Int32 const ) ;
            
            TextureObjChunkBase_exposer.def( 
                "setDirtyMinZ"
                , setDirtyMinZ_function_type( &::OSG::TextureObjChunkBase::setDirtyMinZ )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureObjChunkBase::setExternalFormat
        
            typedef void ( ::OSG::TextureObjChunkBase::*setExternalFormat_function_type )( ::GLenum const & ) ;
            
            TextureObjChunkBase_exposer.def( 
                "setExternalFormat"
                , setExternalFormat_function_type( &::OSG::TextureObjChunkBase::setExternalFormat )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureObjChunkBase::setFrame
        
            typedef void ( ::OSG::TextureObjChunkBase::*setFrame_function_type )( ::OSG::UInt32 const ) ;
            
            TextureObjChunkBase_exposer.def( 
                "setFrame"
                , setFrame_function_type( &::OSG::TextureObjChunkBase::setFrame )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureObjChunkBase::setGLId
        
            typedef void ( ::OSG::TextureObjChunkBase::*setGLId_function_type )( ::GLenum const & ) ;
            
            TextureObjChunkBase_exposer.def( 
                "setGLId"
                , setGLId_function_type( &::OSG::TextureObjChunkBase::setGLId )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureObjChunkBase::setImage
        
            typedef void ( ::OSG::TextureObjChunkBase::*setImage_function_type )( ::OSG::Image * const ) ;
            
            TextureObjChunkBase_exposer.def( 
                "setImage"
                , setImage_function_type( &::OSG::TextureObjChunkBase::setImage )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureObjChunkBase::setInternalFormat
        
            typedef void ( ::OSG::TextureObjChunkBase::*setInternalFormat_function_type )( ::GLenum const & ) ;
            
            TextureObjChunkBase_exposer.def( 
                "setInternalFormat"
                , setInternalFormat_function_type( &::OSG::TextureObjChunkBase::setInternalFormat )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureObjChunkBase::setMagFilter
        
            typedef void ( ::OSG::TextureObjChunkBase::*setMagFilter_function_type )( ::GLenum const & ) ;
            
            TextureObjChunkBase_exposer.def( 
                "setMagFilter"
                , setMagFilter_function_type( &::OSG::TextureObjChunkBase::setMagFilter )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureObjChunkBase::setMinFilter
        
            typedef void ( ::OSG::TextureObjChunkBase::*setMinFilter_function_type )( ::GLenum const & ) ;
            
            TextureObjChunkBase_exposer.def( 
                "setMinFilter"
                , setMinFilter_function_type( &::OSG::TextureObjChunkBase::setMinFilter )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureObjChunkBase::setPriority
        
            typedef void ( ::OSG::TextureObjChunkBase::*setPriority_function_type )( ::OSG::Real32 const ) ;
            
            TextureObjChunkBase_exposer.def( 
                "setPriority"
                , setPriority_function_type( &::OSG::TextureObjChunkBase::setPriority )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureObjChunkBase::setScale
        
            typedef void ( ::OSG::TextureObjChunkBase::*setScale_function_type )( bool const ) ;
            
            TextureObjChunkBase_exposer.def( 
                "setScale"
                , setScale_function_type( &::OSG::TextureObjChunkBase::setScale )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureObjChunkBase::setSkipMipMapLevels
        
            typedef void ( ::OSG::TextureObjChunkBase::*setSkipMipMapLevels_function_type )( ::OSG::Real32 const ) ;
            
            TextureObjChunkBase_exposer.def( 
                "setSkipMipMapLevels"
                , setSkipMipMapLevels_function_type( &::OSG::TextureObjChunkBase::setSkipMipMapLevels )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureObjChunkBase::setWrapR
        
            typedef void ( ::OSG::TextureObjChunkBase::*setWrapR_function_type )( ::GLenum const & ) ;
            
            TextureObjChunkBase_exposer.def( 
                "setWrapR"
                , setWrapR_function_type( &::OSG::TextureObjChunkBase::setWrapR )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureObjChunkBase::setWrapS
        
            typedef void ( ::OSG::TextureObjChunkBase::*setWrapS_function_type )( ::GLenum const & ) ;
            
            TextureObjChunkBase_exposer.def( 
                "setWrapS"
                , setWrapS_function_type( &::OSG::TextureObjChunkBase::setWrapS )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureObjChunkBase::setWrapT
        
            typedef void ( ::OSG::TextureObjChunkBase::*setWrapT_function_type )( ::GLenum const & ) ;
            
            TextureObjChunkBase_exposer.def( 
                "setWrapT"
                , setWrapT_function_type( &::OSG::TextureObjChunkBase::setWrapT )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureBaseChunk::determineInternalFormat
        
            typedef ::GLenum ( ::OSG::TextureBaseChunk::*determineInternalFormat_function_type )(  ) ;
            
            TextureObjChunkBase_exposer.def( 
                "determineInternalFormat"
                , determineInternalFormat_function_type( &::OSG::TextureBaseChunk::determineInternalFormat ) );
        
        }
        { //::OSG::TextureBaseChunk::getOpenGLId
        
            typedef ::OSG::Int32 ( ::OSG::TextureBaseChunk::*getOpenGLId_function_type )( ::OSG::DrawEnv * ) ;
            
            TextureObjChunkBase_exposer.def( 
                "getOpenGLId"
                , getOpenGLId_function_type( &::OSG::TextureBaseChunk::getOpenGLId )
                , ( bp::arg("pEnv") ) );
        
        }
        { //::OSG::TextureBaseChunk::validate
        
            typedef void ( ::OSG::TextureBaseChunk::*validate_function_type )( ::OSG::DrawEnv * ) ;
            
            TextureObjChunkBase_exposer.def( 
                "validate"
                , validate_function_type( &::OSG::TextureBaseChunk::validate )
                , ( bp::arg("pEnv") ) );
        
        }
        TextureObjChunkBase_exposer.staticmethod( "create" );
        TextureObjChunkBase_exposer.staticmethod( "createDependent" );
        TextureObjChunkBase_exposer.staticmethod( "createLocal" );
        TextureObjChunkBase_exposer.staticmethod( "getClassGroupId" );
        TextureObjChunkBase_exposer.staticmethod( "getClassType" );
        TextureObjChunkBase_exposer.staticmethod( "getClassTypeId" );
    }

}
