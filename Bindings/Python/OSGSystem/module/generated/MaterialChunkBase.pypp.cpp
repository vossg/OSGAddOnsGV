// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "MaterialChunkBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_MaterialChunkBase_class(){

    { //::OSG::MaterialChunkBase
        typedef bp::class_< OSG::MaterialChunkBase, bp::bases< OSG::StateChunk >, boost::noncopyable > MaterialChunkBase_exposer_t;
        MaterialChunkBase_exposer_t MaterialChunkBase_exposer = MaterialChunkBase_exposer_t( "MaterialChunkBase", bp::no_init );
        bp::scope MaterialChunkBase_scope( MaterialChunkBase_exposer );
        bp::scope().attr("DiffuseFieldId") = (int)OSG::MaterialChunkBase::DiffuseFieldId;
        bp::scope().attr("AmbientFieldId") = (int)OSG::MaterialChunkBase::AmbientFieldId;
        bp::scope().attr("SpecularFieldId") = (int)OSG::MaterialChunkBase::SpecularFieldId;
        bp::scope().attr("EmissionFieldId") = (int)OSG::MaterialChunkBase::EmissionFieldId;
        bp::scope().attr("ShininessFieldId") = (int)OSG::MaterialChunkBase::ShininessFieldId;
        bp::scope().attr("LitFieldId") = (int)OSG::MaterialChunkBase::LitFieldId;
        bp::scope().attr("ColorMaterialFieldId") = (int)OSG::MaterialChunkBase::ColorMaterialFieldId;
        bp::scope().attr("BackMaterialFieldId") = (int)OSG::MaterialChunkBase::BackMaterialFieldId;
        bp::scope().attr("BackDiffuseFieldId") = (int)OSG::MaterialChunkBase::BackDiffuseFieldId;
        bp::scope().attr("BackAmbientFieldId") = (int)OSG::MaterialChunkBase::BackAmbientFieldId;
        bp::scope().attr("BackSpecularFieldId") = (int)OSG::MaterialChunkBase::BackSpecularFieldId;
        bp::scope().attr("BackEmissionFieldId") = (int)OSG::MaterialChunkBase::BackEmissionFieldId;
        bp::scope().attr("BackShininessFieldId") = (int)OSG::MaterialChunkBase::BackShininessFieldId;
        bp::scope().attr("BackColorMaterialFieldId") = (int)OSG::MaterialChunkBase::BackColorMaterialFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::MaterialChunkBase::NextFieldId;
        { //::OSG::MaterialChunkBase::copyFromBin
        
            typedef void ( ::OSG::MaterialChunkBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            MaterialChunkBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::MaterialChunkBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::MaterialChunkBase::copyToBin
        
            typedef void ( ::OSG::MaterialChunkBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            MaterialChunkBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::MaterialChunkBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::MaterialChunkBase::create
        
            typedef ::OSG::MaterialChunkTransitPtr ( *create_function_type )(  );
            
            MaterialChunkBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::MaterialChunkBase::create ) );
        
        }
        { //::OSG::MaterialChunkBase::createDependent
        
            typedef ::OSG::MaterialChunkTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            MaterialChunkBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::MaterialChunkBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::MaterialChunkBase::createLocal
        
            typedef ::OSG::MaterialChunkTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            MaterialChunkBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::MaterialChunkBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::MaterialChunkBase::getAmbient
        
            typedef ::OSG::Color4f const & ( ::OSG::MaterialChunkBase::*getAmbient_function_type )(  ) const;
            
            MaterialChunkBase_exposer.def( 
                "getAmbient"
                , getAmbient_function_type( &::OSG::MaterialChunkBase::getAmbient )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::MaterialChunkBase::getBackAmbient
        
            typedef ::OSG::Color4f const & ( ::OSG::MaterialChunkBase::*getBackAmbient_function_type )(  ) const;
            
            MaterialChunkBase_exposer.def( 
                "getBackAmbient"
                , getBackAmbient_function_type( &::OSG::MaterialChunkBase::getBackAmbient )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::MaterialChunkBase::getBackColorMaterial
        
            typedef ::GLenum const & ( ::OSG::MaterialChunkBase::*getBackColorMaterial_function_type )(  ) const;
            
            MaterialChunkBase_exposer.def( 
                "getBackColorMaterial"
                , getBackColorMaterial_function_type( &::OSG::MaterialChunkBase::getBackColorMaterial )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::MaterialChunkBase::getBackDiffuse
        
            typedef ::OSG::Color4f const & ( ::OSG::MaterialChunkBase::*getBackDiffuse_function_type )(  ) const;
            
            MaterialChunkBase_exposer.def( 
                "getBackDiffuse"
                , getBackDiffuse_function_type( &::OSG::MaterialChunkBase::getBackDiffuse )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::MaterialChunkBase::getBackEmission
        
            typedef ::OSG::Color4f const & ( ::OSG::MaterialChunkBase::*getBackEmission_function_type )(  ) const;
            
            MaterialChunkBase_exposer.def( 
                "getBackEmission"
                , getBackEmission_function_type( &::OSG::MaterialChunkBase::getBackEmission )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::MaterialChunkBase::getBackMaterial
        
            typedef bool ( ::OSG::MaterialChunkBase::*getBackMaterial_function_type )(  ) const;
            
            MaterialChunkBase_exposer.def( 
                "getBackMaterial"
                , getBackMaterial_function_type( &::OSG::MaterialChunkBase::getBackMaterial ) );
        
        }
        { //::OSG::MaterialChunkBase::getBackShininess
        
            typedef ::OSG::Real32 ( ::OSG::MaterialChunkBase::*getBackShininess_function_type )(  ) const;
            
            MaterialChunkBase_exposer.def( 
                "getBackShininess"
                , getBackShininess_function_type( &::OSG::MaterialChunkBase::getBackShininess ) );
        
        }
        { //::OSG::MaterialChunkBase::getBackSpecular
        
            typedef ::OSG::Color4f const & ( ::OSG::MaterialChunkBase::*getBackSpecular_function_type )(  ) const;
            
            MaterialChunkBase_exposer.def( 
                "getBackSpecular"
                , getBackSpecular_function_type( &::OSG::MaterialChunkBase::getBackSpecular )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::MaterialChunkBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::MaterialChunkBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            MaterialChunkBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::MaterialChunkBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::MaterialChunkBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            MaterialChunkBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::MaterialChunkBase::getClassGroupId ) );
        
        }
        { //::OSG::MaterialChunkBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            MaterialChunkBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::MaterialChunkBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::MaterialChunkBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            MaterialChunkBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::MaterialChunkBase::getClassTypeId ) );
        
        }
        { //::OSG::MaterialChunkBase::getColorMaterial
        
            typedef ::GLenum const & ( ::OSG::MaterialChunkBase::*getColorMaterial_function_type )(  ) const;
            
            MaterialChunkBase_exposer.def( 
                "getColorMaterial"
                , getColorMaterial_function_type( &::OSG::MaterialChunkBase::getColorMaterial )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::MaterialChunkBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::MaterialChunkBase::*getContainerSize_function_type )(  ) const;
            
            MaterialChunkBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::MaterialChunkBase::getContainerSize ) );
        
        }
        { //::OSG::MaterialChunkBase::getDiffuse
        
            typedef ::OSG::Color4f const & ( ::OSG::MaterialChunkBase::*getDiffuse_function_type )(  ) const;
            
            MaterialChunkBase_exposer.def( 
                "getDiffuse"
                , getDiffuse_function_type( &::OSG::MaterialChunkBase::getDiffuse )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::MaterialChunkBase::getEmission
        
            typedef ::OSG::Color4f const & ( ::OSG::MaterialChunkBase::*getEmission_function_type )(  ) const;
            
            MaterialChunkBase_exposer.def( 
                "getEmission"
                , getEmission_function_type( &::OSG::MaterialChunkBase::getEmission )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::MaterialChunkBase::getLit
        
            typedef bool ( ::OSG::MaterialChunkBase::*getLit_function_type )(  ) const;
            
            MaterialChunkBase_exposer.def( 
                "getLit"
                , getLit_function_type( &::OSG::MaterialChunkBase::getLit ) );
        
        }
        { //::OSG::MaterialChunkBase::getSFAmbient
        
            typedef ::OSG::SFColor4f const * ( ::OSG::MaterialChunkBase::*getSFAmbient_function_type )(  ) const;
            
            MaterialChunkBase_exposer.def( 
                "getSFAmbient"
                , getSFAmbient_function_type( &::OSG::MaterialChunkBase::getSFAmbient )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::MaterialChunkBase::getSFBackAmbient
        
            typedef ::OSG::SFColor4f const * ( ::OSG::MaterialChunkBase::*getSFBackAmbient_function_type )(  ) const;
            
            MaterialChunkBase_exposer.def( 
                "getSFBackAmbient"
                , getSFBackAmbient_function_type( &::OSG::MaterialChunkBase::getSFBackAmbient )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::MaterialChunkBase::getSFBackColorMaterial
        
            typedef ::OSG::SFGLenum const * ( ::OSG::MaterialChunkBase::*getSFBackColorMaterial_function_type )(  ) const;
            
            MaterialChunkBase_exposer.def( 
                "getSFBackColorMaterial"
                , getSFBackColorMaterial_function_type( &::OSG::MaterialChunkBase::getSFBackColorMaterial )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::MaterialChunkBase::getSFBackDiffuse
        
            typedef ::OSG::SFColor4f const * ( ::OSG::MaterialChunkBase::*getSFBackDiffuse_function_type )(  ) const;
            
            MaterialChunkBase_exposer.def( 
                "getSFBackDiffuse"
                , getSFBackDiffuse_function_type( &::OSG::MaterialChunkBase::getSFBackDiffuse )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::MaterialChunkBase::getSFBackEmission
        
            typedef ::OSG::SFColor4f const * ( ::OSG::MaterialChunkBase::*getSFBackEmission_function_type )(  ) const;
            
            MaterialChunkBase_exposer.def( 
                "getSFBackEmission"
                , getSFBackEmission_function_type( &::OSG::MaterialChunkBase::getSFBackEmission )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::MaterialChunkBase::getSFBackMaterial
        
            typedef ::OSG::SFBool const * ( ::OSG::MaterialChunkBase::*getSFBackMaterial_function_type )(  ) const;
            
            MaterialChunkBase_exposer.def( 
                "getSFBackMaterial"
                , getSFBackMaterial_function_type( &::OSG::MaterialChunkBase::getSFBackMaterial )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::MaterialChunkBase::getSFBackShininess
        
            typedef ::OSG::SFReal32 const * ( ::OSG::MaterialChunkBase::*getSFBackShininess_function_type )(  ) const;
            
            MaterialChunkBase_exposer.def( 
                "getSFBackShininess"
                , getSFBackShininess_function_type( &::OSG::MaterialChunkBase::getSFBackShininess )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::MaterialChunkBase::getSFBackSpecular
        
            typedef ::OSG::SFColor4f const * ( ::OSG::MaterialChunkBase::*getSFBackSpecular_function_type )(  ) const;
            
            MaterialChunkBase_exposer.def( 
                "getSFBackSpecular"
                , getSFBackSpecular_function_type( &::OSG::MaterialChunkBase::getSFBackSpecular )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::MaterialChunkBase::getSFColorMaterial
        
            typedef ::OSG::SFGLenum const * ( ::OSG::MaterialChunkBase::*getSFColorMaterial_function_type )(  ) const;
            
            MaterialChunkBase_exposer.def( 
                "getSFColorMaterial"
                , getSFColorMaterial_function_type( &::OSG::MaterialChunkBase::getSFColorMaterial )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::MaterialChunkBase::getSFDiffuse
        
            typedef ::OSG::SFColor4f const * ( ::OSG::MaterialChunkBase::*getSFDiffuse_function_type )(  ) const;
            
            MaterialChunkBase_exposer.def( 
                "getSFDiffuse"
                , getSFDiffuse_function_type( &::OSG::MaterialChunkBase::getSFDiffuse )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::MaterialChunkBase::getSFEmission
        
            typedef ::OSG::SFColor4f const * ( ::OSG::MaterialChunkBase::*getSFEmission_function_type )(  ) const;
            
            MaterialChunkBase_exposer.def( 
                "getSFEmission"
                , getSFEmission_function_type( &::OSG::MaterialChunkBase::getSFEmission )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::MaterialChunkBase::getSFLit
        
            typedef ::OSG::SFBool const * ( ::OSG::MaterialChunkBase::*getSFLit_function_type )(  ) const;
            
            MaterialChunkBase_exposer.def( 
                "getSFLit"
                , getSFLit_function_type( &::OSG::MaterialChunkBase::getSFLit )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::MaterialChunkBase::getSFShininess
        
            typedef ::OSG::SFReal32 const * ( ::OSG::MaterialChunkBase::*getSFShininess_function_type )(  ) const;
            
            MaterialChunkBase_exposer.def( 
                "getSFShininess"
                , getSFShininess_function_type( &::OSG::MaterialChunkBase::getSFShininess )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::MaterialChunkBase::getSFSpecular
        
            typedef ::OSG::SFColor4f const * ( ::OSG::MaterialChunkBase::*getSFSpecular_function_type )(  ) const;
            
            MaterialChunkBase_exposer.def( 
                "getSFSpecular"
                , getSFSpecular_function_type( &::OSG::MaterialChunkBase::getSFSpecular )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::MaterialChunkBase::getShininess
        
            typedef ::OSG::Real32 ( ::OSG::MaterialChunkBase::*getShininess_function_type )(  ) const;
            
            MaterialChunkBase_exposer.def( 
                "getShininess"
                , getShininess_function_type( &::OSG::MaterialChunkBase::getShininess ) );
        
        }
        { //::OSG::MaterialChunkBase::getSpecular
        
            typedef ::OSG::Color4f const & ( ::OSG::MaterialChunkBase::*getSpecular_function_type )(  ) const;
            
            MaterialChunkBase_exposer.def( 
                "getSpecular"
                , getSpecular_function_type( &::OSG::MaterialChunkBase::getSpecular )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::MaterialChunkBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::MaterialChunkBase::*getType_function_type )(  ) ;
            
            MaterialChunkBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::MaterialChunkBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::MaterialChunkBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::MaterialChunkBase::*getType_function_type )(  ) const;
            
            MaterialChunkBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::MaterialChunkBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::MaterialChunkBase::setAmbient
        
            typedef void ( ::OSG::MaterialChunkBase::*setAmbient_function_type )( ::OSG::Color4f const & ) ;
            
            MaterialChunkBase_exposer.def( 
                "setAmbient"
                , setAmbient_function_type( &::OSG::MaterialChunkBase::setAmbient )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::MaterialChunkBase::setBackAmbient
        
            typedef void ( ::OSG::MaterialChunkBase::*setBackAmbient_function_type )( ::OSG::Color4f const & ) ;
            
            MaterialChunkBase_exposer.def( 
                "setBackAmbient"
                , setBackAmbient_function_type( &::OSG::MaterialChunkBase::setBackAmbient )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::MaterialChunkBase::setBackColorMaterial
        
            typedef void ( ::OSG::MaterialChunkBase::*setBackColorMaterial_function_type )( ::GLenum const & ) ;
            
            MaterialChunkBase_exposer.def( 
                "setBackColorMaterial"
                , setBackColorMaterial_function_type( &::OSG::MaterialChunkBase::setBackColorMaterial )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::MaterialChunkBase::setBackDiffuse
        
            typedef void ( ::OSG::MaterialChunkBase::*setBackDiffuse_function_type )( ::OSG::Color4f const & ) ;
            
            MaterialChunkBase_exposer.def( 
                "setBackDiffuse"
                , setBackDiffuse_function_type( &::OSG::MaterialChunkBase::setBackDiffuse )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::MaterialChunkBase::setBackEmission
        
            typedef void ( ::OSG::MaterialChunkBase::*setBackEmission_function_type )( ::OSG::Color4f const & ) ;
            
            MaterialChunkBase_exposer.def( 
                "setBackEmission"
                , setBackEmission_function_type( &::OSG::MaterialChunkBase::setBackEmission )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::MaterialChunkBase::setBackMaterial
        
            typedef void ( ::OSG::MaterialChunkBase::*setBackMaterial_function_type )( bool const ) ;
            
            MaterialChunkBase_exposer.def( 
                "setBackMaterial"
                , setBackMaterial_function_type( &::OSG::MaterialChunkBase::setBackMaterial )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::MaterialChunkBase::setBackShininess
        
            typedef void ( ::OSG::MaterialChunkBase::*setBackShininess_function_type )( ::OSG::Real32 const ) ;
            
            MaterialChunkBase_exposer.def( 
                "setBackShininess"
                , setBackShininess_function_type( &::OSG::MaterialChunkBase::setBackShininess )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::MaterialChunkBase::setBackSpecular
        
            typedef void ( ::OSG::MaterialChunkBase::*setBackSpecular_function_type )( ::OSG::Color4f const & ) ;
            
            MaterialChunkBase_exposer.def( 
                "setBackSpecular"
                , setBackSpecular_function_type( &::OSG::MaterialChunkBase::setBackSpecular )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::MaterialChunkBase::setColorMaterial
        
            typedef void ( ::OSG::MaterialChunkBase::*setColorMaterial_function_type )( ::GLenum const & ) ;
            
            MaterialChunkBase_exposer.def( 
                "setColorMaterial"
                , setColorMaterial_function_type( &::OSG::MaterialChunkBase::setColorMaterial )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::MaterialChunkBase::setDiffuse
        
            typedef void ( ::OSG::MaterialChunkBase::*setDiffuse_function_type )( ::OSG::Color4f const & ) ;
            
            MaterialChunkBase_exposer.def( 
                "setDiffuse"
                , setDiffuse_function_type( &::OSG::MaterialChunkBase::setDiffuse )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::MaterialChunkBase::setEmission
        
            typedef void ( ::OSG::MaterialChunkBase::*setEmission_function_type )( ::OSG::Color4f const & ) ;
            
            MaterialChunkBase_exposer.def( 
                "setEmission"
                , setEmission_function_type( &::OSG::MaterialChunkBase::setEmission )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::MaterialChunkBase::setLit
        
            typedef void ( ::OSG::MaterialChunkBase::*setLit_function_type )( bool const ) ;
            
            MaterialChunkBase_exposer.def( 
                "setLit"
                , setLit_function_type( &::OSG::MaterialChunkBase::setLit )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::MaterialChunkBase::setShininess
        
            typedef void ( ::OSG::MaterialChunkBase::*setShininess_function_type )( ::OSG::Real32 const ) ;
            
            MaterialChunkBase_exposer.def( 
                "setShininess"
                , setShininess_function_type( &::OSG::MaterialChunkBase::setShininess )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::MaterialChunkBase::setSpecular
        
            typedef void ( ::OSG::MaterialChunkBase::*setSpecular_function_type )( ::OSG::Color4f const & ) ;
            
            MaterialChunkBase_exposer.def( 
                "setSpecular"
                , setSpecular_function_type( &::OSG::MaterialChunkBase::setSpecular )
                , ( bp::arg("value") ) );
        
        }
        MaterialChunkBase_exposer.staticmethod( "create" );
        MaterialChunkBase_exposer.staticmethod( "createDependent" );
        MaterialChunkBase_exposer.staticmethod( "createLocal" );
        MaterialChunkBase_exposer.staticmethod( "getClassGroupId" );
        MaterialChunkBase_exposer.staticmethod( "getClassType" );
        MaterialChunkBase_exposer.staticmethod( "getClassTypeId" );
    }

}
