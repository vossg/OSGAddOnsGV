// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "TextureBaseChunk.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_TextureBaseChunk_class(){

    { //::OSG::TextureBaseChunk
        typedef bp::class_< OSG::TextureBaseChunk, bp::bases< OSG::TextureBaseChunkBase >, boost::noncopyable > TextureBaseChunk_exposer_t;
        TextureBaseChunk_exposer_t TextureBaseChunk_exposer = TextureBaseChunk_exposer_t( "TextureBaseChunk", bp::no_init );
        bp::scope TextureBaseChunk_scope( TextureBaseChunk_exposer );
        { //::OSG::TextureBaseChunk::activateTexture
        
            typedef bool ( *activateTexture_function_type )( ::OSG::Window *,::OSG::UInt16 );
            
            TextureBaseChunk_exposer.def( 
                "activateTexture"
                , activateTexture_function_type( &::OSG::TextureBaseChunk::activateTexture )
                , ( bp::arg("win"), bp::arg("texture") ) );
        
        }
        { //::OSG::TextureBaseChunk::activeTexture
        
            typedef void ( *activeTexture_function_type )( ::OSG::Window *,::OSG::UInt16 );
            
            TextureBaseChunk_exposer.def( 
                "activeTexture"
                , activeTexture_function_type( &::OSG::TextureBaseChunk::activeTexture )
                , ( bp::arg("win"), bp::arg("texture") ) );
        
        }
        { //::OSG::TextureBaseChunk::changed
        
            typedef void ( ::OSG::TextureBaseChunk::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            TextureBaseChunk_exposer.def( 
                "changed"
                , changed_function_type( &::OSG::TextureBaseChunk::changed )
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("details") ) );
        
        }
        { //::OSG::TextureBaseChunk::determineInternalFormat
        
            typedef ::GLenum ( ::OSG::TextureBaseChunk::*determineInternalFormat_function_type )(  ) ;
            
            TextureBaseChunk_exposer.def( 
                "determineInternalFormat"
                , determineInternalFormat_function_type( &::OSG::TextureBaseChunk::determineInternalFormat ) );
        
        }
        { //::OSG::TextureBaseChunk::dump
        
            typedef void ( ::OSG::TextureBaseChunk::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            TextureBaseChunk_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::TextureBaseChunk::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::TextureBaseChunk::getChunkId
        
            typedef ::OSG::UInt16 ( ::OSG::TextureBaseChunk::*getChunkId_function_type )(  ) ;
            
            TextureBaseChunk_exposer.def( 
                "getChunkId"
                , getChunkId_function_type( &::OSG::TextureBaseChunk::getChunkId ) );
        
        }
        { //::OSG::TextureBaseChunk::getClass
        
            typedef ::OSG::StateChunkClass const * ( ::OSG::TextureBaseChunk::*getClass_function_type )(  ) const;
            
            TextureBaseChunk_exposer.def( 
                "getClass"
                , getClass_function_type( &::OSG::TextureBaseChunk::getClass )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureBaseChunk::getOpenGLId
        
            typedef ::OSG::Int32 ( ::OSG::TextureBaseChunk::*getOpenGLId_function_type )( ::OSG::DrawEnv * ) ;
            
            TextureBaseChunk_exposer.def( 
                "getOpenGLId"
                , getOpenGLId_function_type( &::OSG::TextureBaseChunk::getOpenGLId )
                , ( bp::arg("pEnv") ) );
        
        }
        { //::OSG::TextureBaseChunk::getStaticClass
        
            typedef ::OSG::StateChunkClass const * ( *getStaticClass_function_type )(  );
            
            TextureBaseChunk_exposer.def( 
                "getStaticClass"
                , getStaticClass_function_type( &::OSG::TextureBaseChunk::getStaticClass )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureBaseChunk::getStaticClassId
        
            typedef ::OSG::UInt32 ( *getStaticClassId_function_type )(  );
            
            TextureBaseChunk_exposer.def( 
                "getStaticClassId"
                , getStaticClassId_function_type( &::OSG::TextureBaseChunk::getStaticClassId ) );
        
        }
        { //::OSG::TextureBaseChunk::hasMultiTexture
        
            typedef bool ( *hasMultiTexture_function_type )( ::OSG::Window * );
            
            TextureBaseChunk_exposer.def( 
                "hasMultiTexture"
                , hasMultiTexture_function_type( &::OSG::TextureBaseChunk::hasMultiTexture )
                , ( bp::arg("win") ) );
        
        }
        { //::OSG::TextureBaseChunk::isCubeTexture
        
            typedef bool ( ::OSG::TextureBaseChunk::*isCubeTexture_function_type )(  ) ;
            
            TextureBaseChunk_exposer.def( 
                "isCubeTexture"
                , isCubeTexture_function_type( &::OSG::TextureBaseChunk::isCubeTexture ) );
        
        }
        { //::OSG::TextureBaseChunk::validate
        
            typedef void ( ::OSG::TextureBaseChunk::*validate_function_type )( ::OSG::DrawEnv * ) ;
            
            TextureBaseChunk_exposer.def( 
                "validate"
                , validate_function_type( &::OSG::TextureBaseChunk::validate )
                , ( bp::arg("pEnv") ) );
        
        }
        TextureBaseChunk_exposer.staticmethod( "activateTexture" );
        TextureBaseChunk_exposer.staticmethod( "activeTexture" );
        TextureBaseChunk_exposer.staticmethod( "getStaticClass" );
        TextureBaseChunk_exposer.staticmethod( "getStaticClassId" );
        TextureBaseChunk_exposer.staticmethod( "hasMultiTexture" );
        pyopensg::register_transit< OSG::TextureBaseChunk >::execute();
        bp::register_ptr_to_python< OSG::TextureBaseChunk::ObjRecPtr >();
        bp::implicitly_convertible< OSG::TextureBaseChunk::ObjRecPtr, OSG::TextureBaseChunk* >();
        bp::implicitly_convertible< OSG::TextureBaseChunk::ObjRecPtr, OSG::TextureBaseChunk::ObjCPtr >();
        bp::implicitly_convertible< OSG::TextureBaseChunk::ObjRecPtr, OSG::StateChunk* >();
        bp::implicitly_convertible< OSG::TextureBaseChunk::ObjRecPtr, OSG::StateChunk::ObjRecPtr >();
        bp::implicitly_convertible<OSG::TextureBaseChunk::ObjRecPtr, OSG::StateChunk::ObjCPtr>();
    }

}
