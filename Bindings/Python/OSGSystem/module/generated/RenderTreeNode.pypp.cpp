// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "RenderTreeNode.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_RenderTreeNode_class(){

    { //::OSG::RenderTreeNode
        typedef bp::class_< OSG::RenderTreeNode, boost::noncopyable > RenderTreeNode_exposer_t;
        RenderTreeNode_exposer_t RenderTreeNode_exposer = RenderTreeNode_exposer_t( "RenderTreeNode", bp::init< >() );
        bp::scope RenderTreeNode_scope( RenderTreeNode_exposer );
        { //::OSG::RenderTreeNode::addChild
        
            typedef void ( ::OSG::RenderTreeNode::*addChild_function_type )( ::OSG::RenderTreeNode * ) ;
            
            RenderTreeNode_exposer.def( 
                "addChild"
                , addChild_function_type( &::OSG::RenderTreeNode::addChild )
                , ( bp::arg("pChild") ) );
        
        }
        { //::OSG::RenderTreeNode::getBrother
        
            typedef ::OSG::RenderTreeNode * ( ::OSG::RenderTreeNode::*getBrother_function_type )(  ) ;
            
            RenderTreeNode_exposer.def( 
                "getBrother"
                , getBrother_function_type( &::OSG::RenderTreeNode::getBrother )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::RenderTreeNode::getFirstChild
        
            typedef ::OSG::RenderTreeNode * ( ::OSG::RenderTreeNode::*getFirstChild_function_type )(  ) ;
            
            RenderTreeNode_exposer.def( 
                "getFirstChild"
                , getFirstChild_function_type( &::OSG::RenderTreeNode::getFirstChild )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::RenderTreeNode::getLastChild
        
            typedef ::OSG::RenderTreeNode * ( ::OSG::RenderTreeNode::*getLastChild_function_type )(  ) ;
            
            RenderTreeNode_exposer.def( 
                "getLastChild"
                , getLastChild_function_type( &::OSG::RenderTreeNode::getLastChild )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::RenderTreeNode::getLightState
        
            typedef ::OSG::UInt32 ( ::OSG::RenderTreeNode::*getLightState_function_type )(  ) ;
            
            RenderTreeNode_exposer.def( 
                "getLightState"
                , getLightState_function_type( &::OSG::RenderTreeNode::getLightState ) );
        
        }
        { //::OSG::RenderTreeNode::getMatrixStore
        
            typedef ::std::pair< unsigned int, OSG::TransformationMatrix< float > > & ( ::OSG::RenderTreeNode::*getMatrixStore_function_type )(  ) ;
            
            RenderTreeNode_exposer.def( 
                "getMatrixStore"
                , getMatrixStore_function_type( &::OSG::RenderTreeNode::getMatrixStore )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::RenderTreeNode::getNode
        
            typedef ::OSG::Node * ( ::OSG::RenderTreeNode::*getNode_function_type )(  ) ;
            
            RenderTreeNode_exposer.def( 
                "getNode"
                , getNode_function_type( &::OSG::RenderTreeNode::getNode )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::RenderTreeNode::getScalar
        
            typedef ::OSG::Real32 ( ::OSG::RenderTreeNode::*getScalar_function_type )(  ) ;
            
            RenderTreeNode_exposer.def( 
                "getScalar"
                , getScalar_function_type( &::OSG::RenderTreeNode::getScalar ) );
        
        }
        { //::OSG::RenderTreeNode::getState
        
            typedef ::OSG::State * ( ::OSG::RenderTreeNode::*getState_function_type )(  ) ;
            
            RenderTreeNode_exposer.def( 
                "getState"
                , getState_function_type( &::OSG::RenderTreeNode::getState )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::RenderTreeNode::getStateOverride
        
            typedef ::OSG::StateOverride * ( ::OSG::RenderTreeNode::*getStateOverride_function_type )(  ) ;
            
            RenderTreeNode_exposer.def( 
                "getStateOverride"
                , getStateOverride_function_type( &::OSG::RenderTreeNode::getStateOverride )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::RenderTreeNode::hasFunctor
        
            typedef bool ( ::OSG::RenderTreeNode::*hasFunctor_function_type )(  ) ;
            
            RenderTreeNode_exposer.def( 
                "hasFunctor"
                , hasFunctor_function_type( &::OSG::RenderTreeNode::hasFunctor ) );
        
        }
        { //::OSG::RenderTreeNode::insertBrother
        
            typedef void ( ::OSG::RenderTreeNode::*insertBrother_function_type )( ::OSG::RenderTreeNode * ) ;
            
            RenderTreeNode_exposer.def( 
                "insertBrother"
                , insertBrother_function_type( &::OSG::RenderTreeNode::insertBrother )
                , ( bp::arg("pBrother") ) );
        
        }
        { //::OSG::RenderTreeNode::insertChildAfter
        
            typedef void ( ::OSG::RenderTreeNode::*insertChildAfter_function_type )( ::OSG::RenderTreeNode *,::OSG::RenderTreeNode * ) ;
            
            RenderTreeNode_exposer.def( 
                "insertChildAfter"
                , insertChildAfter_function_type( &::OSG::RenderTreeNode::insertChildAfter )
                , ( bp::arg("pCurrent"), bp::arg("pChild") ) );
        
        }
        { //::OSG::RenderTreeNode::insertFirstChild
        
            typedef void ( ::OSG::RenderTreeNode::*insertFirstChild_function_type )( ::OSG::RenderTreeNode * ) ;
            
            RenderTreeNode_exposer.def( 
                "insertFirstChild"
                , insertFirstChild_function_type( &::OSG::RenderTreeNode::insertFirstChild )
                , ( bp::arg("pChild") ) );
        
        }
        { //::OSG::RenderTreeNode::reset
        
            typedef void ( ::OSG::RenderTreeNode::*reset_function_type )(  ) ;
            
            RenderTreeNode_exposer.def( 
                "reset"
                , reset_function_type( &::OSG::RenderTreeNode::reset ) );
        
        }
        { //::OSG::RenderTreeNode::setBrother
        
            typedef void ( ::OSG::RenderTreeNode::*setBrother_function_type )( ::OSG::RenderTreeNode * ) ;
            
            RenderTreeNode_exposer.def( 
                "setBrother"
                , setBrother_function_type( &::OSG::RenderTreeNode::setBrother )
                , ( bp::arg("pBrother") ) );
        
        }
        { //::OSG::RenderTreeNode::setLightState
        
            typedef void ( ::OSG::RenderTreeNode::*setLightState_function_type )( ::OSG::UInt32 ) ;
            
            RenderTreeNode_exposer.def( 
                "setLightState"
                , setLightState_function_type( &::OSG::RenderTreeNode::setLightState )
                , ( bp::arg("state") ) );
        
        }
        { //::OSG::RenderTreeNode::setMatrixStore
        
            typedef void ( ::OSG::RenderTreeNode::*setMatrixStore_function_type )( ::std::pair< unsigned int, OSG::TransformationMatrix< float > > const & ) ;
            
            RenderTreeNode_exposer.def( 
                "setMatrixStore"
                , setMatrixStore_function_type( &::OSG::RenderTreeNode::setMatrixStore )
                , ( bp::arg("oMatrixStore") ) );
        
        }
        { //::OSG::RenderTreeNode::setNode
        
            typedef void ( ::OSG::RenderTreeNode::*setNode_function_type )( ::OSG::Node * ) ;
            
            RenderTreeNode_exposer.def( 
                "setNode"
                , setNode_function_type( &::OSG::RenderTreeNode::setNode )
                , ( bp::arg("pNode") ) );
        
        }
        { //::OSG::RenderTreeNode::setScalar
        
            typedef void ( ::OSG::RenderTreeNode::*setScalar_function_type )( ::OSG::Real32 ) ;
            
            RenderTreeNode_exposer.def( 
                "setScalar"
                , setScalar_function_type( &::OSG::RenderTreeNode::setScalar )
                , ( bp::arg("rScalar") ) );
        
        }
        { //::OSG::RenderTreeNode::setState
        
            typedef void ( ::OSG::RenderTreeNode::*setState_function_type )( ::OSG::State * ) ;
            
            RenderTreeNode_exposer.def( 
                "setState"
                , setState_function_type( &::OSG::RenderTreeNode::setState )
                , ( bp::arg("pState") ) );
        
        }
        { //::OSG::RenderTreeNode::setStateOverride
        
            typedef void ( ::OSG::RenderTreeNode::*setStateOverride_function_type )( ::OSG::StateOverride * ) ;
            
            RenderTreeNode_exposer.def( 
                "setStateOverride"
                , setStateOverride_function_type( &::OSG::RenderTreeNode::setStateOverride )
                , ( bp::arg("pStateOverride") ) );
        
        }
    }

}
