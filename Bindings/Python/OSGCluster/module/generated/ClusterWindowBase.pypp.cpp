// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGCluster_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "ClusterWindowBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct ClusterWindowBase_wrapper : OSG::ClusterWindowBase, bp::wrapper< OSG::ClusterWindowBase > {

    virtual void doActivate(  ){
        bp::override func_doActivate = this->get_override( "doActivate" );
        func_doActivate(  );
    }

    virtual void doDeactivate(  ){
        bp::override func_doDeactivate = this->get_override( "doDeactivate" );
        func_doDeactivate(  );
    }

    virtual bool doSwap(  ){
        bp::override func_doSwap = this->get_override( "doSwap" );
        return func_doSwap(  );
    }

    virtual bool hasContext(  ){
        bp::override func_hasContext = this->get_override( "hasContext" );
        return func_hasContext(  );
    }

    virtual void terminate(  ){
        bp::override func_terminate = this->get_override( "terminate" );
        func_terminate(  );
    }

};

boost::python::list ClusterWindowBase_getMFServers(OSG::ClusterWindowBase *self)
{
   boost::python::list result;
   OSG::MFString const * mf_data = self->getMFServers();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list ClusterWindowBase_getMFServerIds(OSG::ClusterWindowBase *self)
{
   boost::python::list result;
   OSG::MFUInt32 const * mf_data = self->getMFServerIds();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list ClusterWindowBase_getMFAutostart(OSG::ClusterWindowBase *self)
{
   boost::python::list result;
   OSG::MFString const * mf_data = self->getMFAutostart();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

void register_ClusterWindowBase_class(){

    { //::OSG::ClusterWindowBase
        typedef bp::class_< ClusterWindowBase_wrapper, bp::bases< ::OSG::Window >, boost::noncopyable > ClusterWindowBase_exposer_t;
        ClusterWindowBase_exposer_t ClusterWindowBase_exposer = ClusterWindowBase_exposer_t( "ClusterWindowBase", bp::no_init );
        bp::scope ClusterWindowBase_scope( ClusterWindowBase_exposer );
        bp::scope().attr("ServersFieldId") = (int)OSG::ClusterWindowBase::ServersFieldId;
        bp::scope().attr("ServerIdsFieldId") = (int)OSG::ClusterWindowBase::ServerIdsFieldId;
        bp::scope().attr("ConnectionTypeFieldId") = (int)OSG::ClusterWindowBase::ConnectionTypeFieldId;
        bp::scope().attr("ConnectionInterfaceFieldId") = (int)OSG::ClusterWindowBase::ConnectionInterfaceFieldId;
        bp::scope().attr("ConnectionDestinationFieldId") = (int)OSG::ClusterWindowBase::ConnectionDestinationFieldId;
        bp::scope().attr("ConnectionParamsFieldId") = (int)OSG::ClusterWindowBase::ConnectionParamsFieldId;
        bp::scope().attr("ServicePortFieldId") = (int)OSG::ClusterWindowBase::ServicePortFieldId;
        bp::scope().attr("ServiceAddressFieldId") = (int)OSG::ClusterWindowBase::ServiceAddressFieldId;
        bp::scope().attr("ServiceInterfaceFieldId") = (int)OSG::ClusterWindowBase::ServiceInterfaceFieldId;
        bp::scope().attr("ClientWindowFieldId") = (int)OSG::ClusterWindowBase::ClientWindowFieldId;
        bp::scope().attr("InterleaveFieldId") = (int)OSG::ClusterWindowBase::InterleaveFieldId;
        bp::scope().attr("FrameCountFieldId") = (int)OSG::ClusterWindowBase::FrameCountFieldId;
        bp::scope().attr("ComposerFieldId") = (int)OSG::ClusterWindowBase::ComposerFieldId;
        bp::scope().attr("AutostartFieldId") = (int)OSG::ClusterWindowBase::AutostartFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::ClusterWindowBase::NextFieldId;
        { //::OSG::ClusterWindowBase::copyFromBin
        
            typedef void ( ::OSG::ClusterWindowBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            ClusterWindowBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::ClusterWindowBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::ClusterWindowBase::copyToBin
        
            typedef void ( ::OSG::ClusterWindowBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            ClusterWindowBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::ClusterWindowBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::ClusterWindowBase::create
        
            typedef ::OSG::ClusterWindowTransitPtr ( *create_function_type )(  );
            
            ClusterWindowBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::ClusterWindowBase::create ) );
        
        }
        { //::OSG::ClusterWindowBase::createDependent
        
            typedef ::OSG::ClusterWindowTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            ClusterWindowBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::ClusterWindowBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::ClusterWindowBase::createLocal
        
            typedef ::OSG::ClusterWindowTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            ClusterWindowBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::ClusterWindowBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::ClusterWindowBase::getAutostart
        
            typedef ::std::string const & ( ::OSG::ClusterWindowBase::*getAutostart_function_type )( ::OSG::UInt32 const ) const;
            
            ClusterWindowBase_exposer.def( 
                "getAutostart"
                , getAutostart_function_type( &::OSG::ClusterWindowBase::getAutostart )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::ClusterWindowBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::ClusterWindowBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            ClusterWindowBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::ClusterWindowBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::ClusterWindowBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            ClusterWindowBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::ClusterWindowBase::getClassGroupId ) );
        
        }
        { //::OSG::ClusterWindowBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            ClusterWindowBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::ClusterWindowBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::ClusterWindowBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            ClusterWindowBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::ClusterWindowBase::getClassTypeId ) );
        
        }
        { //::OSG::ClusterWindowBase::getClientWindow
        
            typedef ::OSG::Window * ( ::OSG::ClusterWindowBase::*getClientWindow_function_type )(  ) const;
            
            ClusterWindowBase_exposer.def( 
                "getClientWindow"
                , getClientWindow_function_type( &::OSG::ClusterWindowBase::getClientWindow )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ClusterWindowBase::getComposer
        
            typedef ::OSG::ImageComposer * ( ::OSG::ClusterWindowBase::*getComposer_function_type )(  ) const;
            
            ClusterWindowBase_exposer.def( 
                "getComposer"
                , getComposer_function_type( &::OSG::ClusterWindowBase::getComposer )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ClusterWindowBase::getConnectionDestination
        
            typedef ::std::string const & ( ::OSG::ClusterWindowBase::*getConnectionDestination_function_type )(  ) const;
            
            ClusterWindowBase_exposer.def( 
                "getConnectionDestination"
                , getConnectionDestination_function_type( &::OSG::ClusterWindowBase::getConnectionDestination )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::ClusterWindowBase::getConnectionInterface
        
            typedef ::std::string const & ( ::OSG::ClusterWindowBase::*getConnectionInterface_function_type )(  ) const;
            
            ClusterWindowBase_exposer.def( 
                "getConnectionInterface"
                , getConnectionInterface_function_type( &::OSG::ClusterWindowBase::getConnectionInterface )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::ClusterWindowBase::getConnectionParams
        
            typedef ::std::string const & ( ::OSG::ClusterWindowBase::*getConnectionParams_function_type )(  ) const;
            
            ClusterWindowBase_exposer.def( 
                "getConnectionParams"
                , getConnectionParams_function_type( &::OSG::ClusterWindowBase::getConnectionParams )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::ClusterWindowBase::getConnectionType
        
            typedef ::std::string const & ( ::OSG::ClusterWindowBase::*getConnectionType_function_type )(  ) const;
            
            ClusterWindowBase_exposer.def( 
                "getConnectionType"
                , getConnectionType_function_type( &::OSG::ClusterWindowBase::getConnectionType )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::ClusterWindowBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::ClusterWindowBase::*getContainerSize_function_type )(  ) const;
            
            ClusterWindowBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::ClusterWindowBase::getContainerSize ) );
        
        }
        { //::OSG::ClusterWindowBase::getFrameCount
        
            typedef ::OSG::UInt32 ( ::OSG::ClusterWindowBase::*getFrameCount_function_type )(  ) const;
            
            ClusterWindowBase_exposer.def( 
                "getFrameCount"
                , getFrameCount_function_type( &::OSG::ClusterWindowBase::getFrameCount ) );
        
        }
        { //::OSG::ClusterWindowBase::getInterleave
        
            typedef ::OSG::UInt32 ( ::OSG::ClusterWindowBase::*getInterleave_function_type )(  ) const;
            
            ClusterWindowBase_exposer.def( 
                "getInterleave"
                , getInterleave_function_type( &::OSG::ClusterWindowBase::getInterleave ) );
        
        }
        { //::OSG::ClusterWindowBase::getSFClientWindow
        
            typedef ::OSG::SFUnrecWindowPtr const * ( ::OSG::ClusterWindowBase::*getSFClientWindow_function_type )(  ) const;
            
            ClusterWindowBase_exposer.def( 
                "getSFClientWindow"
                , getSFClientWindow_function_type( &::OSG::ClusterWindowBase::getSFClientWindow )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ClusterWindowBase::getSFComposer
        
            typedef ::OSG::SFUnrecImageComposerPtr const * ( ::OSG::ClusterWindowBase::*getSFComposer_function_type )(  ) const;
            
            ClusterWindowBase_exposer.def( 
                "getSFComposer"
                , getSFComposer_function_type( &::OSG::ClusterWindowBase::getSFComposer )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ClusterWindowBase::getSFConnectionDestination
        
            typedef ::OSG::SFString const * ( ::OSG::ClusterWindowBase::*getSFConnectionDestination_function_type )(  ) const;
            
            ClusterWindowBase_exposer.def( 
                "getSFConnectionDestination"
                , getSFConnectionDestination_function_type( &::OSG::ClusterWindowBase::getSFConnectionDestination )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ClusterWindowBase::getSFConnectionInterface
        
            typedef ::OSG::SFString const * ( ::OSG::ClusterWindowBase::*getSFConnectionInterface_function_type )(  ) const;
            
            ClusterWindowBase_exposer.def( 
                "getSFConnectionInterface"
                , getSFConnectionInterface_function_type( &::OSG::ClusterWindowBase::getSFConnectionInterface )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ClusterWindowBase::getSFConnectionParams
        
            typedef ::OSG::SFString const * ( ::OSG::ClusterWindowBase::*getSFConnectionParams_function_type )(  ) const;
            
            ClusterWindowBase_exposer.def( 
                "getSFConnectionParams"
                , getSFConnectionParams_function_type( &::OSG::ClusterWindowBase::getSFConnectionParams )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ClusterWindowBase::getSFConnectionType
        
            typedef ::OSG::SFString const * ( ::OSG::ClusterWindowBase::*getSFConnectionType_function_type )(  ) const;
            
            ClusterWindowBase_exposer.def( 
                "getSFConnectionType"
                , getSFConnectionType_function_type( &::OSG::ClusterWindowBase::getSFConnectionType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ClusterWindowBase::getSFFrameCount
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::ClusterWindowBase::*getSFFrameCount_function_type )(  ) const;
            
            ClusterWindowBase_exposer.def( 
                "getSFFrameCount"
                , getSFFrameCount_function_type( &::OSG::ClusterWindowBase::getSFFrameCount )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ClusterWindowBase::getSFInterleave
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::ClusterWindowBase::*getSFInterleave_function_type )(  ) const;
            
            ClusterWindowBase_exposer.def( 
                "getSFInterleave"
                , getSFInterleave_function_type( &::OSG::ClusterWindowBase::getSFInterleave )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ClusterWindowBase::getSFServiceAddress
        
            typedef ::OSG::SFString const * ( ::OSG::ClusterWindowBase::*getSFServiceAddress_function_type )(  ) const;
            
            ClusterWindowBase_exposer.def( 
                "getSFServiceAddress"
                , getSFServiceAddress_function_type( &::OSG::ClusterWindowBase::getSFServiceAddress )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ClusterWindowBase::getSFServiceInterface
        
            typedef ::OSG::SFString const * ( ::OSG::ClusterWindowBase::*getSFServiceInterface_function_type )(  ) const;
            
            ClusterWindowBase_exposer.def( 
                "getSFServiceInterface"
                , getSFServiceInterface_function_type( &::OSG::ClusterWindowBase::getSFServiceInterface )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ClusterWindowBase::getSFServicePort
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::ClusterWindowBase::*getSFServicePort_function_type )(  ) const;
            
            ClusterWindowBase_exposer.def( 
                "getSFServicePort"
                , getSFServicePort_function_type( &::OSG::ClusterWindowBase::getSFServicePort )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ClusterWindowBase::getServerIds
        
            typedef ::OSG::UInt32 ( ::OSG::ClusterWindowBase::*getServerIds_function_type )( ::OSG::UInt32 const ) const;
            
            ClusterWindowBase_exposer.def( 
                "getServerIds"
                , getServerIds_function_type( &::OSG::ClusterWindowBase::getServerIds )
                , ( bp::arg("index") ) );
        
        }
        { //::OSG::ClusterWindowBase::getServers
        
            typedef ::std::string const & ( ::OSG::ClusterWindowBase::*getServers_function_type )( ::OSG::UInt32 const ) const;
            
            ClusterWindowBase_exposer.def( 
                "getServers"
                , getServers_function_type( &::OSG::ClusterWindowBase::getServers )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::ClusterWindowBase::getServiceAddress
        
            typedef ::std::string const & ( ::OSG::ClusterWindowBase::*getServiceAddress_function_type )(  ) const;
            
            ClusterWindowBase_exposer.def( 
                "getServiceAddress"
                , getServiceAddress_function_type( &::OSG::ClusterWindowBase::getServiceAddress )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::ClusterWindowBase::getServiceInterface
        
            typedef ::std::string const & ( ::OSG::ClusterWindowBase::*getServiceInterface_function_type )(  ) const;
            
            ClusterWindowBase_exposer.def( 
                "getServiceInterface"
                , getServiceInterface_function_type( &::OSG::ClusterWindowBase::getServiceInterface )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::ClusterWindowBase::getServicePort
        
            typedef ::OSG::UInt32 ( ::OSG::ClusterWindowBase::*getServicePort_function_type )(  ) const;
            
            ClusterWindowBase_exposer.def( 
                "getServicePort"
                , getServicePort_function_type( &::OSG::ClusterWindowBase::getServicePort ) );
        
        }
        { //::OSG::ClusterWindowBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::ClusterWindowBase::*getType_function_type )(  ) ;
            
            ClusterWindowBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::ClusterWindowBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ClusterWindowBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::ClusterWindowBase::*getType_function_type )(  ) const;
            
            ClusterWindowBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::ClusterWindowBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ClusterWindowBase::setClientWindow
        
            typedef void ( ::OSG::ClusterWindowBase::*setClientWindow_function_type )( ::OSG::Window * const ) ;
            
            ClusterWindowBase_exposer.def( 
                "setClientWindow"
                , setClientWindow_function_type( &::OSG::ClusterWindowBase::setClientWindow )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ClusterWindowBase::setComposer
        
            typedef void ( ::OSG::ClusterWindowBase::*setComposer_function_type )( ::OSG::ImageComposer * const ) ;
            
            ClusterWindowBase_exposer.def( 
                "setComposer"
                , setComposer_function_type( &::OSG::ClusterWindowBase::setComposer )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ClusterWindowBase::setConnectionDestination
        
            typedef void ( ::OSG::ClusterWindowBase::*setConnectionDestination_function_type )( ::std::string const & ) ;
            
            ClusterWindowBase_exposer.def( 
                "setConnectionDestination"
                , setConnectionDestination_function_type( &::OSG::ClusterWindowBase::setConnectionDestination )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ClusterWindowBase::setConnectionInterface
        
            typedef void ( ::OSG::ClusterWindowBase::*setConnectionInterface_function_type )( ::std::string const & ) ;
            
            ClusterWindowBase_exposer.def( 
                "setConnectionInterface"
                , setConnectionInterface_function_type( &::OSG::ClusterWindowBase::setConnectionInterface )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ClusterWindowBase::setConnectionParams
        
            typedef void ( ::OSG::ClusterWindowBase::*setConnectionParams_function_type )( ::std::string const & ) ;
            
            ClusterWindowBase_exposer.def( 
                "setConnectionParams"
                , setConnectionParams_function_type( &::OSG::ClusterWindowBase::setConnectionParams )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ClusterWindowBase::setConnectionType
        
            typedef void ( ::OSG::ClusterWindowBase::*setConnectionType_function_type )( ::std::string const & ) ;
            
            ClusterWindowBase_exposer.def( 
                "setConnectionType"
                , setConnectionType_function_type( &::OSG::ClusterWindowBase::setConnectionType )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ClusterWindowBase::setFrameCount
        
            typedef void ( ::OSG::ClusterWindowBase::*setFrameCount_function_type )( ::OSG::UInt32 const ) ;
            
            ClusterWindowBase_exposer.def( 
                "setFrameCount"
                , setFrameCount_function_type( &::OSG::ClusterWindowBase::setFrameCount )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ClusterWindowBase::setInterleave
        
            typedef void ( ::OSG::ClusterWindowBase::*setInterleave_function_type )( ::OSG::UInt32 const ) ;
            
            ClusterWindowBase_exposer.def( 
                "setInterleave"
                , setInterleave_function_type( &::OSG::ClusterWindowBase::setInterleave )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ClusterWindowBase::setServiceAddress
        
            typedef void ( ::OSG::ClusterWindowBase::*setServiceAddress_function_type )( ::std::string const & ) ;
            
            ClusterWindowBase_exposer.def( 
                "setServiceAddress"
                , setServiceAddress_function_type( &::OSG::ClusterWindowBase::setServiceAddress )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ClusterWindowBase::setServiceInterface
        
            typedef void ( ::OSG::ClusterWindowBase::*setServiceInterface_function_type )( ::std::string const & ) ;
            
            ClusterWindowBase_exposer.def( 
                "setServiceInterface"
                , setServiceInterface_function_type( &::OSG::ClusterWindowBase::setServiceInterface )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ClusterWindowBase::setServicePort
        
            typedef void ( ::OSG::ClusterWindowBase::*setServicePort_function_type )( ::OSG::UInt32 const ) ;
            
            ClusterWindowBase_exposer.def( 
                "setServicePort"
                , setServicePort_function_type( &::OSG::ClusterWindowBase::setServicePort )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::Window::doActivate
        
            typedef void ( ClusterWindowBase_wrapper::*doActivate_function_type )(  ) ;
            
            ClusterWindowBase_exposer.def( 
                "doActivate"
                , doActivate_function_type( &ClusterWindowBase_wrapper::doActivate ) );
        
        }
        { //::OSG::Window::doDeactivate
        
            typedef void ( ClusterWindowBase_wrapper::*doDeactivate_function_type )(  ) ;
            
            ClusterWindowBase_exposer.def( 
                "doDeactivate"
                , doDeactivate_function_type( &ClusterWindowBase_wrapper::doDeactivate ) );
        
        }
        { //::OSG::Window::doSwap
        
            typedef bool ( ClusterWindowBase_wrapper::*doSwap_function_type )(  ) ;
            
            ClusterWindowBase_exposer.def( 
                "doSwap"
                , doSwap_function_type( &ClusterWindowBase_wrapper::doSwap ) );
        
        }
        { //::OSG::Window::hasContext
        
            typedef bool ( ClusterWindowBase_wrapper::*hasContext_function_type )(  ) ;
            
            ClusterWindowBase_exposer.def( 
                "hasContext"
                , hasContext_function_type( &ClusterWindowBase_wrapper::hasContext ) );
        
        }
        { //::OSG::Window::terminate
        
            typedef void ( ::OSG::Window::*terminate_function_type )(  ) ;
            
            ClusterWindowBase_exposer.def( 
                "terminate"
                , bp::pure_virtual( terminate_function_type(&::OSG::Window::terminate) ) );
        
        }
        ClusterWindowBase_exposer.staticmethod( "create" );
        ClusterWindowBase_exposer.staticmethod( "createDependent" );
        ClusterWindowBase_exposer.staticmethod( "createLocal" );
        ClusterWindowBase_exposer.staticmethod( "getClassGroupId" );
        ClusterWindowBase_exposer.staticmethod( "getClassType" );
        ClusterWindowBase_exposer.staticmethod( "getClassTypeId" );
        ClusterWindowBase_exposer.def("getMFServers",ClusterWindowBase_getMFServers);
        ClusterWindowBase_exposer.def("getMFServerIds",ClusterWindowBase_getMFServerIds);
        ClusterWindowBase_exposer.def("getMFAutostart",ClusterWindowBase_getMFAutostart);
    }

}
