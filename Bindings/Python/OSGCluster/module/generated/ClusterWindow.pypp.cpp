// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGCluster_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "ClusterWindow.pypp.hpp"

using namespace std;
namespace bp = boost::python;

namespace
{

void initCallback(bp::object callable)
{
   callable();
}

void wrapInit(OSG::ClusterWindow* self, bp::object callable)
{
   self->init(boost::bind(initCallback, callable));
}

void defaultInit(OSG::ClusterWindow* self)
{
   self->init();
}

}

void register_ClusterWindow_class(){

    { //::OSG::ClusterWindow
        typedef bp::class_< OSG::ClusterWindow, bp::bases< OSG::ClusterWindowBase >, OSG::ClusterWindow::ObjRecPtr, boost::noncopyable > ClusterWindow_exposer_t;
        ClusterWindow_exposer_t ClusterWindow_exposer = ClusterWindow_exposer_t( "ClusterWindow", bp::no_init );
        bp::scope ClusterWindow_scope( ClusterWindow_exposer );
        bp::class_< OSG::ClusterWindow::AsyncCancel, bp::bases< ::OSG::Exception > >( "AsyncCancel", bp::init< >() );
        { //::OSG::ClusterWindow::changed
        
            typedef void ( ::OSG::ClusterWindow::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            ClusterWindow_exposer.def( 
                "changed"
                , changed_function_type( &::OSG::ClusterWindow::changed )
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("detail") ) );
        
        }
        { //::OSG::ClusterWindow::dump
        
            typedef void ( ::OSG::ClusterWindow::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            ClusterWindow_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::ClusterWindow::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::ClusterWindow::getNetwork
        
            typedef ::OSG::ClusterNetwork * ( ::OSG::ClusterWindow::*getNetwork_function_type )(  ) ;
            
            ClusterWindow_exposer.def( 
                "getNetwork"
                , getNetwork_function_type( &::OSG::ClusterWindow::getNetwork )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ClusterWindow::getStatistics
        
            typedef ::OSG::StatCollector * ( ::OSG::ClusterWindow::*getStatistics_function_type )(  ) const;
            
            ClusterWindow_exposer.def( 
                "getStatistics"
                , getStatistics_function_type( &::OSG::ClusterWindow::getStatistics )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ClusterWindow::render
        
            typedef void ( ::OSG::ClusterWindow::*render_function_type )( ::OSG::RenderActionBase * ) ;
            
            ClusterWindow_exposer.def( 
                "render"
                , render_function_type( &::OSG::ClusterWindow::render )
                , ( bp::arg("action") ) );
        
        }
        { //::OSG::ClusterWindow::setStatistics
        
            typedef void ( ::OSG::ClusterWindow::*setStatistics_function_type )( ::OSG::StatCollector * ) ;
            
            ClusterWindow_exposer.def( 
                "setStatistics"
                , setStatistics_function_type( &::OSG::ClusterWindow::setStatistics )
                , ( bp::arg("stat") ) );
        
        }
        { //::OSG::ClusterWindow::swap
        
            typedef bool ( ::OSG::ClusterWindow::*swap_function_type )(  ) ;
            
            ClusterWindow_exposer.def( 
                "swap"
                , swap_function_type( &::OSG::ClusterWindow::swap ) );
        
        }
        { //::OSG::ClusterWindow::terminate
        
            typedef void ( ::OSG::ClusterWindow::*terminate_function_type )(  ) ;
            
            ClusterWindow_exposer.def( 
                "terminate"
                , terminate_function_type( &::OSG::ClusterWindow::terminate ) );
        
        }
        ClusterWindow_exposer.def_readonly( "statActivateTime", OSG::ClusterWindow::statActivateTime );
        ClusterWindow_exposer.def_readonly( "statFrameExitTime", OSG::ClusterWindow::statFrameExitTime );
        ClusterWindow_exposer.def_readonly( "statFrameInitTime", OSG::ClusterWindow::statFrameInitTime );
        ClusterWindow_exposer.def_readonly( "statRAVTime", OSG::ClusterWindow::statRAVTime );
        ClusterWindow_exposer.def_readonly( "statSwapTime", OSG::ClusterWindow::statSwapTime );
        pyopensg::register_transit< OSG::ClusterWindow >::execute();
        bp::implicitly_convertible< OSG::ClusterWindow::ObjRecPtr, OSG::ClusterWindow* >();
        bp::implicitly_convertible< OSG::ClusterWindow::ObjRecPtr, OSG::ClusterWindow::ObjCPtr >();
        bp::implicitly_convertible< OSG::ClusterWindow::ObjRecPtr, OSG::Window* >();
        bp::implicitly_convertible< OSG::ClusterWindow::ObjRecPtr, OSG::Window::ObjRecPtr >();
        bp::implicitly_convertible<OSG::ClusterWindow::ObjRecPtr, OSG::Window::ObjCPtr>();
        ClusterWindow_exposer.def("init", defaultInit);
        ClusterWindow_exposer.def("init", wrapInit, bp::arg("oFunc"));
    }

}
