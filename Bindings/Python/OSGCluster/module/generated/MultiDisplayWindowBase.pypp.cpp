// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGCluster_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "MultiDisplayWindowBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_MultiDisplayWindowBase_class(){

    { //::OSG::MultiDisplayWindowBase
        typedef bp::class_< OSG::MultiDisplayWindowBase, bp::bases< OSG::ClusterWindow >, boost::noncopyable > MultiDisplayWindowBase_exposer_t;
        MultiDisplayWindowBase_exposer_t MultiDisplayWindowBase_exposer = MultiDisplayWindowBase_exposer_t( "MultiDisplayWindowBase", bp::no_init );
        bp::scope MultiDisplayWindowBase_scope( MultiDisplayWindowBase_exposer );
        bp::scope().attr("HServersFieldId") = (int)OSG::MultiDisplayWindowBase::HServersFieldId;
        bp::scope().attr("VServersFieldId") = (int)OSG::MultiDisplayWindowBase::VServersFieldId;
        bp::scope().attr("ManageClientViewportsFieldId") = (int)OSG::MultiDisplayWindowBase::ManageClientViewportsFieldId;
        bp::scope().attr("XOverlapFieldId") = (int)OSG::MultiDisplayWindowBase::XOverlapFieldId;
        bp::scope().attr("YOverlapFieldId") = (int)OSG::MultiDisplayWindowBase::YOverlapFieldId;
        bp::scope().attr("MaxDepthFieldId") = (int)OSG::MultiDisplayWindowBase::MaxDepthFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::MultiDisplayWindowBase::NextFieldId;
        { //::OSG::MultiDisplayWindowBase::copyFromBin
        
            typedef void ( ::OSG::MultiDisplayWindowBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            MultiDisplayWindowBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::MultiDisplayWindowBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::MultiDisplayWindowBase::copyToBin
        
            typedef void ( ::OSG::MultiDisplayWindowBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            MultiDisplayWindowBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::MultiDisplayWindowBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::MultiDisplayWindowBase::create
        
            typedef ::OSG::MultiDisplayWindowTransitPtr ( *create_function_type )(  );
            
            MultiDisplayWindowBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::MultiDisplayWindowBase::create ) );
        
        }
        { //::OSG::MultiDisplayWindowBase::createDependent
        
            typedef ::OSG::MultiDisplayWindowTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            MultiDisplayWindowBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::MultiDisplayWindowBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::MultiDisplayWindowBase::createLocal
        
            typedef ::OSG::MultiDisplayWindowTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            MultiDisplayWindowBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::MultiDisplayWindowBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::MultiDisplayWindowBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::MultiDisplayWindowBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            MultiDisplayWindowBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::MultiDisplayWindowBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::MultiDisplayWindowBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            MultiDisplayWindowBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::MultiDisplayWindowBase::getClassGroupId ) );
        
        }
        { //::OSG::MultiDisplayWindowBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            MultiDisplayWindowBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::MultiDisplayWindowBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::MultiDisplayWindowBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            MultiDisplayWindowBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::MultiDisplayWindowBase::getClassTypeId ) );
        
        }
        { //::OSG::MultiDisplayWindowBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::MultiDisplayWindowBase::*getContainerSize_function_type )(  ) const;
            
            MultiDisplayWindowBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::MultiDisplayWindowBase::getContainerSize ) );
        
        }
        { //::OSG::MultiDisplayWindowBase::getHServers
        
            typedef ::OSG::UInt32 ( ::OSG::MultiDisplayWindowBase::*getHServers_function_type )(  ) const;
            
            MultiDisplayWindowBase_exposer.def( 
                "getHServers"
                , getHServers_function_type( &::OSG::MultiDisplayWindowBase::getHServers ) );
        
        }
        { //::OSG::MultiDisplayWindowBase::getManageClientViewports
        
            typedef bool ( ::OSG::MultiDisplayWindowBase::*getManageClientViewports_function_type )(  ) const;
            
            MultiDisplayWindowBase_exposer.def( 
                "getManageClientViewports"
                , getManageClientViewports_function_type( &::OSG::MultiDisplayWindowBase::getManageClientViewports ) );
        
        }
        { //::OSG::MultiDisplayWindowBase::getMaxDepth
        
            typedef ::OSG::Int32 ( ::OSG::MultiDisplayWindowBase::*getMaxDepth_function_type )(  ) const;
            
            MultiDisplayWindowBase_exposer.def( 
                "getMaxDepth"
                , getMaxDepth_function_type( &::OSG::MultiDisplayWindowBase::getMaxDepth ) );
        
        }
        { //::OSG::MultiDisplayWindowBase::getSFHServers
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::MultiDisplayWindowBase::*getSFHServers_function_type )(  ) const;
            
            MultiDisplayWindowBase_exposer.def( 
                "getSFHServers"
                , getSFHServers_function_type( &::OSG::MultiDisplayWindowBase::getSFHServers )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::MultiDisplayWindowBase::getSFManageClientViewports
        
            typedef ::OSG::SFBool const * ( ::OSG::MultiDisplayWindowBase::*getSFManageClientViewports_function_type )(  ) const;
            
            MultiDisplayWindowBase_exposer.def( 
                "getSFManageClientViewports"
                , getSFManageClientViewports_function_type( &::OSG::MultiDisplayWindowBase::getSFManageClientViewports )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::MultiDisplayWindowBase::getSFMaxDepth
        
            typedef ::OSG::SFInt32 const * ( ::OSG::MultiDisplayWindowBase::*getSFMaxDepth_function_type )(  ) const;
            
            MultiDisplayWindowBase_exposer.def( 
                "getSFMaxDepth"
                , getSFMaxDepth_function_type( &::OSG::MultiDisplayWindowBase::getSFMaxDepth )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::MultiDisplayWindowBase::getSFVServers
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::MultiDisplayWindowBase::*getSFVServers_function_type )(  ) const;
            
            MultiDisplayWindowBase_exposer.def( 
                "getSFVServers"
                , getSFVServers_function_type( &::OSG::MultiDisplayWindowBase::getSFVServers )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::MultiDisplayWindowBase::getSFXOverlap
        
            typedef ::OSG::SFInt32 const * ( ::OSG::MultiDisplayWindowBase::*getSFXOverlap_function_type )(  ) const;
            
            MultiDisplayWindowBase_exposer.def( 
                "getSFXOverlap"
                , getSFXOverlap_function_type( &::OSG::MultiDisplayWindowBase::getSFXOverlap )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::MultiDisplayWindowBase::getSFYOverlap
        
            typedef ::OSG::SFInt32 const * ( ::OSG::MultiDisplayWindowBase::*getSFYOverlap_function_type )(  ) const;
            
            MultiDisplayWindowBase_exposer.def( 
                "getSFYOverlap"
                , getSFYOverlap_function_type( &::OSG::MultiDisplayWindowBase::getSFYOverlap )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::MultiDisplayWindowBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::MultiDisplayWindowBase::*getType_function_type )(  ) ;
            
            MultiDisplayWindowBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::MultiDisplayWindowBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::MultiDisplayWindowBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::MultiDisplayWindowBase::*getType_function_type )(  ) const;
            
            MultiDisplayWindowBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::MultiDisplayWindowBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::MultiDisplayWindowBase::getVServers
        
            typedef ::OSG::UInt32 ( ::OSG::MultiDisplayWindowBase::*getVServers_function_type )(  ) const;
            
            MultiDisplayWindowBase_exposer.def( 
                "getVServers"
                , getVServers_function_type( &::OSG::MultiDisplayWindowBase::getVServers ) );
        
        }
        { //::OSG::MultiDisplayWindowBase::getXOverlap
        
            typedef ::OSG::Int32 ( ::OSG::MultiDisplayWindowBase::*getXOverlap_function_type )(  ) const;
            
            MultiDisplayWindowBase_exposer.def( 
                "getXOverlap"
                , getXOverlap_function_type( &::OSG::MultiDisplayWindowBase::getXOverlap ) );
        
        }
        { //::OSG::MultiDisplayWindowBase::getYOverlap
        
            typedef ::OSG::Int32 ( ::OSG::MultiDisplayWindowBase::*getYOverlap_function_type )(  ) const;
            
            MultiDisplayWindowBase_exposer.def( 
                "getYOverlap"
                , getYOverlap_function_type( &::OSG::MultiDisplayWindowBase::getYOverlap ) );
        
        }
        { //::OSG::MultiDisplayWindowBase::setHServers
        
            typedef void ( ::OSG::MultiDisplayWindowBase::*setHServers_function_type )( ::OSG::UInt32 const ) ;
            
            MultiDisplayWindowBase_exposer.def( 
                "setHServers"
                , setHServers_function_type( &::OSG::MultiDisplayWindowBase::setHServers )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::MultiDisplayWindowBase::setManageClientViewports
        
            typedef void ( ::OSG::MultiDisplayWindowBase::*setManageClientViewports_function_type )( bool const ) ;
            
            MultiDisplayWindowBase_exposer.def( 
                "setManageClientViewports"
                , setManageClientViewports_function_type( &::OSG::MultiDisplayWindowBase::setManageClientViewports )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::MultiDisplayWindowBase::setMaxDepth
        
            typedef void ( ::OSG::MultiDisplayWindowBase::*setMaxDepth_function_type )( ::OSG::Int32 const ) ;
            
            MultiDisplayWindowBase_exposer.def( 
                "setMaxDepth"
                , setMaxDepth_function_type( &::OSG::MultiDisplayWindowBase::setMaxDepth )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::MultiDisplayWindowBase::setVServers
        
            typedef void ( ::OSG::MultiDisplayWindowBase::*setVServers_function_type )( ::OSG::UInt32 const ) ;
            
            MultiDisplayWindowBase_exposer.def( 
                "setVServers"
                , setVServers_function_type( &::OSG::MultiDisplayWindowBase::setVServers )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::MultiDisplayWindowBase::setXOverlap
        
            typedef void ( ::OSG::MultiDisplayWindowBase::*setXOverlap_function_type )( ::OSG::Int32 const ) ;
            
            MultiDisplayWindowBase_exposer.def( 
                "setXOverlap"
                , setXOverlap_function_type( &::OSG::MultiDisplayWindowBase::setXOverlap )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::MultiDisplayWindowBase::setYOverlap
        
            typedef void ( ::OSG::MultiDisplayWindowBase::*setYOverlap_function_type )( ::OSG::Int32 const ) ;
            
            MultiDisplayWindowBase_exposer.def( 
                "setYOverlap"
                , setYOverlap_function_type( &::OSG::MultiDisplayWindowBase::setYOverlap )
                , ( bp::arg("value") ) );
        
        }
        MultiDisplayWindowBase_exposer.staticmethod( "create" );
        MultiDisplayWindowBase_exposer.staticmethod( "createDependent" );
        MultiDisplayWindowBase_exposer.staticmethod( "createLocal" );
        MultiDisplayWindowBase_exposer.staticmethod( "getClassGroupId" );
        MultiDisplayWindowBase_exposer.staticmethod( "getClassType" );
        MultiDisplayWindowBase_exposer.staticmethod( "getClassTypeId" );
    }

}
