// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGGroup_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "DynamicStateGeneratorStageData.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_DynamicStateGeneratorStageData_class(){

    { //::OSG::DynamicStateGeneratorStageData
        typedef bp::class_< OSG::DynamicStateGeneratorStageData, bp::bases< OSG::DynamicStateGeneratorStageDataBase >, OSG::DynamicStateGeneratorStageData::ObjRecPtr, boost::noncopyable > DynamicStateGeneratorStageData_exposer_t;
        DynamicStateGeneratorStageData_exposer_t DynamicStateGeneratorStageData_exposer = DynamicStateGeneratorStageData_exposer_t( "DynamicStateGeneratorStageData", bp::no_init );
        bp::scope DynamicStateGeneratorStageData_scope( DynamicStateGeneratorStageData_exposer );
        { //::OSG::DynamicStateGeneratorStageData::addChunk
        
            typedef bool ( ::OSG::DynamicStateGeneratorStageData::*addChunk_function_type )( ::OSG::StateChunk *,::OSG::Int32 ) ;
            
            DynamicStateGeneratorStageData_exposer.def( 
                "addChunk"
                , addChunk_function_type( &::OSG::DynamicStateGeneratorStageData::addChunk )
                , ( bp::arg("chunk"), bp::arg("slot")=(::OSG::Int32)(OSG::State::AutoSlotReplace) ) );
        
        }
        { //::OSG::DynamicStateGeneratorStageData::beginChunks
        
            typedef ::OSG::PointerMFieldConstIterator< OSG::StateChunk*, OSG::UnrecordedRefCountPolicy, 0 > ( ::OSG::DynamicStateGeneratorStageData::*beginChunks_function_type )(  ) const;
            
            DynamicStateGeneratorStageData_exposer.def( 
                "beginChunks"
                , beginChunks_function_type( &::OSG::DynamicStateGeneratorStageData::beginChunks ) );
        
        }
        { //::OSG::DynamicStateGeneratorStageData::changed
        
            typedef void ( ::OSG::DynamicStateGeneratorStageData::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            DynamicStateGeneratorStageData_exposer.def( 
                "changed"
                , changed_function_type( &::OSG::DynamicStateGeneratorStageData::changed )
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("details") ) );
        
        }
        { //::OSG::DynamicStateGeneratorStageData::dump
        
            typedef void ( ::OSG::DynamicStateGeneratorStageData::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            DynamicStateGeneratorStageData_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::DynamicStateGeneratorStageData::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::DynamicStateGeneratorStageData::endChunks
        
            typedef ::OSG::PointerMFieldConstIterator< OSG::StateChunk*, OSG::UnrecordedRefCountPolicy, 0 > ( ::OSG::DynamicStateGeneratorStageData::*endChunks_function_type )(  ) const;
            
            DynamicStateGeneratorStageData_exposer.def( 
                "endChunks"
                , endChunks_function_type( &::OSG::DynamicStateGeneratorStageData::endChunks ) );
        
        }
        { //::OSG::DynamicStateGeneratorStageData::subChunk
        
            typedef bool ( ::OSG::DynamicStateGeneratorStageData::*subChunk_function_type )( ::OSG::StateChunk *,::OSG::Int32 ) ;
            
            DynamicStateGeneratorStageData_exposer.def( 
                "subChunk"
                , subChunk_function_type( &::OSG::DynamicStateGeneratorStageData::subChunk )
                , ( bp::arg("chunk"), bp::arg("slot")=(::OSG::Int32)(OSG::State::AutoSlotReplace) ) );
        
        }
        pyopensg::register_transit< OSG::DynamicStateGeneratorStageData >::execute();
        bp::implicitly_convertible< OSG::DynamicStateGeneratorStageData::ObjRecPtr, OSG::DynamicStateGeneratorStageData* >();
        bp::implicitly_convertible< OSG::DynamicStateGeneratorStageData::ObjRecPtr, OSG::DynamicStateGeneratorStageData::ObjCPtr >();
        bp::implicitly_convertible< OSG::DynamicStateGeneratorStageData::ObjRecPtr, OSG::StageData* >();
        bp::implicitly_convertible< OSG::DynamicStateGeneratorStageData::ObjRecPtr, OSG::StageData::ObjRecPtr >();
        bp::implicitly_convertible<OSG::DynamicStateGeneratorStageData::ObjRecPtr, OSG::StageData::ObjCPtr>();
    }

}
