// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGGroup_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "StageParentBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct TraversalValidationHandlerMixin_less__OSG_scope_ContainerMixinHead_less__OSG_scope_StageDesc__greater___greater__wrapper : OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >, bp::wrapper< OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > > > {

    virtual void changed( ::OSG::ConstFieldMaskArg whichField, ::OSG::UInt32 origin, ::OSG::BitVector details ) {
        if( bp::override func_changed = this->get_override( "changed" ) )
            func_changed( whichField, origin, details );
        else{
            this->OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::changed( whichField, origin, details );
        }
    }
    
    void default_changed( ::OSG::ConstFieldMaskArg whichField, ::OSG::UInt32 origin, ::OSG::BitVector details ) {
        OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::changed( whichField, origin, details );
    }

    virtual void copyFromBin( ::OSG::BinaryDataHandler & pMem, ::OSG::ConstFieldMaskArg whichField ) {
        if( bp::override func_copyFromBin = this->get_override( "copyFromBin" ) )
            func_copyFromBin( boost::ref(pMem), whichField );
        else{
            this->OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::copyFromBin( boost::ref(pMem), whichField );
        }
    }
    
    void default_copyFromBin( ::OSG::BinaryDataHandler & pMem, ::OSG::ConstFieldMaskArg whichField ) {
        OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::copyFromBin( boost::ref(pMem), whichField );
    }

    virtual void copyToBin( ::OSG::BinaryDataHandler & pMem, ::OSG::ConstFieldMaskArg whichField ) {
        if( bp::override func_copyToBin = this->get_override( "copyToBin" ) )
            func_copyToBin( boost::ref(pMem), whichField );
        else{
            this->OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::copyToBin( boost::ref(pMem), whichField );
        }
    }
    
    void default_copyToBin( ::OSG::BinaryDataHandler & pMem, ::OSG::ConstFieldMaskArg whichField ) {
        OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::copyToBin( boost::ref(pMem), whichField );
    }

    virtual void dump( ::OSG::UInt32 uiIndent=0, long unsigned int const bvFlags=0 ) const  {
        if( bp::override func_dump = this->get_override( "dump" ) )
            func_dump( uiIndent, bvFlags );
        else{
            this->OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::dump( uiIndent, bvFlags );
        }
    }
    
    void default_dump( ::OSG::UInt32 uiIndent=0, long unsigned int const bvFlags=0 ) const  {
        OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::dump( uiIndent, bvFlags );
    }

    virtual ::OSG::SizeT getBinSize( ::OSG::ConstFieldMaskArg whichField ) {
        if( bp::override func_getBinSize = this->get_override( "getBinSize" ) )
            return func_getBinSize( whichField );
        else{
            return this->OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::getBinSize( whichField );
        }
    }
    
    ::OSG::SizeT default_getBinSize( ::OSG::ConstFieldMaskArg whichField ) {
        return OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::getBinSize( whichField );
    }

};

namespace
{

void destroyedCallback(bp::object callable, OSG::FieldContainer* fc,
                       const OSG::UInt64 i)
{
   callable(fc, i);
}

void wrapAddDestroyedFunctor(alias_StageParentBase* spb, bp::object func,
                             const std::string& createSymbol)
{
   spb->addDestroyedFunctor(boost::bind(destroyedCallback, func, _1, _2),
                            createSymbol);
}

}

void register_StageParentBase_class(){

    { //::OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >
        typedef bp::class_< TraversalValidationHandlerMixin_less__OSG_scope_ContainerMixinHead_less__OSG_scope_StageDesc__greater___greater__wrapper, bp::bases< OSG::ContainerMixinHead< OSG::StageDesc > >, boost::noncopyable > StageParentBase_exposer_t;
        StageParentBase_exposer_t StageParentBase_exposer = StageParentBase_exposer_t( "StageParentBase", bp::no_init );
        bp::scope StageParentBase_scope( StageParentBase_exposer );
        bp::enum_< OSG::TraversalValidationHandlerMixin<OSG::ContainerMixinHead<OSG::StageDesc> >::UpdateMode>("UpdateMode")
            .value("PerWindow", OSG::TraversalValidationHandlerMixin<OSG::ContainerMixinHead<OSG::StageDesc> >::PerWindow)
            .value("PerViewport", OSG::TraversalValidationHandlerMixin<OSG::ContainerMixinHead<OSG::StageDesc> >::PerViewport)
            .value("PerTraversal", OSG::TraversalValidationHandlerMixin<OSG::ContainerMixinHead<OSG::StageDesc> >::PerTraversal)
            .value("PerVisit", OSG::TraversalValidationHandlerMixin<OSG::ContainerMixinHead<OSG::StageDesc> >::PerVisit)
            .value("OnRequest", OSG::TraversalValidationHandlerMixin<OSG::ContainerMixinHead<OSG::StageDesc> >::OnRequest)
            .export_values()
            ;
        { //::OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::changed
        
            typedef OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > > exported_class_t;
            typedef void ( exported_class_t::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            typedef void ( TraversalValidationHandlerMixin_less__OSG_scope_ContainerMixinHead_less__OSG_scope_StageDesc__greater___greater__wrapper::*default_changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            StageParentBase_exposer.def( 
                "changed"
                , changed_function_type(&::OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::changed)
                , default_changed_function_type(&TraversalValidationHandlerMixin_less__OSG_scope_ContainerMixinHead_less__OSG_scope_StageDesc__greater___greater__wrapper::default_changed)
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("details") ) );
        
        }
        { //::OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::clearDestroyedFunctors
        
            typedef OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > > exported_class_t;
            typedef void ( exported_class_t::*clearDestroyedFunctors_function_type )(  ) ;
            
            StageParentBase_exposer.def( 
                "clearDestroyedFunctors"
                , clearDestroyedFunctors_function_type( &::OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::clearDestroyedFunctors ) );
        
        }
        { //::OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::copyFromBin
        
            typedef OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > > exported_class_t;
            typedef void ( exported_class_t::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            typedef void ( TraversalValidationHandlerMixin_less__OSG_scope_ContainerMixinHead_less__OSG_scope_StageDesc__greater___greater__wrapper::*default_copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            StageParentBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type(&::OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::copyFromBin)
                , default_copyFromBin_function_type(&TraversalValidationHandlerMixin_less__OSG_scope_ContainerMixinHead_less__OSG_scope_StageDesc__greater___greater__wrapper::default_copyFromBin)
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::copyToBin
        
            typedef OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > > exported_class_t;
            typedef void ( exported_class_t::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            typedef void ( TraversalValidationHandlerMixin_less__OSG_scope_ContainerMixinHead_less__OSG_scope_StageDesc__greater___greater__wrapper::*default_copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            StageParentBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type(&::OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::copyToBin)
                , default_copyToBin_function_type(&TraversalValidationHandlerMixin_less__OSG_scope_ContainerMixinHead_less__OSG_scope_StageDesc__greater___greater__wrapper::default_copyToBin)
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::dump
        
            typedef OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > > exported_class_t;
            typedef void ( exported_class_t::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            typedef void ( TraversalValidationHandlerMixin_less__OSG_scope_ContainerMixinHead_less__OSG_scope_StageDesc__greater___greater__wrapper::*default_dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            StageParentBase_exposer.def( 
                "dump"
                , dump_function_type(&::OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::dump)
                , default_dump_function_type(&TraversalValidationHandlerMixin_less__OSG_scope_ContainerMixinHead_less__OSG_scope_StageDesc__greater___greater__wrapper::default_dump)
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::getBinSize
        
            typedef OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > > exported_class_t;
            typedef ::OSG::SizeT ( exported_class_t::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            typedef ::OSG::SizeT ( TraversalValidationHandlerMixin_less__OSG_scope_ContainerMixinHead_less__OSG_scope_StageDesc__greater___greater__wrapper::*default_getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            StageParentBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type(&::OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::getBinSize)
                , default_getBinSize_function_type(&TraversalValidationHandlerMixin_less__OSG_scope_ContainerMixinHead_less__OSG_scope_StageDesc__greater___greater__wrapper::default_getBinSize)
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::getSFUpdateMode
        
            typedef OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > > exported_class_t;
            typedef ::OSG::SField< unsigned int, 0 > const * ( exported_class_t::*getSFUpdateMode_function_type )(  ) const;
            
            StageParentBase_exposer.def( 
                "getSFUpdateMode"
                , getSFUpdateMode_function_type( &::OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::getSFUpdateMode )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::getUpdateMode
        
            typedef OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > > exported_class_t;
            typedef ::OSG::UInt32 ( exported_class_t::*getUpdateMode_function_type )(  ) const;
            
            StageParentBase_exposer.def( 
                "getUpdateMode"
                , getUpdateMode_function_type( &::OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::getUpdateMode ) );
        
        }
        { //::OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::requestRun
        
            typedef OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > > exported_class_t;
            typedef bool ( exported_class_t::*requestRun_function_type )(  ) ;
            
            StageParentBase_exposer.def( 
                "requestRun"
                , requestRun_function_type( &::OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::requestRun ) );
        
        }
        { //::OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::setUpdateMode
        
            typedef OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > > exported_class_t;
            typedef void ( exported_class_t::*setUpdateMode_function_type )( ::OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::UpdateMode ) ;
            
            StageParentBase_exposer.def( 
                "setUpdateMode"
                , setUpdateMode_function_type( &::OSG::TraversalValidationHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::setUpdateMode )
                , ( bp::arg("eMode") ) );
        
        }
        StageParentBase_exposer.def("addDestroyedFunctor", wrapAddDestroyedFunctor,
                  (bp::arg("func"), bp::arg("createSymbol")));
    }

}
