// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGGroup_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "DistanceLODBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

boost::python::list DistanceLODBase_getMFRange(OSG::DistanceLODBase *self)
{
   boost::python::list result;
   OSG::MFReal32 const * mf_data = self->getMFRange();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

void register_DistanceLODBase_class(){

    { //::OSG::DistanceLODBase
        typedef bp::class_< OSG::DistanceLODBase, bp::bases< ::OSG::Group >, boost::noncopyable > DistanceLODBase_exposer_t;
        DistanceLODBase_exposer_t DistanceLODBase_exposer = DistanceLODBase_exposer_t( "DistanceLODBase", bp::no_init );
        bp::scope DistanceLODBase_scope( DistanceLODBase_exposer );
        bp::scope().attr("CenterFieldId") = (int)OSG::DistanceLODBase::CenterFieldId;
        bp::scope().attr("RangeFieldId") = (int)OSG::DistanceLODBase::RangeFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::DistanceLODBase::NextFieldId;
        { //::OSG::DistanceLODBase::copyFromBin
        
            typedef void ( ::OSG::DistanceLODBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            DistanceLODBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::DistanceLODBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::DistanceLODBase::copyToBin
        
            typedef void ( ::OSG::DistanceLODBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            DistanceLODBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::DistanceLODBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::DistanceLODBase::create
        
            typedef ::OSG::DistanceLODTransitPtr ( *create_function_type )(  );
            
            DistanceLODBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::DistanceLODBase::create ) );
        
        }
        { //::OSG::DistanceLODBase::createDependent
        
            typedef ::OSG::DistanceLODTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            DistanceLODBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::DistanceLODBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::DistanceLODBase::createLocal
        
            typedef ::OSG::DistanceLODTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            DistanceLODBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::DistanceLODBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::DistanceLODBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::DistanceLODBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            DistanceLODBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::DistanceLODBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::DistanceLODBase::getCenter
        
            typedef ::OSG::Pnt3f const & ( ::OSG::DistanceLODBase::*getCenter_function_type )(  ) const;
            
            DistanceLODBase_exposer.def( 
                "getCenter"
                , getCenter_function_type( &::OSG::DistanceLODBase::getCenter )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::DistanceLODBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            DistanceLODBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::DistanceLODBase::getClassGroupId ) );
        
        }
        { //::OSG::DistanceLODBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            DistanceLODBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::DistanceLODBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::DistanceLODBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            DistanceLODBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::DistanceLODBase::getClassTypeId ) );
        
        }
        { //::OSG::DistanceLODBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::DistanceLODBase::*getContainerSize_function_type )(  ) const;
            
            DistanceLODBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::DistanceLODBase::getContainerSize ) );
        
        }
        { //::OSG::DistanceLODBase::getRange
        
            typedef ::OSG::Real32 ( ::OSG::DistanceLODBase::*getRange_function_type )( ::OSG::UInt32 const ) const;
            
            DistanceLODBase_exposer.def( 
                "getRange"
                , getRange_function_type( &::OSG::DistanceLODBase::getRange )
                , ( bp::arg("index") ) );
        
        }
        { //::OSG::DistanceLODBase::getSFCenter
        
            typedef ::OSG::SFPnt3f const * ( ::OSG::DistanceLODBase::*getSFCenter_function_type )(  ) const;
            
            DistanceLODBase_exposer.def( 
                "getSFCenter"
                , getSFCenter_function_type( &::OSG::DistanceLODBase::getSFCenter )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DistanceLODBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::DistanceLODBase::*getType_function_type )(  ) ;
            
            DistanceLODBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::DistanceLODBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DistanceLODBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::DistanceLODBase::*getType_function_type )(  ) const;
            
            DistanceLODBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::DistanceLODBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DistanceLODBase::setCenter
        
            typedef void ( ::OSG::DistanceLODBase::*setCenter_function_type )( ::OSG::Pnt3f const & ) ;
            
            DistanceLODBase_exposer.def( 
                "setCenter"
                , setCenter_function_type( &::OSG::DistanceLODBase::setCenter )
                , ( bp::arg("value") ) );
        
        }
        DistanceLODBase_exposer.staticmethod( "create" );
        DistanceLODBase_exposer.staticmethod( "createDependent" );
        DistanceLODBase_exposer.staticmethod( "createLocal" );
        DistanceLODBase_exposer.staticmethod( "getClassGroupId" );
        DistanceLODBase_exposer.staticmethod( "getClassType" );
        DistanceLODBase_exposer.staticmethod( "getClassTypeId" );
        DistanceLODBase_exposer.def("getMFRange",DistanceLODBase_getMFRange);
    }

}
