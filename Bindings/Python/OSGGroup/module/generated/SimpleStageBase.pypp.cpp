// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGGroup_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "SimpleStageBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct SimpleStageBase_wrapper : OSG::SimpleStageBase, bp::wrapper< OSG::SimpleStageBase > {

    virtual void changed( ::OSG::ConstFieldMaskArg whichField, ::OSG::UInt32 origin, ::OSG::BitVector details ) {
        if( bp::override func_changed = this->get_override( "changed" ) )
            func_changed( whichField, origin, details );
        else{
            this->OSG::StageHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::changed( whichField, origin, details );
        }
    }
    
    void default_changed( ::OSG::ConstFieldMaskArg whichField, ::OSG::UInt32 origin, ::OSG::BitVector details ) {
        OSG::StageHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::changed( whichField, origin, details );
    }

    virtual void dump( ::OSG::UInt32 uiIndent=0, long unsigned int const bvFlags=0 ) const  {
        if( bp::override func_dump = this->get_override( "dump" ) )
            func_dump( uiIndent, bvFlags );
        else{
            this->OSG::StageHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::dump( uiIndent, bvFlags );
        }
    }
    
    void default_dump( ::OSG::UInt32 uiIndent=0, long unsigned int const bvFlags=0 ) const  {
        OSG::StageHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::dump( uiIndent, bvFlags );
    }

};

boost::python::list SimpleStageBase_getMFForegrounds(OSG::SimpleStageBase *self)
{
   boost::python::list result;
   OSG::MFUnrecForegroundPtr const * mf_data = self->getMFForegrounds();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append(OSG::Foreground::ObjRecPtr((*mf_data)[i]));
   }
   return result;
}

void register_SimpleStageBase_class(){

    { //::OSG::SimpleStageBase
        typedef bp::class_< SimpleStageBase_wrapper, bp::bases< OSG::RenderCallbackStage >, boost::noncopyable > SimpleStageBase_exposer_t;
        SimpleStageBase_exposer_t SimpleStageBase_exposer = SimpleStageBase_exposer_t( "SimpleStageBase", bp::no_init );
        bp::scope SimpleStageBase_scope( SimpleStageBase_exposer );
        bp::scope().attr("LeftFieldId") = (int)OSG::SimpleStageBase::LeftFieldId;
        bp::scope().attr("RightFieldId") = (int)OSG::SimpleStageBase::RightFieldId;
        bp::scope().attr("BottomFieldId") = (int)OSG::SimpleStageBase::BottomFieldId;
        bp::scope().attr("TopFieldId") = (int)OSG::SimpleStageBase::TopFieldId;
        bp::scope().attr("CameraFieldId") = (int)OSG::SimpleStageBase::CameraFieldId;
        bp::scope().attr("BackgroundFieldId") = (int)OSG::SimpleStageBase::BackgroundFieldId;
        bp::scope().attr("ForegroundsFieldId") = (int)OSG::SimpleStageBase::ForegroundsFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::SimpleStageBase::NextFieldId;
        { //::OSG::SimpleStageBase::assignForegrounds
        
            typedef void ( ::OSG::SimpleStageBase::*assignForegrounds_function_type )( ::OSG::MFUnrecForegroundPtr const & ) ;
            
            SimpleStageBase_exposer.def( 
                "assignForegrounds"
                , assignForegrounds_function_type( &::OSG::SimpleStageBase::assignForegrounds )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::SimpleStageBase::clearForegrounds
        
            typedef void ( ::OSG::SimpleStageBase::*clearForegrounds_function_type )(  ) ;
            
            SimpleStageBase_exposer.def( 
                "clearForegrounds"
                , clearForegrounds_function_type( &::OSG::SimpleStageBase::clearForegrounds ) );
        
        }
        { //::OSG::SimpleStageBase::copyFromBin
        
            typedef void ( ::OSG::SimpleStageBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            SimpleStageBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::SimpleStageBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::SimpleStageBase::copyToBin
        
            typedef void ( ::OSG::SimpleStageBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            SimpleStageBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::SimpleStageBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::SimpleStageBase::create
        
            typedef ::OSG::SimpleStageTransitPtr ( *create_function_type )(  );
            
            SimpleStageBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::SimpleStageBase::create ) );
        
        }
        { //::OSG::SimpleStageBase::createDependent
        
            typedef ::OSG::SimpleStageTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            SimpleStageBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::SimpleStageBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::SimpleStageBase::createLocal
        
            typedef ::OSG::SimpleStageTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            SimpleStageBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::SimpleStageBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::SimpleStageBase::getBackground
        
            typedef ::OSG::Background * ( ::OSG::SimpleStageBase::*getBackground_function_type )(  ) const;
            
            SimpleStageBase_exposer.def( 
                "getBackground"
                , getBackground_function_type( &::OSG::SimpleStageBase::getBackground )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::SimpleStageBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::SimpleStageBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            SimpleStageBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::SimpleStageBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::SimpleStageBase::getBottom
        
            typedef ::OSG::Real32 ( ::OSG::SimpleStageBase::*getBottom_function_type )(  ) const;
            
            SimpleStageBase_exposer.def( 
                "getBottom"
                , getBottom_function_type( &::OSG::SimpleStageBase::getBottom ) );
        
        }
        { //::OSG::SimpleStageBase::getCamera
        
            typedef ::OSG::Camera * ( ::OSG::SimpleStageBase::*getCamera_function_type )(  ) const;
            
            SimpleStageBase_exposer.def( 
                "getCamera"
                , getCamera_function_type( &::OSG::SimpleStageBase::getCamera )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::SimpleStageBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            SimpleStageBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::SimpleStageBase::getClassGroupId ) );
        
        }
        { //::OSG::SimpleStageBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            SimpleStageBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::SimpleStageBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::SimpleStageBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            SimpleStageBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::SimpleStageBase::getClassTypeId ) );
        
        }
        { //::OSG::SimpleStageBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::SimpleStageBase::*getContainerSize_function_type )(  ) const;
            
            SimpleStageBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::SimpleStageBase::getContainerSize ) );
        
        }
        { //::OSG::SimpleStageBase::getForegrounds
        
            typedef ::OSG::Foreground * ( ::OSG::SimpleStageBase::*getForegrounds_function_type )( ::OSG::UInt32 const ) const;
            
            SimpleStageBase_exposer.def( 
                "getForegrounds"
                , getForegrounds_function_type( &::OSG::SimpleStageBase::getForegrounds )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::SimpleStageBase::getLeft
        
            typedef ::OSG::Real32 ( ::OSG::SimpleStageBase::*getLeft_function_type )(  ) const;
            
            SimpleStageBase_exposer.def( 
                "getLeft"
                , getLeft_function_type( &::OSG::SimpleStageBase::getLeft ) );
        
        }
        { //::OSG::SimpleStageBase::getRight
        
            typedef ::OSG::Real32 ( ::OSG::SimpleStageBase::*getRight_function_type )(  ) const;
            
            SimpleStageBase_exposer.def( 
                "getRight"
                , getRight_function_type( &::OSG::SimpleStageBase::getRight ) );
        
        }
        { //::OSG::SimpleStageBase::getSFBackground
        
            typedef ::OSG::SFUnrecBackgroundPtr const * ( ::OSG::SimpleStageBase::*getSFBackground_function_type )(  ) const;
            
            SimpleStageBase_exposer.def( 
                "getSFBackground"
                , getSFBackground_function_type( &::OSG::SimpleStageBase::getSFBackground )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::SimpleStageBase::getSFBottom
        
            typedef ::OSG::SFReal32 const * ( ::OSG::SimpleStageBase::*getSFBottom_function_type )(  ) const;
            
            SimpleStageBase_exposer.def( 
                "getSFBottom"
                , getSFBottom_function_type( &::OSG::SimpleStageBase::getSFBottom )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::SimpleStageBase::getSFCamera
        
            typedef ::OSG::SFUnrecCameraPtr const * ( ::OSG::SimpleStageBase::*getSFCamera_function_type )(  ) const;
            
            SimpleStageBase_exposer.def( 
                "getSFCamera"
                , getSFCamera_function_type( &::OSG::SimpleStageBase::getSFCamera )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::SimpleStageBase::getSFLeft
        
            typedef ::OSG::SFReal32 const * ( ::OSG::SimpleStageBase::*getSFLeft_function_type )(  ) const;
            
            SimpleStageBase_exposer.def( 
                "getSFLeft"
                , getSFLeft_function_type( &::OSG::SimpleStageBase::getSFLeft )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::SimpleStageBase::getSFRight
        
            typedef ::OSG::SFReal32 const * ( ::OSG::SimpleStageBase::*getSFRight_function_type )(  ) const;
            
            SimpleStageBase_exposer.def( 
                "getSFRight"
                , getSFRight_function_type( &::OSG::SimpleStageBase::getSFRight )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::SimpleStageBase::getSFTop
        
            typedef ::OSG::SFReal32 const * ( ::OSG::SimpleStageBase::*getSFTop_function_type )(  ) const;
            
            SimpleStageBase_exposer.def( 
                "getSFTop"
                , getSFTop_function_type( &::OSG::SimpleStageBase::getSFTop )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::SimpleStageBase::getTop
        
            typedef ::OSG::Real32 ( ::OSG::SimpleStageBase::*getTop_function_type )(  ) const;
            
            SimpleStageBase_exposer.def( 
                "getTop"
                , getTop_function_type( &::OSG::SimpleStageBase::getTop ) );
        
        }
        { //::OSG::SimpleStageBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::SimpleStageBase::*getType_function_type )(  ) ;
            
            SimpleStageBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::SimpleStageBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::SimpleStageBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::SimpleStageBase::*getType_function_type )(  ) const;
            
            SimpleStageBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::SimpleStageBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::SimpleStageBase::pushToForegrounds
        
            typedef void ( ::OSG::SimpleStageBase::*pushToForegrounds_function_type )( ::OSG::Foreground * const ) ;
            
            SimpleStageBase_exposer.def( 
                "pushToForegrounds"
                , pushToForegrounds_function_type( &::OSG::SimpleStageBase::pushToForegrounds )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::SimpleStageBase::removeFromForegrounds
        
            typedef void ( ::OSG::SimpleStageBase::*removeFromForegrounds_function_type )( ::OSG::UInt32 ) ;
            
            SimpleStageBase_exposer.def( 
                "removeFromForegrounds"
                , removeFromForegrounds_function_type( &::OSG::SimpleStageBase::removeFromForegrounds )
                , ( bp::arg("uiIndex") ) );
        
        }
        { //::OSG::SimpleStageBase::removeObjFromForegrounds
        
            typedef void ( ::OSG::SimpleStageBase::*removeObjFromForegrounds_function_type )( ::OSG::Foreground * const ) ;
            
            SimpleStageBase_exposer.def( 
                "removeObjFromForegrounds"
                , removeObjFromForegrounds_function_type( &::OSG::SimpleStageBase::removeObjFromForegrounds )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::SimpleStageBase::setBackground
        
            typedef void ( ::OSG::SimpleStageBase::*setBackground_function_type )( ::OSG::Background * const ) ;
            
            SimpleStageBase_exposer.def( 
                "setBackground"
                , setBackground_function_type( &::OSG::SimpleStageBase::setBackground )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::SimpleStageBase::setBottom
        
            typedef void ( ::OSG::SimpleStageBase::*setBottom_function_type )( ::OSG::Real32 const ) ;
            
            SimpleStageBase_exposer.def( 
                "setBottom"
                , setBottom_function_type( &::OSG::SimpleStageBase::setBottom )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::SimpleStageBase::setCamera
        
            typedef void ( ::OSG::SimpleStageBase::*setCamera_function_type )( ::OSG::Camera * const ) ;
            
            SimpleStageBase_exposer.def( 
                "setCamera"
                , setCamera_function_type( &::OSG::SimpleStageBase::setCamera )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::SimpleStageBase::setLeft
        
            typedef void ( ::OSG::SimpleStageBase::*setLeft_function_type )( ::OSG::Real32 const ) ;
            
            SimpleStageBase_exposer.def( 
                "setLeft"
                , setLeft_function_type( &::OSG::SimpleStageBase::setLeft )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::SimpleStageBase::setRight
        
            typedef void ( ::OSG::SimpleStageBase::*setRight_function_type )( ::OSG::Real32 const ) ;
            
            SimpleStageBase_exposer.def( 
                "setRight"
                , setRight_function_type( &::OSG::SimpleStageBase::setRight )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::SimpleStageBase::setTop
        
            typedef void ( ::OSG::SimpleStageBase::*setTop_function_type )( ::OSG::Real32 const ) ;
            
            SimpleStageBase_exposer.def( 
                "setTop"
                , setTop_function_type( &::OSG::SimpleStageBase::setTop )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::StageHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::changed
        
            typedef OSG::SimpleStageBase exported_class_t;
            typedef void ( exported_class_t::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            typedef void ( SimpleStageBase_wrapper::*default_changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            SimpleStageBase_exposer.def( 
                "changed"
                , changed_function_type(&::OSG::StageHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::changed)
                , default_changed_function_type(&SimpleStageBase_wrapper::default_changed)
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("details") ) );
        
        }
        { //::OSG::StageHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::dump
        
            typedef OSG::SimpleStageBase exported_class_t;
            typedef void ( exported_class_t::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            typedef void ( SimpleStageBase_wrapper::*default_dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            SimpleStageBase_exposer.def( 
                "dump"
                , dump_function_type(&::OSG::StageHandlerMixin< OSG::ContainerMixinHead< OSG::StageDesc > >::dump)
                , default_dump_function_type(&SimpleStageBase_wrapper::default_dump)
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        SimpleStageBase_exposer.staticmethod( "create" );
        SimpleStageBase_exposer.staticmethod( "createDependent" );
        SimpleStageBase_exposer.staticmethod( "createLocal" );
        SimpleStageBase_exposer.staticmethod( "getClassGroupId" );
        SimpleStageBase_exposer.staticmethod( "getClassType" );
        SimpleStageBase_exposer.staticmethod( "getClassTypeId" );
        SimpleStageBase_exposer.def("getMFForegrounds",SimpleStageBase_getMFForegrounds);
    }

}
