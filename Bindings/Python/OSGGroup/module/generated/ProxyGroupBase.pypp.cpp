// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGGroup_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "ProxyGroupBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

boost::python::list ProxyGroupBase_getMFInline(OSG::ProxyGroupBase *self)
{
   boost::python::list result;
   OSG::MFUInt8 const * mf_data = self->getMFInline();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

void register_ProxyGroupBase_class(){

    { //::OSG::ProxyGroupBase
        typedef bp::class_< OSG::ProxyGroupBase, bp::bases< ::OSG::Group >, boost::noncopyable > ProxyGroupBase_exposer_t;
        ProxyGroupBase_exposer_t ProxyGroupBase_exposer = ProxyGroupBase_exposer_t( "ProxyGroupBase", bp::no_init );
        bp::scope ProxyGroupBase_scope( ProxyGroupBase_exposer );
        bp::scope().attr("EnabledFieldId") = (int)OSG::ProxyGroupBase::EnabledFieldId;
        bp::scope().attr("UrlFieldId") = (int)OSG::ProxyGroupBase::UrlFieldId;
        bp::scope().attr("RootFieldId") = (int)OSG::ProxyGroupBase::RootFieldId;
        bp::scope().attr("StateFieldId") = (int)OSG::ProxyGroupBase::StateFieldId;
        bp::scope().attr("ConcurrentLoadFieldId") = (int)OSG::ProxyGroupBase::ConcurrentLoadFieldId;
        bp::scope().attr("VolumeFieldId") = (int)OSG::ProxyGroupBase::VolumeFieldId;
        bp::scope().attr("IndicesFieldId") = (int)OSG::ProxyGroupBase::IndicesFieldId;
        bp::scope().attr("TrianglesFieldId") = (int)OSG::ProxyGroupBase::TrianglesFieldId;
        bp::scope().attr("PositionsFieldId") = (int)OSG::ProxyGroupBase::PositionsFieldId;
        bp::scope().attr("GeometriesFieldId") = (int)OSG::ProxyGroupBase::GeometriesFieldId;
        bp::scope().attr("AbsoluteUrlFieldId") = (int)OSG::ProxyGroupBase::AbsoluteUrlFieldId;
        bp::scope().attr("InlineFieldId") = (int)OSG::ProxyGroupBase::InlineFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::ProxyGroupBase::NextFieldId;
        { //::OSG::ProxyGroupBase::copyFromBin
        
            typedef void ( ::OSG::ProxyGroupBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            ProxyGroupBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::ProxyGroupBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::ProxyGroupBase::copyToBin
        
            typedef void ( ::OSG::ProxyGroupBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            ProxyGroupBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::ProxyGroupBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::ProxyGroupBase::create
        
            typedef ::OSG::ProxyGroupTransitPtr ( *create_function_type )(  );
            
            ProxyGroupBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::ProxyGroupBase::create ) );
        
        }
        { //::OSG::ProxyGroupBase::createDependent
        
            typedef ::OSG::ProxyGroupTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            ProxyGroupBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::ProxyGroupBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::ProxyGroupBase::createLocal
        
            typedef ::OSG::ProxyGroupTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            ProxyGroupBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::ProxyGroupBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::ProxyGroupBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::ProxyGroupBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            ProxyGroupBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::ProxyGroupBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::ProxyGroupBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            ProxyGroupBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::ProxyGroupBase::getClassGroupId ) );
        
        }
        { //::OSG::ProxyGroupBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            ProxyGroupBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::ProxyGroupBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::ProxyGroupBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            ProxyGroupBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::ProxyGroupBase::getClassTypeId ) );
        
        }
        { //::OSG::ProxyGroupBase::getConcurrentLoad
        
            typedef bool ( ::OSG::ProxyGroupBase::*getConcurrentLoad_function_type )(  ) const;
            
            ProxyGroupBase_exposer.def( 
                "getConcurrentLoad"
                , getConcurrentLoad_function_type( &::OSG::ProxyGroupBase::getConcurrentLoad ) );
        
        }
        { //::OSG::ProxyGroupBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::ProxyGroupBase::*getContainerSize_function_type )(  ) const;
            
            ProxyGroupBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::ProxyGroupBase::getContainerSize ) );
        
        }
        { //::OSG::ProxyGroupBase::getEnabled
        
            typedef bool ( ::OSG::ProxyGroupBase::*getEnabled_function_type )(  ) const;
            
            ProxyGroupBase_exposer.def( 
                "getEnabled"
                , getEnabled_function_type( &::OSG::ProxyGroupBase::getEnabled ) );
        
        }
        { //::OSG::ProxyGroupBase::getGeometries
        
            typedef ::OSG::UInt32 ( ::OSG::ProxyGroupBase::*getGeometries_function_type )(  ) const;
            
            ProxyGroupBase_exposer.def( 
                "getGeometries"
                , getGeometries_function_type( &::OSG::ProxyGroupBase::getGeometries ) );
        
        }
        { //::OSG::ProxyGroupBase::getIndices
        
            typedef ::OSG::UInt32 ( ::OSG::ProxyGroupBase::*getIndices_function_type )(  ) const;
            
            ProxyGroupBase_exposer.def( 
                "getIndices"
                , getIndices_function_type( &::OSG::ProxyGroupBase::getIndices ) );
        
        }
        { //::OSG::ProxyGroupBase::getInline
        
            typedef ::OSG::UInt8 ( ::OSG::ProxyGroupBase::*getInline_function_type )( ::OSG::UInt32 const ) const;
            
            ProxyGroupBase_exposer.def( 
                "getInline"
                , getInline_function_type( &::OSG::ProxyGroupBase::getInline )
                , ( bp::arg("index") ) );
        
        }
        { //::OSG::ProxyGroupBase::getPositions
        
            typedef ::OSG::UInt32 ( ::OSG::ProxyGroupBase::*getPositions_function_type )(  ) const;
            
            ProxyGroupBase_exposer.def( 
                "getPositions"
                , getPositions_function_type( &::OSG::ProxyGroupBase::getPositions ) );
        
        }
        { //::OSG::ProxyGroupBase::getRoot
        
            typedef ::OSG::Node * ( ::OSG::ProxyGroupBase::*getRoot_function_type )(  ) const;
            
            ProxyGroupBase_exposer.def( 
                "getRoot"
                , getRoot_function_type( &::OSG::ProxyGroupBase::getRoot )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ProxyGroupBase::getSFConcurrentLoad
        
            typedef ::OSG::SFBool const * ( ::OSG::ProxyGroupBase::*getSFConcurrentLoad_function_type )(  ) const;
            
            ProxyGroupBase_exposer.def( 
                "getSFConcurrentLoad"
                , getSFConcurrentLoad_function_type( &::OSG::ProxyGroupBase::getSFConcurrentLoad )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ProxyGroupBase::getSFEnabled
        
            typedef ::OSG::SFBool const * ( ::OSG::ProxyGroupBase::*getSFEnabled_function_type )(  ) const;
            
            ProxyGroupBase_exposer.def( 
                "getSFEnabled"
                , getSFEnabled_function_type( &::OSG::ProxyGroupBase::getSFEnabled )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ProxyGroupBase::getSFGeometries
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::ProxyGroupBase::*getSFGeometries_function_type )(  ) const;
            
            ProxyGroupBase_exposer.def( 
                "getSFGeometries"
                , getSFGeometries_function_type( &::OSG::ProxyGroupBase::getSFGeometries )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ProxyGroupBase::getSFIndices
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::ProxyGroupBase::*getSFIndices_function_type )(  ) const;
            
            ProxyGroupBase_exposer.def( 
                "getSFIndices"
                , getSFIndices_function_type( &::OSG::ProxyGroupBase::getSFIndices )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ProxyGroupBase::getSFPositions
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::ProxyGroupBase::*getSFPositions_function_type )(  ) const;
            
            ProxyGroupBase_exposer.def( 
                "getSFPositions"
                , getSFPositions_function_type( &::OSG::ProxyGroupBase::getSFPositions )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ProxyGroupBase::getSFRoot
        
            typedef ::OSG::SFUnrecNodePtr const * ( ::OSG::ProxyGroupBase::*getSFRoot_function_type )(  ) const;
            
            ProxyGroupBase_exposer.def( 
                "getSFRoot"
                , getSFRoot_function_type( &::OSG::ProxyGroupBase::getSFRoot )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ProxyGroupBase::getSFState
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::ProxyGroupBase::*getSFState_function_type )(  ) const;
            
            ProxyGroupBase_exposer.def( 
                "getSFState"
                , getSFState_function_type( &::OSG::ProxyGroupBase::getSFState )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ProxyGroupBase::getSFTriangles
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::ProxyGroupBase::*getSFTriangles_function_type )(  ) const;
            
            ProxyGroupBase_exposer.def( 
                "getSFTriangles"
                , getSFTriangles_function_type( &::OSG::ProxyGroupBase::getSFTriangles )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ProxyGroupBase::getSFUrl
        
            typedef ::OSG::SFString const * ( ::OSG::ProxyGroupBase::*getSFUrl_function_type )(  ) const;
            
            ProxyGroupBase_exposer.def( 
                "getSFUrl"
                , getSFUrl_function_type( &::OSG::ProxyGroupBase::getSFUrl )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ProxyGroupBase::getSFVolume
        
            typedef ::OSG::SFBoxVolume const * ( ::OSG::ProxyGroupBase::*getSFVolume_function_type )(  ) const;
            
            ProxyGroupBase_exposer.def( 
                "getSFVolume"
                , getSFVolume_function_type( &::OSG::ProxyGroupBase::getSFVolume )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ProxyGroupBase::getState
        
            typedef ::OSG::UInt32 ( ::OSG::ProxyGroupBase::*getState_function_type )(  ) const;
            
            ProxyGroupBase_exposer.def( 
                "getState"
                , getState_function_type( &::OSG::ProxyGroupBase::getState ) );
        
        }
        { //::OSG::ProxyGroupBase::getTriangles
        
            typedef ::OSG::UInt32 ( ::OSG::ProxyGroupBase::*getTriangles_function_type )(  ) const;
            
            ProxyGroupBase_exposer.def( 
                "getTriangles"
                , getTriangles_function_type( &::OSG::ProxyGroupBase::getTriangles ) );
        
        }
        { //::OSG::ProxyGroupBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::ProxyGroupBase::*getType_function_type )(  ) ;
            
            ProxyGroupBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::ProxyGroupBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ProxyGroupBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::ProxyGroupBase::*getType_function_type )(  ) const;
            
            ProxyGroupBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::ProxyGroupBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ProxyGroupBase::getUrl
        
            typedef ::std::string const & ( ::OSG::ProxyGroupBase::*getUrl_function_type )(  ) const;
            
            ProxyGroupBase_exposer.def( 
                "getUrl"
                , getUrl_function_type( &::OSG::ProxyGroupBase::getUrl )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::ProxyGroupBase::getVolume
        
            typedef ::OSG::BoxVolume const & ( ::OSG::ProxyGroupBase::*getVolume_function_type )(  ) const;
            
            ProxyGroupBase_exposer.def( 
                "getVolume"
                , getVolume_function_type( &::OSG::ProxyGroupBase::getVolume )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::ProxyGroupBase::setConcurrentLoad
        
            typedef void ( ::OSG::ProxyGroupBase::*setConcurrentLoad_function_type )( bool const ) ;
            
            ProxyGroupBase_exposer.def( 
                "setConcurrentLoad"
                , setConcurrentLoad_function_type( &::OSG::ProxyGroupBase::setConcurrentLoad )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ProxyGroupBase::setEnabled
        
            typedef void ( ::OSG::ProxyGroupBase::*setEnabled_function_type )( bool const ) ;
            
            ProxyGroupBase_exposer.def( 
                "setEnabled"
                , setEnabled_function_type( &::OSG::ProxyGroupBase::setEnabled )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ProxyGroupBase::setGeometries
        
            typedef void ( ::OSG::ProxyGroupBase::*setGeometries_function_type )( ::OSG::UInt32 const ) ;
            
            ProxyGroupBase_exposer.def( 
                "setGeometries"
                , setGeometries_function_type( &::OSG::ProxyGroupBase::setGeometries )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ProxyGroupBase::setIndices
        
            typedef void ( ::OSG::ProxyGroupBase::*setIndices_function_type )( ::OSG::UInt32 const ) ;
            
            ProxyGroupBase_exposer.def( 
                "setIndices"
                , setIndices_function_type( &::OSG::ProxyGroupBase::setIndices )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ProxyGroupBase::setPositions
        
            typedef void ( ::OSG::ProxyGroupBase::*setPositions_function_type )( ::OSG::UInt32 const ) ;
            
            ProxyGroupBase_exposer.def( 
                "setPositions"
                , setPositions_function_type( &::OSG::ProxyGroupBase::setPositions )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ProxyGroupBase::setRoot
        
            typedef void ( ::OSG::ProxyGroupBase::*setRoot_function_type )( ::OSG::Node * const ) ;
            
            ProxyGroupBase_exposer.def( 
                "setRoot"
                , setRoot_function_type( &::OSG::ProxyGroupBase::setRoot )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ProxyGroupBase::setState
        
            typedef void ( ::OSG::ProxyGroupBase::*setState_function_type )( ::OSG::UInt32 const ) ;
            
            ProxyGroupBase_exposer.def( 
                "setState"
                , setState_function_type( &::OSG::ProxyGroupBase::setState )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ProxyGroupBase::setTriangles
        
            typedef void ( ::OSG::ProxyGroupBase::*setTriangles_function_type )( ::OSG::UInt32 const ) ;
            
            ProxyGroupBase_exposer.def( 
                "setTriangles"
                , setTriangles_function_type( &::OSG::ProxyGroupBase::setTriangles )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ProxyGroupBase::setUrl
        
            typedef void ( ::OSG::ProxyGroupBase::*setUrl_function_type )( ::std::string const & ) ;
            
            ProxyGroupBase_exposer.def( 
                "setUrl"
                , setUrl_function_type( &::OSG::ProxyGroupBase::setUrl )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ProxyGroupBase::setVolume
        
            typedef void ( ::OSG::ProxyGroupBase::*setVolume_function_type )( ::OSG::BoxVolume const & ) ;
            
            ProxyGroupBase_exposer.def( 
                "setVolume"
                , setVolume_function_type( &::OSG::ProxyGroupBase::setVolume )
                , ( bp::arg("value") ) );
        
        }
        ProxyGroupBase_exposer.staticmethod( "create" );
        ProxyGroupBase_exposer.staticmethod( "createDependent" );
        ProxyGroupBase_exposer.staticmethod( "createLocal" );
        ProxyGroupBase_exposer.staticmethod( "getClassGroupId" );
        ProxyGroupBase_exposer.staticmethod( "getClassType" );
        ProxyGroupBase_exposer.staticmethod( "getClassTypeId" );
        ProxyGroupBase_exposer.def("getMFInline",ProxyGroupBase_getMFInline);
    }

}
