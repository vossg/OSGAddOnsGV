// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGWindow_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "GradientBackground.pypp.hpp"

using namespace std;
namespace bp = boost::python;

boost::python::list GradientBackground_getMFColor(OSG::GradientBackground *self)
{
   boost::python::list result;
   OSG::MFColor3f const * mf_data = self->getMFColor();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list GradientBackground_getMFPosition(OSG::GradientBackground *self)
{
   boost::python::list result;
   OSG::MFReal32 const * mf_data = self->getMFPosition();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

void register_GradientBackground_class(){

    { //::OSG::GradientBackground
        typedef bp::class_< OSG::GradientBackground, bp::bases< OSG::GradientBackgroundBase >, OSG::GradientBackground::ObjRecPtr, boost::noncopyable > GradientBackground_exposer_t;
        GradientBackground_exposer_t GradientBackground_exposer = GradientBackground_exposer_t( "GradientBackground", bp::no_init );
        bp::scope GradientBackground_scope( GradientBackground_exposer );
        bp::scope().attr("VERTICAL") = (int)OSG::GradientBackground::VERTICAL;
        bp::scope().attr("HORIZONTAL") = (int)OSG::GradientBackground::HORIZONTAL;
        { //::OSG::GradientBackground::addLine
        
            typedef void ( ::OSG::GradientBackground::*addLine_function_type )( ::OSG::Color3f,::OSG::Real32 ) ;
            
            GradientBackground_exposer.def( 
                "addLine"
                , addLine_function_type( &::OSG::GradientBackground::addLine )
                , ( bp::arg("col"), bp::arg("pos") ) );
        
        }
        { //::OSG::GradientBackground::changed
        
            typedef void ( ::OSG::GradientBackground::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            GradientBackground_exposer.def( 
                "changed"
                , changed_function_type( &::OSG::GradientBackground::changed )
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("detail") ) );
        
        }
        { //::OSG::GradientBackground::clear
        
            typedef void ( ::OSG::GradientBackground::*clear_function_type )( ::OSG::DrawEnv * ) ;
            
            GradientBackground_exposer.def( 
                "clear"
                , clear_function_type( &::OSG::GradientBackground::clear )
                , ( bp::arg("arg0") ) );
        
        }
        { //::OSG::GradientBackground::clearLines
        
            typedef void ( ::OSG::GradientBackground::*clearLines_function_type )(  ) ;
            
            GradientBackground_exposer.def( 
                "clearLines"
                , clearLines_function_type( &::OSG::GradientBackground::clearLines ) );
        
        }
        { //::OSG::GradientBackground::dump
        
            typedef void ( ::OSG::GradientBackground::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            GradientBackground_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::GradientBackground::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::GradientBackground::getColor
        
            typedef ::OSG::Color3f const & ( ::OSG::GradientBackground::*getColor_function_type )( ::OSG::UInt32 const ) const;
            
            GradientBackground_exposer.def( 
                "getColor"
                , getColor_function_type( &::OSG::GradientBackground::getColor )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::GradientBackground::getPosition
        
            typedef ::OSG::Real32 const & ( ::OSG::GradientBackground::*getPosition_function_type )( ::OSG::UInt32 const ) const;
            
            GradientBackground_exposer.def( 
                "getPosition"
                , getPosition_function_type( &::OSG::GradientBackground::getPosition )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        GradientBackground_exposer.def("getMFColor",GradientBackground_getMFColor);
        GradientBackground_exposer.def("getMFPosition",GradientBackground_getMFPosition);
        pyopensg::register_transit< OSG::GradientBackground >::execute();
        bp::implicitly_convertible< OSG::GradientBackground::ObjRecPtr, OSG::GradientBackground* >();
        bp::implicitly_convertible< OSG::GradientBackground::ObjRecPtr, OSG::GradientBackground::ObjCPtr >();
        bp::implicitly_convertible< OSG::GradientBackground::ObjRecPtr, OSG::TileableBackground* >();
        bp::implicitly_convertible< OSG::GradientBackground::ObjRecPtr, OSG::TileableBackground::ObjRecPtr >();
        bp::implicitly_convertible<OSG::GradientBackground::ObjRecPtr, OSG::TileableBackground::ObjCPtr>();
    }

}
