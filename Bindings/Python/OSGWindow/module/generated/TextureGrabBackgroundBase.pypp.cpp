// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGWindow_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "TextureGrabBackgroundBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_TextureGrabBackgroundBase_class(){

    { //::OSG::TextureGrabBackgroundBase
        typedef bp::class_< OSG::TextureGrabBackgroundBase, bp::bases< ::OSG::SolidBackground >, boost::noncopyable > TextureGrabBackgroundBase_exposer_t;
        TextureGrabBackgroundBase_exposer_t TextureGrabBackgroundBase_exposer = TextureGrabBackgroundBase_exposer_t( "TextureGrabBackgroundBase", bp::no_init );
        bp::scope TextureGrabBackgroundBase_scope( TextureGrabBackgroundBase_exposer );
        bp::scope().attr("TextureFieldId") = (int)OSG::TextureGrabBackgroundBase::TextureFieldId;
        bp::scope().attr("AutoResizeFieldId") = (int)OSG::TextureGrabBackgroundBase::AutoResizeFieldId;
        bp::scope().attr("BindTargetFieldId") = (int)OSG::TextureGrabBackgroundBase::BindTargetFieldId;
        bp::scope().attr("CopyTargetFieldId") = (int)OSG::TextureGrabBackgroundBase::CopyTargetFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::TextureGrabBackgroundBase::NextFieldId;
        { //::OSG::TextureGrabBackgroundBase::copyFromBin
        
            typedef void ( ::OSG::TextureGrabBackgroundBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            TextureGrabBackgroundBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::TextureGrabBackgroundBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::TextureGrabBackgroundBase::copyToBin
        
            typedef void ( ::OSG::TextureGrabBackgroundBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            TextureGrabBackgroundBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::TextureGrabBackgroundBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::TextureGrabBackgroundBase::create
        
            typedef ::OSG::TextureGrabBackgroundTransitPtr ( *create_function_type )(  );
            
            TextureGrabBackgroundBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::TextureGrabBackgroundBase::create ) );
        
        }
        { //::OSG::TextureGrabBackgroundBase::createDependent
        
            typedef ::OSG::TextureGrabBackgroundTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            TextureGrabBackgroundBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::TextureGrabBackgroundBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::TextureGrabBackgroundBase::createLocal
        
            typedef ::OSG::TextureGrabBackgroundTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            TextureGrabBackgroundBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::TextureGrabBackgroundBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::TextureGrabBackgroundBase::getAutoResize
        
            typedef bool ( ::OSG::TextureGrabBackgroundBase::*getAutoResize_function_type )(  ) const;
            
            TextureGrabBackgroundBase_exposer.def( 
                "getAutoResize"
                , getAutoResize_function_type( &::OSG::TextureGrabBackgroundBase::getAutoResize ) );
        
        }
        { //::OSG::TextureGrabBackgroundBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::TextureGrabBackgroundBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            TextureGrabBackgroundBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::TextureGrabBackgroundBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::TextureGrabBackgroundBase::getBindTarget
        
            typedef ::GLenum const & ( ::OSG::TextureGrabBackgroundBase::*getBindTarget_function_type )(  ) const;
            
            TextureGrabBackgroundBase_exposer.def( 
                "getBindTarget"
                , getBindTarget_function_type( &::OSG::TextureGrabBackgroundBase::getBindTarget )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureGrabBackgroundBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            TextureGrabBackgroundBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::TextureGrabBackgroundBase::getClassGroupId ) );
        
        }
        { //::OSG::TextureGrabBackgroundBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            TextureGrabBackgroundBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::TextureGrabBackgroundBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::TextureGrabBackgroundBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            TextureGrabBackgroundBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::TextureGrabBackgroundBase::getClassTypeId ) );
        
        }
        { //::OSG::TextureGrabBackgroundBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::TextureGrabBackgroundBase::*getContainerSize_function_type )(  ) const;
            
            TextureGrabBackgroundBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::TextureGrabBackgroundBase::getContainerSize ) );
        
        }
        { //::OSG::TextureGrabBackgroundBase::getCopyTarget
        
            typedef ::GLenum const & ( ::OSG::TextureGrabBackgroundBase::*getCopyTarget_function_type )(  ) const;
            
            TextureGrabBackgroundBase_exposer.def( 
                "getCopyTarget"
                , getCopyTarget_function_type( &::OSG::TextureGrabBackgroundBase::getCopyTarget )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureGrabBackgroundBase::getSFAutoResize
        
            typedef ::OSG::SFBool const * ( ::OSG::TextureGrabBackgroundBase::*getSFAutoResize_function_type )(  ) const;
            
            TextureGrabBackgroundBase_exposer.def( 
                "getSFAutoResize"
                , getSFAutoResize_function_type( &::OSG::TextureGrabBackgroundBase::getSFAutoResize )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureGrabBackgroundBase::getSFBindTarget
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureGrabBackgroundBase::*getSFBindTarget_function_type )(  ) const;
            
            TextureGrabBackgroundBase_exposer.def( 
                "getSFBindTarget"
                , getSFBindTarget_function_type( &::OSG::TextureGrabBackgroundBase::getSFBindTarget )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureGrabBackgroundBase::getSFCopyTarget
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureGrabBackgroundBase::*getSFCopyTarget_function_type )(  ) const;
            
            TextureGrabBackgroundBase_exposer.def( 
                "getSFCopyTarget"
                , getSFCopyTarget_function_type( &::OSG::TextureGrabBackgroundBase::getSFCopyTarget )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureGrabBackgroundBase::getSFTexture
        
            typedef ::OSG::SFUnrecTextureObjChunkPtr const * ( ::OSG::TextureGrabBackgroundBase::*getSFTexture_function_type )(  ) const;
            
            TextureGrabBackgroundBase_exposer.def( 
                "getSFTexture"
                , getSFTexture_function_type( &::OSG::TextureGrabBackgroundBase::getSFTexture )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureGrabBackgroundBase::getTexture
        
            typedef ::OSG::TextureObjChunk * ( ::OSG::TextureGrabBackgroundBase::*getTexture_function_type )(  ) const;
            
            TextureGrabBackgroundBase_exposer.def( 
                "getTexture"
                , getTexture_function_type( &::OSG::TextureGrabBackgroundBase::getTexture )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureGrabBackgroundBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::TextureGrabBackgroundBase::*getType_function_type )(  ) ;
            
            TextureGrabBackgroundBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::TextureGrabBackgroundBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureGrabBackgroundBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::TextureGrabBackgroundBase::*getType_function_type )(  ) const;
            
            TextureGrabBackgroundBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::TextureGrabBackgroundBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureGrabBackgroundBase::setAutoResize
        
            typedef void ( ::OSG::TextureGrabBackgroundBase::*setAutoResize_function_type )( bool const ) ;
            
            TextureGrabBackgroundBase_exposer.def( 
                "setAutoResize"
                , setAutoResize_function_type( &::OSG::TextureGrabBackgroundBase::setAutoResize )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureGrabBackgroundBase::setBindTarget
        
            typedef void ( ::OSG::TextureGrabBackgroundBase::*setBindTarget_function_type )( ::GLenum const & ) ;
            
            TextureGrabBackgroundBase_exposer.def( 
                "setBindTarget"
                , setBindTarget_function_type( &::OSG::TextureGrabBackgroundBase::setBindTarget )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureGrabBackgroundBase::setCopyTarget
        
            typedef void ( ::OSG::TextureGrabBackgroundBase::*setCopyTarget_function_type )( ::GLenum const & ) ;
            
            TextureGrabBackgroundBase_exposer.def( 
                "setCopyTarget"
                , setCopyTarget_function_type( &::OSG::TextureGrabBackgroundBase::setCopyTarget )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureGrabBackgroundBase::setTexture
        
            typedef void ( ::OSG::TextureGrabBackgroundBase::*setTexture_function_type )( ::OSG::TextureObjChunk * const ) ;
            
            TextureGrabBackgroundBase_exposer.def( 
                "setTexture"
                , setTexture_function_type( &::OSG::TextureGrabBackgroundBase::setTexture )
                , ( bp::arg("value") ) );
        
        }
        TextureGrabBackgroundBase_exposer.staticmethod( "create" );
        TextureGrabBackgroundBase_exposer.staticmethod( "createDependent" );
        TextureGrabBackgroundBase_exposer.staticmethod( "createLocal" );
        TextureGrabBackgroundBase_exposer.staticmethod( "getClassGroupId" );
        TextureGrabBackgroundBase_exposer.staticmethod( "getClassType" );
        TextureGrabBackgroundBase_exposer.staticmethod( "getClassTypeId" );
    }

}
