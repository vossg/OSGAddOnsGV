// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGWindow_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "TextureBackgroundBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct TextureBackgroundBase_wrapper : OSG::TextureBackgroundBase, bp::wrapper< OSG::TextureBackgroundBase > {

    virtual void clear( ::OSG::DrawEnv * pEnv ){
        bp::override func_clear = this->get_override( "clear" );
        func_clear( boost::python::ptr(pEnv) );
    }

};

boost::python::list TextureBackgroundBase_getMFTexCoords(OSG::TextureBackgroundBase *self)
{
   boost::python::list result;
   OSG::MFPnt2f const * mf_data = self->getMFTexCoords();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

void register_TextureBackgroundBase_class(){

    { //::OSG::TextureBackgroundBase
        typedef bp::class_< TextureBackgroundBase_wrapper, bp::bases< ::OSG::Background >, boost::noncopyable > TextureBackgroundBase_exposer_t;
        TextureBackgroundBase_exposer_t TextureBackgroundBase_exposer = TextureBackgroundBase_exposer_t( "TextureBackgroundBase", bp::no_init );
        bp::scope TextureBackgroundBase_scope( TextureBackgroundBase_exposer );
        bp::scope().attr("ColorFieldId") = (int)OSG::TextureBackgroundBase::ColorFieldId;
        bp::scope().attr("TextureFieldId") = (int)OSG::TextureBackgroundBase::TextureFieldId;
        bp::scope().attr("TexCoordsFieldId") = (int)OSG::TextureBackgroundBase::TexCoordsFieldId;
        bp::scope().attr("RadialDistortionFieldId") = (int)OSG::TextureBackgroundBase::RadialDistortionFieldId;
        bp::scope().attr("CenterOfDistortionFieldId") = (int)OSG::TextureBackgroundBase::CenterOfDistortionFieldId;
        bp::scope().attr("HorFieldId") = (int)OSG::TextureBackgroundBase::HorFieldId;
        bp::scope().attr("VertFieldId") = (int)OSG::TextureBackgroundBase::VertFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::TextureBackgroundBase::NextFieldId;
        { //::OSG::TextureBackgroundBase::copyFromBin
        
            typedef void ( ::OSG::TextureBackgroundBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            TextureBackgroundBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::TextureBackgroundBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::TextureBackgroundBase::copyToBin
        
            typedef void ( ::OSG::TextureBackgroundBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            TextureBackgroundBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::TextureBackgroundBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::TextureBackgroundBase::create
        
            typedef ::OSG::TextureBackgroundTransitPtr ( *create_function_type )(  );
            
            TextureBackgroundBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::TextureBackgroundBase::create ) );
        
        }
        { //::OSG::TextureBackgroundBase::createDependent
        
            typedef ::OSG::TextureBackgroundTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            TextureBackgroundBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::TextureBackgroundBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::TextureBackgroundBase::createLocal
        
            typedef ::OSG::TextureBackgroundTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            TextureBackgroundBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::TextureBackgroundBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::TextureBackgroundBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::TextureBackgroundBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            TextureBackgroundBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::TextureBackgroundBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::TextureBackgroundBase::getCenterOfDistortion
        
            typedef ::OSG::Vec2f const & ( ::OSG::TextureBackgroundBase::*getCenterOfDistortion_function_type )(  ) const;
            
            TextureBackgroundBase_exposer.def( 
                "getCenterOfDistortion"
                , getCenterOfDistortion_function_type( &::OSG::TextureBackgroundBase::getCenterOfDistortion )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::TextureBackgroundBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            TextureBackgroundBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::TextureBackgroundBase::getClassGroupId ) );
        
        }
        { //::OSG::TextureBackgroundBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            TextureBackgroundBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::TextureBackgroundBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::TextureBackgroundBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            TextureBackgroundBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::TextureBackgroundBase::getClassTypeId ) );
        
        }
        { //::OSG::TextureBackgroundBase::getColor
        
            typedef ::OSG::Color4f const & ( ::OSG::TextureBackgroundBase::*getColor_function_type )(  ) const;
            
            TextureBackgroundBase_exposer.def( 
                "getColor"
                , getColor_function_type( &::OSG::TextureBackgroundBase::getColor )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::TextureBackgroundBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::TextureBackgroundBase::*getContainerSize_function_type )(  ) const;
            
            TextureBackgroundBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::TextureBackgroundBase::getContainerSize ) );
        
        }
        { //::OSG::TextureBackgroundBase::getHor
        
            typedef ::OSG::UInt16 ( ::OSG::TextureBackgroundBase::*getHor_function_type )(  ) const;
            
            TextureBackgroundBase_exposer.def( 
                "getHor"
                , getHor_function_type( &::OSG::TextureBackgroundBase::getHor ) );
        
        }
        { //::OSG::TextureBackgroundBase::getRadialDistortion
        
            typedef ::OSG::Real32 ( ::OSG::TextureBackgroundBase::*getRadialDistortion_function_type )(  ) const;
            
            TextureBackgroundBase_exposer.def( 
                "getRadialDistortion"
                , getRadialDistortion_function_type( &::OSG::TextureBackgroundBase::getRadialDistortion ) );
        
        }
        { //::OSG::TextureBackgroundBase::getSFCenterOfDistortion
        
            typedef ::OSG::SFVec2f const * ( ::OSG::TextureBackgroundBase::*getSFCenterOfDistortion_function_type )(  ) const;
            
            TextureBackgroundBase_exposer.def( 
                "getSFCenterOfDistortion"
                , getSFCenterOfDistortion_function_type( &::OSG::TextureBackgroundBase::getSFCenterOfDistortion )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureBackgroundBase::getSFColor
        
            typedef ::OSG::SFColor4f const * ( ::OSG::TextureBackgroundBase::*getSFColor_function_type )(  ) const;
            
            TextureBackgroundBase_exposer.def( 
                "getSFColor"
                , getSFColor_function_type( &::OSG::TextureBackgroundBase::getSFColor )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureBackgroundBase::getSFHor
        
            typedef ::OSG::SFUInt16 const * ( ::OSG::TextureBackgroundBase::*getSFHor_function_type )(  ) const;
            
            TextureBackgroundBase_exposer.def( 
                "getSFHor"
                , getSFHor_function_type( &::OSG::TextureBackgroundBase::getSFHor )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureBackgroundBase::getSFRadialDistortion
        
            typedef ::OSG::SFReal32 const * ( ::OSG::TextureBackgroundBase::*getSFRadialDistortion_function_type )(  ) const;
            
            TextureBackgroundBase_exposer.def( 
                "getSFRadialDistortion"
                , getSFRadialDistortion_function_type( &::OSG::TextureBackgroundBase::getSFRadialDistortion )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureBackgroundBase::getSFTexture
        
            typedef ::OSG::SFUnrecTextureBaseChunkPtr const * ( ::OSG::TextureBackgroundBase::*getSFTexture_function_type )(  ) const;
            
            TextureBackgroundBase_exposer.def( 
                "getSFTexture"
                , getSFTexture_function_type( &::OSG::TextureBackgroundBase::getSFTexture )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureBackgroundBase::getSFVert
        
            typedef ::OSG::SFUInt16 const * ( ::OSG::TextureBackgroundBase::*getSFVert_function_type )(  ) const;
            
            TextureBackgroundBase_exposer.def( 
                "getSFVert"
                , getSFVert_function_type( &::OSG::TextureBackgroundBase::getSFVert )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureBackgroundBase::getTexCoords
        
            typedef ::OSG::Pnt2f const & ( ::OSG::TextureBackgroundBase::*getTexCoords_function_type )( ::OSG::UInt32 const ) const;
            
            TextureBackgroundBase_exposer.def( 
                "getTexCoords"
                , getTexCoords_function_type( &::OSG::TextureBackgroundBase::getTexCoords )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::TextureBackgroundBase::getTexture
        
            typedef ::OSG::TextureBaseChunk * ( ::OSG::TextureBackgroundBase::*getTexture_function_type )(  ) const;
            
            TextureBackgroundBase_exposer.def( 
                "getTexture"
                , getTexture_function_type( &::OSG::TextureBackgroundBase::getTexture )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureBackgroundBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::TextureBackgroundBase::*getType_function_type )(  ) ;
            
            TextureBackgroundBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::TextureBackgroundBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureBackgroundBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::TextureBackgroundBase::*getType_function_type )(  ) const;
            
            TextureBackgroundBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::TextureBackgroundBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureBackgroundBase::getVert
        
            typedef ::OSG::UInt16 ( ::OSG::TextureBackgroundBase::*getVert_function_type )(  ) const;
            
            TextureBackgroundBase_exposer.def( 
                "getVert"
                , getVert_function_type( &::OSG::TextureBackgroundBase::getVert ) );
        
        }
        { //::OSG::TextureBackgroundBase::setCenterOfDistortion
        
            typedef void ( ::OSG::TextureBackgroundBase::*setCenterOfDistortion_function_type )( ::OSG::Vec2f const & ) ;
            
            TextureBackgroundBase_exposer.def( 
                "setCenterOfDistortion"
                , setCenterOfDistortion_function_type( &::OSG::TextureBackgroundBase::setCenterOfDistortion )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureBackgroundBase::setColor
        
            typedef void ( ::OSG::TextureBackgroundBase::*setColor_function_type )( ::OSG::Color4f const & ) ;
            
            TextureBackgroundBase_exposer.def( 
                "setColor"
                , setColor_function_type( &::OSG::TextureBackgroundBase::setColor )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureBackgroundBase::setHor
        
            typedef void ( ::OSG::TextureBackgroundBase::*setHor_function_type )( ::OSG::UInt16 const ) ;
            
            TextureBackgroundBase_exposer.def( 
                "setHor"
                , setHor_function_type( &::OSG::TextureBackgroundBase::setHor )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureBackgroundBase::setRadialDistortion
        
            typedef void ( ::OSG::TextureBackgroundBase::*setRadialDistortion_function_type )( ::OSG::Real32 const ) ;
            
            TextureBackgroundBase_exposer.def( 
                "setRadialDistortion"
                , setRadialDistortion_function_type( &::OSG::TextureBackgroundBase::setRadialDistortion )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureBackgroundBase::setTexture
        
            typedef void ( ::OSG::TextureBackgroundBase::*setTexture_function_type )( ::OSG::TextureBaseChunk * const ) ;
            
            TextureBackgroundBase_exposer.def( 
                "setTexture"
                , setTexture_function_type( &::OSG::TextureBackgroundBase::setTexture )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureBackgroundBase::setVert
        
            typedef void ( ::OSG::TextureBackgroundBase::*setVert_function_type )( ::OSG::UInt16 const ) ;
            
            TextureBackgroundBase_exposer.def( 
                "setVert"
                , setVert_function_type( &::OSG::TextureBackgroundBase::setVert )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::Background::clear
        
            typedef void ( ::OSG::Background::*clear_function_type )( ::OSG::DrawEnv * ) ;
            
            TextureBackgroundBase_exposer.def( 
                "clear"
                , bp::pure_virtual( clear_function_type(&::OSG::Background::clear) )
                , ( bp::arg("pEnv") ) );
        
        }
        TextureBackgroundBase_exposer.staticmethod( "create" );
        TextureBackgroundBase_exposer.staticmethod( "createDependent" );
        TextureBackgroundBase_exposer.staticmethod( "createLocal" );
        TextureBackgroundBase_exposer.staticmethod( "getClassGroupId" );
        TextureBackgroundBase_exposer.staticmethod( "getClassType" );
        TextureBackgroundBase_exposer.staticmethod( "getClassTypeId" );
        TextureBackgroundBase_exposer.def("getMFTexCoords",TextureBackgroundBase_getMFTexCoords);
    }

}
