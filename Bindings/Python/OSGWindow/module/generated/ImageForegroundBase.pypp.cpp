// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGWindow_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "ImageForegroundBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

boost::python::list ImageForegroundBase_getMFImages(OSG::ImageForegroundBase *self)
{
   boost::python::list result;
   OSG::MFUnrecImagePtr const * mf_data = self->getMFImages();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append(OSG::Image::ObjRecPtr((*mf_data)[i]));
   }
   return result;
}

boost::python::list ImageForegroundBase_getMFPositions(OSG::ImageForegroundBase *self)
{
   boost::python::list result;
   OSG::MFPnt2f const * mf_data = self->getMFPositions();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list ImageForegroundBase_getMFScales(OSG::ImageForegroundBase *self)
{
   boost::python::list result;
   OSG::MFPnt2f const * mf_data = self->getMFScales();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

void register_ImageForegroundBase_class(){

    { //::OSG::ImageForegroundBase
        typedef bp::class_< OSG::ImageForegroundBase, bp::bases< ::OSG::Foreground >, boost::noncopyable > ImageForegroundBase_exposer_t;
        ImageForegroundBase_exposer_t ImageForegroundBase_exposer = ImageForegroundBase_exposer_t( "ImageForegroundBase", bp::no_init );
        bp::scope ImageForegroundBase_scope( ImageForegroundBase_exposer );
        bp::scope().attr("ImagesFieldId") = (int)OSG::ImageForegroundBase::ImagesFieldId;
        bp::scope().attr("PositionsFieldId") = (int)OSG::ImageForegroundBase::PositionsFieldId;
        bp::scope().attr("ScalesFieldId") = (int)OSG::ImageForegroundBase::ScalesFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::ImageForegroundBase::NextFieldId;
        { //::OSG::ImageForegroundBase::assignImages
        
            typedef void ( ::OSG::ImageForegroundBase::*assignImages_function_type )( ::OSG::MFUnrecImagePtr const & ) ;
            
            ImageForegroundBase_exposer.def( 
                "assignImages"
                , assignImages_function_type( &::OSG::ImageForegroundBase::assignImages )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ImageForegroundBase::clearImages
        
            typedef void ( ::OSG::ImageForegroundBase::*clearImages_function_type )(  ) ;
            
            ImageForegroundBase_exposer.def( 
                "clearImages"
                , clearImages_function_type( &::OSG::ImageForegroundBase::clearImages ) );
        
        }
        { //::OSG::ImageForegroundBase::copyFromBin
        
            typedef void ( ::OSG::ImageForegroundBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            ImageForegroundBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::ImageForegroundBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::ImageForegroundBase::copyToBin
        
            typedef void ( ::OSG::ImageForegroundBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            ImageForegroundBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::ImageForegroundBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::ImageForegroundBase::create
        
            typedef ::OSG::ImageForegroundTransitPtr ( *create_function_type )(  );
            
            ImageForegroundBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::ImageForegroundBase::create ) );
        
        }
        { //::OSG::ImageForegroundBase::createDependent
        
            typedef ::OSG::ImageForegroundTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            ImageForegroundBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::ImageForegroundBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::ImageForegroundBase::createLocal
        
            typedef ::OSG::ImageForegroundTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            ImageForegroundBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::ImageForegroundBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::ImageForegroundBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::ImageForegroundBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            ImageForegroundBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::ImageForegroundBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::ImageForegroundBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            ImageForegroundBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::ImageForegroundBase::getClassGroupId ) );
        
        }
        { //::OSG::ImageForegroundBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            ImageForegroundBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::ImageForegroundBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::ImageForegroundBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            ImageForegroundBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::ImageForegroundBase::getClassTypeId ) );
        
        }
        { //::OSG::ImageForegroundBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::ImageForegroundBase::*getContainerSize_function_type )(  ) const;
            
            ImageForegroundBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::ImageForegroundBase::getContainerSize ) );
        
        }
        { //::OSG::ImageForegroundBase::getImages
        
            typedef ::OSG::Image * ( ::OSG::ImageForegroundBase::*getImages_function_type )( ::OSG::UInt32 const ) const;
            
            ImageForegroundBase_exposer.def( 
                "getImages"
                , getImages_function_type( &::OSG::ImageForegroundBase::getImages )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ImageForegroundBase::getPositions
        
            typedef ::OSG::Pnt2f const & ( ::OSG::ImageForegroundBase::*getPositions_function_type )( ::OSG::UInt32 const ) const;
            
            ImageForegroundBase_exposer.def( 
                "getPositions"
                , getPositions_function_type( &::OSG::ImageForegroundBase::getPositions )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::ImageForegroundBase::getScales
        
            typedef ::OSG::Pnt2f const & ( ::OSG::ImageForegroundBase::*getScales_function_type )( ::OSG::UInt32 const ) const;
            
            ImageForegroundBase_exposer.def( 
                "getScales"
                , getScales_function_type( &::OSG::ImageForegroundBase::getScales )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::ImageForegroundBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::ImageForegroundBase::*getType_function_type )(  ) ;
            
            ImageForegroundBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::ImageForegroundBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ImageForegroundBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::ImageForegroundBase::*getType_function_type )(  ) const;
            
            ImageForegroundBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::ImageForegroundBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ImageForegroundBase::pushToImages
        
            typedef void ( ::OSG::ImageForegroundBase::*pushToImages_function_type )( ::OSG::Image * const ) ;
            
            ImageForegroundBase_exposer.def( 
                "pushToImages"
                , pushToImages_function_type( &::OSG::ImageForegroundBase::pushToImages )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ImageForegroundBase::removeFromImages
        
            typedef void ( ::OSG::ImageForegroundBase::*removeFromImages_function_type )( ::OSG::UInt32 ) ;
            
            ImageForegroundBase_exposer.def( 
                "removeFromImages"
                , removeFromImages_function_type( &::OSG::ImageForegroundBase::removeFromImages )
                , ( bp::arg("uiIndex") ) );
        
        }
        { //::OSG::ImageForegroundBase::removeObjFromImages
        
            typedef void ( ::OSG::ImageForegroundBase::*removeObjFromImages_function_type )( ::OSG::Image * const ) ;
            
            ImageForegroundBase_exposer.def( 
                "removeObjFromImages"
                , removeObjFromImages_function_type( &::OSG::ImageForegroundBase::removeObjFromImages )
                , ( bp::arg("value") ) );
        
        }
        ImageForegroundBase_exposer.staticmethod( "create" );
        ImageForegroundBase_exposer.staticmethod( "createDependent" );
        ImageForegroundBase_exposer.staticmethod( "createLocal" );
        ImageForegroundBase_exposer.staticmethod( "getClassGroupId" );
        ImageForegroundBase_exposer.staticmethod( "getClassType" );
        ImageForegroundBase_exposer.staticmethod( "getClassTypeId" );
        ImageForegroundBase_exposer.def("getMFImages",ImageForegroundBase_getMFImages);
        ImageForegroundBase_exposer.def("getMFPositions",ImageForegroundBase_getMFPositions);
        ImageForegroundBase_exposer.def("getMFScales",ImageForegroundBase_getMFScales);
    }

}
