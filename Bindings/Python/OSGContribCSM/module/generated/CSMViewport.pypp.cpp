// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGContribCSM_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "CSMViewport.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_CSMViewport_class(){

    { //::OSG::CSMViewport
        typedef bp::class_< OSG::CSMViewport, bp::bases< OSG::CSMViewportBase >, OSG::CSMViewport::ObjRecPtr, boost::noncopyable > CSMViewport_exposer_t;
        CSMViewport_exposer_t CSMViewport_exposer = CSMViewport_exposer_t( "CSMViewport", bp::no_init );
        bp::scope CSMViewport_scope( CSMViewport_exposer );
        { //::OSG::CSMViewport::changed
        
            typedef void ( ::OSG::CSMViewport::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            CSMViewport_exposer.def( 
                "changed"
                , changed_function_type( &::OSG::CSMViewport::changed )
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("details") ) );
        
        }
        { //::OSG::CSMViewport::dump
        
            typedef void ( ::OSG::CSMViewport::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            CSMViewport_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::CSMViewport::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::CSMViewport::getViewport
        
            typedef ::OSG::Viewport * ( ::OSG::CSMViewport::*getViewport_function_type )( ::OSG::UInt32 ) const;
            
            CSMViewport_exposer.def( 
                "getViewport"
                , getViewport_function_type( &::OSG::CSMViewport::getViewport )
                , ( bp::arg("uiIndex") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMViewport::init
        
            typedef bool ( ::OSG::CSMViewport::*init_function_type )( ::OSG::CSMWindow * ) ;
            
            CSMViewport_exposer.def( 
                "init"
                , init_function_type( &::OSG::CSMViewport::init )
                , ( bp::arg("pCSMWin") ) );
        
        }
        { //::OSG::CSMViewport::needsStereoVisual
        
            typedef bool ( ::OSG::CSMViewport::*needsStereoVisual_function_type )(  ) ;
            
            CSMViewport_exposer.def( 
                "needsStereoVisual"
                , needsStereoVisual_function_type( &::OSG::CSMViewport::needsStereoVisual ) );
        
        }
        { //::OSG::CSMViewport::pointInside
        
            typedef bool ( ::OSG::CSMViewport::*pointInside_function_type )( ::OSG::Real32,::OSG::Real32 ) const;
            
            CSMViewport_exposer.def( 
                "pointInside"
                , pointInside_function_type( &::OSG::CSMViewport::pointInside )
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::OSG::CSMViewport::translateWindowViewportAbs
        
            typedef ::OSG::Vec2f ( ::OSG::CSMViewport::*translateWindowViewportAbs_function_type )( ::OSG::Real32,::OSG::Real32 ) const;
            
            CSMViewport_exposer.def( 
                "translateWindowViewportAbs"
                , translateWindowViewportAbs_function_type( &::OSG::CSMViewport::translateWindowViewportAbs )
                , ( bp::arg("rX"), bp::arg("rY") ) );
        
        }
        pyopensg::register_transit< OSG::CSMViewport >::execute();
        bp::implicitly_convertible< OSG::CSMViewport::ObjRecPtr, OSG::CSMViewport* >();
        bp::implicitly_convertible< OSG::CSMViewport::ObjRecPtr, OSG::CSMViewport::ObjCPtr >();
        bp::implicitly_convertible< OSG::CSMViewport::ObjRecPtr, OSG::AttachmentContainer* >();
        bp::implicitly_convertible< OSG::CSMViewport::ObjRecPtr, OSG::AttachmentContainer::ObjRecPtr >();
        bp::implicitly_convertible<OSG::CSMViewport::ObjRecPtr, OSG::AttachmentContainer::ObjCPtr>();
    }

}
