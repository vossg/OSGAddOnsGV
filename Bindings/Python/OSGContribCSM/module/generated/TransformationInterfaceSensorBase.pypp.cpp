// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGContribCSM_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "TransformationInterfaceSensorBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct TransformationInterfaceSensorBase_wrapper : OSG::TransformationInterfaceSensorBase, bp::wrapper< OSG::TransformationInterfaceSensorBase > {

    virtual void frame( ::OSG::Time oTime, ::OSG::UInt32 uiFrame ){
        bp::override func_frame = this->get_override( "frame" );
        func_frame( oTime, uiFrame );
    }

};

void register_TransformationInterfaceSensorBase_class(){

    { //::OSG::TransformationInterfaceSensorBase
        typedef bp::class_< TransformationInterfaceSensorBase_wrapper, bp::bases< OSG::DeviceInterfaceSensor >, boost::noncopyable > TransformationInterfaceSensorBase_exposer_t;
        TransformationInterfaceSensorBase_exposer_t TransformationInterfaceSensorBase_exposer = TransformationInterfaceSensorBase_exposer_t( "TransformationInterfaceSensorBase", bp::no_init );
        bp::scope TransformationInterfaceSensorBase_scope( TransformationInterfaceSensorBase_exposer );
        bp::scope().attr("TransformationFieldId") = (int)OSG::TransformationInterfaceSensorBase::TransformationFieldId;
        bp::scope().attr("TranslationFieldId") = (int)OSG::TransformationInterfaceSensorBase::TranslationFieldId;
        bp::scope().attr("RotationFieldId") = (int)OSG::TransformationInterfaceSensorBase::RotationFieldId;
        bp::scope().attr("RotationScaleFieldId") = (int)OSG::TransformationInterfaceSensorBase::RotationScaleFieldId;
        bp::scope().attr("TranslationScaleFieldId") = (int)OSG::TransformationInterfaceSensorBase::TranslationScaleFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::TransformationInterfaceSensorBase::NextFieldId;
        { //::OSG::TransformationInterfaceSensorBase::copyFromBin
        
            typedef void ( ::OSG::TransformationInterfaceSensorBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            TransformationInterfaceSensorBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::TransformationInterfaceSensorBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::TransformationInterfaceSensorBase::copyToBin
        
            typedef void ( ::OSG::TransformationInterfaceSensorBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            TransformationInterfaceSensorBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::TransformationInterfaceSensorBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::TransformationInterfaceSensorBase::create
        
            typedef ::OSG::TransformationInterfaceSensorTransitPtr ( *create_function_type )(  );
            
            TransformationInterfaceSensorBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::TransformationInterfaceSensorBase::create ) );
        
        }
        { //::OSG::TransformationInterfaceSensorBase::createDependent
        
            typedef ::OSG::TransformationInterfaceSensorTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            TransformationInterfaceSensorBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::TransformationInterfaceSensorBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::TransformationInterfaceSensorBase::createLocal
        
            typedef ::OSG::TransformationInterfaceSensorTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            TransformationInterfaceSensorBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::TransformationInterfaceSensorBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::TransformationInterfaceSensorBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::TransformationInterfaceSensorBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            TransformationInterfaceSensorBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::TransformationInterfaceSensorBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::TransformationInterfaceSensorBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            TransformationInterfaceSensorBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::TransformationInterfaceSensorBase::getClassGroupId ) );
        
        }
        { //::OSG::TransformationInterfaceSensorBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            TransformationInterfaceSensorBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::TransformationInterfaceSensorBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::TransformationInterfaceSensorBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            TransformationInterfaceSensorBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::TransformationInterfaceSensorBase::getClassTypeId ) );
        
        }
        { //::OSG::TransformationInterfaceSensorBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::TransformationInterfaceSensorBase::*getContainerSize_function_type )(  ) const;
            
            TransformationInterfaceSensorBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::TransformationInterfaceSensorBase::getContainerSize ) );
        
        }
        { //::OSG::TransformationInterfaceSensorBase::getRotation
        
            typedef ::OSG::Quaternion const & ( ::OSG::TransformationInterfaceSensorBase::*getRotation_function_type )(  ) const;
            
            TransformationInterfaceSensorBase_exposer.def( 
                "getRotation"
                , getRotation_function_type( &::OSG::TransformationInterfaceSensorBase::getRotation )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::TransformationInterfaceSensorBase::getRotationScale
        
            typedef ::OSG::Real32 ( ::OSG::TransformationInterfaceSensorBase::*getRotationScale_function_type )(  ) const;
            
            TransformationInterfaceSensorBase_exposer.def( 
                "getRotationScale"
                , getRotationScale_function_type( &::OSG::TransformationInterfaceSensorBase::getRotationScale ) );
        
        }
        { //::OSG::TransformationInterfaceSensorBase::getSFRotation
        
            typedef ::OSG::SFQuaternion const * ( ::OSG::TransformationInterfaceSensorBase::*getSFRotation_function_type )(  ) const;
            
            TransformationInterfaceSensorBase_exposer.def( 
                "getSFRotation"
                , getSFRotation_function_type( &::OSG::TransformationInterfaceSensorBase::getSFRotation )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TransformationInterfaceSensorBase::getSFRotationScale
        
            typedef ::OSG::SFReal32 const * ( ::OSG::TransformationInterfaceSensorBase::*getSFRotationScale_function_type )(  ) const;
            
            TransformationInterfaceSensorBase_exposer.def( 
                "getSFRotationScale"
                , getSFRotationScale_function_type( &::OSG::TransformationInterfaceSensorBase::getSFRotationScale )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TransformationInterfaceSensorBase::getSFTransformation
        
            typedef ::OSG::SFMatrix const * ( ::OSG::TransformationInterfaceSensorBase::*getSFTransformation_function_type )(  ) const;
            
            TransformationInterfaceSensorBase_exposer.def( 
                "getSFTransformation"
                , getSFTransformation_function_type( &::OSG::TransformationInterfaceSensorBase::getSFTransformation )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TransformationInterfaceSensorBase::getSFTranslation
        
            typedef ::OSG::SFVec3f const * ( ::OSG::TransformationInterfaceSensorBase::*getSFTranslation_function_type )(  ) const;
            
            TransformationInterfaceSensorBase_exposer.def( 
                "getSFTranslation"
                , getSFTranslation_function_type( &::OSG::TransformationInterfaceSensorBase::getSFTranslation )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TransformationInterfaceSensorBase::getTransformation
        
            typedef ::OSG::Matrix const & ( ::OSG::TransformationInterfaceSensorBase::*getTransformation_function_type )(  ) const;
            
            TransformationInterfaceSensorBase_exposer.def( 
                "getTransformation"
                , getTransformation_function_type( &::OSG::TransformationInterfaceSensorBase::getTransformation )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::TransformationInterfaceSensorBase::getTranslation
        
            typedef ::OSG::Vec3f const & ( ::OSG::TransformationInterfaceSensorBase::*getTranslation_function_type )(  ) const;
            
            TransformationInterfaceSensorBase_exposer.def( 
                "getTranslation"
                , getTranslation_function_type( &::OSG::TransformationInterfaceSensorBase::getTranslation )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::TransformationInterfaceSensorBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::TransformationInterfaceSensorBase::*getType_function_type )(  ) ;
            
            TransformationInterfaceSensorBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::TransformationInterfaceSensorBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TransformationInterfaceSensorBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::TransformationInterfaceSensorBase::*getType_function_type )(  ) const;
            
            TransformationInterfaceSensorBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::TransformationInterfaceSensorBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TransformationInterfaceSensorBase::setRotation
        
            typedef void ( ::OSG::TransformationInterfaceSensorBase::*setRotation_function_type )( ::OSG::Quaternion const & ) ;
            
            TransformationInterfaceSensorBase_exposer.def( 
                "setRotation"
                , setRotation_function_type( &::OSG::TransformationInterfaceSensorBase::setRotation )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TransformationInterfaceSensorBase::setRotationScale
        
            typedef void ( ::OSG::TransformationInterfaceSensorBase::*setRotationScale_function_type )( ::OSG::Real32 const ) ;
            
            TransformationInterfaceSensorBase_exposer.def( 
                "setRotationScale"
                , setRotationScale_function_type( &::OSG::TransformationInterfaceSensorBase::setRotationScale )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TransformationInterfaceSensorBase::setTransformation
        
            typedef void ( ::OSG::TransformationInterfaceSensorBase::*setTransformation_function_type )( ::OSG::Matrix const & ) ;
            
            TransformationInterfaceSensorBase_exposer.def( 
                "setTransformation"
                , setTransformation_function_type( &::OSG::TransformationInterfaceSensorBase::setTransformation )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TransformationInterfaceSensorBase::setTranslation
        
            typedef void ( ::OSG::TransformationInterfaceSensorBase::*setTranslation_function_type )( ::OSG::Vec3f const & ) ;
            
            TransformationInterfaceSensorBase_exposer.def( 
                "setTranslation"
                , setTranslation_function_type( &::OSG::TransformationInterfaceSensorBase::setTranslation )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FrameTaskInterface::frame
        
            typedef void ( ::OSG::FrameTaskInterface::*frame_function_type )( ::OSG::Time,::OSG::UInt32 ) ;
            
            TransformationInterfaceSensorBase_exposer.def( 
                "frame"
                , bp::pure_virtual( frame_function_type(&::OSG::FrameTaskInterface::frame) )
                , ( bp::arg("oTime"), bp::arg("uiFrame") ) );
        
        }
        TransformationInterfaceSensorBase_exposer.staticmethod( "create" );
        TransformationInterfaceSensorBase_exposer.staticmethod( "createDependent" );
        TransformationInterfaceSensorBase_exposer.staticmethod( "createLocal" );
        TransformationInterfaceSensorBase_exposer.staticmethod( "getClassGroupId" );
        TransformationInterfaceSensorBase_exposer.staticmethod( "getClassType" );
        TransformationInterfaceSensorBase_exposer.staticmethod( "getClassTypeId" );
    }

}
