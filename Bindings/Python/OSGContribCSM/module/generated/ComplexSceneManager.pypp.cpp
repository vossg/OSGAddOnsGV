// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGContribCSM_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "ComplexSceneManager.pypp.hpp"

using namespace std;
namespace bp = boost::python;

namespace
{

void mainLoopCallback(bp::object callable)
{
   callable();
}

bool wrapInit(OSG::ComplexSceneManager* csm, bp::list pythonArgv)
{
   const int argc(bp::extract<int>(pythonArgv.attr("__len__")()));
   std::vector<char*> argv(argc);

   for ( int i = 0; i < argc; ++i )
   {
      argv[i] = bp::extract<char*>(pythonArgv[i]);
   }

   return csm->startFrom(argc, &argv[0]);
}

void wrapSetMainloop(OSG::ComplexSceneManager* csm, bp::object fMainLoop)
{
   csm->setMainloop(boost::bind(mainLoopCallback, fMainLoop));
}

}

void register_ComplexSceneManager_class(){

    { //::OSG::ComplexSceneManager
        typedef bp::class_< OSG::ComplexSceneManager, bp::bases< OSG::ComplexSceneManagerBase >, OSG::ComplexSceneManager::ObjRecPtr, boost::noncopyable > ComplexSceneManager_exposer_t;
        ComplexSceneManager_exposer_t ComplexSceneManager_exposer = ComplexSceneManager_exposer_t( "ComplexSceneManager", bp::no_init );
        bp::scope ComplexSceneManager_scope( ComplexSceneManager_exposer );
        { //::OSG::ComplexSceneManager::addFrameProducer
        
            typedef void ( ::OSG::ComplexSceneManager::*addFrameProducer_function_type )( ::OSG::FrameProducerInterface * ) ;
            
            ComplexSceneManager_exposer.def( 
                "addFrameProducer"
                , addFrameProducer_function_type( &::OSG::ComplexSceneManager::addFrameProducer )
                , ( bp::arg("pProducer") ) );
        
        }
        { //::OSG::ComplexSceneManager::changed
        
            typedef void ( ::OSG::ComplexSceneManager::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            ComplexSceneManager_exposer.def( 
                "changed"
                , changed_function_type( &::OSG::ComplexSceneManager::changed )
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("details") ) );
        
        }
        { //::OSG::ComplexSceneManager::dump
        
            typedef void ( ::OSG::ComplexSceneManager::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            ComplexSceneManager_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::ComplexSceneManager::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::ComplexSceneManager::findNamedComponent
        
            typedef ::OSG::FieldContainer * ( ::OSG::ComplexSceneManager::*findNamedComponent_function_type )( ::OSG::Char8 const * ) ;
            
            ComplexSceneManager_exposer.def( 
                "findNamedComponent"
                , findNamedComponent_function_type( &::OSG::ComplexSceneManager::findNamedComponent )
                , ( bp::arg("szName") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::ComplexSceneManager::frame
        
            typedef void ( ::OSG::ComplexSceneManager::*frame_function_type )(  ) ;
            
            ComplexSceneManager_exposer.def( 
                "frame"
                , frame_function_type( &::OSG::ComplexSceneManager::frame ) );
        
        }
        { //::OSG::ComplexSceneManager::key
        
            typedef void ( ::OSG::ComplexSceneManager::*key_function_type )( ::OSG::Int32,::OSG::Int32,::OSG::Int32,::OSG::Char8 ) ;
            
            ComplexSceneManager_exposer.def( 
                "key"
                , key_function_type( &::OSG::ComplexSceneManager::key )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("iState"), bp::arg("cKey") ) );
        
        }
        { //::OSG::ComplexSceneManager::removeFrameProducer
        
            typedef void ( ::OSG::ComplexSceneManager::*removeFrameProducer_function_type )( ::OSG::FrameProducerInterface * ) ;
            
            ComplexSceneManager_exposer.def( 
                "removeFrameProducer"
                , removeFrameProducer_function_type( &::OSG::ComplexSceneManager::removeFrameProducer )
                , ( bp::arg("pProducer") ) );
        
        }
        { //::OSG::ComplexSceneManager::resetScene
        
            typedef void ( ::OSG::ComplexSceneManager::*resetScene_function_type )(  ) ;
            
            ComplexSceneManager_exposer.def( 
                "resetScene"
                , resetScene_function_type( &::OSG::ComplexSceneManager::resetScene ) );
        
        }
        { //::OSG::ComplexSceneManager::run
        
            typedef void ( ::OSG::ComplexSceneManager::*run_function_type )(  ) ;
            
            ComplexSceneManager_exposer.def( 
                "run"
                , run_function_type( &::OSG::ComplexSceneManager::run ) );
        
        }
        { //::OSG::ComplexSceneManager::startFrom
        
            typedef void ( *startFrom_function_type )( ::std::string const & );
            
            ComplexSceneManager_exposer.def( 
                "startFrom"
                , startFrom_function_type( &::OSG::ComplexSceneManager::startFrom )
                , ( bp::arg("szParamFilename") ) );
        
        }
        { //::OSG::ComplexSceneManager::startFrom
        
            typedef bool ( ::OSG::ComplexSceneManager::*startFrom_function_type )( int,char * * ) ;
            
            ComplexSceneManager_exposer.def( 
                "startFrom"
                , startFrom_function_type( &::OSG::ComplexSceneManager::startFrom )
                , ( bp::arg("argc"), bp::arg("argv") ) );
        
        }
        { //::OSG::ComplexSceneManager::terminate
        
            typedef void ( ::OSG::ComplexSceneManager::*terminate_function_type )(  ) ;
            
            ComplexSceneManager_exposer.def( 
                "terminate"
                , terminate_function_type( &::OSG::ComplexSceneManager::terminate ) );
        
        }
        { //::OSG::ComplexSceneManager::the
        
            typedef ::OSG::ComplexSceneManager * ( *the_function_type )(  );
            
            ComplexSceneManager_exposer.def( 
                "the"
                , the_function_type( &::OSG::ComplexSceneManager::the )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        ComplexSceneManager_exposer.staticmethod( "startFrom" );
        ComplexSceneManager_exposer.staticmethod( "the" );
        pyopensg::register_transit< OSG::ComplexSceneManager >::execute();
        bp::implicitly_convertible< OSG::ComplexSceneManager::ObjRecPtr, OSG::ComplexSceneManager* >();
        bp::implicitly_convertible< OSG::ComplexSceneManager::ObjRecPtr, OSG::ComplexSceneManager::ObjCPtr >();
        bp::implicitly_convertible< OSG::ComplexSceneManager::ObjRecPtr, OSG::FieldContainer* >();
        bp::implicitly_convertible< OSG::ComplexSceneManager::ObjRecPtr, OSG::FieldContainer::ObjRecPtr >();
        bp::implicitly_convertible<OSG::ComplexSceneManager::ObjRecPtr, OSG::FieldContainer::ObjCPtr>();
        ComplexSceneManager_exposer.def("init", wrapInit);
        ComplexSceneManager_exposer.def("setMainloop", wrapSetMainloop, (bp::arg("fMainLoop")));
    }

}
