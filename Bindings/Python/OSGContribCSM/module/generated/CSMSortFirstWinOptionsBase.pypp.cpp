// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGContribCSM_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "CSMSortFirstWinOptionsBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_CSMSortFirstWinOptionsBase_class(){

    { //::OSG::CSMSortFirstWinOptionsBase
        typedef bp::class_< OSG::CSMSortFirstWinOptionsBase, bp::bases< OSG::CSMClusterWinOptions >, boost::noncopyable > CSMSortFirstWinOptionsBase_exposer_t;
        CSMSortFirstWinOptionsBase_exposer_t CSMSortFirstWinOptionsBase_exposer = CSMSortFirstWinOptionsBase_exposer_t( "CSMSortFirstWinOptionsBase", bp::no_init );
        bp::scope CSMSortFirstWinOptionsBase_scope( CSMSortFirstWinOptionsBase_exposer );
        bp::scope().attr("CompressionFieldId") = (int)OSG::CSMSortFirstWinOptionsBase::CompressionFieldId;
        bp::scope().attr("SubtileSizeFieldId") = (int)OSG::CSMSortFirstWinOptionsBase::SubtileSizeFieldId;
        bp::scope().attr("ComposeFieldId") = (int)OSG::CSMSortFirstWinOptionsBase::ComposeFieldId;
        bp::scope().attr("UseFaceDistributionFieldId") = (int)OSG::CSMSortFirstWinOptionsBase::UseFaceDistributionFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::CSMSortFirstWinOptionsBase::NextFieldId;
        { //::OSG::CSMSortFirstWinOptionsBase::copyFromBin
        
            typedef void ( ::OSG::CSMSortFirstWinOptionsBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            CSMSortFirstWinOptionsBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::CSMSortFirstWinOptionsBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::CSMSortFirstWinOptionsBase::copyToBin
        
            typedef void ( ::OSG::CSMSortFirstWinOptionsBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            CSMSortFirstWinOptionsBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::CSMSortFirstWinOptionsBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::CSMSortFirstWinOptionsBase::create
        
            typedef ::OSG::CSMSortFirstWinOptionsTransitPtr ( *create_function_type )(  );
            
            CSMSortFirstWinOptionsBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::CSMSortFirstWinOptionsBase::create ) );
        
        }
        { //::OSG::CSMSortFirstWinOptionsBase::createDependent
        
            typedef ::OSG::CSMSortFirstWinOptionsTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            CSMSortFirstWinOptionsBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::CSMSortFirstWinOptionsBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::CSMSortFirstWinOptionsBase::createLocal
        
            typedef ::OSG::CSMSortFirstWinOptionsTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            CSMSortFirstWinOptionsBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::CSMSortFirstWinOptionsBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::CSMSortFirstWinOptionsBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::CSMSortFirstWinOptionsBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            CSMSortFirstWinOptionsBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::CSMSortFirstWinOptionsBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::CSMSortFirstWinOptionsBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            CSMSortFirstWinOptionsBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::CSMSortFirstWinOptionsBase::getClassGroupId ) );
        
        }
        { //::OSG::CSMSortFirstWinOptionsBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            CSMSortFirstWinOptionsBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::CSMSortFirstWinOptionsBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::CSMSortFirstWinOptionsBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            CSMSortFirstWinOptionsBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::CSMSortFirstWinOptionsBase::getClassTypeId ) );
        
        }
        { //::OSG::CSMSortFirstWinOptionsBase::getCompose
        
            typedef bool ( ::OSG::CSMSortFirstWinOptionsBase::*getCompose_function_type )(  ) const;
            
            CSMSortFirstWinOptionsBase_exposer.def( 
                "getCompose"
                , getCompose_function_type( &::OSG::CSMSortFirstWinOptionsBase::getCompose ) );
        
        }
        { //::OSG::CSMSortFirstWinOptionsBase::getCompression
        
            typedef ::std::string const & ( ::OSG::CSMSortFirstWinOptionsBase::*getCompression_function_type )(  ) const;
            
            CSMSortFirstWinOptionsBase_exposer.def( 
                "getCompression"
                , getCompression_function_type( &::OSG::CSMSortFirstWinOptionsBase::getCompression )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::CSMSortFirstWinOptionsBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::CSMSortFirstWinOptionsBase::*getContainerSize_function_type )(  ) const;
            
            CSMSortFirstWinOptionsBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::CSMSortFirstWinOptionsBase::getContainerSize ) );
        
        }
        { //::OSG::CSMSortFirstWinOptionsBase::getSFCompose
        
            typedef ::OSG::SFBool const * ( ::OSG::CSMSortFirstWinOptionsBase::*getSFCompose_function_type )(  ) const;
            
            CSMSortFirstWinOptionsBase_exposer.def( 
                "getSFCompose"
                , getSFCompose_function_type( &::OSG::CSMSortFirstWinOptionsBase::getSFCompose )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMSortFirstWinOptionsBase::getSFCompression
        
            typedef ::OSG::SFString const * ( ::OSG::CSMSortFirstWinOptionsBase::*getSFCompression_function_type )(  ) const;
            
            CSMSortFirstWinOptionsBase_exposer.def( 
                "getSFCompression"
                , getSFCompression_function_type( &::OSG::CSMSortFirstWinOptionsBase::getSFCompression )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMSortFirstWinOptionsBase::getSFSubtileSize
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::CSMSortFirstWinOptionsBase::*getSFSubtileSize_function_type )(  ) const;
            
            CSMSortFirstWinOptionsBase_exposer.def( 
                "getSFSubtileSize"
                , getSFSubtileSize_function_type( &::OSG::CSMSortFirstWinOptionsBase::getSFSubtileSize )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMSortFirstWinOptionsBase::getSFUseFaceDistribution
        
            typedef ::OSG::SFBool const * ( ::OSG::CSMSortFirstWinOptionsBase::*getSFUseFaceDistribution_function_type )(  ) const;
            
            CSMSortFirstWinOptionsBase_exposer.def( 
                "getSFUseFaceDistribution"
                , getSFUseFaceDistribution_function_type( &::OSG::CSMSortFirstWinOptionsBase::getSFUseFaceDistribution )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMSortFirstWinOptionsBase::getSubtileSize
        
            typedef ::OSG::UInt32 ( ::OSG::CSMSortFirstWinOptionsBase::*getSubtileSize_function_type )(  ) const;
            
            CSMSortFirstWinOptionsBase_exposer.def( 
                "getSubtileSize"
                , getSubtileSize_function_type( &::OSG::CSMSortFirstWinOptionsBase::getSubtileSize ) );
        
        }
        { //::OSG::CSMSortFirstWinOptionsBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::CSMSortFirstWinOptionsBase::*getType_function_type )(  ) ;
            
            CSMSortFirstWinOptionsBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::CSMSortFirstWinOptionsBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMSortFirstWinOptionsBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::CSMSortFirstWinOptionsBase::*getType_function_type )(  ) const;
            
            CSMSortFirstWinOptionsBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::CSMSortFirstWinOptionsBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMSortFirstWinOptionsBase::getUseFaceDistribution
        
            typedef bool ( ::OSG::CSMSortFirstWinOptionsBase::*getUseFaceDistribution_function_type )(  ) const;
            
            CSMSortFirstWinOptionsBase_exposer.def( 
                "getUseFaceDistribution"
                , getUseFaceDistribution_function_type( &::OSG::CSMSortFirstWinOptionsBase::getUseFaceDistribution ) );
        
        }
        { //::OSG::CSMSortFirstWinOptionsBase::setCompose
        
            typedef void ( ::OSG::CSMSortFirstWinOptionsBase::*setCompose_function_type )( bool const ) ;
            
            CSMSortFirstWinOptionsBase_exposer.def( 
                "setCompose"
                , setCompose_function_type( &::OSG::CSMSortFirstWinOptionsBase::setCompose )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMSortFirstWinOptionsBase::setCompression
        
            typedef void ( ::OSG::CSMSortFirstWinOptionsBase::*setCompression_function_type )( ::std::string const & ) ;
            
            CSMSortFirstWinOptionsBase_exposer.def( 
                "setCompression"
                , setCompression_function_type( &::OSG::CSMSortFirstWinOptionsBase::setCompression )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMSortFirstWinOptionsBase::setSubtileSize
        
            typedef void ( ::OSG::CSMSortFirstWinOptionsBase::*setSubtileSize_function_type )( ::OSG::UInt32 const ) ;
            
            CSMSortFirstWinOptionsBase_exposer.def( 
                "setSubtileSize"
                , setSubtileSize_function_type( &::OSG::CSMSortFirstWinOptionsBase::setSubtileSize )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMSortFirstWinOptionsBase::setUseFaceDistribution
        
            typedef void ( ::OSG::CSMSortFirstWinOptionsBase::*setUseFaceDistribution_function_type )( bool const ) ;
            
            CSMSortFirstWinOptionsBase_exposer.def( 
                "setUseFaceDistribution"
                , setUseFaceDistribution_function_type( &::OSG::CSMSortFirstWinOptionsBase::setUseFaceDistribution )
                , ( bp::arg("value") ) );
        
        }
        CSMSortFirstWinOptionsBase_exposer.staticmethod( "create" );
        CSMSortFirstWinOptionsBase_exposer.staticmethod( "createDependent" );
        CSMSortFirstWinOptionsBase_exposer.staticmethod( "createLocal" );
        CSMSortFirstWinOptionsBase_exposer.staticmethod( "getClassGroupId" );
        CSMSortFirstWinOptionsBase_exposer.staticmethod( "getClassType" );
        CSMSortFirstWinOptionsBase_exposer.staticmethod( "getClassTypeId" );
    }

}
