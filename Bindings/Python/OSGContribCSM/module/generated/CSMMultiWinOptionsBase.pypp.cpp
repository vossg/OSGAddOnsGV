// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGContribCSM_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "CSMMultiWinOptionsBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_CSMMultiWinOptionsBase_class(){

    { //::OSG::CSMMultiWinOptionsBase
        typedef bp::class_< OSG::CSMMultiWinOptionsBase, bp::bases< OSG::CSMClusterWinOptions >, boost::noncopyable > CSMMultiWinOptionsBase_exposer_t;
        CSMMultiWinOptionsBase_exposer_t CSMMultiWinOptionsBase_exposer = CSMMultiWinOptionsBase_exposer_t( "CSMMultiWinOptionsBase", bp::no_init );
        bp::scope CSMMultiWinOptionsBase_scope( CSMMultiWinOptionsBase_exposer );
        bp::scope().attr("XOverlapFieldId") = (int)OSG::CSMMultiWinOptionsBase::XOverlapFieldId;
        bp::scope().attr("YOverlapFieldId") = (int)OSG::CSMMultiWinOptionsBase::YOverlapFieldId;
        bp::scope().attr("ManageClientViewportsFieldId") = (int)OSG::CSMMultiWinOptionsBase::ManageClientViewportsFieldId;
        bp::scope().attr("BalanceFieldId") = (int)OSG::CSMMultiWinOptionsBase::BalanceFieldId;
        bp::scope().attr("BestCutFieldId") = (int)OSG::CSMMultiWinOptionsBase::BestCutFieldId;
        bp::scope().attr("ShowBalancingFieldId") = (int)OSG::CSMMultiWinOptionsBase::ShowBalancingFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::CSMMultiWinOptionsBase::NextFieldId;
        { //::OSG::CSMMultiWinOptionsBase::copyFromBin
        
            typedef void ( ::OSG::CSMMultiWinOptionsBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            CSMMultiWinOptionsBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::CSMMultiWinOptionsBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::CSMMultiWinOptionsBase::copyToBin
        
            typedef void ( ::OSG::CSMMultiWinOptionsBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            CSMMultiWinOptionsBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::CSMMultiWinOptionsBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::CSMMultiWinOptionsBase::create
        
            typedef ::OSG::CSMMultiWinOptionsTransitPtr ( *create_function_type )(  );
            
            CSMMultiWinOptionsBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::CSMMultiWinOptionsBase::create ) );
        
        }
        { //::OSG::CSMMultiWinOptionsBase::createDependent
        
            typedef ::OSG::CSMMultiWinOptionsTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            CSMMultiWinOptionsBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::CSMMultiWinOptionsBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::CSMMultiWinOptionsBase::createLocal
        
            typedef ::OSG::CSMMultiWinOptionsTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            CSMMultiWinOptionsBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::CSMMultiWinOptionsBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::CSMMultiWinOptionsBase::getBalance
        
            typedef bool ( ::OSG::CSMMultiWinOptionsBase::*getBalance_function_type )(  ) const;
            
            CSMMultiWinOptionsBase_exposer.def( 
                "getBalance"
                , getBalance_function_type( &::OSG::CSMMultiWinOptionsBase::getBalance ) );
        
        }
        { //::OSG::CSMMultiWinOptionsBase::getBestCut
        
            typedef bool ( ::OSG::CSMMultiWinOptionsBase::*getBestCut_function_type )(  ) const;
            
            CSMMultiWinOptionsBase_exposer.def( 
                "getBestCut"
                , getBestCut_function_type( &::OSG::CSMMultiWinOptionsBase::getBestCut ) );
        
        }
        { //::OSG::CSMMultiWinOptionsBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::CSMMultiWinOptionsBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            CSMMultiWinOptionsBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::CSMMultiWinOptionsBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::CSMMultiWinOptionsBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            CSMMultiWinOptionsBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::CSMMultiWinOptionsBase::getClassGroupId ) );
        
        }
        { //::OSG::CSMMultiWinOptionsBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            CSMMultiWinOptionsBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::CSMMultiWinOptionsBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::CSMMultiWinOptionsBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            CSMMultiWinOptionsBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::CSMMultiWinOptionsBase::getClassTypeId ) );
        
        }
        { //::OSG::CSMMultiWinOptionsBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::CSMMultiWinOptionsBase::*getContainerSize_function_type )(  ) const;
            
            CSMMultiWinOptionsBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::CSMMultiWinOptionsBase::getContainerSize ) );
        
        }
        { //::OSG::CSMMultiWinOptionsBase::getManageClientViewports
        
            typedef bool ( ::OSG::CSMMultiWinOptionsBase::*getManageClientViewports_function_type )(  ) const;
            
            CSMMultiWinOptionsBase_exposer.def( 
                "getManageClientViewports"
                , getManageClientViewports_function_type( &::OSG::CSMMultiWinOptionsBase::getManageClientViewports ) );
        
        }
        { //::OSG::CSMMultiWinOptionsBase::getSFBalance
        
            typedef ::OSG::SFBool const * ( ::OSG::CSMMultiWinOptionsBase::*getSFBalance_function_type )(  ) const;
            
            CSMMultiWinOptionsBase_exposer.def( 
                "getSFBalance"
                , getSFBalance_function_type( &::OSG::CSMMultiWinOptionsBase::getSFBalance )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMMultiWinOptionsBase::getSFBestCut
        
            typedef ::OSG::SFBool const * ( ::OSG::CSMMultiWinOptionsBase::*getSFBestCut_function_type )(  ) const;
            
            CSMMultiWinOptionsBase_exposer.def( 
                "getSFBestCut"
                , getSFBestCut_function_type( &::OSG::CSMMultiWinOptionsBase::getSFBestCut )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMMultiWinOptionsBase::getSFManageClientViewports
        
            typedef ::OSG::SFBool const * ( ::OSG::CSMMultiWinOptionsBase::*getSFManageClientViewports_function_type )(  ) const;
            
            CSMMultiWinOptionsBase_exposer.def( 
                "getSFManageClientViewports"
                , getSFManageClientViewports_function_type( &::OSG::CSMMultiWinOptionsBase::getSFManageClientViewports )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMMultiWinOptionsBase::getSFShowBalancing
        
            typedef ::OSG::SFBool const * ( ::OSG::CSMMultiWinOptionsBase::*getSFShowBalancing_function_type )(  ) const;
            
            CSMMultiWinOptionsBase_exposer.def( 
                "getSFShowBalancing"
                , getSFShowBalancing_function_type( &::OSG::CSMMultiWinOptionsBase::getSFShowBalancing )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMMultiWinOptionsBase::getSFXOverlap
        
            typedef ::OSG::SFInt32 const * ( ::OSG::CSMMultiWinOptionsBase::*getSFXOverlap_function_type )(  ) const;
            
            CSMMultiWinOptionsBase_exposer.def( 
                "getSFXOverlap"
                , getSFXOverlap_function_type( &::OSG::CSMMultiWinOptionsBase::getSFXOverlap )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMMultiWinOptionsBase::getSFYOverlap
        
            typedef ::OSG::SFInt32 const * ( ::OSG::CSMMultiWinOptionsBase::*getSFYOverlap_function_type )(  ) const;
            
            CSMMultiWinOptionsBase_exposer.def( 
                "getSFYOverlap"
                , getSFYOverlap_function_type( &::OSG::CSMMultiWinOptionsBase::getSFYOverlap )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMMultiWinOptionsBase::getShowBalancing
        
            typedef bool ( ::OSG::CSMMultiWinOptionsBase::*getShowBalancing_function_type )(  ) const;
            
            CSMMultiWinOptionsBase_exposer.def( 
                "getShowBalancing"
                , getShowBalancing_function_type( &::OSG::CSMMultiWinOptionsBase::getShowBalancing ) );
        
        }
        { //::OSG::CSMMultiWinOptionsBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::CSMMultiWinOptionsBase::*getType_function_type )(  ) ;
            
            CSMMultiWinOptionsBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::CSMMultiWinOptionsBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMMultiWinOptionsBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::CSMMultiWinOptionsBase::*getType_function_type )(  ) const;
            
            CSMMultiWinOptionsBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::CSMMultiWinOptionsBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMMultiWinOptionsBase::getXOverlap
        
            typedef ::OSG::Int32 ( ::OSG::CSMMultiWinOptionsBase::*getXOverlap_function_type )(  ) const;
            
            CSMMultiWinOptionsBase_exposer.def( 
                "getXOverlap"
                , getXOverlap_function_type( &::OSG::CSMMultiWinOptionsBase::getXOverlap ) );
        
        }
        { //::OSG::CSMMultiWinOptionsBase::getYOverlap
        
            typedef ::OSG::Int32 ( ::OSG::CSMMultiWinOptionsBase::*getYOverlap_function_type )(  ) const;
            
            CSMMultiWinOptionsBase_exposer.def( 
                "getYOverlap"
                , getYOverlap_function_type( &::OSG::CSMMultiWinOptionsBase::getYOverlap ) );
        
        }
        { //::OSG::CSMMultiWinOptionsBase::setBalance
        
            typedef void ( ::OSG::CSMMultiWinOptionsBase::*setBalance_function_type )( bool const ) ;
            
            CSMMultiWinOptionsBase_exposer.def( 
                "setBalance"
                , setBalance_function_type( &::OSG::CSMMultiWinOptionsBase::setBalance )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMMultiWinOptionsBase::setBestCut
        
            typedef void ( ::OSG::CSMMultiWinOptionsBase::*setBestCut_function_type )( bool const ) ;
            
            CSMMultiWinOptionsBase_exposer.def( 
                "setBestCut"
                , setBestCut_function_type( &::OSG::CSMMultiWinOptionsBase::setBestCut )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMMultiWinOptionsBase::setManageClientViewports
        
            typedef void ( ::OSG::CSMMultiWinOptionsBase::*setManageClientViewports_function_type )( bool const ) ;
            
            CSMMultiWinOptionsBase_exposer.def( 
                "setManageClientViewports"
                , setManageClientViewports_function_type( &::OSG::CSMMultiWinOptionsBase::setManageClientViewports )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMMultiWinOptionsBase::setShowBalancing
        
            typedef void ( ::OSG::CSMMultiWinOptionsBase::*setShowBalancing_function_type )( bool const ) ;
            
            CSMMultiWinOptionsBase_exposer.def( 
                "setShowBalancing"
                , setShowBalancing_function_type( &::OSG::CSMMultiWinOptionsBase::setShowBalancing )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMMultiWinOptionsBase::setXOverlap
        
            typedef void ( ::OSG::CSMMultiWinOptionsBase::*setXOverlap_function_type )( ::OSG::Int32 const ) ;
            
            CSMMultiWinOptionsBase_exposer.def( 
                "setXOverlap"
                , setXOverlap_function_type( &::OSG::CSMMultiWinOptionsBase::setXOverlap )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMMultiWinOptionsBase::setYOverlap
        
            typedef void ( ::OSG::CSMMultiWinOptionsBase::*setYOverlap_function_type )( ::OSG::Int32 const ) ;
            
            CSMMultiWinOptionsBase_exposer.def( 
                "setYOverlap"
                , setYOverlap_function_type( &::OSG::CSMMultiWinOptionsBase::setYOverlap )
                , ( bp::arg("value") ) );
        
        }
        CSMMultiWinOptionsBase_exposer.staticmethod( "create" );
        CSMMultiWinOptionsBase_exposer.staticmethod( "createDependent" );
        CSMMultiWinOptionsBase_exposer.staticmethod( "createLocal" );
        CSMMultiWinOptionsBase_exposer.staticmethod( "getClassGroupId" );
        CSMMultiWinOptionsBase_exposer.staticmethod( "getClassType" );
        CSMMultiWinOptionsBase_exposer.staticmethod( "getClassTypeId" );
    }

}
