// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGContribCSM_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "KeySensorBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_KeySensorBase_class(){

    { //::OSG::KeySensorBase
        typedef bp::class_< OSG::KeySensorBase, bp::bases< ::OSG::AttachmentContainer >, boost::noncopyable > KeySensorBase_exposer_t;
        KeySensorBase_exposer_t KeySensorBase_exposer = KeySensorBase_exposer_t( "KeySensorBase", bp::no_init );
        bp::scope KeySensorBase_scope( KeySensorBase_exposer );
        bp::scope().attr("KeyFieldId") = (int)OSG::KeySensorBase::KeyFieldId;
        bp::scope().attr("StateRawFieldId") = (int)OSG::KeySensorBase::StateRawFieldId;
        bp::scope().attr("StateFlipFlopFieldId") = (int)OSG::KeySensorBase::StateFlipFlopFieldId;
        bp::scope().attr("SignalPressedFieldId") = (int)OSG::KeySensorBase::SignalPressedFieldId;
        bp::scope().attr("SignalReleasedFieldId") = (int)OSG::KeySensorBase::SignalReleasedFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::KeySensorBase::NextFieldId;
        { //::OSG::KeySensorBase::copyFromBin
        
            typedef void ( ::OSG::KeySensorBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            KeySensorBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::KeySensorBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::KeySensorBase::copyToBin
        
            typedef void ( ::OSG::KeySensorBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            KeySensorBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::KeySensorBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::KeySensorBase::create
        
            typedef ::OSG::KeySensorTransitPtr ( *create_function_type )(  );
            
            KeySensorBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::KeySensorBase::create ) );
        
        }
        { //::OSG::KeySensorBase::createDependent
        
            typedef ::OSG::KeySensorTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            KeySensorBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::KeySensorBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::KeySensorBase::createLocal
        
            typedef ::OSG::KeySensorTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            KeySensorBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::KeySensorBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::KeySensorBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::KeySensorBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            KeySensorBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::KeySensorBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::KeySensorBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            KeySensorBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::KeySensorBase::getClassGroupId ) );
        
        }
        { //::OSG::KeySensorBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            KeySensorBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::KeySensorBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::KeySensorBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            KeySensorBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::KeySensorBase::getClassTypeId ) );
        
        }
        { //::OSG::KeySensorBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::KeySensorBase::*getContainerSize_function_type )(  ) const;
            
            KeySensorBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::KeySensorBase::getContainerSize ) );
        
        }
        { //::OSG::KeySensorBase::getSFStateFlipFlop
        
            typedef ::OSG::SFBool const * ( ::OSG::KeySensorBase::*getSFStateFlipFlop_function_type )(  ) const;
            
            KeySensorBase_exposer.def( 
                "getSFStateFlipFlop"
                , getSFStateFlipFlop_function_type( &::OSG::KeySensorBase::getSFStateFlipFlop )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::KeySensorBase::getSFStateRaw
        
            typedef ::OSG::SFBool const * ( ::OSG::KeySensorBase::*getSFStateRaw_function_type )(  ) const;
            
            KeySensorBase_exposer.def( 
                "getSFStateRaw"
                , getSFStateRaw_function_type( &::OSG::KeySensorBase::getSFStateRaw )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::KeySensorBase::getStateFlipFlop
        
            typedef bool ( ::OSG::KeySensorBase::*getStateFlipFlop_function_type )(  ) const;
            
            KeySensorBase_exposer.def( 
                "getStateFlipFlop"
                , getStateFlipFlop_function_type( &::OSG::KeySensorBase::getStateFlipFlop ) );
        
        }
        { //::OSG::KeySensorBase::getStateRaw
        
            typedef bool ( ::OSG::KeySensorBase::*getStateRaw_function_type )(  ) const;
            
            KeySensorBase_exposer.def( 
                "getStateRaw"
                , getStateRaw_function_type( &::OSG::KeySensorBase::getStateRaw ) );
        
        }
        { //::OSG::KeySensorBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::KeySensorBase::*getType_function_type )(  ) ;
            
            KeySensorBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::KeySensorBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::KeySensorBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::KeySensorBase::*getType_function_type )(  ) const;
            
            KeySensorBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::KeySensorBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::KeySensorBase::setStateFlipFlop
        
            typedef void ( ::OSG::KeySensorBase::*setStateFlipFlop_function_type )( bool const ) ;
            
            KeySensorBase_exposer.def( 
                "setStateFlipFlop"
                , setStateFlipFlop_function_type( &::OSG::KeySensorBase::setStateFlipFlop )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::KeySensorBase::setStateRaw
        
            typedef void ( ::OSG::KeySensorBase::*setStateRaw_function_type )( bool const ) ;
            
            KeySensorBase_exposer.def( 
                "setStateRaw"
                , setStateRaw_function_type( &::OSG::KeySensorBase::setStateRaw )
                , ( bp::arg("value") ) );
        
        }
        KeySensorBase_exposer.staticmethod( "create" );
        KeySensorBase_exposer.staticmethod( "createDependent" );
        KeySensorBase_exposer.staticmethod( "createLocal" );
        KeySensorBase_exposer.staticmethod( "getClassGroupId" );
        KeySensorBase_exposer.staticmethod( "getClassType" );
        KeySensorBase_exposer.staticmethod( "getClassTypeId" );
    }

}
