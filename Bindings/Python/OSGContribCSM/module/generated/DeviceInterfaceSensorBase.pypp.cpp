// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGContribCSM_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "DeviceInterfaceSensorBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct DeviceInterfaceSensorBase_wrapper : OSG::DeviceInterfaceSensorBase, bp::wrapper< OSG::DeviceInterfaceSensorBase > {

    virtual void frame( ::OSG::Time oTime, ::OSG::UInt32 uiFrame ){
        bp::override func_frame = this->get_override( "frame" );
        func_frame( oTime, uiFrame );
    }

};

void register_DeviceInterfaceSensorBase_class(){

    { //::OSG::DeviceInterfaceSensorBase
        typedef bp::class_< DeviceInterfaceSensorBase_wrapper, boost::noncopyable > DeviceInterfaceSensorBase_exposer_t;
        DeviceInterfaceSensorBase_exposer_t DeviceInterfaceSensorBase_exposer = DeviceInterfaceSensorBase_exposer_t( "DeviceInterfaceSensorBase", bp::no_init );
        bp::scope DeviceInterfaceSensorBase_scope( DeviceInterfaceSensorBase_exposer );
        bp::scope().attr("InterfaceNameFieldId") = (int)OSG::DeviceInterfaceSensorBase::InterfaceNameFieldId;
        bp::scope().attr("OptionsFieldId") = (int)OSG::DeviceInterfaceSensorBase::OptionsFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::DeviceInterfaceSensorBase::NextFieldId;
        { //::OSG::DeviceInterfaceSensorBase::copyFromBin
        
            typedef void ( ::OSG::DeviceInterfaceSensorBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            DeviceInterfaceSensorBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::DeviceInterfaceSensorBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::DeviceInterfaceSensorBase::copyToBin
        
            typedef void ( ::OSG::DeviceInterfaceSensorBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            DeviceInterfaceSensorBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::DeviceInterfaceSensorBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::DeviceInterfaceSensorBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::DeviceInterfaceSensorBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            DeviceInterfaceSensorBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::DeviceInterfaceSensorBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::DeviceInterfaceSensorBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            DeviceInterfaceSensorBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::DeviceInterfaceSensorBase::getClassGroupId ) );
        
        }
        { //::OSG::DeviceInterfaceSensorBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            DeviceInterfaceSensorBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::DeviceInterfaceSensorBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::DeviceInterfaceSensorBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            DeviceInterfaceSensorBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::DeviceInterfaceSensorBase::getClassTypeId ) );
        
        }
        { //::OSG::DeviceInterfaceSensorBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::DeviceInterfaceSensorBase::*getContainerSize_function_type )(  ) const;
            
            DeviceInterfaceSensorBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::DeviceInterfaceSensorBase::getContainerSize ) );
        
        }
        { //::OSG::DeviceInterfaceSensorBase::getInterfaceName
        
            typedef ::std::string const & ( ::OSG::DeviceInterfaceSensorBase::*getInterfaceName_function_type )(  ) const;
            
            DeviceInterfaceSensorBase_exposer.def( 
                "getInterfaceName"
                , getInterfaceName_function_type( &::OSG::DeviceInterfaceSensorBase::getInterfaceName )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::DeviceInterfaceSensorBase::getOptions
        
            typedef ::OSG::InterfaceOptions * ( ::OSG::DeviceInterfaceSensorBase::*getOptions_function_type )(  ) const;
            
            DeviceInterfaceSensorBase_exposer.def( 
                "getOptions"
                , getOptions_function_type( &::OSG::DeviceInterfaceSensorBase::getOptions )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DeviceInterfaceSensorBase::getSFInterfaceName
        
            typedef ::OSG::SFString const * ( ::OSG::DeviceInterfaceSensorBase::*getSFInterfaceName_function_type )(  ) const;
            
            DeviceInterfaceSensorBase_exposer.def( 
                "getSFInterfaceName"
                , getSFInterfaceName_function_type( &::OSG::DeviceInterfaceSensorBase::getSFInterfaceName )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DeviceInterfaceSensorBase::getSFOptions
        
            typedef ::OSG::SFUnrecChildInterfaceOptionsPtr const * ( ::OSG::DeviceInterfaceSensorBase::*getSFOptions_function_type )(  ) const;
            
            DeviceInterfaceSensorBase_exposer.def( 
                "getSFOptions"
                , getSFOptions_function_type( &::OSG::DeviceInterfaceSensorBase::getSFOptions )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DeviceInterfaceSensorBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::DeviceInterfaceSensorBase::*getType_function_type )(  ) ;
            
            DeviceInterfaceSensorBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::DeviceInterfaceSensorBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DeviceInterfaceSensorBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::DeviceInterfaceSensorBase::*getType_function_type )(  ) const;
            
            DeviceInterfaceSensorBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::DeviceInterfaceSensorBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::DeviceInterfaceSensorBase::setInterfaceName
        
            typedef void ( ::OSG::DeviceInterfaceSensorBase::*setInterfaceName_function_type )( ::std::string const & ) ;
            
            DeviceInterfaceSensorBase_exposer.def( 
                "setInterfaceName"
                , setInterfaceName_function_type( &::OSG::DeviceInterfaceSensorBase::setInterfaceName )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::DeviceInterfaceSensorBase::setOptions
        
            typedef void ( ::OSG::DeviceInterfaceSensorBase::*setOptions_function_type )( ::OSG::InterfaceOptions * const ) ;
            
            DeviceInterfaceSensorBase_exposer.def( 
                "setOptions"
                , setOptions_function_type( &::OSG::DeviceInterfaceSensorBase::setOptions )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FrameTaskInterface::frame
        
            typedef void ( ::OSG::FrameTaskInterface::*frame_function_type )( ::OSG::Time,::OSG::UInt32 ) ;
            
            DeviceInterfaceSensorBase_exposer.def( 
                "frame"
                , bp::pure_virtual( frame_function_type(&::OSG::FrameTaskInterface::frame) )
                , ( bp::arg("oTime"), bp::arg("uiFrame") ) );
        
        }
        DeviceInterfaceSensorBase_exposer.staticmethod( "getClassGroupId" );
        DeviceInterfaceSensorBase_exposer.staticmethod( "getClassType" );
        DeviceInterfaceSensorBase_exposer.staticmethod( "getClassTypeId" );
    }

}
