// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGContribCSM_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "CSMWindowBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

boost::python::list CSMWindowBase_getMFViewports(OSG::CSMWindowBase *self)
{
   boost::python::list result;
   OSG::MFUnrecCSMViewportPtr const * mf_data = self->getMFViewports();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append(OSG::CSMViewport::ObjRecPtr((*mf_data)[i]));
   }
   return result;
}

boost::python::list CSMWindowBase_getMFIgnoreExtensions(OSG::CSMWindowBase *self)
{
   boost::python::list result;
   OSG::MFString const * mf_data = self->getMFIgnoreExtensions();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

void register_CSMWindowBase_class(){

    { //::OSG::CSMWindowBase
        typedef bp::class_< OSG::CSMWindowBase, bp::bases< ::OSG::AttachmentContainer >, boost::noncopyable > CSMWindowBase_exposer_t;
        CSMWindowBase_exposer_t CSMWindowBase_exposer = CSMWindowBase_exposer_t( "CSMWindowBase", bp::no_init );
        bp::scope CSMWindowBase_scope( CSMWindowBase_exposer );
        bp::scope().attr("ParentFieldId") = (int)OSG::CSMWindowBase::ParentFieldId;
        bp::scope().attr("ViewportsFieldId") = (int)OSG::CSMWindowBase::ViewportsFieldId;
        bp::scope().attr("MouseDataFieldId") = (int)OSG::CSMWindowBase::MouseDataFieldId;
        bp::scope().attr("MTouchDataFieldId") = (int)OSG::CSMWindowBase::MTouchDataFieldId;
        bp::scope().attr("MTouchDataWCFieldId") = (int)OSG::CSMWindowBase::MTouchDataWCFieldId;
        bp::scope().attr("GestureDataFieldId") = (int)OSG::CSMWindowBase::GestureDataFieldId;
        bp::scope().attr("MouseAsMTouchFieldId") = (int)OSG::CSMWindowBase::MouseAsMTouchFieldId;
        bp::scope().attr("SizeFieldId") = (int)OSG::CSMWindowBase::SizeFieldId;
        bp::scope().attr("PositionFieldId") = (int)OSG::CSMWindowBase::PositionFieldId;
        bp::scope().attr("DecorEnabledFieldId") = (int)OSG::CSMWindowBase::DecorEnabledFieldId;
        bp::scope().attr("RequestMajorFieldId") = (int)OSG::CSMWindowBase::RequestMajorFieldId;
        bp::scope().attr("RequestMinorFieldId") = (int)OSG::CSMWindowBase::RequestMinorFieldId;
        bp::scope().attr("EnableForwardCompatContextFieldId") = (int)OSG::CSMWindowBase::EnableForwardCompatContextFieldId;
        bp::scope().attr("EnableDebugContextFieldId") = (int)OSG::CSMWindowBase::EnableDebugContextFieldId;
        bp::scope().attr("IgnoreExtensionsFieldId") = (int)OSG::CSMWindowBase::IgnoreExtensionsFieldId;
        bp::scope().attr("IgnoreAllExtensionsFieldId") = (int)OSG::CSMWindowBase::IgnoreAllExtensionsFieldId;
        bp::scope().attr("RequestSamplesFieldId") = (int)OSG::CSMWindowBase::RequestSamplesFieldId;
        bp::scope().attr("EnableFSAAFieldId") = (int)OSG::CSMWindowBase::EnableFSAAFieldId;
        bp::scope().attr("FsaaHintFieldId") = (int)OSG::CSMWindowBase::FsaaHintFieldId;
        bp::scope().attr("RenderOptionsFieldId") = (int)OSG::CSMWindowBase::RenderOptionsFieldId;
        bp::scope().attr("PartitionDrawModeFieldId") = (int)OSG::CSMWindowBase::PartitionDrawModeFieldId;
        bp::scope().attr("RegisterMainLoopFieldId") = (int)OSG::CSMWindowBase::RegisterMainLoopFieldId;
        bp::scope().attr("DumpContainerFieldId") = (int)OSG::CSMWindowBase::DumpContainerFieldId;
        bp::scope().attr("WindowStateFieldId") = (int)OSG::CSMWindowBase::WindowStateFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::CSMWindowBase::NextFieldId;
        { //::OSG::CSMWindowBase::assignViewports
        
            typedef void ( ::OSG::CSMWindowBase::*assignViewports_function_type )( ::OSG::MFUnrecCSMViewportPtr const & ) ;
            
            CSMWindowBase_exposer.def( 
                "assignViewports"
                , assignViewports_function_type( &::OSG::CSMWindowBase::assignViewports )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMWindowBase::clearViewports
        
            typedef void ( ::OSG::CSMWindowBase::*clearViewports_function_type )(  ) ;
            
            CSMWindowBase_exposer.def( 
                "clearViewports"
                , clearViewports_function_type( &::OSG::CSMWindowBase::clearViewports ) );
        
        }
        { //::OSG::CSMWindowBase::copyFromBin
        
            typedef void ( ::OSG::CSMWindowBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            CSMWindowBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::CSMWindowBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::CSMWindowBase::copyToBin
        
            typedef void ( ::OSG::CSMWindowBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            CSMWindowBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::CSMWindowBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::CSMWindowBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::CSMWindowBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            CSMWindowBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::CSMWindowBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::CSMWindowBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            CSMWindowBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::CSMWindowBase::getClassGroupId ) );
        
        }
        { //::OSG::CSMWindowBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            CSMWindowBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::CSMWindowBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::CSMWindowBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            CSMWindowBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::CSMWindowBase::getClassTypeId ) );
        
        }
        { //::OSG::CSMWindowBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::CSMWindowBase::*getContainerSize_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::CSMWindowBase::getContainerSize ) );
        
        }
        { //::OSG::CSMWindowBase::getDecorEnabled
        
            typedef bool ( ::OSG::CSMWindowBase::*getDecorEnabled_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getDecorEnabled"
                , getDecorEnabled_function_type( &::OSG::CSMWindowBase::getDecorEnabled ) );
        
        }
        { //::OSG::CSMWindowBase::getDumpContainer
        
            typedef bool ( ::OSG::CSMWindowBase::*getDumpContainer_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getDumpContainer"
                , getDumpContainer_function_type( &::OSG::CSMWindowBase::getDumpContainer ) );
        
        }
        { //::OSG::CSMWindowBase::getEnableDebugContext
        
            typedef bool ( ::OSG::CSMWindowBase::*getEnableDebugContext_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getEnableDebugContext"
                , getEnableDebugContext_function_type( &::OSG::CSMWindowBase::getEnableDebugContext ) );
        
        }
        { //::OSG::CSMWindowBase::getEnableFSAA
        
            typedef bool ( ::OSG::CSMWindowBase::*getEnableFSAA_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getEnableFSAA"
                , getEnableFSAA_function_type( &::OSG::CSMWindowBase::getEnableFSAA ) );
        
        }
        { //::OSG::CSMWindowBase::getEnableForwardCompatContext
        
            typedef bool ( ::OSG::CSMWindowBase::*getEnableForwardCompatContext_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getEnableForwardCompatContext"
                , getEnableForwardCompatContext_function_type( &::OSG::CSMWindowBase::getEnableForwardCompatContext ) );
        
        }
        { //::OSG::CSMWindowBase::getFsaaHint
        
            typedef ::OSG::UInt32 ( ::OSG::CSMWindowBase::*getFsaaHint_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getFsaaHint"
                , getFsaaHint_function_type( &::OSG::CSMWindowBase::getFsaaHint ) );
        
        }
        { //::OSG::CSMWindowBase::getGestureData
        
            typedef ::OSG::GestureData const & ( ::OSG::CSMWindowBase::*getGestureData_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getGestureData"
                , getGestureData_function_type( &::OSG::CSMWindowBase::getGestureData )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::CSMWindowBase::getIgnoreAllExtensions
        
            typedef bool ( ::OSG::CSMWindowBase::*getIgnoreAllExtensions_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getIgnoreAllExtensions"
                , getIgnoreAllExtensions_function_type( &::OSG::CSMWindowBase::getIgnoreAllExtensions ) );
        
        }
        { //::OSG::CSMWindowBase::getIgnoreExtensions
        
            typedef ::std::string const & ( ::OSG::CSMWindowBase::*getIgnoreExtensions_function_type )( ::OSG::UInt32 const ) const;
            
            CSMWindowBase_exposer.def( 
                "getIgnoreExtensions"
                , getIgnoreExtensions_function_type( &::OSG::CSMWindowBase::getIgnoreExtensions )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::CSMWindowBase::getMTouchData
        
            typedef ::OSG::MTouchData const & ( ::OSG::CSMWindowBase::*getMTouchData_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getMTouchData"
                , getMTouchData_function_type( &::OSG::CSMWindowBase::getMTouchData )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::CSMWindowBase::getMTouchDataWC
        
            typedef ::OSG::MTouchData const & ( ::OSG::CSMWindowBase::*getMTouchDataWC_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getMTouchDataWC"
                , getMTouchDataWC_function_type( &::OSG::CSMWindowBase::getMTouchDataWC )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::CSMWindowBase::getMouseAsMTouch
        
            typedef bool ( ::OSG::CSMWindowBase::*getMouseAsMTouch_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getMouseAsMTouch"
                , getMouseAsMTouch_function_type( &::OSG::CSMWindowBase::getMouseAsMTouch ) );
        
        }
        { //::OSG::CSMWindowBase::getMouseData
        
            typedef ::OSG::MouseData const & ( ::OSG::CSMWindowBase::*getMouseData_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getMouseData"
                , getMouseData_function_type( &::OSG::CSMWindowBase::getMouseData )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::CSMWindowBase::getPartitionDrawMode
        
            typedef ::OSG::UInt32 ( ::OSG::CSMWindowBase::*getPartitionDrawMode_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getPartitionDrawMode"
                , getPartitionDrawMode_function_type( &::OSG::CSMWindowBase::getPartitionDrawMode ) );
        
        }
        { //::OSG::CSMWindowBase::getPosition
        
            typedef ::OSG::Vec2f const & ( ::OSG::CSMWindowBase::*getPosition_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getPosition"
                , getPosition_function_type( &::OSG::CSMWindowBase::getPosition )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::CSMWindowBase::getRegisterMainLoop
        
            typedef bool ( ::OSG::CSMWindowBase::*getRegisterMainLoop_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getRegisterMainLoop"
                , getRegisterMainLoop_function_type( &::OSG::CSMWindowBase::getRegisterMainLoop ) );
        
        }
        { //::OSG::CSMWindowBase::getRenderOptions
        
            typedef ::OSG::RenderOptions * ( ::OSG::CSMWindowBase::*getRenderOptions_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getRenderOptions"
                , getRenderOptions_function_type( &::OSG::CSMWindowBase::getRenderOptions )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMWindowBase::getRequestMajor
        
            typedef ::OSG::Int32 ( ::OSG::CSMWindowBase::*getRequestMajor_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getRequestMajor"
                , getRequestMajor_function_type( &::OSG::CSMWindowBase::getRequestMajor ) );
        
        }
        { //::OSG::CSMWindowBase::getRequestMinor
        
            typedef ::OSG::Int32 ( ::OSG::CSMWindowBase::*getRequestMinor_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getRequestMinor"
                , getRequestMinor_function_type( &::OSG::CSMWindowBase::getRequestMinor ) );
        
        }
        { //::OSG::CSMWindowBase::getRequestSamples
        
            typedef ::OSG::UInt32 ( ::OSG::CSMWindowBase::*getRequestSamples_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getRequestSamples"
                , getRequestSamples_function_type( &::OSG::CSMWindowBase::getRequestSamples ) );
        
        }
        { //::OSG::CSMWindowBase::getSFDecorEnabled
        
            typedef ::OSG::SFBool const * ( ::OSG::CSMWindowBase::*getSFDecorEnabled_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getSFDecorEnabled"
                , getSFDecorEnabled_function_type( &::OSG::CSMWindowBase::getSFDecorEnabled )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMWindowBase::getSFDumpContainer
        
            typedef ::OSG::SFBool const * ( ::OSG::CSMWindowBase::*getSFDumpContainer_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getSFDumpContainer"
                , getSFDumpContainer_function_type( &::OSG::CSMWindowBase::getSFDumpContainer )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMWindowBase::getSFEnableDebugContext
        
            typedef ::OSG::SFBool const * ( ::OSG::CSMWindowBase::*getSFEnableDebugContext_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getSFEnableDebugContext"
                , getSFEnableDebugContext_function_type( &::OSG::CSMWindowBase::getSFEnableDebugContext )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMWindowBase::getSFEnableFSAA
        
            typedef ::OSG::SFBool const * ( ::OSG::CSMWindowBase::*getSFEnableFSAA_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getSFEnableFSAA"
                , getSFEnableFSAA_function_type( &::OSG::CSMWindowBase::getSFEnableFSAA )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMWindowBase::getSFEnableForwardCompatContext
        
            typedef ::OSG::SFBool const * ( ::OSG::CSMWindowBase::*getSFEnableForwardCompatContext_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getSFEnableForwardCompatContext"
                , getSFEnableForwardCompatContext_function_type( &::OSG::CSMWindowBase::getSFEnableForwardCompatContext )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMWindowBase::getSFFsaaHint
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::CSMWindowBase::*getSFFsaaHint_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getSFFsaaHint"
                , getSFFsaaHint_function_type( &::OSG::CSMWindowBase::getSFFsaaHint )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMWindowBase::getSFGestureData
        
            typedef ::OSG::SFGestureData const * ( ::OSG::CSMWindowBase::*getSFGestureData_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getSFGestureData"
                , getSFGestureData_function_type( &::OSG::CSMWindowBase::getSFGestureData )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMWindowBase::getSFIgnoreAllExtensions
        
            typedef ::OSG::SFBool const * ( ::OSG::CSMWindowBase::*getSFIgnoreAllExtensions_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getSFIgnoreAllExtensions"
                , getSFIgnoreAllExtensions_function_type( &::OSG::CSMWindowBase::getSFIgnoreAllExtensions )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMWindowBase::getSFMTouchData
        
            typedef ::OSG::SFMTouchData const * ( ::OSG::CSMWindowBase::*getSFMTouchData_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getSFMTouchData"
                , getSFMTouchData_function_type( &::OSG::CSMWindowBase::getSFMTouchData )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMWindowBase::getSFMTouchDataWC
        
            typedef ::OSG::SFMTouchData const * ( ::OSG::CSMWindowBase::*getSFMTouchDataWC_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getSFMTouchDataWC"
                , getSFMTouchDataWC_function_type( &::OSG::CSMWindowBase::getSFMTouchDataWC )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMWindowBase::getSFMouseAsMTouch
        
            typedef ::OSG::SFBool const * ( ::OSG::CSMWindowBase::*getSFMouseAsMTouch_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getSFMouseAsMTouch"
                , getSFMouseAsMTouch_function_type( &::OSG::CSMWindowBase::getSFMouseAsMTouch )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMWindowBase::getSFMouseData
        
            typedef ::OSG::SFMouseData const * ( ::OSG::CSMWindowBase::*getSFMouseData_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getSFMouseData"
                , getSFMouseData_function_type( &::OSG::CSMWindowBase::getSFMouseData )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMWindowBase::getSFPartitionDrawMode
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::CSMWindowBase::*getSFPartitionDrawMode_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getSFPartitionDrawMode"
                , getSFPartitionDrawMode_function_type( &::OSG::CSMWindowBase::getSFPartitionDrawMode )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMWindowBase::getSFPosition
        
            typedef ::OSG::SFVec2f const * ( ::OSG::CSMWindowBase::*getSFPosition_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getSFPosition"
                , getSFPosition_function_type( &::OSG::CSMWindowBase::getSFPosition )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMWindowBase::getSFRegisterMainLoop
        
            typedef ::OSG::SFBool const * ( ::OSG::CSMWindowBase::*getSFRegisterMainLoop_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getSFRegisterMainLoop"
                , getSFRegisterMainLoop_function_type( &::OSG::CSMWindowBase::getSFRegisterMainLoop )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMWindowBase::getSFRenderOptions
        
            typedef ::OSG::SFUnrecRenderOptionsPtr const * ( ::OSG::CSMWindowBase::*getSFRenderOptions_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getSFRenderOptions"
                , getSFRenderOptions_function_type( &::OSG::CSMWindowBase::getSFRenderOptions )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMWindowBase::getSFRequestMajor
        
            typedef ::OSG::SFInt32 const * ( ::OSG::CSMWindowBase::*getSFRequestMajor_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getSFRequestMajor"
                , getSFRequestMajor_function_type( &::OSG::CSMWindowBase::getSFRequestMajor )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMWindowBase::getSFRequestMinor
        
            typedef ::OSG::SFInt32 const * ( ::OSG::CSMWindowBase::*getSFRequestMinor_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getSFRequestMinor"
                , getSFRequestMinor_function_type( &::OSG::CSMWindowBase::getSFRequestMinor )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMWindowBase::getSFRequestSamples
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::CSMWindowBase::*getSFRequestSamples_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getSFRequestSamples"
                , getSFRequestSamples_function_type( &::OSG::CSMWindowBase::getSFRequestSamples )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMWindowBase::getSFSize
        
            typedef ::OSG::SFVec2f const * ( ::OSG::CSMWindowBase::*getSFSize_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getSFSize"
                , getSFSize_function_type( &::OSG::CSMWindowBase::getSFSize )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMWindowBase::getSFWindowState
        
            typedef ::OSG::SFInt32 const * ( ::OSG::CSMWindowBase::*getSFWindowState_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getSFWindowState"
                , getSFWindowState_function_type( &::OSG::CSMWindowBase::getSFWindowState )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMWindowBase::getSize
        
            typedef ::OSG::Vec2f const & ( ::OSG::CSMWindowBase::*getSize_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getSize"
                , getSize_function_type( &::OSG::CSMWindowBase::getSize )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::CSMWindowBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::CSMWindowBase::*getType_function_type )(  ) ;
            
            CSMWindowBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::CSMWindowBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMWindowBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::CSMWindowBase::*getType_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::CSMWindowBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMWindowBase::getViewports
        
            typedef ::OSG::CSMViewport * ( ::OSG::CSMWindowBase::*getViewports_function_type )( ::OSG::UInt32 const ) const;
            
            CSMWindowBase_exposer.def( 
                "getViewports"
                , getViewports_function_type( &::OSG::CSMWindowBase::getViewports )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMWindowBase::getWindowState
        
            typedef ::OSG::Int32 ( ::OSG::CSMWindowBase::*getWindowState_function_type )(  ) const;
            
            CSMWindowBase_exposer.def( 
                "getWindowState"
                , getWindowState_function_type( &::OSG::CSMWindowBase::getWindowState ) );
        
        }
        { //::OSG::CSMWindowBase::pushToViewports
        
            typedef void ( ::OSG::CSMWindowBase::*pushToViewports_function_type )( ::OSG::CSMViewport * const ) ;
            
            CSMWindowBase_exposer.def( 
                "pushToViewports"
                , pushToViewports_function_type( &::OSG::CSMWindowBase::pushToViewports )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMWindowBase::removeFromViewports
        
            typedef void ( ::OSG::CSMWindowBase::*removeFromViewports_function_type )( ::OSG::UInt32 ) ;
            
            CSMWindowBase_exposer.def( 
                "removeFromViewports"
                , removeFromViewports_function_type( &::OSG::CSMWindowBase::removeFromViewports )
                , ( bp::arg("uiIndex") ) );
        
        }
        { //::OSG::CSMWindowBase::removeObjFromViewports
        
            typedef void ( ::OSG::CSMWindowBase::*removeObjFromViewports_function_type )( ::OSG::CSMViewport * const ) ;
            
            CSMWindowBase_exposer.def( 
                "removeObjFromViewports"
                , removeObjFromViewports_function_type( &::OSG::CSMWindowBase::removeObjFromViewports )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMWindowBase::setDecorEnabled
        
            typedef void ( ::OSG::CSMWindowBase::*setDecorEnabled_function_type )( bool const ) ;
            
            CSMWindowBase_exposer.def( 
                "setDecorEnabled"
                , setDecorEnabled_function_type( &::OSG::CSMWindowBase::setDecorEnabled )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMWindowBase::setDumpContainer
        
            typedef void ( ::OSG::CSMWindowBase::*setDumpContainer_function_type )( bool const ) ;
            
            CSMWindowBase_exposer.def( 
                "setDumpContainer"
                , setDumpContainer_function_type( &::OSG::CSMWindowBase::setDumpContainer )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMWindowBase::setEnableDebugContext
        
            typedef void ( ::OSG::CSMWindowBase::*setEnableDebugContext_function_type )( bool const ) ;
            
            CSMWindowBase_exposer.def( 
                "setEnableDebugContext"
                , setEnableDebugContext_function_type( &::OSG::CSMWindowBase::setEnableDebugContext )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMWindowBase::setEnableFSAA
        
            typedef void ( ::OSG::CSMWindowBase::*setEnableFSAA_function_type )( bool const ) ;
            
            CSMWindowBase_exposer.def( 
                "setEnableFSAA"
                , setEnableFSAA_function_type( &::OSG::CSMWindowBase::setEnableFSAA )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMWindowBase::setEnableForwardCompatContext
        
            typedef void ( ::OSG::CSMWindowBase::*setEnableForwardCompatContext_function_type )( bool const ) ;
            
            CSMWindowBase_exposer.def( 
                "setEnableForwardCompatContext"
                , setEnableForwardCompatContext_function_type( &::OSG::CSMWindowBase::setEnableForwardCompatContext )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMWindowBase::setFsaaHint
        
            typedef void ( ::OSG::CSMWindowBase::*setFsaaHint_function_type )( ::OSG::UInt32 const ) ;
            
            CSMWindowBase_exposer.def( 
                "setFsaaHint"
                , setFsaaHint_function_type( &::OSG::CSMWindowBase::setFsaaHint )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMWindowBase::setGestureData
        
            typedef void ( ::OSG::CSMWindowBase::*setGestureData_function_type )( ::OSG::GestureData const & ) ;
            
            CSMWindowBase_exposer.def( 
                "setGestureData"
                , setGestureData_function_type( &::OSG::CSMWindowBase::setGestureData )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMWindowBase::setIgnoreAllExtensions
        
            typedef void ( ::OSG::CSMWindowBase::*setIgnoreAllExtensions_function_type )( bool const ) ;
            
            CSMWindowBase_exposer.def( 
                "setIgnoreAllExtensions"
                , setIgnoreAllExtensions_function_type( &::OSG::CSMWindowBase::setIgnoreAllExtensions )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMWindowBase::setMTouchData
        
            typedef void ( ::OSG::CSMWindowBase::*setMTouchData_function_type )( ::OSG::MTouchData const & ) ;
            
            CSMWindowBase_exposer.def( 
                "setMTouchData"
                , setMTouchData_function_type( &::OSG::CSMWindowBase::setMTouchData )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMWindowBase::setMTouchDataWC
        
            typedef void ( ::OSG::CSMWindowBase::*setMTouchDataWC_function_type )( ::OSG::MTouchData const & ) ;
            
            CSMWindowBase_exposer.def( 
                "setMTouchDataWC"
                , setMTouchDataWC_function_type( &::OSG::CSMWindowBase::setMTouchDataWC )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMWindowBase::setMouseAsMTouch
        
            typedef void ( ::OSG::CSMWindowBase::*setMouseAsMTouch_function_type )( bool const ) ;
            
            CSMWindowBase_exposer.def( 
                "setMouseAsMTouch"
                , setMouseAsMTouch_function_type( &::OSG::CSMWindowBase::setMouseAsMTouch )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMWindowBase::setMouseData
        
            typedef void ( ::OSG::CSMWindowBase::*setMouseData_function_type )( ::OSG::MouseData const & ) ;
            
            CSMWindowBase_exposer.def( 
                "setMouseData"
                , setMouseData_function_type( &::OSG::CSMWindowBase::setMouseData )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMWindowBase::setPartitionDrawMode
        
            typedef void ( ::OSG::CSMWindowBase::*setPartitionDrawMode_function_type )( ::OSG::UInt32 const ) ;
            
            CSMWindowBase_exposer.def( 
                "setPartitionDrawMode"
                , setPartitionDrawMode_function_type( &::OSG::CSMWindowBase::setPartitionDrawMode )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMWindowBase::setPosition
        
            typedef void ( ::OSG::CSMWindowBase::*setPosition_function_type )( ::OSG::Vec2f const & ) ;
            
            CSMWindowBase_exposer.def( 
                "setPosition"
                , setPosition_function_type( &::OSG::CSMWindowBase::setPosition )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMWindowBase::setRegisterMainLoop
        
            typedef void ( ::OSG::CSMWindowBase::*setRegisterMainLoop_function_type )( bool const ) ;
            
            CSMWindowBase_exposer.def( 
                "setRegisterMainLoop"
                , setRegisterMainLoop_function_type( &::OSG::CSMWindowBase::setRegisterMainLoop )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMWindowBase::setRenderOptions
        
            typedef void ( ::OSG::CSMWindowBase::*setRenderOptions_function_type )( ::OSG::RenderOptions * const ) ;
            
            CSMWindowBase_exposer.def( 
                "setRenderOptions"
                , setRenderOptions_function_type( &::OSG::CSMWindowBase::setRenderOptions )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMWindowBase::setRequestMajor
        
            typedef void ( ::OSG::CSMWindowBase::*setRequestMajor_function_type )( ::OSG::Int32 const ) ;
            
            CSMWindowBase_exposer.def( 
                "setRequestMajor"
                , setRequestMajor_function_type( &::OSG::CSMWindowBase::setRequestMajor )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMWindowBase::setRequestMinor
        
            typedef void ( ::OSG::CSMWindowBase::*setRequestMinor_function_type )( ::OSG::Int32 const ) ;
            
            CSMWindowBase_exposer.def( 
                "setRequestMinor"
                , setRequestMinor_function_type( &::OSG::CSMWindowBase::setRequestMinor )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMWindowBase::setRequestSamples
        
            typedef void ( ::OSG::CSMWindowBase::*setRequestSamples_function_type )( ::OSG::UInt32 const ) ;
            
            CSMWindowBase_exposer.def( 
                "setRequestSamples"
                , setRequestSamples_function_type( &::OSG::CSMWindowBase::setRequestSamples )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMWindowBase::setSize
        
            typedef void ( ::OSG::CSMWindowBase::*setSize_function_type )( ::OSG::Vec2f const & ) ;
            
            CSMWindowBase_exposer.def( 
                "setSize"
                , setSize_function_type( &::OSG::CSMWindowBase::setSize )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMWindowBase::setWindowState
        
            typedef void ( ::OSG::CSMWindowBase::*setWindowState_function_type )( ::OSG::Int32 const ) ;
            
            CSMWindowBase_exposer.def( 
                "setWindowState"
                , setWindowState_function_type( &::OSG::CSMWindowBase::setWindowState )
                , ( bp::arg("value") ) );
        
        }
        CSMWindowBase_exposer.staticmethod( "getClassGroupId" );
        CSMWindowBase_exposer.staticmethod( "getClassType" );
        CSMWindowBase_exposer.staticmethod( "getClassTypeId" );
        CSMWindowBase_exposer.def("getMFViewports",CSMWindowBase_getMFViewports);
        CSMWindowBase_exposer.def("getMFIgnoreExtensions",CSMWindowBase_getMFIgnoreExtensions);
    }

}
