// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGContribCSM_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "MouseDataInterfaceSensorBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct MouseDataInterfaceSensorBase_wrapper : OSG::MouseDataInterfaceSensorBase, bp::wrapper< OSG::MouseDataInterfaceSensorBase > {

    virtual void frame( ::OSG::Time oTime, ::OSG::UInt32 uiFrame ){
        bp::override func_frame = this->get_override( "frame" );
        func_frame( oTime, uiFrame );
    }

};

void register_MouseDataInterfaceSensorBase_class(){

    { //::OSG::MouseDataInterfaceSensorBase
        typedef bp::class_< MouseDataInterfaceSensorBase_wrapper, bp::bases< OSG::DeviceInterfaceSensor >, boost::noncopyable > MouseDataInterfaceSensorBase_exposer_t;
        MouseDataInterfaceSensorBase_exposer_t MouseDataInterfaceSensorBase_exposer = MouseDataInterfaceSensorBase_exposer_t( "MouseDataInterfaceSensorBase", bp::no_init );
        bp::scope MouseDataInterfaceSensorBase_scope( MouseDataInterfaceSensorBase_exposer );
        bp::scope().attr("MouseDataFieldId") = (int)OSG::MouseDataInterfaceSensorBase::MouseDataFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::MouseDataInterfaceSensorBase::NextFieldId;
        { //::OSG::MouseDataInterfaceSensorBase::copyFromBin
        
            typedef void ( ::OSG::MouseDataInterfaceSensorBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            MouseDataInterfaceSensorBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::MouseDataInterfaceSensorBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::MouseDataInterfaceSensorBase::copyToBin
        
            typedef void ( ::OSG::MouseDataInterfaceSensorBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            MouseDataInterfaceSensorBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::MouseDataInterfaceSensorBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::MouseDataInterfaceSensorBase::create
        
            typedef ::OSG::MouseDataInterfaceSensorTransitPtr ( *create_function_type )(  );
            
            MouseDataInterfaceSensorBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::MouseDataInterfaceSensorBase::create ) );
        
        }
        { //::OSG::MouseDataInterfaceSensorBase::createDependent
        
            typedef ::OSG::MouseDataInterfaceSensorTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            MouseDataInterfaceSensorBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::MouseDataInterfaceSensorBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::MouseDataInterfaceSensorBase::createLocal
        
            typedef ::OSG::MouseDataInterfaceSensorTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            MouseDataInterfaceSensorBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::MouseDataInterfaceSensorBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::MouseDataInterfaceSensorBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::MouseDataInterfaceSensorBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            MouseDataInterfaceSensorBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::MouseDataInterfaceSensorBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::MouseDataInterfaceSensorBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            MouseDataInterfaceSensorBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::MouseDataInterfaceSensorBase::getClassGroupId ) );
        
        }
        { //::OSG::MouseDataInterfaceSensorBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            MouseDataInterfaceSensorBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::MouseDataInterfaceSensorBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::MouseDataInterfaceSensorBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            MouseDataInterfaceSensorBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::MouseDataInterfaceSensorBase::getClassTypeId ) );
        
        }
        { //::OSG::MouseDataInterfaceSensorBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::MouseDataInterfaceSensorBase::*getContainerSize_function_type )(  ) const;
            
            MouseDataInterfaceSensorBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::MouseDataInterfaceSensorBase::getContainerSize ) );
        
        }
        { //::OSG::MouseDataInterfaceSensorBase::getMouseData
        
            typedef ::OSG::MouseData const & ( ::OSG::MouseDataInterfaceSensorBase::*getMouseData_function_type )(  ) const;
            
            MouseDataInterfaceSensorBase_exposer.def( 
                "getMouseData"
                , getMouseData_function_type( &::OSG::MouseDataInterfaceSensorBase::getMouseData )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::MouseDataInterfaceSensorBase::getSFMouseData
        
            typedef ::OSG::SFMouseData const * ( ::OSG::MouseDataInterfaceSensorBase::*getSFMouseData_function_type )(  ) const;
            
            MouseDataInterfaceSensorBase_exposer.def( 
                "getSFMouseData"
                , getSFMouseData_function_type( &::OSG::MouseDataInterfaceSensorBase::getSFMouseData )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::MouseDataInterfaceSensorBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::MouseDataInterfaceSensorBase::*getType_function_type )(  ) ;
            
            MouseDataInterfaceSensorBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::MouseDataInterfaceSensorBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::MouseDataInterfaceSensorBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::MouseDataInterfaceSensorBase::*getType_function_type )(  ) const;
            
            MouseDataInterfaceSensorBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::MouseDataInterfaceSensorBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::MouseDataInterfaceSensorBase::setMouseData
        
            typedef void ( ::OSG::MouseDataInterfaceSensorBase::*setMouseData_function_type )( ::OSG::MouseData const & ) ;
            
            MouseDataInterfaceSensorBase_exposer.def( 
                "setMouseData"
                , setMouseData_function_type( &::OSG::MouseDataInterfaceSensorBase::setMouseData )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::FrameTaskInterface::frame
        
            typedef void ( ::OSG::FrameTaskInterface::*frame_function_type )( ::OSG::Time,::OSG::UInt32 ) ;
            
            MouseDataInterfaceSensorBase_exposer.def( 
                "frame"
                , bp::pure_virtual( frame_function_type(&::OSG::FrameTaskInterface::frame) )
                , ( bp::arg("oTime"), bp::arg("uiFrame") ) );
        
        }
        MouseDataInterfaceSensorBase_exposer.staticmethod( "create" );
        MouseDataInterfaceSensorBase_exposer.staticmethod( "createDependent" );
        MouseDataInterfaceSensorBase_exposer.staticmethod( "createLocal" );
        MouseDataInterfaceSensorBase_exposer.staticmethod( "getClassGroupId" );
        MouseDataInterfaceSensorBase_exposer.staticmethod( "getClassType" );
        MouseDataInterfaceSensorBase_exposer.staticmethod( "getClassTypeId" );
    }

}
