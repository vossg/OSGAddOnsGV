// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGContribCSM_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "CSMClusterWindowBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct CSMClusterWindowBase_wrapper : OSG::CSMClusterWindowBase, bp::wrapper< OSG::CSMClusterWindowBase > {

    void terminateGLContext(  ){
        OSG::CSMWindow::terminateGLContext(  );
    }

};

boost::python::list CSMClusterWindowBase_getMFServers(OSG::CSMClusterWindowBase *self)
{
   boost::python::list result;
   OSG::MFString const * mf_data = self->getMFServers();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list CSMClusterWindowBase_getMFServerIds(OSG::CSMClusterWindowBase *self)
{
   boost::python::list result;
   OSG::MFUInt32 const * mf_data = self->getMFServerIds();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

void register_CSMClusterWindowBase_class(){

    { //::OSG::CSMClusterWindowBase
        typedef bp::class_< CSMClusterWindowBase_wrapper, bp::bases< OSG::CSMWindow >, boost::noncopyable > CSMClusterWindowBase_exposer_t;
        CSMClusterWindowBase_exposer_t CSMClusterWindowBase_exposer = CSMClusterWindowBase_exposer_t( "CSMClusterWindowBase", bp::no_init );
        bp::scope CSMClusterWindowBase_scope( CSMClusterWindowBase_exposer );
        bp::scope().attr("ClientWindowFieldId") = (int)OSG::CSMClusterWindowBase::ClientWindowFieldId;
        bp::scope().attr("RenderClientFieldId") = (int)OSG::CSMClusterWindowBase::RenderClientFieldId;
        bp::scope().attr("ServersFieldId") = (int)OSG::CSMClusterWindowBase::ServersFieldId;
        bp::scope().attr("ServerIdsFieldId") = (int)OSG::CSMClusterWindowBase::ServerIdsFieldId;
        bp::scope().attr("ServerRowsFieldId") = (int)OSG::CSMClusterWindowBase::ServerRowsFieldId;
        bp::scope().attr("ConnectionTypeFieldId") = (int)OSG::CSMClusterWindowBase::ConnectionTypeFieldId;
        bp::scope().attr("ClusterModeFieldId") = (int)OSG::CSMClusterWindowBase::ClusterModeFieldId;
        bp::scope().attr("ComposerFieldId") = (int)OSG::CSMClusterWindowBase::ComposerFieldId;
        bp::scope().attr("OptionsFieldId") = (int)OSG::CSMClusterWindowBase::OptionsFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::CSMClusterWindowBase::NextFieldId;
        { //::OSG::CSMClusterWindowBase::copyFromBin
        
            typedef void ( ::OSG::CSMClusterWindowBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            CSMClusterWindowBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::CSMClusterWindowBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::CSMClusterWindowBase::copyToBin
        
            typedef void ( ::OSG::CSMClusterWindowBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            CSMClusterWindowBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::CSMClusterWindowBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::CSMClusterWindowBase::create
        
            typedef ::OSG::CSMClusterWindowTransitPtr ( *create_function_type )(  );
            
            CSMClusterWindowBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::CSMClusterWindowBase::create ) );
        
        }
        { //::OSG::CSMClusterWindowBase::createDependent
        
            typedef ::OSG::CSMClusterWindowTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            CSMClusterWindowBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::CSMClusterWindowBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::CSMClusterWindowBase::createLocal
        
            typedef ::OSG::CSMClusterWindowTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            CSMClusterWindowBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::CSMClusterWindowBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::CSMClusterWindowBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::CSMClusterWindowBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            CSMClusterWindowBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::CSMClusterWindowBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::CSMClusterWindowBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            CSMClusterWindowBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::CSMClusterWindowBase::getClassGroupId ) );
        
        }
        { //::OSG::CSMClusterWindowBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            CSMClusterWindowBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::CSMClusterWindowBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::CSMClusterWindowBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            CSMClusterWindowBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::CSMClusterWindowBase::getClassTypeId ) );
        
        }
        { //::OSG::CSMClusterWindowBase::getClientWindow
        
            typedef ::OSG::CSMWindow * ( ::OSG::CSMClusterWindowBase::*getClientWindow_function_type )(  ) const;
            
            CSMClusterWindowBase_exposer.def( 
                "getClientWindow"
                , getClientWindow_function_type( &::OSG::CSMClusterWindowBase::getClientWindow )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMClusterWindowBase::getClusterMode
        
            typedef ::std::string const & ( ::OSG::CSMClusterWindowBase::*getClusterMode_function_type )(  ) const;
            
            CSMClusterWindowBase_exposer.def( 
                "getClusterMode"
                , getClusterMode_function_type( &::OSG::CSMClusterWindowBase::getClusterMode )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::CSMClusterWindowBase::getComposer
        
            typedef ::OSG::ImageComposer * ( ::OSG::CSMClusterWindowBase::*getComposer_function_type )(  ) const;
            
            CSMClusterWindowBase_exposer.def( 
                "getComposer"
                , getComposer_function_type( &::OSG::CSMClusterWindowBase::getComposer )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMClusterWindowBase::getConnectionType
        
            typedef ::std::string const & ( ::OSG::CSMClusterWindowBase::*getConnectionType_function_type )(  ) const;
            
            CSMClusterWindowBase_exposer.def( 
                "getConnectionType"
                , getConnectionType_function_type( &::OSG::CSMClusterWindowBase::getConnectionType )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::CSMClusterWindowBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::CSMClusterWindowBase::*getContainerSize_function_type )(  ) const;
            
            CSMClusterWindowBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::CSMClusterWindowBase::getContainerSize ) );
        
        }
        { //::OSG::CSMClusterWindowBase::getOptions
        
            typedef ::OSG::CSMClusterWinOptions * ( ::OSG::CSMClusterWindowBase::*getOptions_function_type )(  ) const;
            
            CSMClusterWindowBase_exposer.def( 
                "getOptions"
                , getOptions_function_type( &::OSG::CSMClusterWindowBase::getOptions )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMClusterWindowBase::getRenderClient
        
            typedef bool ( ::OSG::CSMClusterWindowBase::*getRenderClient_function_type )(  ) const;
            
            CSMClusterWindowBase_exposer.def( 
                "getRenderClient"
                , getRenderClient_function_type( &::OSG::CSMClusterWindowBase::getRenderClient ) );
        
        }
        { //::OSG::CSMClusterWindowBase::getSFClientWindow
        
            typedef ::OSG::SFUnrecChildCSMWindowPtr const * ( ::OSG::CSMClusterWindowBase::*getSFClientWindow_function_type )(  ) const;
            
            CSMClusterWindowBase_exposer.def( 
                "getSFClientWindow"
                , getSFClientWindow_function_type( &::OSG::CSMClusterWindowBase::getSFClientWindow )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMClusterWindowBase::getSFClusterMode
        
            typedef ::OSG::SFString const * ( ::OSG::CSMClusterWindowBase::*getSFClusterMode_function_type )(  ) const;
            
            CSMClusterWindowBase_exposer.def( 
                "getSFClusterMode"
                , getSFClusterMode_function_type( &::OSG::CSMClusterWindowBase::getSFClusterMode )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMClusterWindowBase::getSFComposer
        
            typedef ::OSG::SFUnrecImageComposerPtr const * ( ::OSG::CSMClusterWindowBase::*getSFComposer_function_type )(  ) const;
            
            CSMClusterWindowBase_exposer.def( 
                "getSFComposer"
                , getSFComposer_function_type( &::OSG::CSMClusterWindowBase::getSFComposer )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMClusterWindowBase::getSFConnectionType
        
            typedef ::OSG::SFString const * ( ::OSG::CSMClusterWindowBase::*getSFConnectionType_function_type )(  ) const;
            
            CSMClusterWindowBase_exposer.def( 
                "getSFConnectionType"
                , getSFConnectionType_function_type( &::OSG::CSMClusterWindowBase::getSFConnectionType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMClusterWindowBase::getSFOptions
        
            typedef ::OSG::SFUnrecChildCSMClusterWinOptionsPtr const * ( ::OSG::CSMClusterWindowBase::*getSFOptions_function_type )(  ) const;
            
            CSMClusterWindowBase_exposer.def( 
                "getSFOptions"
                , getSFOptions_function_type( &::OSG::CSMClusterWindowBase::getSFOptions )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMClusterWindowBase::getSFRenderClient
        
            typedef ::OSG::SFBool const * ( ::OSG::CSMClusterWindowBase::*getSFRenderClient_function_type )(  ) const;
            
            CSMClusterWindowBase_exposer.def( 
                "getSFRenderClient"
                , getSFRenderClient_function_type( &::OSG::CSMClusterWindowBase::getSFRenderClient )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMClusterWindowBase::getSFServerRows
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::CSMClusterWindowBase::*getSFServerRows_function_type )(  ) const;
            
            CSMClusterWindowBase_exposer.def( 
                "getSFServerRows"
                , getSFServerRows_function_type( &::OSG::CSMClusterWindowBase::getSFServerRows )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMClusterWindowBase::getServerIds
        
            typedef ::OSG::UInt32 ( ::OSG::CSMClusterWindowBase::*getServerIds_function_type )( ::OSG::UInt32 const ) const;
            
            CSMClusterWindowBase_exposer.def( 
                "getServerIds"
                , getServerIds_function_type( &::OSG::CSMClusterWindowBase::getServerIds )
                , ( bp::arg("index") ) );
        
        }
        { //::OSG::CSMClusterWindowBase::getServerRows
        
            typedef ::OSG::UInt32 ( ::OSG::CSMClusterWindowBase::*getServerRows_function_type )(  ) const;
            
            CSMClusterWindowBase_exposer.def( 
                "getServerRows"
                , getServerRows_function_type( &::OSG::CSMClusterWindowBase::getServerRows ) );
        
        }
        { //::OSG::CSMClusterWindowBase::getServers
        
            typedef ::std::string const & ( ::OSG::CSMClusterWindowBase::*getServers_function_type )( ::OSG::UInt32 const ) const;
            
            CSMClusterWindowBase_exposer.def( 
                "getServers"
                , getServers_function_type( &::OSG::CSMClusterWindowBase::getServers )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::CSMClusterWindowBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::CSMClusterWindowBase::*getType_function_type )(  ) ;
            
            CSMClusterWindowBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::CSMClusterWindowBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMClusterWindowBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::CSMClusterWindowBase::*getType_function_type )(  ) const;
            
            CSMClusterWindowBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::CSMClusterWindowBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CSMClusterWindowBase::setClientWindow
        
            typedef void ( ::OSG::CSMClusterWindowBase::*setClientWindow_function_type )( ::OSG::CSMWindow * const ) ;
            
            CSMClusterWindowBase_exposer.def( 
                "setClientWindow"
                , setClientWindow_function_type( &::OSG::CSMClusterWindowBase::setClientWindow )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMClusterWindowBase::setClusterMode
        
            typedef void ( ::OSG::CSMClusterWindowBase::*setClusterMode_function_type )( ::std::string const & ) ;
            
            CSMClusterWindowBase_exposer.def( 
                "setClusterMode"
                , setClusterMode_function_type( &::OSG::CSMClusterWindowBase::setClusterMode )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMClusterWindowBase::setComposer
        
            typedef void ( ::OSG::CSMClusterWindowBase::*setComposer_function_type )( ::OSG::ImageComposer * const ) ;
            
            CSMClusterWindowBase_exposer.def( 
                "setComposer"
                , setComposer_function_type( &::OSG::CSMClusterWindowBase::setComposer )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMClusterWindowBase::setConnectionType
        
            typedef void ( ::OSG::CSMClusterWindowBase::*setConnectionType_function_type )( ::std::string const & ) ;
            
            CSMClusterWindowBase_exposer.def( 
                "setConnectionType"
                , setConnectionType_function_type( &::OSG::CSMClusterWindowBase::setConnectionType )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMClusterWindowBase::setOptions
        
            typedef void ( ::OSG::CSMClusterWindowBase::*setOptions_function_type )( ::OSG::CSMClusterWinOptions * const ) ;
            
            CSMClusterWindowBase_exposer.def( 
                "setOptions"
                , setOptions_function_type( &::OSG::CSMClusterWindowBase::setOptions )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMClusterWindowBase::setRenderClient
        
            typedef void ( ::OSG::CSMClusterWindowBase::*setRenderClient_function_type )( bool const ) ;
            
            CSMClusterWindowBase_exposer.def( 
                "setRenderClient"
                , setRenderClient_function_type( &::OSG::CSMClusterWindowBase::setRenderClient )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMClusterWindowBase::setServerRows
        
            typedef void ( ::OSG::CSMClusterWindowBase::*setServerRows_function_type )( ::OSG::UInt32 const ) ;
            
            CSMClusterWindowBase_exposer.def( 
                "setServerRows"
                , setServerRows_function_type( &::OSG::CSMClusterWindowBase::setServerRows )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CSMWindow::terminateGLContext
        
            typedef void ( CSMClusterWindowBase_wrapper::*terminateGLContext_function_type )(  ) ;
            
            CSMClusterWindowBase_exposer.def( 
                "terminateGLContext"
                , terminateGLContext_function_type( &CSMClusterWindowBase_wrapper::terminateGLContext ) );
        
        }
        CSMClusterWindowBase_exposer.staticmethod( "create" );
        CSMClusterWindowBase_exposer.staticmethod( "createDependent" );
        CSMClusterWindowBase_exposer.staticmethod( "createLocal" );
        CSMClusterWindowBase_exposer.staticmethod( "getClassGroupId" );
        CSMClusterWindowBase_exposer.staticmethod( "getClassType" );
        CSMClusterWindowBase_exposer.staticmethod( "getClassTypeId" );
        CSMClusterWindowBase_exposer.def("getMFServers",CSMClusterWindowBase_getMFServers);
        CSMClusterWindowBase_exposer.def("getMFServerIds",CSMClusterWindowBase_getMFServerIds);
    }

}
