// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGContribCSM_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "CSMDrawer.pypp.hpp"

using namespace std;
namespace bp = boost::python;

namespace
{

OSG::FieldContainerRecPtr
wrapFindNamedComponent(OSG::CSMDrawer* self, const OSG::Char8* szName)
{
   return OSG::FieldContainerRecPtr(self->findNamedComponent(szName));
}

}

void register_CSMDrawer_class(){

    { //::OSG::CSMDrawer
        typedef bp::class_< OSG::CSMDrawer, bp::bases< OSG::CSMDrawerBase >, OSG::CSMDrawer::ObjRecPtr, boost::noncopyable > CSMDrawer_exposer_t;
        CSMDrawer_exposer_t CSMDrawer_exposer = CSMDrawer_exposer_t( "CSMDrawer", bp::no_init );
        bp::scope CSMDrawer_scope( CSMDrawer_exposer );
        { //::OSG::CSMDrawer::changed
        
            typedef void ( ::OSG::CSMDrawer::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            CSMDrawer_exposer.def( 
                "changed"
                , changed_function_type( &::OSG::CSMDrawer::changed )
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("details") ) );
        
        }
        { //::OSG::CSMDrawer::dump
        
            typedef void ( ::OSG::CSMDrawer::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            CSMDrawer_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::CSMDrawer::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::CSMDrawer::endDrawThread
        
            typedef void ( ::OSG::CSMDrawer::*endDrawThread_function_type )(  ) ;
            
            CSMDrawer_exposer.def( 
                "endDrawThread"
                , endDrawThread_function_type( &::OSG::CSMDrawer::endDrawThread ) );
        
        }
        { //::OSG::CSMDrawer::frame
        
            typedef void ( ::OSG::CSMDrawer::*frame_function_type )( ::OSG::Time,::OSG::UInt32 ) ;
            
            CSMDrawer_exposer.def( 
                "frame"
                , frame_function_type( &::OSG::CSMDrawer::frame )
                , ( bp::arg("oTime"), bp::arg("uiFrame") ) );
        
        }
        { //::OSG::CSMDrawer::init
        
            typedef bool ( ::OSG::CSMDrawer::*init_function_type )(  ) ;
            
            CSMDrawer_exposer.def( 
                "init"
                , init_function_type( &::OSG::CSMDrawer::init ) );
        
        }
        { //::OSG::CSMDrawer::joinDrawThread
        
            typedef void ( ::OSG::CSMDrawer::*joinDrawThread_function_type )(  ) ;
            
            CSMDrawer_exposer.def( 
                "joinDrawThread"
                , joinDrawThread_function_type( &::OSG::CSMDrawer::joinDrawThread ) );
        
        }
        { //::OSG::CSMDrawer::postSync
        
            typedef void ( ::OSG::CSMDrawer::*postSync_function_type )(  ) ;
            
            CSMDrawer_exposer.def( 
                "postSync"
                , postSync_function_type( &::OSG::CSMDrawer::postSync ) );
        
        }
        { //::OSG::CSMDrawer::resolveLinks
        
            typedef void ( ::OSG::CSMDrawer::*resolveLinks_function_type )(  ) ;
            
            CSMDrawer_exposer.def( 
                "resolveLinks"
                , resolveLinks_function_type( &::OSG::CSMDrawer::resolveLinks ) );
        
        }
        { //::OSG::CSMDrawer::setParallel
        
            typedef void ( ::OSG::CSMDrawer::*setParallel_function_type )( bool ) ;
            
            CSMDrawer_exposer.def( 
                "setParallel"
                , setParallel_function_type( &::OSG::CSMDrawer::setParallel )
                , ( bp::arg("bParallel") ) );
        
        }
        { //::OSG::CSMDrawer::setSwapBarrier
        
            typedef void ( ::OSG::CSMDrawer::*setSwapBarrier_function_type )( ::OSG::Barrier * ) ;
            
            CSMDrawer_exposer.def( 
                "setSwapBarrier"
                , setSwapBarrier_function_type( &::OSG::CSMDrawer::setSwapBarrier )
                , ( bp::arg("pSwapBarrier") ) );
        
        }
        { //::OSG::CSMDrawer::setSwapCount
        
            typedef void ( ::OSG::CSMDrawer::*setSwapCount_function_type )( ::OSG::UInt32 ) ;
            
            CSMDrawer_exposer.def( 
                "setSwapCount"
                , setSwapCount_function_type( &::OSG::CSMDrawer::setSwapCount )
                , ( bp::arg("uiSwapCount") ) );
        
        }
        { //::OSG::CSMDrawer::setSyncBarrier
        
            typedef void ( ::OSG::CSMDrawer::*setSyncBarrier_function_type )( ::OSG::Barrier * ) ;
            
            CSMDrawer_exposer.def( 
                "setSyncBarrier"
                , setSyncBarrier_function_type( &::OSG::CSMDrawer::setSyncBarrier )
                , ( bp::arg("pSyncBarrier") ) );
        
        }
        { //::OSG::CSMDrawer::setSyncCount
        
            typedef void ( ::OSG::CSMDrawer::*setSyncCount_function_type )( ::OSG::UInt32 ) ;
            
            CSMDrawer_exposer.def( 
                "setSyncCount"
                , setSyncCount_function_type( &::OSG::CSMDrawer::setSyncCount )
                , ( bp::arg("uiSyncCount") ) );
        
        }
        { //::OSG::CSMDrawer::setSyncFromThread
        
            typedef void ( ::OSG::CSMDrawer::*setSyncFromThread_function_type )( ::OSG::Thread * ) ;
            
            CSMDrawer_exposer.def( 
                "setSyncFromThread"
                , setSyncFromThread_function_type( &::OSG::CSMDrawer::setSyncFromThread )
                , ( bp::arg("pThread") ) );
        
        }
        { //::OSG::CSMDrawer::shutdown
        
            typedef void ( ::OSG::CSMDrawer::*shutdown_function_type )(  ) ;
            
            CSMDrawer_exposer.def( 
                "shutdown"
                , shutdown_function_type( &::OSG::CSMDrawer::shutdown ) );
        
        }
        { //::OSG::CSMDrawer::terminateGLContexts
        
            typedef void ( ::OSG::CSMDrawer::*terminateGLContexts_function_type )(  ) ;
            
            CSMDrawer_exposer.def( 
                "terminateGLContexts"
                , terminateGLContexts_function_type( &::OSG::CSMDrawer::terminateGLContexts ) );
        
        }
        pyopensg::register_transit< OSG::CSMDrawer >::execute();
        bp::implicitly_convertible< OSG::CSMDrawer::ObjRecPtr, OSG::CSMDrawer* >();
        bp::implicitly_convertible< OSG::CSMDrawer::ObjRecPtr, OSG::CSMDrawer::ObjCPtr >();
        bp::implicitly_convertible< OSG::CSMDrawer::ObjRecPtr, OSG::AttachmentContainer* >();
        bp::implicitly_convertible< OSG::CSMDrawer::ObjRecPtr, OSG::AttachmentContainer::ObjRecPtr >();
        bp::implicitly_convertible<OSG::CSMDrawer::ObjRecPtr, OSG::AttachmentContainer::ObjCPtr>();
        CSMDrawer_exposer.def("findNamedComponent", wrapFindNamedComponent, (bp::arg("szName")));
    }

}
