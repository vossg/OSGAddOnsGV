// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGState_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "TextureEnvChunkBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

boost::python::list TextureEnvChunkBase_getMFShaderOffsetMatrix(OSG::TextureEnvChunkBase *self)
{
   boost::python::list result;
   OSG::MFReal32 const * mf_data = self->getMFShaderOffsetMatrix();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

void register_TextureEnvChunkBase_class(){

    { //::OSG::TextureEnvChunkBase
        typedef bp::class_< OSG::TextureEnvChunkBase, bp::bases< ::OSG::StateChunk >, boost::noncopyable > TextureEnvChunkBase_exposer_t;
        TextureEnvChunkBase_exposer_t TextureEnvChunkBase_exposer = TextureEnvChunkBase_exposer_t( "TextureEnvChunkBase", bp::no_init );
        bp::scope TextureEnvChunkBase_scope( TextureEnvChunkBase_exposer );
        bp::scope().attr("EnvModeFieldId") = (int)OSG::TextureEnvChunkBase::EnvModeFieldId;
        bp::scope().attr("EnvColorFieldId") = (int)OSG::TextureEnvChunkBase::EnvColorFieldId;
        bp::scope().attr("EnvCombineRGBFieldId") = (int)OSG::TextureEnvChunkBase::EnvCombineRGBFieldId;
        bp::scope().attr("EnvCombineAlphaFieldId") = (int)OSG::TextureEnvChunkBase::EnvCombineAlphaFieldId;
        bp::scope().attr("EnvScaleRGBFieldId") = (int)OSG::TextureEnvChunkBase::EnvScaleRGBFieldId;
        bp::scope().attr("EnvScaleAlphaFieldId") = (int)OSG::TextureEnvChunkBase::EnvScaleAlphaFieldId;
        bp::scope().attr("EnvSource0RGBFieldId") = (int)OSG::TextureEnvChunkBase::EnvSource0RGBFieldId;
        bp::scope().attr("EnvSource1RGBFieldId") = (int)OSG::TextureEnvChunkBase::EnvSource1RGBFieldId;
        bp::scope().attr("EnvSource2RGBFieldId") = (int)OSG::TextureEnvChunkBase::EnvSource2RGBFieldId;
        bp::scope().attr("EnvSource0AlphaFieldId") = (int)OSG::TextureEnvChunkBase::EnvSource0AlphaFieldId;
        bp::scope().attr("EnvSource1AlphaFieldId") = (int)OSG::TextureEnvChunkBase::EnvSource1AlphaFieldId;
        bp::scope().attr("EnvSource2AlphaFieldId") = (int)OSG::TextureEnvChunkBase::EnvSource2AlphaFieldId;
        bp::scope().attr("EnvOperand0RGBFieldId") = (int)OSG::TextureEnvChunkBase::EnvOperand0RGBFieldId;
        bp::scope().attr("EnvOperand1RGBFieldId") = (int)OSG::TextureEnvChunkBase::EnvOperand1RGBFieldId;
        bp::scope().attr("EnvOperand2RGBFieldId") = (int)OSG::TextureEnvChunkBase::EnvOperand2RGBFieldId;
        bp::scope().attr("EnvOperand0AlphaFieldId") = (int)OSG::TextureEnvChunkBase::EnvOperand0AlphaFieldId;
        bp::scope().attr("EnvOperand1AlphaFieldId") = (int)OSG::TextureEnvChunkBase::EnvOperand1AlphaFieldId;
        bp::scope().attr("EnvOperand2AlphaFieldId") = (int)OSG::TextureEnvChunkBase::EnvOperand2AlphaFieldId;
        bp::scope().attr("PointSpriteFieldId") = (int)OSG::TextureEnvChunkBase::PointSpriteFieldId;
        bp::scope().attr("ShaderOperationFieldId") = (int)OSG::TextureEnvChunkBase::ShaderOperationFieldId;
        bp::scope().attr("ShaderInputFieldId") = (int)OSG::TextureEnvChunkBase::ShaderInputFieldId;
        bp::scope().attr("ShaderOffsetMatrixFieldId") = (int)OSG::TextureEnvChunkBase::ShaderOffsetMatrixFieldId;
        bp::scope().attr("ShaderOffsetScaleFieldId") = (int)OSG::TextureEnvChunkBase::ShaderOffsetScaleFieldId;
        bp::scope().attr("ShaderOffsetBiasFieldId") = (int)OSG::TextureEnvChunkBase::ShaderOffsetBiasFieldId;
        bp::scope().attr("ShaderRGBADotProductFieldId") = (int)OSG::TextureEnvChunkBase::ShaderRGBADotProductFieldId;
        bp::scope().attr("ShaderCullModesFieldId") = (int)OSG::TextureEnvChunkBase::ShaderCullModesFieldId;
        bp::scope().attr("ShaderConstEyeFieldId") = (int)OSG::TextureEnvChunkBase::ShaderConstEyeFieldId;
        bp::scope().attr("LodBiasFieldId") = (int)OSG::TextureEnvChunkBase::LodBiasFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::TextureEnvChunkBase::NextFieldId;
        { //::OSG::TextureEnvChunkBase::copyFromBin
        
            typedef void ( ::OSG::TextureEnvChunkBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            TextureEnvChunkBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::TextureEnvChunkBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::TextureEnvChunkBase::copyToBin
        
            typedef void ( ::OSG::TextureEnvChunkBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            TextureEnvChunkBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::TextureEnvChunkBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::TextureEnvChunkBase::create
        
            typedef ::OSG::TextureEnvChunkTransitPtr ( *create_function_type )(  );
            
            TextureEnvChunkBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::TextureEnvChunkBase::create ) );
        
        }
        { //::OSG::TextureEnvChunkBase::createDependent
        
            typedef ::OSG::TextureEnvChunkTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            TextureEnvChunkBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::TextureEnvChunkBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::TextureEnvChunkBase::createLocal
        
            typedef ::OSG::TextureEnvChunkTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            TextureEnvChunkBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::TextureEnvChunkBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::TextureEnvChunkBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::TextureEnvChunkBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            TextureEnvChunkBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::TextureEnvChunkBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::TextureEnvChunkBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            TextureEnvChunkBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::TextureEnvChunkBase::getClassGroupId ) );
        
        }
        { //::OSG::TextureEnvChunkBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            TextureEnvChunkBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::TextureEnvChunkBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            TextureEnvChunkBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::TextureEnvChunkBase::getClassTypeId ) );
        
        }
        { //::OSG::TextureEnvChunkBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::TextureEnvChunkBase::*getContainerSize_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::TextureEnvChunkBase::getContainerSize ) );
        
        }
        { //::OSG::TextureEnvChunkBase::getEnvColor
        
            typedef ::OSG::Color4f const & ( ::OSG::TextureEnvChunkBase::*getEnvColor_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getEnvColor"
                , getEnvColor_function_type( &::OSG::TextureEnvChunkBase::getEnvColor )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getEnvCombineAlpha
        
            typedef ::GLenum const & ( ::OSG::TextureEnvChunkBase::*getEnvCombineAlpha_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getEnvCombineAlpha"
                , getEnvCombineAlpha_function_type( &::OSG::TextureEnvChunkBase::getEnvCombineAlpha )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getEnvCombineRGB
        
            typedef ::GLenum const & ( ::OSG::TextureEnvChunkBase::*getEnvCombineRGB_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getEnvCombineRGB"
                , getEnvCombineRGB_function_type( &::OSG::TextureEnvChunkBase::getEnvCombineRGB )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getEnvMode
        
            typedef ::GLenum const & ( ::OSG::TextureEnvChunkBase::*getEnvMode_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getEnvMode"
                , getEnvMode_function_type( &::OSG::TextureEnvChunkBase::getEnvMode )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getEnvOperand0Alpha
        
            typedef ::GLenum const & ( ::OSG::TextureEnvChunkBase::*getEnvOperand0Alpha_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getEnvOperand0Alpha"
                , getEnvOperand0Alpha_function_type( &::OSG::TextureEnvChunkBase::getEnvOperand0Alpha )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getEnvOperand0RGB
        
            typedef ::GLenum const & ( ::OSG::TextureEnvChunkBase::*getEnvOperand0RGB_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getEnvOperand0RGB"
                , getEnvOperand0RGB_function_type( &::OSG::TextureEnvChunkBase::getEnvOperand0RGB )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getEnvOperand1Alpha
        
            typedef ::GLenum const & ( ::OSG::TextureEnvChunkBase::*getEnvOperand1Alpha_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getEnvOperand1Alpha"
                , getEnvOperand1Alpha_function_type( &::OSG::TextureEnvChunkBase::getEnvOperand1Alpha )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getEnvOperand1RGB
        
            typedef ::GLenum const & ( ::OSG::TextureEnvChunkBase::*getEnvOperand1RGB_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getEnvOperand1RGB"
                , getEnvOperand1RGB_function_type( &::OSG::TextureEnvChunkBase::getEnvOperand1RGB )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getEnvOperand2Alpha
        
            typedef ::GLenum const & ( ::OSG::TextureEnvChunkBase::*getEnvOperand2Alpha_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getEnvOperand2Alpha"
                , getEnvOperand2Alpha_function_type( &::OSG::TextureEnvChunkBase::getEnvOperand2Alpha )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getEnvOperand2RGB
        
            typedef ::GLenum const & ( ::OSG::TextureEnvChunkBase::*getEnvOperand2RGB_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getEnvOperand2RGB"
                , getEnvOperand2RGB_function_type( &::OSG::TextureEnvChunkBase::getEnvOperand2RGB )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getEnvScaleAlpha
        
            typedef ::OSG::Real32 ( ::OSG::TextureEnvChunkBase::*getEnvScaleAlpha_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getEnvScaleAlpha"
                , getEnvScaleAlpha_function_type( &::OSG::TextureEnvChunkBase::getEnvScaleAlpha ) );
        
        }
        { //::OSG::TextureEnvChunkBase::getEnvScaleRGB
        
            typedef ::OSG::Real32 ( ::OSG::TextureEnvChunkBase::*getEnvScaleRGB_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getEnvScaleRGB"
                , getEnvScaleRGB_function_type( &::OSG::TextureEnvChunkBase::getEnvScaleRGB ) );
        
        }
        { //::OSG::TextureEnvChunkBase::getEnvSource0Alpha
        
            typedef ::GLenum const & ( ::OSG::TextureEnvChunkBase::*getEnvSource0Alpha_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getEnvSource0Alpha"
                , getEnvSource0Alpha_function_type( &::OSG::TextureEnvChunkBase::getEnvSource0Alpha )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getEnvSource0RGB
        
            typedef ::GLenum const & ( ::OSG::TextureEnvChunkBase::*getEnvSource0RGB_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getEnvSource0RGB"
                , getEnvSource0RGB_function_type( &::OSG::TextureEnvChunkBase::getEnvSource0RGB )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getEnvSource1Alpha
        
            typedef ::GLenum const & ( ::OSG::TextureEnvChunkBase::*getEnvSource1Alpha_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getEnvSource1Alpha"
                , getEnvSource1Alpha_function_type( &::OSG::TextureEnvChunkBase::getEnvSource1Alpha )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getEnvSource1RGB
        
            typedef ::GLenum const & ( ::OSG::TextureEnvChunkBase::*getEnvSource1RGB_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getEnvSource1RGB"
                , getEnvSource1RGB_function_type( &::OSG::TextureEnvChunkBase::getEnvSource1RGB )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getEnvSource2Alpha
        
            typedef ::GLenum const & ( ::OSG::TextureEnvChunkBase::*getEnvSource2Alpha_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getEnvSource2Alpha"
                , getEnvSource2Alpha_function_type( &::OSG::TextureEnvChunkBase::getEnvSource2Alpha )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getEnvSource2RGB
        
            typedef ::GLenum const & ( ::OSG::TextureEnvChunkBase::*getEnvSource2RGB_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getEnvSource2RGB"
                , getEnvSource2RGB_function_type( &::OSG::TextureEnvChunkBase::getEnvSource2RGB )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getLodBias
        
            typedef ::OSG::Real32 ( ::OSG::TextureEnvChunkBase::*getLodBias_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getLodBias"
                , getLodBias_function_type( &::OSG::TextureEnvChunkBase::getLodBias ) );
        
        }
        { //::OSG::TextureEnvChunkBase::getPointSprite
        
            typedef bool ( ::OSG::TextureEnvChunkBase::*getPointSprite_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getPointSprite"
                , getPointSprite_function_type( &::OSG::TextureEnvChunkBase::getPointSprite ) );
        
        }
        { //::OSG::TextureEnvChunkBase::getSFEnvColor
        
            typedef ::OSG::SFColor4f const * ( ::OSG::TextureEnvChunkBase::*getSFEnvColor_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getSFEnvColor"
                , getSFEnvColor_function_type( &::OSG::TextureEnvChunkBase::getSFEnvColor )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getSFEnvCombineAlpha
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureEnvChunkBase::*getSFEnvCombineAlpha_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getSFEnvCombineAlpha"
                , getSFEnvCombineAlpha_function_type( &::OSG::TextureEnvChunkBase::getSFEnvCombineAlpha )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getSFEnvCombineRGB
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureEnvChunkBase::*getSFEnvCombineRGB_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getSFEnvCombineRGB"
                , getSFEnvCombineRGB_function_type( &::OSG::TextureEnvChunkBase::getSFEnvCombineRGB )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getSFEnvMode
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureEnvChunkBase::*getSFEnvMode_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getSFEnvMode"
                , getSFEnvMode_function_type( &::OSG::TextureEnvChunkBase::getSFEnvMode )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getSFEnvOperand0Alpha
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureEnvChunkBase::*getSFEnvOperand0Alpha_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getSFEnvOperand0Alpha"
                , getSFEnvOperand0Alpha_function_type( &::OSG::TextureEnvChunkBase::getSFEnvOperand0Alpha )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getSFEnvOperand0RGB
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureEnvChunkBase::*getSFEnvOperand0RGB_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getSFEnvOperand0RGB"
                , getSFEnvOperand0RGB_function_type( &::OSG::TextureEnvChunkBase::getSFEnvOperand0RGB )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getSFEnvOperand1Alpha
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureEnvChunkBase::*getSFEnvOperand1Alpha_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getSFEnvOperand1Alpha"
                , getSFEnvOperand1Alpha_function_type( &::OSG::TextureEnvChunkBase::getSFEnvOperand1Alpha )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getSFEnvOperand1RGB
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureEnvChunkBase::*getSFEnvOperand1RGB_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getSFEnvOperand1RGB"
                , getSFEnvOperand1RGB_function_type( &::OSG::TextureEnvChunkBase::getSFEnvOperand1RGB )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getSFEnvOperand2Alpha
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureEnvChunkBase::*getSFEnvOperand2Alpha_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getSFEnvOperand2Alpha"
                , getSFEnvOperand2Alpha_function_type( &::OSG::TextureEnvChunkBase::getSFEnvOperand2Alpha )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getSFEnvOperand2RGB
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureEnvChunkBase::*getSFEnvOperand2RGB_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getSFEnvOperand2RGB"
                , getSFEnvOperand2RGB_function_type( &::OSG::TextureEnvChunkBase::getSFEnvOperand2RGB )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getSFEnvScaleAlpha
        
            typedef ::OSG::SFReal32 const * ( ::OSG::TextureEnvChunkBase::*getSFEnvScaleAlpha_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getSFEnvScaleAlpha"
                , getSFEnvScaleAlpha_function_type( &::OSG::TextureEnvChunkBase::getSFEnvScaleAlpha )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getSFEnvScaleRGB
        
            typedef ::OSG::SFReal32 const * ( ::OSG::TextureEnvChunkBase::*getSFEnvScaleRGB_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getSFEnvScaleRGB"
                , getSFEnvScaleRGB_function_type( &::OSG::TextureEnvChunkBase::getSFEnvScaleRGB )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getSFEnvSource0Alpha
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureEnvChunkBase::*getSFEnvSource0Alpha_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getSFEnvSource0Alpha"
                , getSFEnvSource0Alpha_function_type( &::OSG::TextureEnvChunkBase::getSFEnvSource0Alpha )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getSFEnvSource0RGB
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureEnvChunkBase::*getSFEnvSource0RGB_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getSFEnvSource0RGB"
                , getSFEnvSource0RGB_function_type( &::OSG::TextureEnvChunkBase::getSFEnvSource0RGB )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getSFEnvSource1Alpha
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureEnvChunkBase::*getSFEnvSource1Alpha_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getSFEnvSource1Alpha"
                , getSFEnvSource1Alpha_function_type( &::OSG::TextureEnvChunkBase::getSFEnvSource1Alpha )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getSFEnvSource1RGB
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureEnvChunkBase::*getSFEnvSource1RGB_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getSFEnvSource1RGB"
                , getSFEnvSource1RGB_function_type( &::OSG::TextureEnvChunkBase::getSFEnvSource1RGB )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getSFEnvSource2Alpha
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureEnvChunkBase::*getSFEnvSource2Alpha_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getSFEnvSource2Alpha"
                , getSFEnvSource2Alpha_function_type( &::OSG::TextureEnvChunkBase::getSFEnvSource2Alpha )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getSFEnvSource2RGB
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureEnvChunkBase::*getSFEnvSource2RGB_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getSFEnvSource2RGB"
                , getSFEnvSource2RGB_function_type( &::OSG::TextureEnvChunkBase::getSFEnvSource2RGB )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getSFLodBias
        
            typedef ::OSG::SFReal32 const * ( ::OSG::TextureEnvChunkBase::*getSFLodBias_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getSFLodBias"
                , getSFLodBias_function_type( &::OSG::TextureEnvChunkBase::getSFLodBias )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getSFPointSprite
        
            typedef ::OSG::SFBool const * ( ::OSG::TextureEnvChunkBase::*getSFPointSprite_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getSFPointSprite"
                , getSFPointSprite_function_type( &::OSG::TextureEnvChunkBase::getSFPointSprite )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getSFShaderConstEye
        
            typedef ::OSG::SFVec3f const * ( ::OSG::TextureEnvChunkBase::*getSFShaderConstEye_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getSFShaderConstEye"
                , getSFShaderConstEye_function_type( &::OSG::TextureEnvChunkBase::getSFShaderConstEye )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getSFShaderCullModes
        
            typedef ::OSG::SFUInt8 const * ( ::OSG::TextureEnvChunkBase::*getSFShaderCullModes_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getSFShaderCullModes"
                , getSFShaderCullModes_function_type( &::OSG::TextureEnvChunkBase::getSFShaderCullModes )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getSFShaderInput
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureEnvChunkBase::*getSFShaderInput_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getSFShaderInput"
                , getSFShaderInput_function_type( &::OSG::TextureEnvChunkBase::getSFShaderInput )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getSFShaderOffsetBias
        
            typedef ::OSG::SFReal32 const * ( ::OSG::TextureEnvChunkBase::*getSFShaderOffsetBias_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getSFShaderOffsetBias"
                , getSFShaderOffsetBias_function_type( &::OSG::TextureEnvChunkBase::getSFShaderOffsetBias )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getSFShaderOffsetScale
        
            typedef ::OSG::SFReal32 const * ( ::OSG::TextureEnvChunkBase::*getSFShaderOffsetScale_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getSFShaderOffsetScale"
                , getSFShaderOffsetScale_function_type( &::OSG::TextureEnvChunkBase::getSFShaderOffsetScale )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getSFShaderOperation
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureEnvChunkBase::*getSFShaderOperation_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getSFShaderOperation"
                , getSFShaderOperation_function_type( &::OSG::TextureEnvChunkBase::getSFShaderOperation )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getSFShaderRGBADotProduct
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureEnvChunkBase::*getSFShaderRGBADotProduct_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getSFShaderRGBADotProduct"
                , getSFShaderRGBADotProduct_function_type( &::OSG::TextureEnvChunkBase::getSFShaderRGBADotProduct )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getShaderConstEye
        
            typedef ::OSG::Vec3f const & ( ::OSG::TextureEnvChunkBase::*getShaderConstEye_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getShaderConstEye"
                , getShaderConstEye_function_type( &::OSG::TextureEnvChunkBase::getShaderConstEye )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getShaderCullModes
        
            typedef ::OSG::UInt8 ( ::OSG::TextureEnvChunkBase::*getShaderCullModes_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getShaderCullModes"
                , getShaderCullModes_function_type( &::OSG::TextureEnvChunkBase::getShaderCullModes ) );
        
        }
        { //::OSG::TextureEnvChunkBase::getShaderInput
        
            typedef ::GLenum const & ( ::OSG::TextureEnvChunkBase::*getShaderInput_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getShaderInput"
                , getShaderInput_function_type( &::OSG::TextureEnvChunkBase::getShaderInput )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getShaderOffsetBias
        
            typedef ::OSG::Real32 ( ::OSG::TextureEnvChunkBase::*getShaderOffsetBias_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getShaderOffsetBias"
                , getShaderOffsetBias_function_type( &::OSG::TextureEnvChunkBase::getShaderOffsetBias ) );
        
        }
        { //::OSG::TextureEnvChunkBase::getShaderOffsetMatrix
        
            typedef ::OSG::Real32 ( ::OSG::TextureEnvChunkBase::*getShaderOffsetMatrix_function_type )( ::OSG::UInt32 const ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getShaderOffsetMatrix"
                , getShaderOffsetMatrix_function_type( &::OSG::TextureEnvChunkBase::getShaderOffsetMatrix )
                , ( bp::arg("index") ) );
        
        }
        { //::OSG::TextureEnvChunkBase::getShaderOffsetScale
        
            typedef ::OSG::Real32 ( ::OSG::TextureEnvChunkBase::*getShaderOffsetScale_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getShaderOffsetScale"
                , getShaderOffsetScale_function_type( &::OSG::TextureEnvChunkBase::getShaderOffsetScale ) );
        
        }
        { //::OSG::TextureEnvChunkBase::getShaderOperation
        
            typedef ::GLenum const & ( ::OSG::TextureEnvChunkBase::*getShaderOperation_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getShaderOperation"
                , getShaderOperation_function_type( &::OSG::TextureEnvChunkBase::getShaderOperation )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getShaderRGBADotProduct
        
            typedef ::GLenum const & ( ::OSG::TextureEnvChunkBase::*getShaderRGBADotProduct_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getShaderRGBADotProduct"
                , getShaderRGBADotProduct_function_type( &::OSG::TextureEnvChunkBase::getShaderRGBADotProduct )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::TextureEnvChunkBase::*getType_function_type )(  ) ;
            
            TextureEnvChunkBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::TextureEnvChunkBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureEnvChunkBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::TextureEnvChunkBase::*getType_function_type )(  ) const;
            
            TextureEnvChunkBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::TextureEnvChunkBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureEnvChunkBase::setEnvColor
        
            typedef void ( ::OSG::TextureEnvChunkBase::*setEnvColor_function_type )( ::OSG::Color4f const & ) ;
            
            TextureEnvChunkBase_exposer.def( 
                "setEnvColor"
                , setEnvColor_function_type( &::OSG::TextureEnvChunkBase::setEnvColor )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureEnvChunkBase::setEnvCombineAlpha
        
            typedef void ( ::OSG::TextureEnvChunkBase::*setEnvCombineAlpha_function_type )( ::GLenum const & ) ;
            
            TextureEnvChunkBase_exposer.def( 
                "setEnvCombineAlpha"
                , setEnvCombineAlpha_function_type( &::OSG::TextureEnvChunkBase::setEnvCombineAlpha )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureEnvChunkBase::setEnvCombineRGB
        
            typedef void ( ::OSG::TextureEnvChunkBase::*setEnvCombineRGB_function_type )( ::GLenum const & ) ;
            
            TextureEnvChunkBase_exposer.def( 
                "setEnvCombineRGB"
                , setEnvCombineRGB_function_type( &::OSG::TextureEnvChunkBase::setEnvCombineRGB )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureEnvChunkBase::setEnvMode
        
            typedef void ( ::OSG::TextureEnvChunkBase::*setEnvMode_function_type )( ::GLenum const & ) ;
            
            TextureEnvChunkBase_exposer.def( 
                "setEnvMode"
                , setEnvMode_function_type( &::OSG::TextureEnvChunkBase::setEnvMode )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureEnvChunkBase::setEnvOperand0Alpha
        
            typedef void ( ::OSG::TextureEnvChunkBase::*setEnvOperand0Alpha_function_type )( ::GLenum const & ) ;
            
            TextureEnvChunkBase_exposer.def( 
                "setEnvOperand0Alpha"
                , setEnvOperand0Alpha_function_type( &::OSG::TextureEnvChunkBase::setEnvOperand0Alpha )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureEnvChunkBase::setEnvOperand0RGB
        
            typedef void ( ::OSG::TextureEnvChunkBase::*setEnvOperand0RGB_function_type )( ::GLenum const & ) ;
            
            TextureEnvChunkBase_exposer.def( 
                "setEnvOperand0RGB"
                , setEnvOperand0RGB_function_type( &::OSG::TextureEnvChunkBase::setEnvOperand0RGB )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureEnvChunkBase::setEnvOperand1Alpha
        
            typedef void ( ::OSG::TextureEnvChunkBase::*setEnvOperand1Alpha_function_type )( ::GLenum const & ) ;
            
            TextureEnvChunkBase_exposer.def( 
                "setEnvOperand1Alpha"
                , setEnvOperand1Alpha_function_type( &::OSG::TextureEnvChunkBase::setEnvOperand1Alpha )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureEnvChunkBase::setEnvOperand1RGB
        
            typedef void ( ::OSG::TextureEnvChunkBase::*setEnvOperand1RGB_function_type )( ::GLenum const & ) ;
            
            TextureEnvChunkBase_exposer.def( 
                "setEnvOperand1RGB"
                , setEnvOperand1RGB_function_type( &::OSG::TextureEnvChunkBase::setEnvOperand1RGB )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureEnvChunkBase::setEnvOperand2Alpha
        
            typedef void ( ::OSG::TextureEnvChunkBase::*setEnvOperand2Alpha_function_type )( ::GLenum const & ) ;
            
            TextureEnvChunkBase_exposer.def( 
                "setEnvOperand2Alpha"
                , setEnvOperand2Alpha_function_type( &::OSG::TextureEnvChunkBase::setEnvOperand2Alpha )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureEnvChunkBase::setEnvOperand2RGB
        
            typedef void ( ::OSG::TextureEnvChunkBase::*setEnvOperand2RGB_function_type )( ::GLenum const & ) ;
            
            TextureEnvChunkBase_exposer.def( 
                "setEnvOperand2RGB"
                , setEnvOperand2RGB_function_type( &::OSG::TextureEnvChunkBase::setEnvOperand2RGB )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureEnvChunkBase::setEnvScaleAlpha
        
            typedef void ( ::OSG::TextureEnvChunkBase::*setEnvScaleAlpha_function_type )( ::OSG::Real32 const ) ;
            
            TextureEnvChunkBase_exposer.def( 
                "setEnvScaleAlpha"
                , setEnvScaleAlpha_function_type( &::OSG::TextureEnvChunkBase::setEnvScaleAlpha )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureEnvChunkBase::setEnvScaleRGB
        
            typedef void ( ::OSG::TextureEnvChunkBase::*setEnvScaleRGB_function_type )( ::OSG::Real32 const ) ;
            
            TextureEnvChunkBase_exposer.def( 
                "setEnvScaleRGB"
                , setEnvScaleRGB_function_type( &::OSG::TextureEnvChunkBase::setEnvScaleRGB )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureEnvChunkBase::setEnvSource0Alpha
        
            typedef void ( ::OSG::TextureEnvChunkBase::*setEnvSource0Alpha_function_type )( ::GLenum const & ) ;
            
            TextureEnvChunkBase_exposer.def( 
                "setEnvSource0Alpha"
                , setEnvSource0Alpha_function_type( &::OSG::TextureEnvChunkBase::setEnvSource0Alpha )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureEnvChunkBase::setEnvSource0RGB
        
            typedef void ( ::OSG::TextureEnvChunkBase::*setEnvSource0RGB_function_type )( ::GLenum const & ) ;
            
            TextureEnvChunkBase_exposer.def( 
                "setEnvSource0RGB"
                , setEnvSource0RGB_function_type( &::OSG::TextureEnvChunkBase::setEnvSource0RGB )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureEnvChunkBase::setEnvSource1Alpha
        
            typedef void ( ::OSG::TextureEnvChunkBase::*setEnvSource1Alpha_function_type )( ::GLenum const & ) ;
            
            TextureEnvChunkBase_exposer.def( 
                "setEnvSource1Alpha"
                , setEnvSource1Alpha_function_type( &::OSG::TextureEnvChunkBase::setEnvSource1Alpha )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureEnvChunkBase::setEnvSource1RGB
        
            typedef void ( ::OSG::TextureEnvChunkBase::*setEnvSource1RGB_function_type )( ::GLenum const & ) ;
            
            TextureEnvChunkBase_exposer.def( 
                "setEnvSource1RGB"
                , setEnvSource1RGB_function_type( &::OSG::TextureEnvChunkBase::setEnvSource1RGB )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureEnvChunkBase::setEnvSource2Alpha
        
            typedef void ( ::OSG::TextureEnvChunkBase::*setEnvSource2Alpha_function_type )( ::GLenum const & ) ;
            
            TextureEnvChunkBase_exposer.def( 
                "setEnvSource2Alpha"
                , setEnvSource2Alpha_function_type( &::OSG::TextureEnvChunkBase::setEnvSource2Alpha )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureEnvChunkBase::setEnvSource2RGB
        
            typedef void ( ::OSG::TextureEnvChunkBase::*setEnvSource2RGB_function_type )( ::GLenum const & ) ;
            
            TextureEnvChunkBase_exposer.def( 
                "setEnvSource2RGB"
                , setEnvSource2RGB_function_type( &::OSG::TextureEnvChunkBase::setEnvSource2RGB )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureEnvChunkBase::setLodBias
        
            typedef void ( ::OSG::TextureEnvChunkBase::*setLodBias_function_type )( ::OSG::Real32 const ) ;
            
            TextureEnvChunkBase_exposer.def( 
                "setLodBias"
                , setLodBias_function_type( &::OSG::TextureEnvChunkBase::setLodBias )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureEnvChunkBase::setPointSprite
        
            typedef void ( ::OSG::TextureEnvChunkBase::*setPointSprite_function_type )( bool const ) ;
            
            TextureEnvChunkBase_exposer.def( 
                "setPointSprite"
                , setPointSprite_function_type( &::OSG::TextureEnvChunkBase::setPointSprite )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureEnvChunkBase::setShaderConstEye
        
            typedef void ( ::OSG::TextureEnvChunkBase::*setShaderConstEye_function_type )( ::OSG::Vec3f const & ) ;
            
            TextureEnvChunkBase_exposer.def( 
                "setShaderConstEye"
                , setShaderConstEye_function_type( &::OSG::TextureEnvChunkBase::setShaderConstEye )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureEnvChunkBase::setShaderCullModes
        
            typedef void ( ::OSG::TextureEnvChunkBase::*setShaderCullModes_function_type )( ::OSG::UInt8 const ) ;
            
            TextureEnvChunkBase_exposer.def( 
                "setShaderCullModes"
                , setShaderCullModes_function_type( &::OSG::TextureEnvChunkBase::setShaderCullModes )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureEnvChunkBase::setShaderInput
        
            typedef void ( ::OSG::TextureEnvChunkBase::*setShaderInput_function_type )( ::GLenum const & ) ;
            
            TextureEnvChunkBase_exposer.def( 
                "setShaderInput"
                , setShaderInput_function_type( &::OSG::TextureEnvChunkBase::setShaderInput )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureEnvChunkBase::setShaderOffsetBias
        
            typedef void ( ::OSG::TextureEnvChunkBase::*setShaderOffsetBias_function_type )( ::OSG::Real32 const ) ;
            
            TextureEnvChunkBase_exposer.def( 
                "setShaderOffsetBias"
                , setShaderOffsetBias_function_type( &::OSG::TextureEnvChunkBase::setShaderOffsetBias )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureEnvChunkBase::setShaderOffsetScale
        
            typedef void ( ::OSG::TextureEnvChunkBase::*setShaderOffsetScale_function_type )( ::OSG::Real32 const ) ;
            
            TextureEnvChunkBase_exposer.def( 
                "setShaderOffsetScale"
                , setShaderOffsetScale_function_type( &::OSG::TextureEnvChunkBase::setShaderOffsetScale )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureEnvChunkBase::setShaderOperation
        
            typedef void ( ::OSG::TextureEnvChunkBase::*setShaderOperation_function_type )( ::GLenum const & ) ;
            
            TextureEnvChunkBase_exposer.def( 
                "setShaderOperation"
                , setShaderOperation_function_type( &::OSG::TextureEnvChunkBase::setShaderOperation )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureEnvChunkBase::setShaderRGBADotProduct
        
            typedef void ( ::OSG::TextureEnvChunkBase::*setShaderRGBADotProduct_function_type )( ::GLenum const & ) ;
            
            TextureEnvChunkBase_exposer.def( 
                "setShaderRGBADotProduct"
                , setShaderRGBADotProduct_function_type( &::OSG::TextureEnvChunkBase::setShaderRGBADotProduct )
                , ( bp::arg("value") ) );
        
        }
        TextureEnvChunkBase_exposer.staticmethod( "create" );
        TextureEnvChunkBase_exposer.staticmethod( "createDependent" );
        TextureEnvChunkBase_exposer.staticmethod( "createLocal" );
        TextureEnvChunkBase_exposer.staticmethod( "getClassGroupId" );
        TextureEnvChunkBase_exposer.staticmethod( "getClassType" );
        TextureEnvChunkBase_exposer.staticmethod( "getClassTypeId" );
        TextureEnvChunkBase_exposer.def("getMFShaderOffsetMatrix",TextureEnvChunkBase_getMFShaderOffsetMatrix);
    }

}
