// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGState_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "ProgramChunkBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

boost::python::list ProgramChunkBase_getMFParamValues(OSG::ProgramChunkBase *self)
{
   boost::python::list result;
   OSG::MFVec4f const * mf_data = self->getMFParamValues();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list ProgramChunkBase_getMFParamNames(OSG::ProgramChunkBase *self)
{
   boost::python::list result;
   OSG::MFString const * mf_data = self->getMFParamNames();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

void register_ProgramChunkBase_class(){

    { //::OSG::ProgramChunkBase
        typedef bp::class_< OSG::ProgramChunkBase, bp::bases< ::OSG::StateChunk >, boost::noncopyable > ProgramChunkBase_exposer_t;
        ProgramChunkBase_exposer_t ProgramChunkBase_exposer = ProgramChunkBase_exposer_t( "ProgramChunkBase", bp::no_init );
        bp::scope ProgramChunkBase_scope( ProgramChunkBase_exposer );
        bp::scope().attr("ProgramFieldId") = (int)OSG::ProgramChunkBase::ProgramFieldId;
        bp::scope().attr("ParamValuesFieldId") = (int)OSG::ProgramChunkBase::ParamValuesFieldId;
        bp::scope().attr("ParamNamesFieldId") = (int)OSG::ProgramChunkBase::ParamNamesFieldId;
        bp::scope().attr("GLIdFieldId") = (int)OSG::ProgramChunkBase::GLIdFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::ProgramChunkBase::NextFieldId;
        { //::OSG::ProgramChunkBase::copyFromBin
        
            typedef void ( ::OSG::ProgramChunkBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            ProgramChunkBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::ProgramChunkBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::ProgramChunkBase::copyToBin
        
            typedef void ( ::OSG::ProgramChunkBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            ProgramChunkBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::ProgramChunkBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::ProgramChunkBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::ProgramChunkBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            ProgramChunkBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::ProgramChunkBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::ProgramChunkBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            ProgramChunkBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::ProgramChunkBase::getClassGroupId ) );
        
        }
        { //::OSG::ProgramChunkBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            ProgramChunkBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::ProgramChunkBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::ProgramChunkBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            ProgramChunkBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::ProgramChunkBase::getClassTypeId ) );
        
        }
        { //::OSG::ProgramChunkBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::ProgramChunkBase::*getContainerSize_function_type )(  ) const;
            
            ProgramChunkBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::ProgramChunkBase::getContainerSize ) );
        
        }
        { //::OSG::ProgramChunkBase::getParamNames
        
            typedef ::std::string const & ( ::OSG::ProgramChunkBase::*getParamNames_function_type )( ::OSG::UInt32 const ) const;
            
            ProgramChunkBase_exposer.def( 
                "getParamNames"
                , getParamNames_function_type( &::OSG::ProgramChunkBase::getParamNames )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::ProgramChunkBase::getParamValues
        
            typedef ::OSG::Vec4f const & ( ::OSG::ProgramChunkBase::*getParamValues_function_type )( ::OSG::UInt32 const ) const;
            
            ProgramChunkBase_exposer.def( 
                "getParamValues"
                , getParamValues_function_type( &::OSG::ProgramChunkBase::getParamValues )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::ProgramChunkBase::getProgram
        
            typedef ::std::string const & ( ::OSG::ProgramChunkBase::*getProgram_function_type )(  ) const;
            
            ProgramChunkBase_exposer.def( 
                "getProgram"
                , getProgram_function_type( &::OSG::ProgramChunkBase::getProgram )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::ProgramChunkBase::getSFProgram
        
            typedef ::OSG::SFString const * ( ::OSG::ProgramChunkBase::*getSFProgram_function_type )(  ) const;
            
            ProgramChunkBase_exposer.def( 
                "getSFProgram"
                , getSFProgram_function_type( &::OSG::ProgramChunkBase::getSFProgram )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ProgramChunkBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::ProgramChunkBase::*getType_function_type )(  ) ;
            
            ProgramChunkBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::ProgramChunkBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ProgramChunkBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::ProgramChunkBase::*getType_function_type )(  ) const;
            
            ProgramChunkBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::ProgramChunkBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ProgramChunkBase::setProgram
        
            typedef void ( ::OSG::ProgramChunkBase::*setProgram_function_type )( ::std::string const & ) ;
            
            ProgramChunkBase_exposer.def( 
                "setProgram"
                , setProgram_function_type( &::OSG::ProgramChunkBase::setProgram )
                , ( bp::arg("value") ) );
        
        }
        ProgramChunkBase_exposer.staticmethod( "getClassGroupId" );
        ProgramChunkBase_exposer.staticmethod( "getClassType" );
        ProgramChunkBase_exposer.staticmethod( "getClassTypeId" );
        ProgramChunkBase_exposer.def("getMFParamValues",ProgramChunkBase_getMFParamValues);
        ProgramChunkBase_exposer.def("getMFParamNames",ProgramChunkBase_getMFParamNames);
    }

}
