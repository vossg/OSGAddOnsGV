// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGState_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "RegisterCombinersChunkBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

boost::python::list RegisterCombinersChunkBase_getMFVariableArgb(OSG::RegisterCombinersChunkBase *self)
{
   boost::python::list result;
   OSG::MFGLenum const * mf_data = self->getMFVariableArgb();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list RegisterCombinersChunkBase_getMFVariableBrgb(OSG::RegisterCombinersChunkBase *self)
{
   boost::python::list result;
   OSG::MFGLenum const * mf_data = self->getMFVariableBrgb();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list RegisterCombinersChunkBase_getMFVariableCrgb(OSG::RegisterCombinersChunkBase *self)
{
   boost::python::list result;
   OSG::MFGLenum const * mf_data = self->getMFVariableCrgb();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list RegisterCombinersChunkBase_getMFVariableDrgb(OSG::RegisterCombinersChunkBase *self)
{
   boost::python::list result;
   OSG::MFGLenum const * mf_data = self->getMFVariableDrgb();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list RegisterCombinersChunkBase_getMFVariableAalpha(OSG::RegisterCombinersChunkBase *self)
{
   boost::python::list result;
   OSG::MFGLenum const * mf_data = self->getMFVariableAalpha();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list RegisterCombinersChunkBase_getMFVariableBalpha(OSG::RegisterCombinersChunkBase *self)
{
   boost::python::list result;
   OSG::MFGLenum const * mf_data = self->getMFVariableBalpha();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list RegisterCombinersChunkBase_getMFVariableCalpha(OSG::RegisterCombinersChunkBase *self)
{
   boost::python::list result;
   OSG::MFGLenum const * mf_data = self->getMFVariableCalpha();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list RegisterCombinersChunkBase_getMFVariableDalpha(OSG::RegisterCombinersChunkBase *self)
{
   boost::python::list result;
   OSG::MFGLenum const * mf_data = self->getMFVariableDalpha();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list RegisterCombinersChunkBase_getMFOutputABrgb(OSG::RegisterCombinersChunkBase *self)
{
   boost::python::list result;
   OSG::MFGLenum const * mf_data = self->getMFOutputABrgb();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list RegisterCombinersChunkBase_getMFOutputCDrgb(OSG::RegisterCombinersChunkBase *self)
{
   boost::python::list result;
   OSG::MFGLenum const * mf_data = self->getMFOutputCDrgb();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list RegisterCombinersChunkBase_getMFOutputSumrgb(OSG::RegisterCombinersChunkBase *self)
{
   boost::python::list result;
   OSG::MFGLenum const * mf_data = self->getMFOutputSumrgb();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list RegisterCombinersChunkBase_getMFScalergb(OSG::RegisterCombinersChunkBase *self)
{
   boost::python::list result;
   OSG::MFGLenum const * mf_data = self->getMFScalergb();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list RegisterCombinersChunkBase_getMFBiasrgb(OSG::RegisterCombinersChunkBase *self)
{
   boost::python::list result;
   OSG::MFGLenum const * mf_data = self->getMFBiasrgb();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list RegisterCombinersChunkBase_getMFOutputABalpha(OSG::RegisterCombinersChunkBase *self)
{
   boost::python::list result;
   OSG::MFGLenum const * mf_data = self->getMFOutputABalpha();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list RegisterCombinersChunkBase_getMFOutputCDalpha(OSG::RegisterCombinersChunkBase *self)
{
   boost::python::list result;
   OSG::MFGLenum const * mf_data = self->getMFOutputCDalpha();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list RegisterCombinersChunkBase_getMFOutputSumalpha(OSG::RegisterCombinersChunkBase *self)
{
   boost::python::list result;
   OSG::MFGLenum const * mf_data = self->getMFOutputSumalpha();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list RegisterCombinersChunkBase_getMFDotABrgb(OSG::RegisterCombinersChunkBase *self)
{
   boost::python::list result;
   OSG::MFUInt8 const * mf_data = self->getMFDotABrgb();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list RegisterCombinersChunkBase_getMFDotCDrgb(OSG::RegisterCombinersChunkBase *self)
{
   boost::python::list result;
   OSG::MFUInt8 const * mf_data = self->getMFDotCDrgb();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list RegisterCombinersChunkBase_getMFMuxSumrgb(OSG::RegisterCombinersChunkBase *self)
{
   boost::python::list result;
   OSG::MFUInt8 const * mf_data = self->getMFMuxSumrgb();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list RegisterCombinersChunkBase_getMFScalealpha(OSG::RegisterCombinersChunkBase *self)
{
   boost::python::list result;
   OSG::MFGLenum const * mf_data = self->getMFScalealpha();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list RegisterCombinersChunkBase_getMFBiasalpha(OSG::RegisterCombinersChunkBase *self)
{
   boost::python::list result;
   OSG::MFGLenum const * mf_data = self->getMFBiasalpha();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list RegisterCombinersChunkBase_getMFMuxSumalpha(OSG::RegisterCombinersChunkBase *self)
{
   boost::python::list result;
   OSG::MFUInt8 const * mf_data = self->getMFMuxSumalpha();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list RegisterCombinersChunkBase_getMFVariableE(OSG::RegisterCombinersChunkBase *self)
{
   boost::python::list result;
   OSG::MFGLenum const * mf_data = self->getMFVariableE();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list RegisterCombinersChunkBase_getMFVariableF(OSG::RegisterCombinersChunkBase *self)
{
   boost::python::list result;
   OSG::MFGLenum const * mf_data = self->getMFVariableF();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list RegisterCombinersChunkBase_getMFVariableG(OSG::RegisterCombinersChunkBase *self)
{
   boost::python::list result;
   OSG::MFGLenum const * mf_data = self->getMFVariableG();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list RegisterCombinersChunkBase_getMFCombinerColor0(OSG::RegisterCombinersChunkBase *self)
{
   boost::python::list result;
   OSG::MFColor4f const * mf_data = self->getMFCombinerColor0();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

boost::python::list RegisterCombinersChunkBase_getMFCombinerColor1(OSG::RegisterCombinersChunkBase *self)
{
   boost::python::list result;
   OSG::MFColor4f const * mf_data = self->getMFCombinerColor1();
   const OSG::UInt32 size(mf_data->size32());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append((*mf_data)[i]);
   }
   return result;
}

void register_RegisterCombinersChunkBase_class(){

    { //::OSG::RegisterCombinersChunkBase
        typedef bp::class_< OSG::RegisterCombinersChunkBase, bp::bases< ::OSG::StateChunk >, boost::noncopyable > RegisterCombinersChunkBase_exposer_t;
        RegisterCombinersChunkBase_exposer_t RegisterCombinersChunkBase_exposer = RegisterCombinersChunkBase_exposer_t( "RegisterCombinersChunkBase", bp::no_init );
        bp::scope RegisterCombinersChunkBase_scope( RegisterCombinersChunkBase_exposer );
        bp::scope().attr("Color0FieldId") = (int)OSG::RegisterCombinersChunkBase::Color0FieldId;
        bp::scope().attr("Color1FieldId") = (int)OSG::RegisterCombinersChunkBase::Color1FieldId;
        bp::scope().attr("ColorSumClampFieldId") = (int)OSG::RegisterCombinersChunkBase::ColorSumClampFieldId;
        bp::scope().attr("VariableArgbFieldId") = (int)OSG::RegisterCombinersChunkBase::VariableArgbFieldId;
        bp::scope().attr("VariableBrgbFieldId") = (int)OSG::RegisterCombinersChunkBase::VariableBrgbFieldId;
        bp::scope().attr("VariableCrgbFieldId") = (int)OSG::RegisterCombinersChunkBase::VariableCrgbFieldId;
        bp::scope().attr("VariableDrgbFieldId") = (int)OSG::RegisterCombinersChunkBase::VariableDrgbFieldId;
        bp::scope().attr("VariableAalphaFieldId") = (int)OSG::RegisterCombinersChunkBase::VariableAalphaFieldId;
        bp::scope().attr("VariableBalphaFieldId") = (int)OSG::RegisterCombinersChunkBase::VariableBalphaFieldId;
        bp::scope().attr("VariableCalphaFieldId") = (int)OSG::RegisterCombinersChunkBase::VariableCalphaFieldId;
        bp::scope().attr("VariableDalphaFieldId") = (int)OSG::RegisterCombinersChunkBase::VariableDalphaFieldId;
        bp::scope().attr("OutputABrgbFieldId") = (int)OSG::RegisterCombinersChunkBase::OutputABrgbFieldId;
        bp::scope().attr("OutputCDrgbFieldId") = (int)OSG::RegisterCombinersChunkBase::OutputCDrgbFieldId;
        bp::scope().attr("OutputSumrgbFieldId") = (int)OSG::RegisterCombinersChunkBase::OutputSumrgbFieldId;
        bp::scope().attr("ScalergbFieldId") = (int)OSG::RegisterCombinersChunkBase::ScalergbFieldId;
        bp::scope().attr("BiasrgbFieldId") = (int)OSG::RegisterCombinersChunkBase::BiasrgbFieldId;
        bp::scope().attr("OutputABalphaFieldId") = (int)OSG::RegisterCombinersChunkBase::OutputABalphaFieldId;
        bp::scope().attr("OutputCDalphaFieldId") = (int)OSG::RegisterCombinersChunkBase::OutputCDalphaFieldId;
        bp::scope().attr("OutputSumalphaFieldId") = (int)OSG::RegisterCombinersChunkBase::OutputSumalphaFieldId;
        bp::scope().attr("DotABrgbFieldId") = (int)OSG::RegisterCombinersChunkBase::DotABrgbFieldId;
        bp::scope().attr("DotCDrgbFieldId") = (int)OSG::RegisterCombinersChunkBase::DotCDrgbFieldId;
        bp::scope().attr("MuxSumrgbFieldId") = (int)OSG::RegisterCombinersChunkBase::MuxSumrgbFieldId;
        bp::scope().attr("ScalealphaFieldId") = (int)OSG::RegisterCombinersChunkBase::ScalealphaFieldId;
        bp::scope().attr("BiasalphaFieldId") = (int)OSG::RegisterCombinersChunkBase::BiasalphaFieldId;
        bp::scope().attr("MuxSumalphaFieldId") = (int)OSG::RegisterCombinersChunkBase::MuxSumalphaFieldId;
        bp::scope().attr("VariableEFieldId") = (int)OSG::RegisterCombinersChunkBase::VariableEFieldId;
        bp::scope().attr("VariableFFieldId") = (int)OSG::RegisterCombinersChunkBase::VariableFFieldId;
        bp::scope().attr("VariableGFieldId") = (int)OSG::RegisterCombinersChunkBase::VariableGFieldId;
        bp::scope().attr("CombinerColor0FieldId") = (int)OSG::RegisterCombinersChunkBase::CombinerColor0FieldId;
        bp::scope().attr("CombinerColor1FieldId") = (int)OSG::RegisterCombinersChunkBase::CombinerColor1FieldId;
        bp::scope().attr("PerStageConstantsFieldId") = (int)OSG::RegisterCombinersChunkBase::PerStageConstantsFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::RegisterCombinersChunkBase::NextFieldId;
        { //::OSG::RegisterCombinersChunkBase::copyFromBin
        
            typedef void ( ::OSG::RegisterCombinersChunkBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            RegisterCombinersChunkBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::RegisterCombinersChunkBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::RegisterCombinersChunkBase::copyToBin
        
            typedef void ( ::OSG::RegisterCombinersChunkBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            RegisterCombinersChunkBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::RegisterCombinersChunkBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::RegisterCombinersChunkBase::create
        
            typedef ::OSG::RegisterCombinersChunkTransitPtr ( *create_function_type )(  );
            
            RegisterCombinersChunkBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::RegisterCombinersChunkBase::create ) );
        
        }
        { //::OSG::RegisterCombinersChunkBase::createDependent
        
            typedef ::OSG::RegisterCombinersChunkTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            RegisterCombinersChunkBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::RegisterCombinersChunkBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::RegisterCombinersChunkBase::createLocal
        
            typedef ::OSG::RegisterCombinersChunkTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            RegisterCombinersChunkBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::RegisterCombinersChunkBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getBiasalpha
        
            typedef ::GLenum const & ( ::OSG::RegisterCombinersChunkBase::*getBiasalpha_function_type )( ::OSG::UInt32 const ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getBiasalpha"
                , getBiasalpha_function_type( &::OSG::RegisterCombinersChunkBase::getBiasalpha )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getBiasrgb
        
            typedef ::GLenum const & ( ::OSG::RegisterCombinersChunkBase::*getBiasrgb_function_type )( ::OSG::UInt32 const ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getBiasrgb"
                , getBiasrgb_function_type( &::OSG::RegisterCombinersChunkBase::getBiasrgb )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::RegisterCombinersChunkBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::RegisterCombinersChunkBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            RegisterCombinersChunkBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::RegisterCombinersChunkBase::getClassGroupId ) );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            RegisterCombinersChunkBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::RegisterCombinersChunkBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            RegisterCombinersChunkBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::RegisterCombinersChunkBase::getClassTypeId ) );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getColor0
        
            typedef ::OSG::Color4f const & ( ::OSG::RegisterCombinersChunkBase::*getColor0_function_type )(  ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getColor0"
                , getColor0_function_type( &::OSG::RegisterCombinersChunkBase::getColor0 )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getColor1
        
            typedef ::OSG::Color4f const & ( ::OSG::RegisterCombinersChunkBase::*getColor1_function_type )(  ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getColor1"
                , getColor1_function_type( &::OSG::RegisterCombinersChunkBase::getColor1 )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getColorSumClamp
        
            typedef bool ( ::OSG::RegisterCombinersChunkBase::*getColorSumClamp_function_type )(  ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getColorSumClamp"
                , getColorSumClamp_function_type( &::OSG::RegisterCombinersChunkBase::getColorSumClamp ) );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getCombinerColor0
        
            typedef ::OSG::Color4f const & ( ::OSG::RegisterCombinersChunkBase::*getCombinerColor0_function_type )( ::OSG::UInt32 const ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getCombinerColor0"
                , getCombinerColor0_function_type( &::OSG::RegisterCombinersChunkBase::getCombinerColor0 )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getCombinerColor1
        
            typedef ::OSG::Color4f const & ( ::OSG::RegisterCombinersChunkBase::*getCombinerColor1_function_type )( ::OSG::UInt32 const ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getCombinerColor1"
                , getCombinerColor1_function_type( &::OSG::RegisterCombinersChunkBase::getCombinerColor1 )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::RegisterCombinersChunkBase::*getContainerSize_function_type )(  ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::RegisterCombinersChunkBase::getContainerSize ) );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getDotABrgb
        
            typedef ::OSG::UInt8 ( ::OSG::RegisterCombinersChunkBase::*getDotABrgb_function_type )( ::OSG::UInt32 const ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getDotABrgb"
                , getDotABrgb_function_type( &::OSG::RegisterCombinersChunkBase::getDotABrgb )
                , ( bp::arg("index") ) );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getDotCDrgb
        
            typedef ::OSG::UInt8 ( ::OSG::RegisterCombinersChunkBase::*getDotCDrgb_function_type )( ::OSG::UInt32 const ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getDotCDrgb"
                , getDotCDrgb_function_type( &::OSG::RegisterCombinersChunkBase::getDotCDrgb )
                , ( bp::arg("index") ) );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getMuxSumalpha
        
            typedef ::OSG::UInt8 ( ::OSG::RegisterCombinersChunkBase::*getMuxSumalpha_function_type )( ::OSG::UInt32 const ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getMuxSumalpha"
                , getMuxSumalpha_function_type( &::OSG::RegisterCombinersChunkBase::getMuxSumalpha )
                , ( bp::arg("index") ) );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getMuxSumrgb
        
            typedef ::OSG::UInt8 ( ::OSG::RegisterCombinersChunkBase::*getMuxSumrgb_function_type )( ::OSG::UInt32 const ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getMuxSumrgb"
                , getMuxSumrgb_function_type( &::OSG::RegisterCombinersChunkBase::getMuxSumrgb )
                , ( bp::arg("index") ) );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getOutputABalpha
        
            typedef ::GLenum const & ( ::OSG::RegisterCombinersChunkBase::*getOutputABalpha_function_type )( ::OSG::UInt32 const ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getOutputABalpha"
                , getOutputABalpha_function_type( &::OSG::RegisterCombinersChunkBase::getOutputABalpha )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getOutputABrgb
        
            typedef ::GLenum const & ( ::OSG::RegisterCombinersChunkBase::*getOutputABrgb_function_type )( ::OSG::UInt32 const ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getOutputABrgb"
                , getOutputABrgb_function_type( &::OSG::RegisterCombinersChunkBase::getOutputABrgb )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getOutputCDalpha
        
            typedef ::GLenum const & ( ::OSG::RegisterCombinersChunkBase::*getOutputCDalpha_function_type )( ::OSG::UInt32 const ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getOutputCDalpha"
                , getOutputCDalpha_function_type( &::OSG::RegisterCombinersChunkBase::getOutputCDalpha )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getOutputCDrgb
        
            typedef ::GLenum const & ( ::OSG::RegisterCombinersChunkBase::*getOutputCDrgb_function_type )( ::OSG::UInt32 const ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getOutputCDrgb"
                , getOutputCDrgb_function_type( &::OSG::RegisterCombinersChunkBase::getOutputCDrgb )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getOutputSumalpha
        
            typedef ::GLenum const & ( ::OSG::RegisterCombinersChunkBase::*getOutputSumalpha_function_type )( ::OSG::UInt32 const ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getOutputSumalpha"
                , getOutputSumalpha_function_type( &::OSG::RegisterCombinersChunkBase::getOutputSumalpha )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getOutputSumrgb
        
            typedef ::GLenum const & ( ::OSG::RegisterCombinersChunkBase::*getOutputSumrgb_function_type )( ::OSG::UInt32 const ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getOutputSumrgb"
                , getOutputSumrgb_function_type( &::OSG::RegisterCombinersChunkBase::getOutputSumrgb )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getPerStageConstants
        
            typedef ::OSG::UInt8 ( ::OSG::RegisterCombinersChunkBase::*getPerStageConstants_function_type )(  ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getPerStageConstants"
                , getPerStageConstants_function_type( &::OSG::RegisterCombinersChunkBase::getPerStageConstants ) );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getSFColor0
        
            typedef ::OSG::SFColor4f const * ( ::OSG::RegisterCombinersChunkBase::*getSFColor0_function_type )(  ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getSFColor0"
                , getSFColor0_function_type( &::OSG::RegisterCombinersChunkBase::getSFColor0 )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getSFColor1
        
            typedef ::OSG::SFColor4f const * ( ::OSG::RegisterCombinersChunkBase::*getSFColor1_function_type )(  ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getSFColor1"
                , getSFColor1_function_type( &::OSG::RegisterCombinersChunkBase::getSFColor1 )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getSFColorSumClamp
        
            typedef ::OSG::SFBool const * ( ::OSG::RegisterCombinersChunkBase::*getSFColorSumClamp_function_type )(  ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getSFColorSumClamp"
                , getSFColorSumClamp_function_type( &::OSG::RegisterCombinersChunkBase::getSFColorSumClamp )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getSFPerStageConstants
        
            typedef ::OSG::SFUInt8 const * ( ::OSG::RegisterCombinersChunkBase::*getSFPerStageConstants_function_type )(  ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getSFPerStageConstants"
                , getSFPerStageConstants_function_type( &::OSG::RegisterCombinersChunkBase::getSFPerStageConstants )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getScalealpha
        
            typedef ::GLenum const & ( ::OSG::RegisterCombinersChunkBase::*getScalealpha_function_type )( ::OSG::UInt32 const ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getScalealpha"
                , getScalealpha_function_type( &::OSG::RegisterCombinersChunkBase::getScalealpha )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getScalergb
        
            typedef ::GLenum const & ( ::OSG::RegisterCombinersChunkBase::*getScalergb_function_type )( ::OSG::UInt32 const ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getScalergb"
                , getScalergb_function_type( &::OSG::RegisterCombinersChunkBase::getScalergb )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::RegisterCombinersChunkBase::*getType_function_type )(  ) ;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::RegisterCombinersChunkBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::RegisterCombinersChunkBase::*getType_function_type )(  ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::RegisterCombinersChunkBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getVariableAalpha
        
            typedef ::GLenum const & ( ::OSG::RegisterCombinersChunkBase::*getVariableAalpha_function_type )( ::OSG::UInt32 const ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getVariableAalpha"
                , getVariableAalpha_function_type( &::OSG::RegisterCombinersChunkBase::getVariableAalpha )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getVariableArgb
        
            typedef ::GLenum const & ( ::OSG::RegisterCombinersChunkBase::*getVariableArgb_function_type )( ::OSG::UInt32 const ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getVariableArgb"
                , getVariableArgb_function_type( &::OSG::RegisterCombinersChunkBase::getVariableArgb )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getVariableBalpha
        
            typedef ::GLenum const & ( ::OSG::RegisterCombinersChunkBase::*getVariableBalpha_function_type )( ::OSG::UInt32 const ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getVariableBalpha"
                , getVariableBalpha_function_type( &::OSG::RegisterCombinersChunkBase::getVariableBalpha )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getVariableBrgb
        
            typedef ::GLenum const & ( ::OSG::RegisterCombinersChunkBase::*getVariableBrgb_function_type )( ::OSG::UInt32 const ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getVariableBrgb"
                , getVariableBrgb_function_type( &::OSG::RegisterCombinersChunkBase::getVariableBrgb )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getVariableCalpha
        
            typedef ::GLenum const & ( ::OSG::RegisterCombinersChunkBase::*getVariableCalpha_function_type )( ::OSG::UInt32 const ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getVariableCalpha"
                , getVariableCalpha_function_type( &::OSG::RegisterCombinersChunkBase::getVariableCalpha )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getVariableCrgb
        
            typedef ::GLenum const & ( ::OSG::RegisterCombinersChunkBase::*getVariableCrgb_function_type )( ::OSG::UInt32 const ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getVariableCrgb"
                , getVariableCrgb_function_type( &::OSG::RegisterCombinersChunkBase::getVariableCrgb )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getVariableDalpha
        
            typedef ::GLenum const & ( ::OSG::RegisterCombinersChunkBase::*getVariableDalpha_function_type )( ::OSG::UInt32 const ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getVariableDalpha"
                , getVariableDalpha_function_type( &::OSG::RegisterCombinersChunkBase::getVariableDalpha )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getVariableDrgb
        
            typedef ::GLenum const & ( ::OSG::RegisterCombinersChunkBase::*getVariableDrgb_function_type )( ::OSG::UInt32 const ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getVariableDrgb"
                , getVariableDrgb_function_type( &::OSG::RegisterCombinersChunkBase::getVariableDrgb )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getVariableE
        
            typedef ::GLenum const & ( ::OSG::RegisterCombinersChunkBase::*getVariableE_function_type )( ::OSG::UInt32 const ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getVariableE"
                , getVariableE_function_type( &::OSG::RegisterCombinersChunkBase::getVariableE )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getVariableF
        
            typedef ::GLenum const & ( ::OSG::RegisterCombinersChunkBase::*getVariableF_function_type )( ::OSG::UInt32 const ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getVariableF"
                , getVariableF_function_type( &::OSG::RegisterCombinersChunkBase::getVariableF )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::RegisterCombinersChunkBase::getVariableG
        
            typedef ::GLenum const & ( ::OSG::RegisterCombinersChunkBase::*getVariableG_function_type )( ::OSG::UInt32 const ) const;
            
            RegisterCombinersChunkBase_exposer.def( 
                "getVariableG"
                , getVariableG_function_type( &::OSG::RegisterCombinersChunkBase::getVariableG )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::RegisterCombinersChunkBase::setColor0
        
            typedef void ( ::OSG::RegisterCombinersChunkBase::*setColor0_function_type )( ::OSG::Color4f const & ) ;
            
            RegisterCombinersChunkBase_exposer.def( 
                "setColor0"
                , setColor0_function_type( &::OSG::RegisterCombinersChunkBase::setColor0 )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::RegisterCombinersChunkBase::setColor1
        
            typedef void ( ::OSG::RegisterCombinersChunkBase::*setColor1_function_type )( ::OSG::Color4f const & ) ;
            
            RegisterCombinersChunkBase_exposer.def( 
                "setColor1"
                , setColor1_function_type( &::OSG::RegisterCombinersChunkBase::setColor1 )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::RegisterCombinersChunkBase::setColorSumClamp
        
            typedef void ( ::OSG::RegisterCombinersChunkBase::*setColorSumClamp_function_type )( bool const ) ;
            
            RegisterCombinersChunkBase_exposer.def( 
                "setColorSumClamp"
                , setColorSumClamp_function_type( &::OSG::RegisterCombinersChunkBase::setColorSumClamp )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::RegisterCombinersChunkBase::setPerStageConstants
        
            typedef void ( ::OSG::RegisterCombinersChunkBase::*setPerStageConstants_function_type )( ::OSG::UInt8 const ) ;
            
            RegisterCombinersChunkBase_exposer.def( 
                "setPerStageConstants"
                , setPerStageConstants_function_type( &::OSG::RegisterCombinersChunkBase::setPerStageConstants )
                , ( bp::arg("value") ) );
        
        }
        RegisterCombinersChunkBase_exposer.staticmethod( "create" );
        RegisterCombinersChunkBase_exposer.staticmethod( "createDependent" );
        RegisterCombinersChunkBase_exposer.staticmethod( "createLocal" );
        RegisterCombinersChunkBase_exposer.staticmethod( "getClassGroupId" );
        RegisterCombinersChunkBase_exposer.staticmethod( "getClassType" );
        RegisterCombinersChunkBase_exposer.staticmethod( "getClassTypeId" );
        RegisterCombinersChunkBase_exposer.def("getMFVariableArgb",RegisterCombinersChunkBase_getMFVariableArgb);
        RegisterCombinersChunkBase_exposer.def("getMFVariableBrgb",RegisterCombinersChunkBase_getMFVariableBrgb);
        RegisterCombinersChunkBase_exposer.def("getMFVariableCrgb",RegisterCombinersChunkBase_getMFVariableCrgb);
        RegisterCombinersChunkBase_exposer.def("getMFVariableDrgb",RegisterCombinersChunkBase_getMFVariableDrgb);
        RegisterCombinersChunkBase_exposer.def("getMFVariableAalpha",RegisterCombinersChunkBase_getMFVariableAalpha);
        RegisterCombinersChunkBase_exposer.def("getMFVariableBalpha",RegisterCombinersChunkBase_getMFVariableBalpha);
        RegisterCombinersChunkBase_exposer.def("getMFVariableCalpha",RegisterCombinersChunkBase_getMFVariableCalpha);
        RegisterCombinersChunkBase_exposer.def("getMFVariableDalpha",RegisterCombinersChunkBase_getMFVariableDalpha);
        RegisterCombinersChunkBase_exposer.def("getMFOutputABrgb",RegisterCombinersChunkBase_getMFOutputABrgb);
        RegisterCombinersChunkBase_exposer.def("getMFOutputCDrgb",RegisterCombinersChunkBase_getMFOutputCDrgb);
        RegisterCombinersChunkBase_exposer.def("getMFOutputSumrgb",RegisterCombinersChunkBase_getMFOutputSumrgb);
        RegisterCombinersChunkBase_exposer.def("getMFScalergb",RegisterCombinersChunkBase_getMFScalergb);
        RegisterCombinersChunkBase_exposer.def("getMFBiasrgb",RegisterCombinersChunkBase_getMFBiasrgb);
        RegisterCombinersChunkBase_exposer.def("getMFOutputABalpha",RegisterCombinersChunkBase_getMFOutputABalpha);
        RegisterCombinersChunkBase_exposer.def("getMFOutputCDalpha",RegisterCombinersChunkBase_getMFOutputCDalpha);
        RegisterCombinersChunkBase_exposer.def("getMFOutputSumalpha",RegisterCombinersChunkBase_getMFOutputSumalpha);
        RegisterCombinersChunkBase_exposer.def("getMFDotABrgb",RegisterCombinersChunkBase_getMFDotABrgb);
        RegisterCombinersChunkBase_exposer.def("getMFDotCDrgb",RegisterCombinersChunkBase_getMFDotCDrgb);
        RegisterCombinersChunkBase_exposer.def("getMFMuxSumrgb",RegisterCombinersChunkBase_getMFMuxSumrgb);
        RegisterCombinersChunkBase_exposer.def("getMFScalealpha",RegisterCombinersChunkBase_getMFScalealpha);
        RegisterCombinersChunkBase_exposer.def("getMFBiasalpha",RegisterCombinersChunkBase_getMFBiasalpha);
        RegisterCombinersChunkBase_exposer.def("getMFMuxSumalpha",RegisterCombinersChunkBase_getMFMuxSumalpha);
        RegisterCombinersChunkBase_exposer.def("getMFVariableE",RegisterCombinersChunkBase_getMFVariableE);
        RegisterCombinersChunkBase_exposer.def("getMFVariableF",RegisterCombinersChunkBase_getMFVariableF);
        RegisterCombinersChunkBase_exposer.def("getMFVariableG",RegisterCombinersChunkBase_getMFVariableG);
        RegisterCombinersChunkBase_exposer.def("getMFCombinerColor0",RegisterCombinersChunkBase_getMFCombinerColor0);
        RegisterCombinersChunkBase_exposer.def("getMFCombinerColor1",RegisterCombinersChunkBase_getMFCombinerColor1);
    }

}
