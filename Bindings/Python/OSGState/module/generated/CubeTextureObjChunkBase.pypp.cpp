// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGState_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "CubeTextureObjChunkBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_CubeTextureObjChunkBase_class(){

    { //::OSG::CubeTextureObjChunkBase
        typedef bp::class_< OSG::CubeTextureObjChunkBase, bp::bases< ::OSG::TextureObjChunk >, boost::noncopyable > CubeTextureObjChunkBase_exposer_t;
        CubeTextureObjChunkBase_exposer_t CubeTextureObjChunkBase_exposer = CubeTextureObjChunkBase_exposer_t( "CubeTextureObjChunkBase", bp::no_init );
        bp::scope CubeTextureObjChunkBase_scope( CubeTextureObjChunkBase_exposer );
        bp::scope().attr("PosZImageFieldId") = (int)OSG::CubeTextureObjChunkBase::PosZImageFieldId;
        bp::scope().attr("PosXImageFieldId") = (int)OSG::CubeTextureObjChunkBase::PosXImageFieldId;
        bp::scope().attr("NegXImageFieldId") = (int)OSG::CubeTextureObjChunkBase::NegXImageFieldId;
        bp::scope().attr("PosYImageFieldId") = (int)OSG::CubeTextureObjChunkBase::PosYImageFieldId;
        bp::scope().attr("NegYImageFieldId") = (int)OSG::CubeTextureObjChunkBase::NegYImageFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::CubeTextureObjChunkBase::NextFieldId;
        { //::OSG::CubeTextureObjChunkBase::copyFromBin
        
            typedef void ( ::OSG::CubeTextureObjChunkBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            CubeTextureObjChunkBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::CubeTextureObjChunkBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::CubeTextureObjChunkBase::copyToBin
        
            typedef void ( ::OSG::CubeTextureObjChunkBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            CubeTextureObjChunkBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::CubeTextureObjChunkBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::CubeTextureObjChunkBase::create
        
            typedef ::OSG::CubeTextureObjChunkTransitPtr ( *create_function_type )(  );
            
            CubeTextureObjChunkBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::CubeTextureObjChunkBase::create ) );
        
        }
        { //::OSG::CubeTextureObjChunkBase::createDependent
        
            typedef ::OSG::CubeTextureObjChunkTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            CubeTextureObjChunkBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::CubeTextureObjChunkBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::CubeTextureObjChunkBase::createLocal
        
            typedef ::OSG::CubeTextureObjChunkTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            CubeTextureObjChunkBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::CubeTextureObjChunkBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::CubeTextureObjChunkBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::CubeTextureObjChunkBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            CubeTextureObjChunkBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::CubeTextureObjChunkBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::CubeTextureObjChunkBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            CubeTextureObjChunkBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::CubeTextureObjChunkBase::getClassGroupId ) );
        
        }
        { //::OSG::CubeTextureObjChunkBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            CubeTextureObjChunkBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::CubeTextureObjChunkBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::CubeTextureObjChunkBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            CubeTextureObjChunkBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::CubeTextureObjChunkBase::getClassTypeId ) );
        
        }
        { //::OSG::CubeTextureObjChunkBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::CubeTextureObjChunkBase::*getContainerSize_function_type )(  ) const;
            
            CubeTextureObjChunkBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::CubeTextureObjChunkBase::getContainerSize ) );
        
        }
        { //::OSG::CubeTextureObjChunkBase::getNegXImage
        
            typedef ::OSG::Image * ( ::OSG::CubeTextureObjChunkBase::*getNegXImage_function_type )(  ) const;
            
            CubeTextureObjChunkBase_exposer.def( 
                "getNegXImage"
                , getNegXImage_function_type( &::OSG::CubeTextureObjChunkBase::getNegXImage )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CubeTextureObjChunkBase::getNegYImage
        
            typedef ::OSG::Image * ( ::OSG::CubeTextureObjChunkBase::*getNegYImage_function_type )(  ) const;
            
            CubeTextureObjChunkBase_exposer.def( 
                "getNegYImage"
                , getNegYImage_function_type( &::OSG::CubeTextureObjChunkBase::getNegYImage )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CubeTextureObjChunkBase::getPosXImage
        
            typedef ::OSG::Image * ( ::OSG::CubeTextureObjChunkBase::*getPosXImage_function_type )(  ) const;
            
            CubeTextureObjChunkBase_exposer.def( 
                "getPosXImage"
                , getPosXImage_function_type( &::OSG::CubeTextureObjChunkBase::getPosXImage )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CubeTextureObjChunkBase::getPosYImage
        
            typedef ::OSG::Image * ( ::OSG::CubeTextureObjChunkBase::*getPosYImage_function_type )(  ) const;
            
            CubeTextureObjChunkBase_exposer.def( 
                "getPosYImage"
                , getPosYImage_function_type( &::OSG::CubeTextureObjChunkBase::getPosYImage )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CubeTextureObjChunkBase::getPosZImage
        
            typedef ::OSG::Image * ( ::OSG::CubeTextureObjChunkBase::*getPosZImage_function_type )(  ) const;
            
            CubeTextureObjChunkBase_exposer.def( 
                "getPosZImage"
                , getPosZImage_function_type( &::OSG::CubeTextureObjChunkBase::getPosZImage )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CubeTextureObjChunkBase::getSFNegXImage
        
            typedef ::OSG::SFUnrecImagePtr const * ( ::OSG::CubeTextureObjChunkBase::*getSFNegXImage_function_type )(  ) const;
            
            CubeTextureObjChunkBase_exposer.def( 
                "getSFNegXImage"
                , getSFNegXImage_function_type( &::OSG::CubeTextureObjChunkBase::getSFNegXImage )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CubeTextureObjChunkBase::getSFNegYImage
        
            typedef ::OSG::SFUnrecImagePtr const * ( ::OSG::CubeTextureObjChunkBase::*getSFNegYImage_function_type )(  ) const;
            
            CubeTextureObjChunkBase_exposer.def( 
                "getSFNegYImage"
                , getSFNegYImage_function_type( &::OSG::CubeTextureObjChunkBase::getSFNegYImage )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CubeTextureObjChunkBase::getSFPosXImage
        
            typedef ::OSG::SFUnrecImagePtr const * ( ::OSG::CubeTextureObjChunkBase::*getSFPosXImage_function_type )(  ) const;
            
            CubeTextureObjChunkBase_exposer.def( 
                "getSFPosXImage"
                , getSFPosXImage_function_type( &::OSG::CubeTextureObjChunkBase::getSFPosXImage )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CubeTextureObjChunkBase::getSFPosYImage
        
            typedef ::OSG::SFUnrecImagePtr const * ( ::OSG::CubeTextureObjChunkBase::*getSFPosYImage_function_type )(  ) const;
            
            CubeTextureObjChunkBase_exposer.def( 
                "getSFPosYImage"
                , getSFPosYImage_function_type( &::OSG::CubeTextureObjChunkBase::getSFPosYImage )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CubeTextureObjChunkBase::getSFPosZImage
        
            typedef ::OSG::SFUnrecImagePtr const * ( ::OSG::CubeTextureObjChunkBase::*getSFPosZImage_function_type )(  ) const;
            
            CubeTextureObjChunkBase_exposer.def( 
                "getSFPosZImage"
                , getSFPosZImage_function_type( &::OSG::CubeTextureObjChunkBase::getSFPosZImage )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CubeTextureObjChunkBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::CubeTextureObjChunkBase::*getType_function_type )(  ) ;
            
            CubeTextureObjChunkBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::CubeTextureObjChunkBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CubeTextureObjChunkBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::CubeTextureObjChunkBase::*getType_function_type )(  ) const;
            
            CubeTextureObjChunkBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::CubeTextureObjChunkBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::CubeTextureObjChunkBase::setNegXImage
        
            typedef void ( ::OSG::CubeTextureObjChunkBase::*setNegXImage_function_type )( ::OSG::Image * const ) ;
            
            CubeTextureObjChunkBase_exposer.def( 
                "setNegXImage"
                , setNegXImage_function_type( &::OSG::CubeTextureObjChunkBase::setNegXImage )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CubeTextureObjChunkBase::setNegYImage
        
            typedef void ( ::OSG::CubeTextureObjChunkBase::*setNegYImage_function_type )( ::OSG::Image * const ) ;
            
            CubeTextureObjChunkBase_exposer.def( 
                "setNegYImage"
                , setNegYImage_function_type( &::OSG::CubeTextureObjChunkBase::setNegYImage )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CubeTextureObjChunkBase::setPosXImage
        
            typedef void ( ::OSG::CubeTextureObjChunkBase::*setPosXImage_function_type )( ::OSG::Image * const ) ;
            
            CubeTextureObjChunkBase_exposer.def( 
                "setPosXImage"
                , setPosXImage_function_type( &::OSG::CubeTextureObjChunkBase::setPosXImage )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CubeTextureObjChunkBase::setPosYImage
        
            typedef void ( ::OSG::CubeTextureObjChunkBase::*setPosYImage_function_type )( ::OSG::Image * const ) ;
            
            CubeTextureObjChunkBase_exposer.def( 
                "setPosYImage"
                , setPosYImage_function_type( &::OSG::CubeTextureObjChunkBase::setPosYImage )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::CubeTextureObjChunkBase::setPosZImage
        
            typedef void ( ::OSG::CubeTextureObjChunkBase::*setPosZImage_function_type )( ::OSG::Image * const ) ;
            
            CubeTextureObjChunkBase_exposer.def( 
                "setPosZImage"
                , setPosZImage_function_type( &::OSG::CubeTextureObjChunkBase::setPosZImage )
                , ( bp::arg("value") ) );
        
        }
        CubeTextureObjChunkBase_exposer.staticmethod( "create" );
        CubeTextureObjChunkBase_exposer.staticmethod( "createDependent" );
        CubeTextureObjChunkBase_exposer.staticmethod( "createLocal" );
        CubeTextureObjChunkBase_exposer.staticmethod( "getClassGroupId" );
        CubeTextureObjChunkBase_exposer.staticmethod( "getClassType" );
        CubeTextureObjChunkBase_exposer.staticmethod( "getClassTypeId" );
    }

}
