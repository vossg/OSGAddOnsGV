// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGState_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "TextureImageChunkBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_TextureImageChunkBase_class(){

    { //::OSG::TextureImageChunkBase
        typedef bp::class_< OSG::TextureImageChunkBase, bp::bases< ::OSG::StateChunk >, boost::noncopyable > TextureImageChunkBase_exposer_t;
        TextureImageChunkBase_exposer_t TextureImageChunkBase_exposer = TextureImageChunkBase_exposer_t( "TextureImageChunkBase", bp::no_init );
        bp::scope TextureImageChunkBase_scope( TextureImageChunkBase_exposer );
        bp::scope().attr("TextureFieldId") = (int)OSG::TextureImageChunkBase::TextureFieldId;
        bp::scope().attr("LevelFieldId") = (int)OSG::TextureImageChunkBase::LevelFieldId;
        bp::scope().attr("LayerFieldId") = (int)OSG::TextureImageChunkBase::LayerFieldId;
        bp::scope().attr("AccessFieldId") = (int)OSG::TextureImageChunkBase::AccessFieldId;
        bp::scope().attr("FormatFieldId") = (int)OSG::TextureImageChunkBase::FormatFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::TextureImageChunkBase::NextFieldId;
        { //::OSG::TextureImageChunkBase::copyFromBin
        
            typedef void ( ::OSG::TextureImageChunkBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            TextureImageChunkBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::TextureImageChunkBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::TextureImageChunkBase::copyToBin
        
            typedef void ( ::OSG::TextureImageChunkBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            TextureImageChunkBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::TextureImageChunkBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::TextureImageChunkBase::create
        
            typedef ::OSG::TextureImageChunkTransitPtr ( *create_function_type )(  );
            
            TextureImageChunkBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::TextureImageChunkBase::create ) );
        
        }
        { //::OSG::TextureImageChunkBase::createDependent
        
            typedef ::OSG::TextureImageChunkTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            TextureImageChunkBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::TextureImageChunkBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::TextureImageChunkBase::createLocal
        
            typedef ::OSG::TextureImageChunkTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            TextureImageChunkBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::TextureImageChunkBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::TextureImageChunkBase::getAccess
        
            typedef ::GLenum const & ( ::OSG::TextureImageChunkBase::*getAccess_function_type )(  ) const;
            
            TextureImageChunkBase_exposer.def( 
                "getAccess"
                , getAccess_function_type( &::OSG::TextureImageChunkBase::getAccess )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureImageChunkBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::TextureImageChunkBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            TextureImageChunkBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::TextureImageChunkBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::TextureImageChunkBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            TextureImageChunkBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::TextureImageChunkBase::getClassGroupId ) );
        
        }
        { //::OSG::TextureImageChunkBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            TextureImageChunkBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::TextureImageChunkBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::TextureImageChunkBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            TextureImageChunkBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::TextureImageChunkBase::getClassTypeId ) );
        
        }
        { //::OSG::TextureImageChunkBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::TextureImageChunkBase::*getContainerSize_function_type )(  ) const;
            
            TextureImageChunkBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::TextureImageChunkBase::getContainerSize ) );
        
        }
        { //::OSG::TextureImageChunkBase::getFormat
        
            typedef ::GLenum const & ( ::OSG::TextureImageChunkBase::*getFormat_function_type )(  ) const;
            
            TextureImageChunkBase_exposer.def( 
                "getFormat"
                , getFormat_function_type( &::OSG::TextureImageChunkBase::getFormat )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::TextureImageChunkBase::getLayer
        
            typedef ::OSG::Int32 ( ::OSG::TextureImageChunkBase::*getLayer_function_type )(  ) const;
            
            TextureImageChunkBase_exposer.def( 
                "getLayer"
                , getLayer_function_type( &::OSG::TextureImageChunkBase::getLayer ) );
        
        }
        { //::OSG::TextureImageChunkBase::getLevel
        
            typedef ::OSG::Int32 ( ::OSG::TextureImageChunkBase::*getLevel_function_type )(  ) const;
            
            TextureImageChunkBase_exposer.def( 
                "getLevel"
                , getLevel_function_type( &::OSG::TextureImageChunkBase::getLevel ) );
        
        }
        { //::OSG::TextureImageChunkBase::getSFAccess
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureImageChunkBase::*getSFAccess_function_type )(  ) const;
            
            TextureImageChunkBase_exposer.def( 
                "getSFAccess"
                , getSFAccess_function_type( &::OSG::TextureImageChunkBase::getSFAccess )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureImageChunkBase::getSFFormat
        
            typedef ::OSG::SFGLenum const * ( ::OSG::TextureImageChunkBase::*getSFFormat_function_type )(  ) const;
            
            TextureImageChunkBase_exposer.def( 
                "getSFFormat"
                , getSFFormat_function_type( &::OSG::TextureImageChunkBase::getSFFormat )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureImageChunkBase::getSFLayer
        
            typedef ::OSG::SFInt32 const * ( ::OSG::TextureImageChunkBase::*getSFLayer_function_type )(  ) const;
            
            TextureImageChunkBase_exposer.def( 
                "getSFLayer"
                , getSFLayer_function_type( &::OSG::TextureImageChunkBase::getSFLayer )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureImageChunkBase::getSFLevel
        
            typedef ::OSG::SFInt32 const * ( ::OSG::TextureImageChunkBase::*getSFLevel_function_type )(  ) const;
            
            TextureImageChunkBase_exposer.def( 
                "getSFLevel"
                , getSFLevel_function_type( &::OSG::TextureImageChunkBase::getSFLevel )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureImageChunkBase::getSFTexture
        
            typedef ::OSG::SFUnrecTextureBaseChunkPtr const * ( ::OSG::TextureImageChunkBase::*getSFTexture_function_type )(  ) const;
            
            TextureImageChunkBase_exposer.def( 
                "getSFTexture"
                , getSFTexture_function_type( &::OSG::TextureImageChunkBase::getSFTexture )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureImageChunkBase::getTexture
        
            typedef ::OSG::TextureBaseChunk * ( ::OSG::TextureImageChunkBase::*getTexture_function_type )(  ) const;
            
            TextureImageChunkBase_exposer.def( 
                "getTexture"
                , getTexture_function_type( &::OSG::TextureImageChunkBase::getTexture )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureImageChunkBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::TextureImageChunkBase::*getType_function_type )(  ) ;
            
            TextureImageChunkBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::TextureImageChunkBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureImageChunkBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::TextureImageChunkBase::*getType_function_type )(  ) const;
            
            TextureImageChunkBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::TextureImageChunkBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::TextureImageChunkBase::setAccess
        
            typedef void ( ::OSG::TextureImageChunkBase::*setAccess_function_type )( ::GLenum const & ) ;
            
            TextureImageChunkBase_exposer.def( 
                "setAccess"
                , setAccess_function_type( &::OSG::TextureImageChunkBase::setAccess )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureImageChunkBase::setFormat
        
            typedef void ( ::OSG::TextureImageChunkBase::*setFormat_function_type )( ::GLenum const & ) ;
            
            TextureImageChunkBase_exposer.def( 
                "setFormat"
                , setFormat_function_type( &::OSG::TextureImageChunkBase::setFormat )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureImageChunkBase::setLayer
        
            typedef void ( ::OSG::TextureImageChunkBase::*setLayer_function_type )( ::OSG::Int32 const ) ;
            
            TextureImageChunkBase_exposer.def( 
                "setLayer"
                , setLayer_function_type( &::OSG::TextureImageChunkBase::setLayer )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureImageChunkBase::setLevel
        
            typedef void ( ::OSG::TextureImageChunkBase::*setLevel_function_type )( ::OSG::Int32 const ) ;
            
            TextureImageChunkBase_exposer.def( 
                "setLevel"
                , setLevel_function_type( &::OSG::TextureImageChunkBase::setLevel )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::TextureImageChunkBase::setTexture
        
            typedef void ( ::OSG::TextureImageChunkBase::*setTexture_function_type )( ::OSG::TextureBaseChunk * const ) ;
            
            TextureImageChunkBase_exposer.def( 
                "setTexture"
                , setTexture_function_type( &::OSG::TextureImageChunkBase::setTexture )
                , ( bp::arg("value") ) );
        
        }
        TextureImageChunkBase_exposer.staticmethod( "create" );
        TextureImageChunkBase_exposer.staticmethod( "createDependent" );
        TextureImageChunkBase_exposer.staticmethod( "createLocal" );
        TextureImageChunkBase_exposer.staticmethod( "getClassGroupId" );
        TextureImageChunkBase_exposer.staticmethod( "getClassType" );
        TextureImageChunkBase_exposer.staticmethod( "getClassTypeId" );
    }

}
