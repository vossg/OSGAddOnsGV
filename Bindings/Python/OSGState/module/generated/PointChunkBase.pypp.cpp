// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGState_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "PointChunkBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct PointChunkBase_wrapper : OSG::PointChunkBase, bp::wrapper< OSG::PointChunkBase > {



};

void register_PointChunkBase_class(){

    { //::OSG::PointChunkBase
        typedef bp::class_< PointChunkBase_wrapper, bp::bases< ::OSG::StateChunk >, boost::noncopyable > PointChunkBase_exposer_t;
        PointChunkBase_exposer_t PointChunkBase_exposer = PointChunkBase_exposer_t( "PointChunkBase", bp::no_init );
        bp::scope PointChunkBase_scope( PointChunkBase_exposer );
        bp::scope().attr("SizeFieldId") = (int)OSG::PointChunkBase::SizeFieldId;
        bp::scope().attr("SmoothFieldId") = (int)OSG::PointChunkBase::SmoothFieldId;
        bp::scope().attr("MinSizeFieldId") = (int)OSG::PointChunkBase::MinSizeFieldId;
        bp::scope().attr("MaxSizeFieldId") = (int)OSG::PointChunkBase::MaxSizeFieldId;
        bp::scope().attr("ConstantAttenuationFieldId") = (int)OSG::PointChunkBase::ConstantAttenuationFieldId;
        bp::scope().attr("LinearAttenuationFieldId") = (int)OSG::PointChunkBase::LinearAttenuationFieldId;
        bp::scope().attr("QuadraticAttenuationFieldId") = (int)OSG::PointChunkBase::QuadraticAttenuationFieldId;
        bp::scope().attr("FadeThresholdFieldId") = (int)OSG::PointChunkBase::FadeThresholdFieldId;
        bp::scope().attr("SpriteFieldId") = (int)OSG::PointChunkBase::SpriteFieldId;
        bp::scope().attr("RModeFieldId") = (int)OSG::PointChunkBase::RModeFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::PointChunkBase::NextFieldId;
        { //::OSG::PointChunkBase::copyFromBin
        
            typedef void ( ::OSG::PointChunkBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            PointChunkBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::PointChunkBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::PointChunkBase::copyToBin
        
            typedef void ( ::OSG::PointChunkBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            PointChunkBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::PointChunkBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::PointChunkBase::create
        
            typedef ::OSG::PointChunkTransitPtr ( *create_function_type )(  );
            
            PointChunkBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::PointChunkBase::create ) );
        
        }
        { //::OSG::PointChunkBase::createDependent
        
            typedef ::OSG::PointChunkTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            PointChunkBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::PointChunkBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::PointChunkBase::createLocal
        
            typedef ::OSG::PointChunkTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            PointChunkBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::PointChunkBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::PointChunkBase::getBinSize
        
            typedef ::OSG::SizeT ( ::OSG::PointChunkBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            PointChunkBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::PointChunkBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::PointChunkBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            PointChunkBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::PointChunkBase::getClassGroupId ) );
        
        }
        { //::OSG::PointChunkBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            PointChunkBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::PointChunkBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::PointChunkBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            PointChunkBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::PointChunkBase::getClassTypeId ) );
        
        }
        { //::OSG::PointChunkBase::getConstantAttenuation
        
            typedef ::OSG::Real32 ( ::OSG::PointChunkBase::*getConstantAttenuation_function_type )(  ) const;
            
            PointChunkBase_exposer.def( 
                "getConstantAttenuation"
                , getConstantAttenuation_function_type( &::OSG::PointChunkBase::getConstantAttenuation ) );
        
        }
        { //::OSG::PointChunkBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::PointChunkBase::*getContainerSize_function_type )(  ) const;
            
            PointChunkBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::PointChunkBase::getContainerSize ) );
        
        }
        { //::OSG::PointChunkBase::getFadeThreshold
        
            typedef ::OSG::Real32 ( ::OSG::PointChunkBase::*getFadeThreshold_function_type )(  ) const;
            
            PointChunkBase_exposer.def( 
                "getFadeThreshold"
                , getFadeThreshold_function_type( &::OSG::PointChunkBase::getFadeThreshold ) );
        
        }
        { //::OSG::PointChunkBase::getLinearAttenuation
        
            typedef ::OSG::Real32 ( ::OSG::PointChunkBase::*getLinearAttenuation_function_type )(  ) const;
            
            PointChunkBase_exposer.def( 
                "getLinearAttenuation"
                , getLinearAttenuation_function_type( &::OSG::PointChunkBase::getLinearAttenuation ) );
        
        }
        { //::OSG::PointChunkBase::getMaxSize
        
            typedef ::OSG::Real32 ( ::OSG::PointChunkBase::*getMaxSize_function_type )(  ) const;
            
            PointChunkBase_exposer.def( 
                "getMaxSize"
                , getMaxSize_function_type( &::OSG::PointChunkBase::getMaxSize ) );
        
        }
        { //::OSG::PointChunkBase::getMinSize
        
            typedef ::OSG::Real32 ( ::OSG::PointChunkBase::*getMinSize_function_type )(  ) const;
            
            PointChunkBase_exposer.def( 
                "getMinSize"
                , getMinSize_function_type( &::OSG::PointChunkBase::getMinSize ) );
        
        }
        { //::OSG::PointChunkBase::getQuadraticAttenuation
        
            typedef ::OSG::Real32 ( ::OSG::PointChunkBase::*getQuadraticAttenuation_function_type )(  ) const;
            
            PointChunkBase_exposer.def( 
                "getQuadraticAttenuation"
                , getQuadraticAttenuation_function_type( &::OSG::PointChunkBase::getQuadraticAttenuation ) );
        
        }
        { //::OSG::PointChunkBase::getRMode
        
            typedef ::GLenum const & ( ::OSG::PointChunkBase::*getRMode_function_type )(  ) const;
            
            PointChunkBase_exposer.def( 
                "getRMode"
                , getRMode_function_type( &::OSG::PointChunkBase::getRMode )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::OSG::PointChunkBase::getSFConstantAttenuation
        
            typedef ::OSG::SFReal32 const * ( ::OSG::PointChunkBase::*getSFConstantAttenuation_function_type )(  ) const;
            
            PointChunkBase_exposer.def( 
                "getSFConstantAttenuation"
                , getSFConstantAttenuation_function_type( &::OSG::PointChunkBase::getSFConstantAttenuation )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::PointChunkBase::getSFFadeThreshold
        
            typedef ::OSG::SFReal32 const * ( ::OSG::PointChunkBase::*getSFFadeThreshold_function_type )(  ) const;
            
            PointChunkBase_exposer.def( 
                "getSFFadeThreshold"
                , getSFFadeThreshold_function_type( &::OSG::PointChunkBase::getSFFadeThreshold )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::PointChunkBase::getSFLinearAttenuation
        
            typedef ::OSG::SFReal32 const * ( ::OSG::PointChunkBase::*getSFLinearAttenuation_function_type )(  ) const;
            
            PointChunkBase_exposer.def( 
                "getSFLinearAttenuation"
                , getSFLinearAttenuation_function_type( &::OSG::PointChunkBase::getSFLinearAttenuation )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::PointChunkBase::getSFMaxSize
        
            typedef ::OSG::SFReal32 const * ( ::OSG::PointChunkBase::*getSFMaxSize_function_type )(  ) const;
            
            PointChunkBase_exposer.def( 
                "getSFMaxSize"
                , getSFMaxSize_function_type( &::OSG::PointChunkBase::getSFMaxSize )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::PointChunkBase::getSFMinSize
        
            typedef ::OSG::SFReal32 const * ( ::OSG::PointChunkBase::*getSFMinSize_function_type )(  ) const;
            
            PointChunkBase_exposer.def( 
                "getSFMinSize"
                , getSFMinSize_function_type( &::OSG::PointChunkBase::getSFMinSize )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::PointChunkBase::getSFQuadraticAttenuation
        
            typedef ::OSG::SFReal32 const * ( ::OSG::PointChunkBase::*getSFQuadraticAttenuation_function_type )(  ) const;
            
            PointChunkBase_exposer.def( 
                "getSFQuadraticAttenuation"
                , getSFQuadraticAttenuation_function_type( &::OSG::PointChunkBase::getSFQuadraticAttenuation )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::PointChunkBase::getSFRMode
        
            typedef ::OSG::SFGLenum const * ( ::OSG::PointChunkBase::*getSFRMode_function_type )(  ) const;
            
            PointChunkBase_exposer.def( 
                "getSFRMode"
                , getSFRMode_function_type( &::OSG::PointChunkBase::getSFRMode )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::PointChunkBase::getSFSize
        
            typedef ::OSG::SFReal32 const * ( ::OSG::PointChunkBase::*getSFSize_function_type )(  ) const;
            
            PointChunkBase_exposer.def( 
                "getSFSize"
                , getSFSize_function_type( &::OSG::PointChunkBase::getSFSize )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::PointChunkBase::getSFSmooth
        
            typedef ::OSG::SFBool const * ( ::OSG::PointChunkBase::*getSFSmooth_function_type )(  ) const;
            
            PointChunkBase_exposer.def( 
                "getSFSmooth"
                , getSFSmooth_function_type( &::OSG::PointChunkBase::getSFSmooth )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::PointChunkBase::getSFSprite
        
            typedef ::OSG::SFBool const * ( ::OSG::PointChunkBase::*getSFSprite_function_type )(  ) const;
            
            PointChunkBase_exposer.def( 
                "getSFSprite"
                , getSFSprite_function_type( &::OSG::PointChunkBase::getSFSprite )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::PointChunkBase::getSize
        
            typedef ::OSG::Real32 ( ::OSG::PointChunkBase::*getSize_function_type )(  ) const;
            
            PointChunkBase_exposer.def( 
                "getSize"
                , getSize_function_type( &::OSG::PointChunkBase::getSize ) );
        
        }
        { //::OSG::PointChunkBase::getSmooth
        
            typedef bool ( ::OSG::PointChunkBase::*getSmooth_function_type )(  ) const;
            
            PointChunkBase_exposer.def( 
                "getSmooth"
                , getSmooth_function_type( &::OSG::PointChunkBase::getSmooth ) );
        
        }
        { //::OSG::PointChunkBase::getSprite
        
            typedef bool ( ::OSG::PointChunkBase::*getSprite_function_type )(  ) const;
            
            PointChunkBase_exposer.def( 
                "getSprite"
                , getSprite_function_type( &::OSG::PointChunkBase::getSprite ) );
        
        }
        { //::OSG::PointChunkBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::PointChunkBase::*getType_function_type )(  ) ;
            
            PointChunkBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::PointChunkBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::PointChunkBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::PointChunkBase::*getType_function_type )(  ) const;
            
            PointChunkBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::PointChunkBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::PointChunkBase::setConstantAttenuation
        
            typedef void ( ::OSG::PointChunkBase::*setConstantAttenuation_function_type )( ::OSG::Real32 const ) ;
            
            PointChunkBase_exposer.def( 
                "setConstantAttenuation"
                , setConstantAttenuation_function_type( &::OSG::PointChunkBase::setConstantAttenuation )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::PointChunkBase::setFadeThreshold
        
            typedef void ( ::OSG::PointChunkBase::*setFadeThreshold_function_type )( ::OSG::Real32 const ) ;
            
            PointChunkBase_exposer.def( 
                "setFadeThreshold"
                , setFadeThreshold_function_type( &::OSG::PointChunkBase::setFadeThreshold )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::PointChunkBase::setLinearAttenuation
        
            typedef void ( ::OSG::PointChunkBase::*setLinearAttenuation_function_type )( ::OSG::Real32 const ) ;
            
            PointChunkBase_exposer.def( 
                "setLinearAttenuation"
                , setLinearAttenuation_function_type( &::OSG::PointChunkBase::setLinearAttenuation )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::PointChunkBase::setMaxSize
        
            typedef void ( ::OSG::PointChunkBase::*setMaxSize_function_type )( ::OSG::Real32 const ) ;
            
            PointChunkBase_exposer.def( 
                "setMaxSize"
                , setMaxSize_function_type( &::OSG::PointChunkBase::setMaxSize )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::PointChunkBase::setMinSize
        
            typedef void ( ::OSG::PointChunkBase::*setMinSize_function_type )( ::OSG::Real32 const ) ;
            
            PointChunkBase_exposer.def( 
                "setMinSize"
                , setMinSize_function_type( &::OSG::PointChunkBase::setMinSize )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::PointChunkBase::setQuadraticAttenuation
        
            typedef void ( ::OSG::PointChunkBase::*setQuadraticAttenuation_function_type )( ::OSG::Real32 const ) ;
            
            PointChunkBase_exposer.def( 
                "setQuadraticAttenuation"
                , setQuadraticAttenuation_function_type( &::OSG::PointChunkBase::setQuadraticAttenuation )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::PointChunkBase::setRMode
        
            typedef void ( ::OSG::PointChunkBase::*setRMode_function_type )( ::GLenum const & ) ;
            
            PointChunkBase_exposer.def( 
                "setRMode"
                , setRMode_function_type( &::OSG::PointChunkBase::setRMode )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::PointChunkBase::setSize
        
            typedef void ( ::OSG::PointChunkBase::*setSize_function_type )( ::OSG::Real32 const ) ;
            
            PointChunkBase_exposer.def( 
                "setSize"
                , setSize_function_type( &::OSG::PointChunkBase::setSize )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::PointChunkBase::setSmooth
        
            typedef void ( ::OSG::PointChunkBase::*setSmooth_function_type )( bool const ) ;
            
            PointChunkBase_exposer.def( 
                "setSmooth"
                , setSmooth_function_type( &::OSG::PointChunkBase::setSmooth )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::PointChunkBase::setSprite
        
            typedef void ( ::OSG::PointChunkBase::*setSprite_function_type )( bool const ) ;
            
            PointChunkBase_exposer.def( 
                "setSprite"
                , setSprite_function_type( &::OSG::PointChunkBase::setSprite )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::StateChunk::activate
        
            typedef void ( ::OSG::StateChunk::*activate_function_type )( ::OSG::DrawEnv *,::OSG::UInt32 ) ;
            
            PointChunkBase_exposer.def( 
                "activate"
                , activate_function_type( &::OSG::StateChunk::activate )
                , ( bp::arg("pEnv"), bp::arg("index")=(::OSG::UInt32)(0) ) );
        
        }
        { //::OSG::StateChunk::changeFrom
        
            typedef void ( ::OSG::StateChunk::*changeFrom_function_type )( ::OSG::DrawEnv *,::OSG::StateChunk *,::OSG::UInt32 ) ;
            
            PointChunkBase_exposer.def( 
                "changeFrom"
                , changeFrom_function_type( &::OSG::StateChunk::changeFrom )
                , ( bp::arg("pEnv"), bp::arg("pOld"), bp::arg("index")=(::OSG::UInt32)(0) ) );
        
        }
        { //::OSG::StateChunk::deactivate
        
            typedef void ( ::OSG::StateChunk::*deactivate_function_type )( ::OSG::DrawEnv *,::OSG::UInt32 ) ;
            
            PointChunkBase_exposer.def( 
                "deactivate"
                , deactivate_function_type( &::OSG::StateChunk::deactivate )
                , ( bp::arg("pEnv"), bp::arg("index")=(::OSG::UInt32)(0) ) );
        
        }
        PointChunkBase_exposer.staticmethod( "create" );
        PointChunkBase_exposer.staticmethod( "createDependent" );
        PointChunkBase_exposer.staticmethod( "createLocal" );
        PointChunkBase_exposer.staticmethod( "getClassGroupId" );
        PointChunkBase_exposer.staticmethod( "getClassType" );
        PointChunkBase_exposer.staticmethod( "getClassTypeId" );
    }

}
