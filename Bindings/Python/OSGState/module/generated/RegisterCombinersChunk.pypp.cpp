// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#pragma GCC diagnostic warning "-Wunused-local-typedefs"
#pragma GCC diagnostic warning "-Wnon-virtual-dtor"
#pragma GCC diagnostic warning "-Wshadow"
#endif
#if WIN32
#pragma warning(disable : 4267)
#pragma warning(disable : 4344)
#endif

#include "boost/python.hpp"
#include "OSGState_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "RegisterCombinersChunk.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_RegisterCombinersChunk_class(){

    { //::OSG::RegisterCombinersChunk
        typedef bp::class_< OSG::RegisterCombinersChunk, bp::bases< OSG::RegisterCombinersChunkBase >, OSG::RegisterCombinersChunk::ObjRecPtr, boost::noncopyable > RegisterCombinersChunk_exposer_t;
        RegisterCombinersChunk_exposer_t RegisterCombinersChunk_exposer = RegisterCombinersChunk_exposer_t( "RegisterCombinersChunk", bp::no_init );
        bp::scope RegisterCombinersChunk_scope( RegisterCombinersChunk_exposer );
        { //::OSG::RegisterCombinersChunk::changed
        
            typedef void ( ::OSG::RegisterCombinersChunk::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            RegisterCombinersChunk_exposer.def( 
                "changed"
                , changed_function_type( &::OSG::RegisterCombinersChunk::changed )
                , ( bp::arg("whichField"), bp::arg("from"), bp::arg("details") ) );
        
        }
        { //::OSG::RegisterCombinersChunk::clearCombiner
        
            typedef void ( ::OSG::RegisterCombinersChunk::*clearCombiner_function_type )( ::OSG::UInt16 ) ;
            
            RegisterCombinersChunk_exposer.def( 
                "clearCombiner"
                , clearCombiner_function_type( &::OSG::RegisterCombinersChunk::clearCombiner )
                , ( bp::arg("which") ) );
        
        }
        { //::OSG::RegisterCombinersChunk::clearCombiners
        
            typedef void ( ::OSG::RegisterCombinersChunk::*clearCombiners_function_type )(  ) ;
            
            RegisterCombinersChunk_exposer.def( 
                "clearCombiners"
                , clearCombiners_function_type( &::OSG::RegisterCombinersChunk::clearCombiners ) );
        
        }
        { //::OSG::RegisterCombinersChunk::dump
        
            typedef void ( ::OSG::RegisterCombinersChunk::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            RegisterCombinersChunk_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::RegisterCombinersChunk::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::RegisterCombinersChunk::getClass
        
            typedef ::OSG::StateChunkClass const * ( ::OSG::RegisterCombinersChunk::*getClass_function_type )(  ) const;
            
            RegisterCombinersChunk_exposer.def( 
                "getClass"
                , getClass_function_type( &::OSG::RegisterCombinersChunk::getClass )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::RegisterCombinersChunk::getStaticClass
        
            typedef ::OSG::StateChunkClass const * ( *getStaticClass_function_type )(  );
            
            RegisterCombinersChunk_exposer.def( 
                "getStaticClass"
                , getStaticClass_function_type( &::OSG::RegisterCombinersChunk::getStaticClass )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::RegisterCombinersChunk::getStaticClassId
        
            typedef ::OSG::UInt32 ( *getStaticClassId_function_type )(  );
            
            RegisterCombinersChunk_exposer.def( 
                "getStaticClassId"
                , getStaticClassId_function_type( &::OSG::RegisterCombinersChunk::getStaticClassId ) );
        
        }
        { //::OSG::RegisterCombinersChunk::isTransparent
        
            typedef bool ( ::OSG::RegisterCombinersChunk::*isTransparent_function_type )(  ) const;
            
            RegisterCombinersChunk_exposer.def( 
                "isTransparent"
                , isTransparent_function_type( &::OSG::RegisterCombinersChunk::isTransparent ) );
        
        }
        { //::OSG::RegisterCombinersChunk::setCombinerAlpha
        
            typedef void ( ::OSG::RegisterCombinersChunk::*setCombinerAlpha_function_type )( ::OSG::UInt16,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLboolean ) ;
            
            RegisterCombinersChunk_exposer.def( 
                "setCombinerAlpha"
                , setCombinerAlpha_function_type( &::OSG::RegisterCombinersChunk::setCombinerAlpha )
                , ( bp::arg("which"), bp::arg("ainput"), bp::arg("amapping"), bp::arg("acompusage"), bp::arg("binput"), bp::arg("bmapping"), bp::arg("bcompusage"), bp::arg("cinput"), bp::arg("cmapping"), bp::arg("ccompusage"), bp::arg("dinput"), bp::arg("dmapping"), bp::arg("dcompusage"), bp::arg("outputAB"), bp::arg("outputCD"), bp::arg("outputSum"), bp::arg("scale"), bp::arg("bias"), bp::arg("muxSum") ) );
        
        }
        { //::OSG::RegisterCombinersChunk::setCombinerColors
        
            typedef void ( ::OSG::RegisterCombinersChunk::*setCombinerColors_function_type )( ::OSG::UInt16,::OSG::Color4f &,::OSG::Color4f & ) ;
            
            RegisterCombinersChunk_exposer.def( 
                "setCombinerColors"
                , setCombinerColors_function_type( &::OSG::RegisterCombinersChunk::setCombinerColors )
                , ( bp::arg("which"), bp::arg("color0"), bp::arg("color1") ) );
        
        }
        { //::OSG::RegisterCombinersChunk::setCombinerRGB
        
            typedef void ( ::OSG::RegisterCombinersChunk::*setCombinerRGB_function_type )( ::OSG::UInt16,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLboolean,::GLboolean,::GLboolean ) ;
            
            RegisterCombinersChunk_exposer.def( 
                "setCombinerRGB"
                , setCombinerRGB_function_type( &::OSG::RegisterCombinersChunk::setCombinerRGB )
                , ( bp::arg("which"), bp::arg("ainput"), bp::arg("amapping"), bp::arg("acompusage"), bp::arg("binput"), bp::arg("bmapping"), bp::arg("bcompusage"), bp::arg("cinput"), bp::arg("cmapping"), bp::arg("ccompusage"), bp::arg("dinput"), bp::arg("dmapping"), bp::arg("dcompusage"), bp::arg("outputAB"), bp::arg("outputCD"), bp::arg("outputSum"), bp::arg("scale"), bp::arg("bias"), bp::arg("dotAB"), bp::arg("dotCD"), bp::arg("muxSum") ) );
        
        }
        { //::OSG::RegisterCombinersChunk::setConstantColors
        
            typedef void ( ::OSG::RegisterCombinersChunk::*setConstantColors_function_type )( ::OSG::Color4f &,::OSG::Color4f & ) ;
            
            RegisterCombinersChunk_exposer.def( 
                "setConstantColors"
                , setConstantColors_function_type( &::OSG::RegisterCombinersChunk::setConstantColors )
                , ( bp::arg("color0"), bp::arg("color1") ) );
        
        }
        { //::OSG::RegisterCombinersChunk::setFinalCombiner
        
            typedef void ( ::OSG::RegisterCombinersChunk::*setFinalCombiner_function_type )( ::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum,::GLenum ) ;
            
            RegisterCombinersChunk_exposer.def( 
                "setFinalCombiner"
                , setFinalCombiner_function_type( &::OSG::RegisterCombinersChunk::setFinalCombiner )
                , ( bp::arg("ainput"), bp::arg("amapping"), bp::arg("acompusage"), bp::arg("binput"), bp::arg("bmapping"), bp::arg("bcompusage"), bp::arg("cinput"), bp::arg("cmapping"), bp::arg("ccompusage"), bp::arg("dinput"), bp::arg("dmapping"), bp::arg("dcompusage"), bp::arg("einput"), bp::arg("emapping"), bp::arg("ecompusage"), bp::arg("finput"), bp::arg("fmapping"), bp::arg("fcompusage"), bp::arg("ginput"), bp::arg("gmapping"), bp::arg("gcompusage") ) );
        
        }
        { //::OSG::RegisterCombinersChunk::switchCost
        
            typedef ::OSG::Real32 ( ::OSG::RegisterCombinersChunk::*switchCost_function_type )( ::OSG::StateChunk * ) ;
            
            RegisterCombinersChunk_exposer.def( 
                "switchCost"
                , switchCost_function_type( &::OSG::RegisterCombinersChunk::switchCost )
                , ( bp::arg("chunk") ) );
        
        }
        RegisterCombinersChunk_exposer.staticmethod( "getStaticClass" );
        RegisterCombinersChunk_exposer.staticmethod( "getStaticClassId" );
        pyopensg::register_transit< OSG::RegisterCombinersChunk >::execute();
        bp::implicitly_convertible< OSG::RegisterCombinersChunk::ObjRecPtr, OSG::RegisterCombinersChunk* >();
        bp::implicitly_convertible< OSG::RegisterCombinersChunk::ObjRecPtr, OSG::RegisterCombinersChunk::ObjCPtr >();
        bp::implicitly_convertible< OSG::RegisterCombinersChunk::ObjRecPtr, OSG::StateChunk* >();
        bp::implicitly_convertible< OSG::RegisterCombinersChunk::ObjRecPtr, OSG::StateChunk::ObjRecPtr >();
        bp::implicitly_convertible<OSG::RegisterCombinersChunk::ObjRecPtr, OSG::StateChunk::ObjCPtr>();
    }

}
