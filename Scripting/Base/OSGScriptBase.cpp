/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Script!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGAddOnsConfig.h"




#include "OSGScriptBase.h"
#include "OSGScript.h"

#include <boost/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::Script
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Int32           ScriptBase::_sfPriority
    
*/

/*! \var std::string     ScriptBase::_sfScript
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<Script *, nsOSG>::_type(
    "ScriptPtr", 
    "NodeCorePtr", 
    Script::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(Script *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           Script *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           Script *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ScriptBase::classDescInserter(TypeObject &oType)
{
    Inherited::classDescInserter(oType);

    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "priority",
        "",
        PriorityFieldId, PriorityFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Script::editHandlePriority),
        static_cast<FieldGetMethodSig >(&Script::getHandlePriority));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "script",
        "",
        ScriptFieldId, ScriptFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Script::editHandleScript),
        static_cast<FieldGetMethodSig >(&Script::getHandleScript));

    oType.addInitialDesc(pDesc);
}


ScriptBase::TypeObject ScriptBase::_type(
    ScriptBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    NULL,
    reinterpret_cast<InitContainerF>(&Script::initMethod),
    reinterpret_cast<ExitContainerF>(&Script::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(&Script::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"Script\"\n"
    "   parent=\"NodeCore\"\n"
    "   library=\"Scripting\"\n"
    "   package=\"OSGAddOns\"\n"
    "   mixinparent=\"ScriptParent\"\n"
    "   structure=\"abstract\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   isNodeCore=\"true\"\n"
    "   docGroupBase=\"GrpScripting\"\n"
    "   >\n"
    "  <Field\n"
    "     name=\"priority\"\n"
    "     type=\"Int32\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     defaultValue=\"10\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"script\"\n"
    "     type=\"std::string\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     >\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ScriptBase::getType(void)
{
    return _type;
}

const FieldContainerType &ScriptBase::getType(void) const
{
    return _type;
}

UInt32 ScriptBase::getContainerSize(void) const
{
    return sizeof(Script);
}

/*------------------------- decorator get ------------------------------*/


SFInt32 *ScriptBase::editSFPriority(void)
{
    editSField(PriorityFieldMask);

    return &_sfPriority;
}

const SFInt32 *ScriptBase::getSFPriority(void) const
{
    return &_sfPriority;
}


SFString *ScriptBase::editSFScript(void)
{
    editSField(ScriptFieldMask);

    return &_sfScript;
}

const SFString *ScriptBase::getSFScript(void) const
{
    return &_sfScript;
}






/*------------------------------ access -----------------------------------*/

SizeT ScriptBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (PriorityFieldMask & whichField))
    {
        returnValue += _sfPriority.getBinSize();
    }
    if(FieldBits::NoField != (ScriptFieldMask & whichField))
    {
        returnValue += _sfScript.getBinSize();
    }

    return returnValue;
}

void ScriptBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (PriorityFieldMask & whichField))
    {
        _sfPriority.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ScriptFieldMask & whichField))
    {
        _sfScript.copyToBin(pMem);
    }
}

void ScriptBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (PriorityFieldMask & whichField))
    {
        editSField(PriorityFieldMask);
        _sfPriority.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ScriptFieldMask & whichField))
    {
        editSField(ScriptFieldMask);
        _sfScript.copyFromBin(pMem);
    }
}




/*------------------------- constructors ----------------------------------*/

ScriptBase::ScriptBase(void) :
    Inherited(),
    _sfPriority               (Int32(10)),
    _sfScript                 ()
{
}

ScriptBase::ScriptBase(const ScriptBase &source) :
    Inherited(source),
    _sfPriority               (source._sfPriority               ),
    _sfScript                 (source._sfScript                 )
{
}


/*-------------------------- destructors ----------------------------------*/

ScriptBase::~ScriptBase(void)
{
}


GetFieldHandlePtr ScriptBase::getHandlePriority        (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfPriority,
             this->getType().getFieldDesc(PriorityFieldId),
             const_cast<ScriptBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ScriptBase::editHandlePriority       (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfPriority,
             this->getType().getFieldDesc(PriorityFieldId),
             this));


    editSField(PriorityFieldMask);

    return returnValue;
}

GetFieldHandlePtr ScriptBase::getHandleScript          (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfScript,
             this->getType().getFieldDesc(ScriptFieldId),
             const_cast<ScriptBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ScriptBase::editHandleScript         (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfScript,
             this->getType().getFieldDesc(ScriptFieldId),
             this));


    editSField(ScriptFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ScriptBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Script *pThis = static_cast<Script *>(this);

    pThis->execSync(static_cast<Script *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void ScriptBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
